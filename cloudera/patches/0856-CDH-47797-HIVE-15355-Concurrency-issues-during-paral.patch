From 4e9b0e76d3f8eb1b5de1b805755aadd320756e80 Mon Sep 17 00:00:00 2001
From: Vihang Karajgaonkar <vihang@cloudera.com>
Date: Mon, 5 Dec 2016 11:06:32 -0800
Subject: [PATCH 0856/1164] CDH-47797 : HIVE-15355 : Concurrency issues during
 parallel moveFile due to
 HDFSUtils.setFullFileStatus

Change-Id: Iff11ab1779b7e8ec99e4c3d31faf5d6c2caefd33
---
 .../hadoop/hive/io/TestHadoopFileStatus.java       |   96 ++++++++++++++++++++
 .../apache/hadoop/hive/shims/Hadoop23Shims.java    |   17 ++--
 2 files changed, 105 insertions(+), 8 deletions(-)
 create mode 100644 itests/hive-unit/src/test/java/org/apache/hadoop/hive/io/TestHadoopFileStatus.java

diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/io/TestHadoopFileStatus.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/io/TestHadoopFileStatus.java
new file mode 100644
index 0000000..2d4b33c
--- /dev/null
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/io/TestHadoopFileStatus.java
@@ -0,0 +1,96 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hive.io;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.fs.permission.AclEntry;
+import org.apache.hadoop.fs.permission.AclEntryScope;
+import org.apache.hadoop.fs.permission.AclEntryType;
+import org.apache.hadoop.fs.permission.AclStatus;
+import org.apache.hadoop.fs.permission.FsAction;
+import org.apache.hadoop.hdfs.DistributedFileSystem;
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.shims.HadoopShims;
+import org.apache.hadoop.hive.shims.ShimLoader;
+import org.apache.hadoop.hive.shims.Hadoop23Shims.Hadoop23FileStatus;
+import org.junit.Assert;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mockito;
+
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
+
+public class TestHadoopFileStatus {
+  private static HiveConf hiveConf;
+  private static Hadoop23FileStatus sourceStatus;
+
+  @BeforeClass
+  public static void setUp() throws IOException {
+    hiveConf = new HiveConf(TestHadoopFileStatus.class);
+    hiveConf.set("dfs.namenode.acls.enabled", "true");
+  }
+
+  private static AclEntry newAclEntry(AclEntryScope scope, AclEntryType type, FsAction permission) {
+    return new AclEntry.Builder().setScope(scope).setType(type).setPermission(permission).build();
+  }
+
+  /*
+   * HdfsUtils.setFullFileStatus(..) is called from multiple parallel threads. If AclEntries
+   * is modifiable the method will not be thread safe and could cause random concurrency issues
+   * This test case checks if the aclEntries returned from HadoopFileStatus is thread-safe or not
+   */
+  @Test(expected = UnsupportedOperationException.class)
+  public void testHadoopFileStatusAclEntries() throws IOException {
+    FileSystem mockDfs = Mockito.mock(DistributedFileSystem.class);
+    Path mockPath = Mockito.mock(Path.class);
+
+    List<AclEntry> aclEntries = Lists.newArrayList();
+    aclEntries.add(newAclEntry(AclEntryScope.ACCESS, AclEntryType.USER, FsAction.ALL));
+    aclEntries.add(newAclEntry(AclEntryScope.ACCESS, AclEntryType.GROUP, FsAction.READ_EXECUTE));
+    aclEntries.add(newAclEntry(AclEntryScope.ACCESS, AclEntryType.OTHER, FsAction.NONE));
+    AclStatus aclStatus = new AclStatus.Builder().owner("dummyOwner").group("dummyGroup")
+      .stickyBit(true).addEntries(aclEntries).build();
+
+    FileStatus mockFileStatus = Mockito.mock(FileStatus.class);
+    Mockito.when(mockDfs.getAclStatus(mockPath)).thenReturn(aclStatus);
+    Mockito.when(mockDfs.getFileStatus(mockPath)).thenReturn(mockFileStatus);
+
+    sourceStatus = (Hadoop23FileStatus) ShimLoader.getHadoopShims().getFullFileStatus(hiveConf,
+      mockDfs, mockPath);
+    Assert.assertNotNull(sourceStatus.getAclEntries());
+    Assert.assertTrue(sourceStatus.getAclEntries().size() == 3);
+    Iterables.removeIf(sourceStatus.getAclEntries(), new Predicate<AclEntry>() {
+      @Override
+      public boolean apply(AclEntry input) {
+        if (input.getName() == null) {
+          return true;
+        }
+        return false;
+      }
+    });
+  }
+
+}
diff --git a/shims/0.23/src/main/java/org/apache/hadoop/hive/shims/Hadoop23Shims.java b/shims/0.23/src/main/java/org/apache/hadoop/hive/shims/Hadoop23Shims.java
index 6247c7b..e1e6e1b 100644
--- a/shims/0.23/src/main/java/org/apache/hadoop/hive/shims/Hadoop23Shims.java
+++ b/shims/0.23/src/main/java/org/apache/hadoop/hive/shims/Hadoop23Shims.java
@@ -747,13 +747,12 @@ public void setFullFileStatus(Configuration conf, HdfsFileStatus sourceStatus, S
     //use FsShell to change group, permissions, and extended ACL's recursively
 
     boolean aclEnabled = isExtendedAclEnabled(conf);
-    AclStatus aclStatus = null;
     List<AclEntry> aclEntries = null;
     FsPermission sourcePerm = sourceStatus.getFileStatus().getPermission();
     if (aclEnabled) {
-      aclStatus = ((Hadoop23FileStatus) sourceStatus).getAclStatus();
-      if (aclStatus != null) {
-        aclEntries = aclStatus.getEntries();
+      Hadoop23FileStatus status = (Hadoop23FileStatus) sourceStatus;
+      if (status.getAclEntries() != null) {
+        aclEntries = new ArrayList<>(status.getAclEntries());
         removeBaseAclEntries(aclEntries);
 
         //the ACL api's also expect the tradition user/group/other permission in the form of ACL
@@ -774,10 +773,10 @@ public void setFullFileStatus(Configuration conf, HdfsFileStatus sourceStatus, S
 
         if (aclEnabled) {
           //Attempt extended Acl operations only if its enabled, 8791but don't fail the operation regardless.
-          if (aclStatus != null) {
+          if (aclEntries != null) {
             try {
               //construct the -setfacl command
-              String aclEntry = Joiner.on(",").join(aclStatus.getEntries());
+              String aclEntry = Joiner.on(",").join(aclEntries);
               run(fsShell, new String[]{"-setfacl", "-R", "--set", aclEntry, target.toString()});
             } catch (Exception e) {
               LOG.info("Skipping ACL inheritance: File system for path " + target + " " +
@@ -826,9 +825,11 @@ public Hadoop23FileStatus(FileStatus fileStatus, AclStatus aclStatus) {
     public FileStatus getFileStatus() {
       return fileStatus;
     }
-    public AclStatus getAclStatus() {
-      return aclStatus;
+
+    public List<AclEntry> getAclEntries() {
+      return aclStatus == null ? null : Collections.unmodifiableList(aclStatus.getEntries());
     }
+
     @Override
     public void debugLog() {
       if (fileStatus != null) {
-- 
1.7.9.5

