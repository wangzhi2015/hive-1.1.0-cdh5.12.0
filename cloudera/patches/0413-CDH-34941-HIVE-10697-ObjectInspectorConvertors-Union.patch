From 7a9724b8e5ba098d600343419b4355996c4e7412 Mon Sep 17 00:00:00 2001
From: Hari Subramaniyan <harisankar@apache.org>
Date: Wed, 19 Aug 2015 10:25:14 -0700
Subject: [PATCH 0413/1164] CDH-34941 HIVE-10697 :
 ObjectInspectorConvertors#UnionConvertor does a
 faulty conversion (Swarnim Kulkarni, reviewed by
 Hari Subramaniyan)

Change-Id: I6b8bafd6b3b63f085b8258515cac8d899155fd1a
---
 .../objectinspector/ObjectInspectorConverters.java |   31 +++----
 .../SettableUnionObjectInspector.java              |    4 +-
 .../StandardUnionObjectInspector.java              |    4 +-
 .../TestObjectInspectorConverters.java             |   89 +++++++++++++++++++-
 4 files changed, 108 insertions(+), 20 deletions(-)

diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java
index 2a47d97..824527f 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorConverters.java
@@ -413,8 +413,9 @@ public Object convert(Object input) {
     UnionObjectInspector inputOI;
     SettableUnionObjectInspector outputOI;
 
-    List<? extends ObjectInspector> inputFields;
-    List<? extends ObjectInspector> outputFields;
+    // Object inspectors for the tags for the input and output unionss
+    List<? extends ObjectInspector> inputTagsOIs;
+    List<? extends ObjectInspector> outputTagsOIs;
 
     ArrayList<Converter> fieldConverters;
 
@@ -425,14 +426,14 @@ public UnionConverter(ObjectInspector inputOI,
       if (inputOI instanceof UnionObjectInspector) {
         this.inputOI = (UnionObjectInspector)inputOI;
         this.outputOI = outputOI;
-        inputFields = this.inputOI.getObjectInspectors();
-        outputFields = outputOI.getObjectInspectors();
+        inputTagsOIs = this.inputOI.getObjectInspectors();
+        outputTagsOIs = outputOI.getObjectInspectors();
 
         // If the output has some extra fields, set them to NULL in convert().
-        int minFields = Math.min(inputFields.size(), outputFields.size());
+        int minFields = Math.min(inputTagsOIs.size(), outputTagsOIs.size());
         fieldConverters = new ArrayList<Converter>(minFields);
         for (int f = 0; f < minFields; f++) {
-          fieldConverters.add(getConverter(inputFields.get(f), outputFields.get(f)));
+          fieldConverters.add(getConverter(inputTagsOIs.get(f), outputTagsOIs.get(f)));
         }
 
         // Create an empty output object which will be populated when convert() is invoked.
@@ -450,18 +451,18 @@ public Object convert(Object input) {
         return null;
       }
 
-      int minFields = Math.min(inputFields.size(), outputFields.size());
-      // Convert the fields
-      for (int f = 0; f < minFields; f++) {
-        Object outputFieldValue = fieldConverters.get(f).convert(inputOI);
-        outputOI.addField(output, (ObjectInspector)outputFieldValue);
-      }
+      Object inputFieldValue = inputOI.getField(input);
+      Object inputFieldTag = inputOI.getTag(input);
+      Object outputFieldValue = null;
 
-      // set the extra fields to null
-      for (int f = minFields; f < outputFields.size(); f++) {
-        outputOI.addField(output, null);
+      int inputFieldTagIndex = ((Byte)inputFieldTag).intValue();
+
+      if (inputFieldTagIndex >= 0 && inputFieldTagIndex < fieldConverters.size()) {
+         outputFieldValue = fieldConverters.get(inputFieldTagIndex).convert(inputFieldValue);
       }
 
+      outputOI.addField(output, outputFieldValue);
+
       return output;
     }
   }
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/SettableUnionObjectInspector.java b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/SettableUnionObjectInspector.java
index a64aee0..564d8d6 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/SettableUnionObjectInspector.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/SettableUnionObjectInspector.java
@@ -29,6 +29,6 @@
   /* Create an empty object */
   public abstract Object create();
 
-  /* Add fields to the object */
-  public abstract Object addField(Object union, ObjectInspector oi);
+  /* Add field to the object */
+  public abstract Object addField(Object union, Object field);
 }
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/StandardUnionObjectInspector.java b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/StandardUnionObjectInspector.java
index d1b11e8..f26c9ec 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/StandardUnionObjectInspector.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/StandardUnionObjectInspector.java
@@ -124,9 +124,9 @@ public Object create() {
   }
 
   @Override
-  public Object addField(Object union, ObjectInspector oi) {
+  public Object addField(Object union, Object field) {
     ArrayList<Object> a = (ArrayList<Object>) union;
-    a.add(oi);
+    a.add(field);
     return a;
   }
 
diff --git a/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java b/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java
index 1185283..dd18517 100644
--- a/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java
+++ b/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestObjectInspectorConverters.java
@@ -17,6 +17,9 @@
  */
 package org.apache.hadoop.hive.serde2.objectinspector;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import junit.framework.TestCase;
 
 import org.apache.hadoop.hive.common.type.HiveDecimal;
@@ -168,6 +171,90 @@ public void testObjectInspectorConverters() throws Throwable {
           {(byte)'h', (byte)'i',(byte)'v',(byte)'e'}),
           baConverter.convert(new Text("hive")));
       assertEquals("BAConverter", null, baConverter.convert(null));
+
+      // Union
+      ArrayList<String> fieldNames = new ArrayList<String>();
+      fieldNames.add("firstInteger");
+      fieldNames.add("secondString");
+      fieldNames.add("thirdBoolean");
+      ArrayList<ObjectInspector> fieldObjectInspectors = new ArrayList<ObjectInspector>();
+      fieldObjectInspectors
+          .add(PrimitiveObjectInspectorFactory.javaIntObjectInspector);
+      fieldObjectInspectors
+          .add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
+      fieldObjectInspectors
+          .add(PrimitiveObjectInspectorFactory.javaBooleanObjectInspector);
+
+      ArrayList<String> fieldNames2 = new ArrayList<String>();
+      fieldNames2.add("firstString");
+      fieldNames2.add("secondInteger");
+      fieldNames2.add("thirdBoolean");
+      ArrayList<ObjectInspector> fieldObjectInspectors2 = new ArrayList<ObjectInspector>();
+      fieldObjectInspectors2
+          .add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
+      fieldObjectInspectors2
+          .add(PrimitiveObjectInspectorFactory.javaIntObjectInspector);
+      fieldObjectInspectors2
+          .add(PrimitiveObjectInspectorFactory.javaBooleanObjectInspector);
+
+      Converter unionConverter0 = ObjectInspectorConverters.getConverter(ObjectInspectorFactory.getStandardUnionObjectInspector(fieldObjectInspectors),
+          ObjectInspectorFactory.getStandardUnionObjectInspector(fieldObjectInspectors2));
+
+      Object convertedObject0 = unionConverter0.convert(new StandardUnionObjectInspector.StandardUnion((byte)0, 1));
+      List<String> expectedObject0 = new ArrayList<String>();
+      expectedObject0.add("1");
+
+      assertEquals(expectedObject0, convertedObject0);
+
+      Converter unionConverter1 = ObjectInspectorConverters.getConverter(ObjectInspectorFactory.getStandardUnionObjectInspector(fieldObjectInspectors),
+		  ObjectInspectorFactory.getStandardUnionObjectInspector(fieldObjectInspectors2));
+
+      Object convertedObject1 = unionConverter1.convert(new StandardUnionObjectInspector.StandardUnion((byte)1, "1"));
+      List<Integer> expectedObject1 = new ArrayList<Integer>();
+      expectedObject1.add(1);
+
+      assertEquals(expectedObject1, convertedObject1);
+
+      Converter unionConverter2 = ObjectInspectorConverters.getConverter(ObjectInspectorFactory.getStandardUnionObjectInspector(fieldObjectInspectors),
+          ObjectInspectorFactory.getStandardUnionObjectInspector(fieldObjectInspectors2));
+
+      Object convertedObject2 = unionConverter2.convert(new StandardUnionObjectInspector.StandardUnion((byte)2, true));
+      List<Boolean> expectedObject2 = new ArrayList<Boolean>();
+      expectedObject2.add(true);
+
+      assertEquals(expectedObject2, convertedObject2);
+
+      // Union (extra fields)
+      ArrayList<String> fieldNamesExtra = new ArrayList<String>();
+      fieldNamesExtra.add("firstInteger");
+      fieldNamesExtra.add("secondString");
+      fieldNamesExtra.add("thirdBoolean");
+      ArrayList<ObjectInspector> fieldObjectInspectorsExtra = new ArrayList<ObjectInspector>();
+      fieldObjectInspectorsExtra
+          .add(PrimitiveObjectInspectorFactory.javaIntObjectInspector);
+      fieldObjectInspectorsExtra
+          .add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
+      fieldObjectInspectorsExtra
+          .add(PrimitiveObjectInspectorFactory.javaBooleanObjectInspector);
+
+      ArrayList<String> fieldNamesExtra2 = new ArrayList<String>();
+      fieldNamesExtra2.add("firstString");
+      fieldNamesExtra2.add("secondInteger");
+      ArrayList<ObjectInspector> fieldObjectInspectorsExtra2 = new ArrayList<ObjectInspector>();
+      fieldObjectInspectorsExtra2
+          .add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
+      fieldObjectInspectorsExtra2
+          .add(PrimitiveObjectInspectorFactory.javaIntObjectInspector);
+
+      Converter unionConverterExtra = ObjectInspectorConverters.getConverter(ObjectInspectorFactory.getStandardUnionObjectInspector(fieldObjectInspectorsExtra),
+          ObjectInspectorFactory.getStandardUnionObjectInspector(fieldObjectInspectorsExtra2));
+
+      Object convertedObjectExtra = unionConverterExtra.convert(new StandardUnionObjectInspector.StandardUnion((byte)2, true));
+      List<Object> expectedObjectExtra = new ArrayList<Object>();
+      expectedObjectExtra.add(null);
+
+      assertEquals(expectedObjectExtra, convertedObjectExtra); // we should get back null
+
     } catch (Throwable e) {
       e.printStackTrace();
       throw e;
@@ -192,4 +279,4 @@ public void testGetConvertedOI() throws Throwable {
     VarcharTypeInfo vcParams = (VarcharTypeInfo) poi.getTypeInfo();
     assertEquals("varchar length doesn't match", 5, vcParams.getLength());
   }
-}
+}
\ No newline at end of file
-- 
1.7.9.5

