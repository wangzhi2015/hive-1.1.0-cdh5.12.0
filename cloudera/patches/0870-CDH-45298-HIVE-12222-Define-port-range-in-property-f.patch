From 49f4829f97ec471cb67fa862b3499dc1c3bbf9f6 Mon Sep 17 00:00:00 2001
From: Aihua Xu <aihuaxu@apache.org>
Date: Thu, 22 Sep 2016 14:20:51 -0400
Subject: [PATCH 0870/1164] CDH-45298: HIVE-12222: Define port range in
 property for RPCServer (Aihua Xu, reviewed by
 Xuefu Zhang)

(cherry picked from commit e2bd513a3970b141576f7ead25fc6cfcc5fcda17)

Change-Id: Id07d3493e59d12dc133692880f4d2a5f6a3b3f30
---
 .../java/org/apache/hadoop/hive/conf/HiveConf.java |    3 ++
 .../hive/spark/client/rpc/RpcConfiguration.java    |   38 +++++++++++++++++
 .../apache/hive/spark/client/rpc/RpcServer.java    |   44 +++++++++++++++++---
 .../org/apache/hive/spark/client/rpc/TestRpc.java  |   38 ++++++++++++++++-
 4 files changed, 116 insertions(+), 7 deletions(-)

diff --git a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
index 001221f..3da052c 100644
--- a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
+++ b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
@@ -2154,6 +2154,9 @@ public void setSparkConfigUpdated(boolean isSparkConfigUpdated) {
       "Default is empty, which means the address will be determined in the same way as for hive.server2.thrift.bind.host." +
       "This is only necessary if the host has mutiple network addresses and if a different network address other than " +
       "hive.server2.thrift.bind.host is to be used."),
+    SPARK_RPC_SERVER_PORT("hive.spark.client.rpc.server.port", "", "A list of port ranges which can be used by RPC server " +
+        "with the format of 49152-49222,49228 and a random one is selected from the list. Default is empty, which randomly " +
+        "selects one port from all available ones."),
     NWAYJOINREORDER("hive.reorder.nway.joins", true,
       "Runs reordering of tables within single n-way join (i.e.: picks streamtable)"),
     HIVE_MSCK_PATH_VALIDATION("hive.msck.path.validation", "throw",
diff --git a/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcConfiguration.java b/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcConfiguration.java
index e387659..f968cc4 100644
--- a/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcConfiguration.java
+++ b/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcConfiguration.java
@@ -18,7 +18,9 @@
 package org.apache.hive.spark.client.rpc;
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
@@ -107,6 +109,42 @@ String getServerAddress() throws IOException {
     return ServerUtils.getHostAddress(hiveHost).getHostName();
   }
 
+  /**
+   * Parses the port string like 49152-49222,49228 into the port list. A default 0
+   * is added for the empty port string.
+   * @return a list of configured ports.
+   * @exception IOException is thrown if the property is not configured properly
+   */
+  List<Integer> getServerPorts() throws IOException {
+    String errMsg = "Incorrect RPC server port configuration for HiveServer2";
+    String portString = config.get(HiveConf.ConfVars.SPARK_RPC_SERVER_PORT.varname);
+    ArrayList<Integer> ports = new ArrayList<Integer>();
+    try {
+      if(!StringUtils.isEmpty(portString)) {
+        for (String portRange : portString.split(",")) {
+          String[] range = portRange.split("-");
+          if (range.length == 0 || range.length > 2
+              || (range.length == 2 && Integer.valueOf(range[0]) > Integer.valueOf(range[1]))) {
+            throw new IOException(errMsg);
+          }
+          if (range.length == 1) {
+            ports.add(Integer.valueOf(range[0]));
+          } else {
+            for (int i = Integer.valueOf(range[0]); i <= Integer.valueOf(range[1]); i++) {
+              ports.add(i);
+            }
+          }
+        }
+      } else {
+        ports.add(0);
+      }
+
+      return ports;
+    } catch(NumberFormatException e) {
+      throw new IOException(errMsg);
+    }
+  }
+
   String getRpcChannelLogLevel() {
     return config.get(HiveConf.ConfVars.SPARK_RPC_CHANNEL_LOG_LEVEL.varname);
   }
diff --git a/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcServer.java b/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcServer.java
index 68ee627..657494a 100644
--- a/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcServer.java
+++ b/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcServer.java
@@ -21,10 +21,13 @@
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.security.SecureRandom;
+import java.util.List;
 import java.util.Map;
+import java.util.Random;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.TimeUnit;
+
 import javax.security.auth.callback.Callback;
 import javax.security.auth.callback.CallbackHandler;
 import javax.security.auth.callback.NameCallback;
@@ -39,8 +42,10 @@
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.Channel;
+import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
@@ -51,9 +56,9 @@
 import io.netty.util.concurrent.GenericFutureListener;
 import io.netty.util.concurrent.Promise;
 import io.netty.util.concurrent.ScheduledFuture;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import org.apache.hadoop.hive.common.classification.InterfaceAudience;
 
 /**
@@ -82,7 +87,7 @@ public RpcServer(Map<String, String> mapConf) throws IOException, InterruptedExc
             .setNameFormat("RPC-Handler-%d")
             .setDaemon(true)
             .build());
-    this.channel = new ServerBootstrap()
+     ServerBootstrap serverBootstrap = new ServerBootstrap()
       .group(group)
       .channel(NioServerSocketChannel.class)
       .childHandler(new ChannelInitializer<SocketChannel>() {
@@ -107,16 +112,43 @@ public void run() {
       })
       .option(ChannelOption.SO_BACKLOG, 1)
       .option(ChannelOption.SO_REUSEADDR, true)
-      .childOption(ChannelOption.SO_KEEPALIVE, true)
-      .bind(0)
-      .sync()
-      .channel();
+      .childOption(ChannelOption.SO_KEEPALIVE, true);
+
+    this.channel = bindServerPort(serverBootstrap).channel();
     this.port = ((InetSocketAddress) channel.localAddress()).getPort();
     this.pendingClients = Maps.newConcurrentMap();
     this.address = this.config.getServerAddress();
   }
 
   /**
+   * Retry the list of configured ports until one is found
+   * @param serverBootstrap
+   * @return
+   * @throws InterruptedException
+   * @throws IOException
+   */
+  private ChannelFuture bindServerPort(ServerBootstrap serverBootstrap)
+      throws InterruptedException, IOException {
+    List<Integer> ports = config.getServerPorts();
+    if (ports.contains(0)) {
+      return serverBootstrap.bind(0).sync();
+    } else {
+      Random rand = new Random();
+      while(!ports.isEmpty()) {
+        int index = rand.nextInt(ports.size());
+        int port = ports.get(index);
+        ports.remove(index);
+        try {
+          return serverBootstrap.bind(port).sync();
+        } catch(Exception e) {
+          // Retry the next port
+        }
+      }
+      throw new IOException("No available ports from configured RPC Server ports for HiveServer2");
+    }
+  }
+
+  /**
    * Tells the RPC server to expect a connection from a new client.
    *
    * @param clientId An identifier for the client. Must be unique.
diff --git a/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java b/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java
index d7969c9..4615d11 100644
--- a/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java
+++ b/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java
@@ -18,9 +18,10 @@
 package org.apache.hive.spark.client.rpc;
 
 import java.io.Closeable;
+import java.io.IOException;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.Map;
-import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
@@ -141,6 +142,41 @@ public void testBadHello() throws Exception {
   }
 
   @Test
+  public void testServerPort() throws Exception {
+    Map<String, String> config = new HashMap<String, String>();
+
+    RpcServer server0 = new RpcServer(config);
+    assertTrue("Empty port range should return a random valid port: " + server0.getPort(), server0.getPort() >= 0);
+    IOUtils.closeQuietly(server0);
+
+    config.put(HiveConf.ConfVars.SPARK_RPC_SERVER_PORT.varname, "49152-49222,49223,49224-49333");
+    RpcServer server1 = new RpcServer(config);
+    assertTrue("Port should be within configured port range:" + server1.getPort(), server1.getPort() >= 49152 && server1.getPort() <= 49333);
+    IOUtils.closeQuietly(server1);
+
+    int expectedPort = 65535;
+    config.put(HiveConf.ConfVars.SPARK_RPC_SERVER_PORT.varname, String.valueOf(expectedPort));
+    RpcServer server2 = new RpcServer(config);
+    assertTrue("Port should match configured one: " + server2.getPort(), server2.getPort() == expectedPort);
+    IOUtils.closeQuietly(server2);
+
+    config.put(HiveConf.ConfVars.SPARK_RPC_SERVER_PORT.varname, "49552-49222,49223,49224-49333");
+    try {
+      autoClose(new RpcServer(config));
+      assertTrue("Invalid port range should throw an exception", false); // Should not reach here
+    } catch(IOException e) {
+      assertEquals("Incorrect RPC server port configuration for HiveServer2", e.getMessage());
+    }
+
+    // Retry logic
+    expectedPort = 65535;
+    config.put(HiveConf.ConfVars.SPARK_RPC_SERVER_PORT.varname, String.valueOf(expectedPort) + ",21-23");
+    RpcServer server3 = new RpcServer(config);
+    assertTrue("Port should match configured one:" + server3.getPort(), server3.getPort() == expectedPort);
+    IOUtils.closeQuietly(server3);
+  }
+
+  @Test
   public void testCloseListener() throws Exception {
     RpcServer server = autoClose(new RpcServer(emptyConfig));
     Rpc[] rpcs = createRpcConnection(server);
-- 
1.7.9.5

