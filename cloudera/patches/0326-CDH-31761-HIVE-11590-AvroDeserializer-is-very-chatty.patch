From 49d0ae6625923760bb47116523b36722e0aac0c1 Mon Sep 17 00:00:00 2001
From: Swarnim Kulkarni <kulkarni.swarnim@gmail.com>
Date: Tue, 8 Sep 2015 21:59:00 -0800
Subject: [PATCH 0326/1164] CDH-31761: HIVE-11590 : AvroDeserializer is very
 chatty (Swarnim Kulkarni via Xuefu Zhang)

Signed-off-by: Ashutosh Chauhan <hashutosh@apache.org>

Conflicts:
	serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerDe.java

Change-Id: I83e2fb03532f76d240ac7e1a7d0db34358337091
---
 .../hadoop/hive/serde2/avro/AvroDeserializer.java  |    2 +-
 .../apache/hadoop/hive/serde2/avro/AvroSerDe.java  |   13 +++++++++----
 .../hadoop/hive/serde2/avro/AvroSerdeUtils.java    |    7 +++++--
 .../hadoop/hive/serde2/avro/AvroSerializer.java    |    2 --
 4 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroDeserializer.java b/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroDeserializer.java
index 4b85171..7060432 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroDeserializer.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroDeserializer.java
@@ -162,7 +162,7 @@ public Object deserialize(List<String> columnNames, List<TypeInfo> columnTypes,
         reEncoder = new SchemaReEncoder(r.getSchema(), readerSchema);
         reEncoderCache.put(recordReaderId, reEncoder);
       } else{
-        LOG.info("Adding new valid RRID :" +  recordReaderId);
+        LOG.debug("Adding new valid RRID :" +  recordReaderId);
         noEncodingNeeded.add(recordReaderId);
       }
       if(reEncoder != null) {
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerDe.java b/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerDe.java
index 91b30d5..6480b53 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerDe.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerDe.java
@@ -82,7 +82,7 @@ public void initialize(Configuration configuration, Properties tableProperties,
   public void initialize(Configuration configuration, Properties properties) throws SerDeException {
     // Reset member variables so we don't get in a half-constructed state
     if (schema != null) {
-      LOG.info("Resetting already initialized AvroSerDe");
+      LOG.debug("Resetting already initialized AvroSerDe");
     }
 
     schema = null;
@@ -108,10 +108,12 @@ public void initialize(Configuration configuration, Properties properties) throw
       properties.setProperty(AvroSerdeUtils.AvroTableProperties.SCHEMA_LITERAL.getPropName(), schema.toString());
     }
 
-    LOG.info("Avro schema is " + schema);
+    if (LOG.isDebugEnabled()) {
+      LOG.debug("Avro schema is " + schema);
+    }
 
     if (configuration == null) {
-      LOG.info("Configuration null, not inserting schema");
+      LOG.debug("Configuration null, not inserting schema");
     } else {
       configuration.set(
           AvroSerdeUtils.AvroTableProperties.AVRO_SERDE_SCHEMA.getPropName(), schema.toString(false));
@@ -132,7 +134,10 @@ public static Schema getSchemaFromCols(Properties properties,
       columnComments = new ArrayList<String>();
     } else {
       columnComments = Arrays.asList(columnCommentProperty.split(","));
-      LOG.info("columnComments is " + columnCommentProperty);
+
+      if (LOG.isDebugEnabled()) {
+        LOG.debug("columnComments is " + columnCommentProperty);
+      }
     }
     if (columnNames.size() != columnTypes.size()) {
       throw new IllegalArgumentException("AvroSerde initialization failed. Number of column " +
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerdeUtils.java b/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerdeUtils.java
index 4edf654..e6e307d 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerdeUtils.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerdeUtils.java
@@ -131,8 +131,11 @@ protected static Schema getSchemaFromFS(String schemaFSUrl,
       fs = FileSystem.get(new URI(schemaFSUrl), conf);
     } catch (IOException ioe) {
       //return null only if the file system in schema is not recognized
-      String msg = "Failed to open file system for uri " + schemaFSUrl + " assuming it is not a FileSystem url";
-      LOG.debug(msg, ioe);
+      if (LOG.isDebugEnabled()) {
+        String msg = "Failed to open file system for uri " + schemaFSUrl + " assuming it is not a FileSystem url";
+        LOG.debug(msg, ioe);
+      }
+
       return null;
     }
     try {
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerializer.java b/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerializer.java
index c8eac89..503103e 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerializer.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerializer.java
@@ -52,8 +52,6 @@
 import org.apache.hadoop.io.Writable;
 
 class AvroSerializer {
-  private static final Log LOG = LogFactory.getLog(AvroSerializer.class);
-
   /**
    * The Schema to use when serializing Map keys.
    * Since we're sharing this across Serializer instances, it must be immutable;
-- 
1.7.9.5

