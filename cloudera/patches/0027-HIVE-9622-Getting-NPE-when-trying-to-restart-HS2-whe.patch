From 65d469fa33014e43753dfeb8d3f63ba2cf4915d8 Mon Sep 17 00:00:00 2001
From: Brock Noland <brock@apache.org>
Date: Thu, 12 Feb 2015 16:15:14 +0000
Subject: [PATCH 0027/1164] HIVE-9622 - Getting NPE when trying to restart HS2
 when metastore is configured to use
 org.apache.hadoop.hive.thrift.DBTokenStore (Aihua
 via Brock)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1659302 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/hive/minikdc/TestHiveAuthFactory.java   |   66 ++++++++++++++++++++
 .../apache/hive/service/auth/HiveAuthFactory.java  |   14 ++++-
 2 files changed, 77 insertions(+), 3 deletions(-)
 create mode 100644 itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestHiveAuthFactory.java

diff --git a/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestHiveAuthFactory.java b/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestHiveAuthFactory.java
new file mode 100644
index 0000000..a30ec7e
--- /dev/null
+++ b/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestHiveAuthFactory.java
@@ -0,0 +1,66 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hive.minikdc;
+
+import org.junit.Assert;
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
+import org.apache.hive.service.auth.HiveAuthFactory;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+
+public class TestHiveAuthFactory {
+  private static HiveConf hiveConf;
+  private static MiniHiveKdc miniHiveKdc = null;
+
+  @BeforeClass
+  public static void setUp() throws Exception {
+    hiveConf = new HiveConf();
+    miniHiveKdc = MiniHiveKdc.getMiniHiveKdc(hiveConf);
+  }
+
+  @AfterClass
+  public static void tearDown() throws Exception {
+  }
+
+  /**
+   * Verify that delegation token manager is started with no exception
+   * @throws Exception
+   */
+  @Test
+  public void testStartTokenManager() throws Exception {
+    hiveConf.setVar(ConfVars.HIVE_SERVER2_AUTHENTICATION, HiveAuthFactory.AuthTypes.KERBEROS.getAuthName());
+    String principalName = miniHiveKdc.getFullHiveServicePrincipal();
+    System.out.println("Principal: " + principalName);
+    
+    hiveConf.setVar(ConfVars.HIVE_SERVER2_KERBEROS_PRINCIPAL, principalName);
+    String keyTabFile = miniHiveKdc.getKeyTabFile(miniHiveKdc.getHiveServicePrincipal());
+    System.out.println("keyTabFile: " + keyTabFile);
+    Assert.assertNotNull(keyTabFile);
+    hiveConf.setVar(ConfVars.HIVE_SERVER2_KERBEROS_KEYTAB, keyTabFile);
+
+    System.out.println("rawStoreClassName =" +  hiveConf.getVar(ConfVars.METASTORE_RAW_STORE_IMPL));
+
+    HiveAuthFactory authFactory = new HiveAuthFactory(hiveConf);
+    Assert.assertNotNull(authFactory);
+    Assert.assertEquals("org.apache.hadoop.hive.thrift.HadoopThriftAuthBridge$Server$TUGIAssumingTransportFactory", 
+        authFactory.getAuthTransFactory().getClass().getName());
+  }
+}
diff --git a/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java b/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
index 8352951..fcb5d85 100644
--- a/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
+++ b/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
@@ -18,7 +18,6 @@
 package org.apache.hive.service.auth;
 
 import java.io.IOException;
-import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.UnknownHostException;
 import java.util.ArrayList;
@@ -33,6 +32,9 @@
 
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
+import org.apache.hadoop.hive.metastore.HiveMetaStore;
+import org.apache.hadoop.hive.metastore.HiveMetaStore.HMSHandler;
+import org.apache.hadoop.hive.metastore.api.MetaException;
 import org.apache.hadoop.hive.shims.HadoopShims.KerberosNameShim;
 import org.apache.hadoop.hive.shims.ShimLoader;
 import org.apache.hadoop.hive.thrift.HadoopThriftAuthBridge;
@@ -108,8 +110,14 @@ public HiveAuthFactory(HiveConf conf) throws TTransportException {
                         conf.getVar(ConfVars.HIVE_SERVER2_KERBEROS_PRINCIPAL));
         // start delegation token manager
         try {
-          saslServer.startDelegationTokenSecretManager(conf, null, ServerMode.HIVESERVER2);
-        } catch (IOException e) {
+          HMSHandler baseHandler = new HiveMetaStore.HMSHandler(
+              "new db based metaserver", conf, true);
+          saslServer.startDelegationTokenSecretManager(conf, baseHandler.getMS(), ServerMode.HIVESERVER2);
+        }
+        catch (MetaException e) {
+          throw new TTransportException("Failed to start token manager", e);
+        }
+        catch (IOException e) {
           throw new TTransportException("Failed to start token manager", e);
         }
       }
-- 
1.7.9.5

