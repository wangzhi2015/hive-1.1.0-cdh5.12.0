From 6da29e4faa263d86fbaeca5282e3994583570dc9 Mon Sep 17 00:00:00 2001
From: sunchao <sunchao@unknown>
Date: Thu, 26 Mar 2015 16:38:33 +0000
Subject: [PATCH 0101/1164] HIVE-9839 - HiveServer2 leaks OperationHandle on
 async queries which fail at compile phase (Nemon
 via Chao)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1669367 13f79535-47bb-0310-9956-ffa450edef68
---
 .../service/cli/session/TestHiveSessionImpl.java   |   95 ++++++++++++++++++++
 .../hive/service/cli/session/HiveSessionImpl.java  |    9 +-
 2 files changed, 99 insertions(+), 5 deletions(-)
 create mode 100644 itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestHiveSessionImpl.java

diff --git a/itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestHiveSessionImpl.java b/itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestHiveSessionImpl.java
new file mode 100644
index 0000000..2d9ad03
--- /dev/null
+++ b/itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestHiveSessionImpl.java
@@ -0,0 +1,95 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hive.service.cli.session;
+
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hive.service.cli.HiveSQLException;
+import org.apache.hive.service.cli.OperationHandle;
+import org.apache.hive.service.cli.operation.ExecuteStatementOperation;
+import org.apache.hive.service.cli.operation.OperationManager;
+import org.apache.hive.service.cli.thrift.TProtocolVersion;
+import org.junit.Assert;
+import org.junit.Test;
+import org.mockito.Mockito;
+
+import java.util.HashMap;
+import java.util.Map;
+
+
+
+public class TestHiveSessionImpl {
+  /**
+   * Verifying OperationManager.closeOperation(opHandle) is invoked when
+   * get HiveSQLException during sync query
+   * @throws HiveSQLException
+   */
+  @Test
+  public void testLeakOperationHandle() throws HiveSQLException {
+    //create HiveSessionImpl object
+    TProtocolVersion protocol = TProtocolVersion.HIVE_CLI_SERVICE_PROTOCOL_V2;
+    String username = "";
+    String password = "";
+    HiveConf serverhiveConf = new HiveConf();
+    String ipAddress = null;
+    HiveSessionImpl session = new HiveSessionImpl(protocol, username, password,
+      serverhiveConf, ipAddress) {
+      @Override
+      protected synchronized void acquire(boolean userAccess) {
+      }
+
+      @Override
+      protected synchronized void release(boolean userAccess) {
+      }
+    };
+
+    //mock operationManager for session
+    OperationManager operationManager = Mockito.mock(OperationManager.class);
+    session.setOperationManager(operationManager);
+
+    //mock operation and opHandle for operationManager
+    ExecuteStatementOperation operation = Mockito.mock(ExecuteStatementOperation.class);
+    OperationHandle opHandle = Mockito.mock(OperationHandle.class);
+    Mockito.when(operation.getHandle()).thenReturn(opHandle);
+    Map<String, String> confOverlay = new HashMap<String, String>();
+    String hql = "drop table if exists table_not_exists";
+    Mockito.when(operationManager.newExecuteStatementOperation(session, hql, confOverlay,
+            true)).thenReturn(operation);
+
+    try {
+
+      //Running a normal async query with no exceptions,then no need to close opHandle
+      session.executeStatementAsync(hql, confOverlay);
+      Mockito.verify(operationManager, Mockito.times(0)).closeOperation(opHandle);
+
+      // Throw an HiveSqlException when do async calls
+      Mockito.doThrow(new HiveSQLException("Fail for clean up test")).when(operation).run();
+      session.executeStatementAsync(hql, confOverlay);
+      Assert.fail("HiveSqlException expected.");
+
+    } catch (HiveSQLException e) {
+      if (!"Fail for clean up test".equals(e.getMessage())) {
+        Assert.fail("unexpected exception:" + e.getMessage());
+      }
+      //operationManager.closeOperation() is expected to be invoked once
+      Mockito.verify(operationManager, Mockito.times(1)).closeOperation(opHandle);
+    }
+  }
+
+}
+
diff --git a/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java b/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java
index b62cfd9..ccc1f5e 100644
--- a/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java
+++ b/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java
@@ -382,11 +382,10 @@ private OperationHandle executeStatementInternal(String statement, Map<String, S
       opHandleSet.add(opHandle);
       return opHandle;
     } catch (HiveSQLException e) {
-      // Cleanup opHandle in case the query is synchronous
-      // Async query needs to retain and pass back the opHandle for error reporting
-      if (!runAsync) {
-        operationManager.closeOperation(opHandle);
-      }
+      // Refering to SQLOperation.java,there is no chance that a HiveSQLException throws and the asyn
+      // background operation submits to thread pool successfully at the same time. So, Cleanup
+      // opHandle directly when got HiveSQLException
+      operationManager.closeOperation(opHandle);
       throw e;
     } finally {
       release(true);
-- 
1.7.9.5

