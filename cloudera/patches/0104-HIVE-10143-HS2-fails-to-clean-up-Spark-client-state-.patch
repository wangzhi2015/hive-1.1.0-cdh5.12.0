From e22965ad1c344f33c40aef1c9a75ba0a62977c61 Mon Sep 17 00:00:00 2001
From: Szehon Ho <szehon@apache.org>
Date: Mon, 30 Mar 2015 21:29:26 +0000
Subject: [PATCH 0104/1164] HIVE-10143 : HS2 fails to clean up Spark client
 state on timeout [Spark Branch] (Marcelo Vanzin
 via Szehon)

git-svn-id: https://svn.apache.org/repos/asf/hive/branches/spark@1670202 13f79535-47bb-0310-9956-ffa450edef68
---
 .../apache/hive/spark/client/rpc/RpcServer.java    |   11 +++++--
 .../org/apache/hive/spark/client/rpc/TestRpc.java  |   32 ++++++++++++++++++--
 2 files changed, 38 insertions(+), 5 deletions(-)

diff --git a/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcServer.java b/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcServer.java
index b923acf..32d4c46 100644
--- a/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcServer.java
+++ b/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcServer.java
@@ -35,6 +35,7 @@
 import javax.security.sasl.SaslException;
 import javax.security.sasl.SaslServer;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
@@ -126,6 +127,12 @@ public void run() {
    */
   public Future<Rpc> registerClient(final String clientId, String secret,
       RpcDispatcher serverDispatcher) {
+    return registerClient(clientId, secret, serverDispatcher, config.getServerConnectTimeoutMs());
+  }
+
+  @VisibleForTesting
+  Future<Rpc> registerClient(final String clientId, String secret,
+      RpcDispatcher serverDispatcher, long clientTimeoutMs) {
     final Promise<Rpc> promise = group.next().newPromise();
 
     Runnable timeout = new Runnable() {
@@ -135,7 +142,7 @@ public void run() {
       }
     };
     ScheduledFuture<?> timeoutFuture = group.schedule(timeout,
-        config.getServerConnectTimeoutMs(),
+        clientTimeoutMs,
         TimeUnit.MILLISECONDS);
     final ClientInfo client = new ClientInfo(clientId, promise, secret, serverDispatcher,
         timeoutFuture);
@@ -147,7 +154,7 @@ public void run() {
     promise.addListener(new GenericFutureListener<Promise<Rpc>>() {
       @Override
       public void operationComplete(Promise<Rpc> p) {
-        if (p.isCancelled()) {
+        if (!p.isSuccess()) {
           pendingClients.remove(clientId);
         }
       }
diff --git a/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java b/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java
index 8207514..d7969c9 100644
--- a/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java
+++ b/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java
@@ -23,6 +23,7 @@
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.security.sasl.SaslException;
 
@@ -41,9 +42,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
+import static org.junit.Assert.*;
 
 public class TestRpc {
 
@@ -190,6 +189,33 @@ public void testEncryption() throws Exception {
     assertEquals(outbound.message, reply.message);
   }
 
+  @Test
+  public void testClientTimeout() throws Exception {
+    Map<String, String> conf = ImmutableMap.<String,String>builder()
+      .putAll(emptyConfig)
+      .build();
+    RpcServer server = autoClose(new RpcServer(conf));
+    String secret = server.createSecret();
+
+    try {
+      autoClose(server.registerClient("client", secret, new TestDispatcher(), 1L).get());
+      fail("Server should have timed out client.");
+    } catch (ExecutionException ee) {
+      assertTrue(ee.getCause() instanceof TimeoutException);
+    }
+
+    NioEventLoopGroup eloop = new NioEventLoopGroup();
+    Future<Rpc> clientRpcFuture = Rpc.createClient(conf, eloop,
+        "localhost", server.getPort(), "client", secret, new TestDispatcher());
+    try {
+      autoClose(clientRpcFuture.get());
+      fail("Client should have failed to connect to server.");
+    } catch (ExecutionException ee) {
+      // Error should not be a timeout.
+      assertFalse(ee.getCause() instanceof TimeoutException);
+    }
+  }
+
   private void transfer(Rpc serverRpc, Rpc clientRpc) {
     EmbeddedChannel client = (EmbeddedChannel) clientRpc.getChannel();
     EmbeddedChannel server = (EmbeddedChannel) serverRpc.getChannel();
-- 
1.7.9.5

