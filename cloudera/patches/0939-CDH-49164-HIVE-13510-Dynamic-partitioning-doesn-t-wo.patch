From 874ce9efec14d98476bf76ad8ba6793d4296c38c Mon Sep 17 00:00:00 2001
From: Illya Yalovyy <yalovyyi@amazon.com>
Date: Tue, 26 Apr 2016 12:18:00 -0700
Subject: [PATCH 0939/1164] =?UTF-8?q?CDH-49164:=20HIVE-13510:=20Dynamic=20pa?=
 =?UTF-8?q?rtitioning=20doesn=E2=80=99t=20work=20when=20remote=20metastore=20?=
 =?UTF-8?q?is=20used=20(Illya=20Yalovyy=20via=20Ashutosh=20Chauhan)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Ashutosh Chauhan <hashutosh@apache.org>
(cherry picked from commit 134b6cccbd7237901f7f7594626796863ca0150a)

Change-Id: I26a0ee369791037f65f6d6a40df4b20cdc1f7459
---
 .../hadoop/hive/metastore/HiveMetaStore.java       |    2 +-
 .../metastore/TestHiveMetaStoreGetMetaConf.java    |  151 ++++++++++++++++++++
 2 files changed, 152 insertions(+), 1 deletion(-)
 create mode 100644 metastore/src/test/org/apache/hadoop/hive/metastore/TestHiveMetaStoreGetMetaConf.java

diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
index 0a2cf8a..80e2bde 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
@@ -617,7 +617,7 @@ public String getMetaConf(String key) throws MetaException {
       if (confVar == null) {
         throw new MetaException("Invalid configuration key " + key);
       }
-      return getConf().get(key);
+      return getConf().get(key, confVar.getDefaultValue());
     }
 
     /**
diff --git a/metastore/src/test/org/apache/hadoop/hive/metastore/TestHiveMetaStoreGetMetaConf.java b/metastore/src/test/org/apache/hadoop/hive/metastore/TestHiveMetaStoreGetMetaConf.java
new file mode 100644
index 0000000..3f4561c
--- /dev/null
+++ b/metastore/src/test/org/apache/hadoop/hive/metastore/TestHiveMetaStoreGetMetaConf.java
@@ -0,0 +1,151 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hive.metastore;
+
+import java.security.Permission;
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.metastore.api.MetaException;
+import org.apache.thrift.TException;
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.junit.Rule;
+import org.junit.rules.ExpectedException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static org.junit.Assert.*;
+import org.junit.Before;
+
+public class TestHiveMetaStoreGetMetaConf {
+
+  @Rule
+  public ExpectedException thrown = ExpectedException.none();
+
+  private static final Logger LOG = LoggerFactory.getLogger(TestHiveMetaStoreGetMetaConf.class);
+  private static final String msPort = "20103";
+  private static HiveConf hiveConf;
+  private static SecurityManager securityManager;
+
+  private HiveMetaStoreClient hmsc;
+
+  public static class NoExitSecurityManager extends SecurityManager {
+
+    @Override
+    public void checkPermission(Permission perm) {
+      // allow anything.
+    }
+
+    @Override
+    public void checkPermission(Permission perm, Object context) {
+      // allow anything.
+    }
+
+    @Override
+    public void checkExit(int status) {
+      super.checkExit(status);
+      throw new RuntimeException("System.exit() was called. Raising exception.");
+    }
+  }
+
+  private static class RunMS implements Runnable {
+
+    @Override
+    public void run() {
+      try {
+        HiveMetaStore.main(new String[]{"-v", "-p", msPort, "--hiveconf",
+            "hive.metastore.expression.proxy=" + MockPartitionExpressionForMetastore.class.getCanonicalName(),
+            "--hiveconf", "hive.metastore.try.direct.sql.ddl=false"});
+      } catch (Throwable t) {
+        LOG.error("Exiting. Got exception from metastore: ", t);
+      }
+    }
+  }
+
+  @AfterClass
+  public static void tearDown() throws Exception {
+    LOG.info("Shutting down metastore.");
+    System.setSecurityManager(securityManager);
+  }
+
+  @BeforeClass
+  public static void startMetaStoreServer() throws Exception {
+
+    securityManager = System.getSecurityManager();
+    System.setSecurityManager(new NoExitSecurityManager());
+    
+    hiveConf = new HiveConf(TestHiveMetaStoreGetMetaConf.class);
+    hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS, "thrift://localhost:"
+        + msPort);
+    hiveConf.setVar(HiveConf.ConfVars.PREEXECHOOKS, "");
+    hiveConf.setVar(HiveConf.ConfVars.POSTEXECHOOKS, "");
+    hiveConf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);
+    hiveConf.setIntVar(HiveConf.ConfVars.METASTORETHRIFTCONNECTIONRETRIES, 10);
+
+    System.setProperty(HiveConf.ConfVars.PREEXECHOOKS.varname, " ");
+    System.setProperty(HiveConf.ConfVars.POSTEXECHOOKS.varname, " ");
+
+    new Thread(new RunMS()).start();
+  }
+
+  @Before
+  public void setup() throws MetaException {
+    hmsc = new HiveMetaStoreClient(hiveConf);
+  }
+
+  @After
+  public void closeClient() {
+    if (hmsc != null) {
+      hmsc.close();
+    }
+  }
+
+  @Test
+  public void testGetMetaConfDefault() throws MetaException, TException {
+    HiveConf.ConfVars metaConfVar = HiveConf.ConfVars.METASTORE_TRY_DIRECT_SQL;
+    String expected = metaConfVar.getDefaultValue();
+    String actual = hmsc.getMetaConf(metaConfVar.toString());
+    assertEquals(expected, actual);
+  }
+
+  @Test
+  public void testGetMetaConfDefaultEmptyString() throws MetaException, TException {
+    HiveConf.ConfVars metaConfVar = HiveConf.ConfVars.METASTORE_PARTITION_NAME_WHITELIST_PATTERN;
+    String expected = "";
+    String actual = hmsc.getMetaConf(metaConfVar.toString());
+    assertEquals(expected, actual);
+  }
+
+  @Test
+  public void testGetMetaConfOverridden() throws MetaException, TException {
+    HiveConf.ConfVars metaConfVar = HiveConf.ConfVars.METASTORE_TRY_DIRECT_SQL_DDL;
+    String expected = "false";
+    String actual = hmsc.getMetaConf(metaConfVar.toString());
+    assertEquals(expected, actual);
+  }
+
+  @Test
+  public void testGetMetaConfUnknownPreperty() throws MetaException, TException {
+    String unknownPropertyName = "hive.meta.foo.bar";
+    thrown.expect(MetaException.class);
+    thrown.expectMessage("Invalid configuration key " + unknownPropertyName);
+    hmsc.getMetaConf(unknownPropertyName);
+  }
+}
-- 
1.7.9.5

