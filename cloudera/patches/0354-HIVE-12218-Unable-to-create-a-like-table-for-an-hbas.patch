From 3f0a90d42bada7c5fc7a9c9b11e13898bf895683 Mon Sep 17 00:00:00 2001
From: Xuefu Zhang <xzhang@Cloudera.com>
Date: Wed, 21 Oct 2015 14:42:00 -0700
Subject: [PATCH 0354/1164] HIVE-12218: Unable to create a like table for an
 hbase backed table (Chaoyu via Xuefu)

Change-Id: I074c547bd43c69a98d17fb268ddf0d5db1c65b33
---
 .../src/test/queries/positive/hbase_queries.q      |   16 ++++
 .../src/test/results/positive/hbase_queries.q.out  |   99 ++++++++++++++++++++
 .../org/apache/hadoop/hive/ql/exec/DDLTask.java    |   11 ++-
 3 files changed, 121 insertions(+), 5 deletions(-)

diff --git a/hbase-handler/src/test/queries/positive/hbase_queries.q b/hbase-handler/src/test/queries/positive/hbase_queries.q
index 9ea9b1a..6ef9325 100644
--- a/hbase-handler/src/test/queries/positive/hbase_queries.q
+++ b/hbase-handler/src/test/queries/positive/hbase_queries.q
@@ -148,9 +148,25 @@ FROM src WHERE key=98 OR key=100;
 
 SELECT * FROM hbase_table_8 ORDER BY key;
 
+DROP TABLE IF EXISTS hbase_table_3_like;
+CREATE TABLE hbase_table_3_like LIKE hbase_table_3;
+DESCRIBE EXTENDED hbase_table_3_like;
+
+INSERT OVERWRITE TABLE hbase_table_3_like SELECT * FROM hbase_table_3;
+SELECT * FROM hbase_table_3_like ORDER BY key, value LIMIT 5;
+
+DROP TABLE IF EXISTS hbase_table_1_like;
+CREATE EXTERNAL TABLE hbase_table_1_like LIKE hbase_table_1;
+DESCRIBE EXTENDED hbase_table_1_like;
+
+INSERT OVERWRITE TABLE hbase_table_1_like SELECT * FROM hbase_table_1;
+SELECT COUNT(*) FROM hbase_table_1_like;
+
 DROP TABLE hbase_table_1;
+DROP TABLE hbase_table_1_like;
 DROP TABLE hbase_table_2;
 DROP TABLE hbase_table_3;
+DROP TABLE hbase_table_3_like;
 DROP TABLE hbase_table_4;
 DROP TABLE hbase_table_5;
 DROP TABLE hbase_table_6;
diff --git a/hbase-handler/src/test/results/positive/hbase_queries.q.out b/hbase-handler/src/test/results/positive/hbase_queries.q.out
index 7863f69..1c98501 100644
--- a/hbase-handler/src/test/results/positive/hbase_queries.q.out
+++ b/hbase-handler/src/test/results/positive/hbase_queries.q.out
@@ -816,6 +816,89 @@ POSTHOOK: Input: default@hbase_table_8
 #### A masked pattern was here ####
 98	val_98	99	100
 100	val_100	101	102
+PREHOOK: query: DROP TABLE IF EXISTS hbase_table_3_like
+PREHOOK: type: DROPTABLE
+POSTHOOK: query: DROP TABLE IF EXISTS hbase_table_3_like
+POSTHOOK: type: DROPTABLE
+PREHOOK: query: CREATE TABLE hbase_table_3_like LIKE hbase_table_3
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@hbase_table_3_like
+POSTHOOK: query: CREATE TABLE hbase_table_3_like LIKE hbase_table_3
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@hbase_table_3_like
+PREHOOK: query: DESCRIBE EXTENDED hbase_table_3_like
+PREHOOK: type: DESCTABLE
+PREHOOK: Input: default@hbase_table_3_like
+POSTHOOK: query: DESCRIBE EXTENDED hbase_table_3_like
+POSTHOOK: type: DESCTABLE
+POSTHOOK: Input: default@hbase_table_3_like
+key                 	int                 	from deserializer   
+value               	string              	from deserializer   
+count               	int                 	from deserializer   
+	 	 
+#### A masked pattern was here ####
+PREHOOK: query: INSERT OVERWRITE TABLE hbase_table_3_like SELECT * FROM hbase_table_3
+PREHOOK: type: QUERY
+PREHOOK: Input: default@hbase_table_3
+PREHOOK: Output: default@hbase_table_3_like
+POSTHOOK: query: INSERT OVERWRITE TABLE hbase_table_3_like SELECT * FROM hbase_table_3
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@hbase_table_3
+POSTHOOK: Output: default@hbase_table_3_like
+PREHOOK: query: SELECT * FROM hbase_table_3_like ORDER BY key, value LIMIT 5
+PREHOOK: type: QUERY
+PREHOOK: Input: default@hbase_table_3_like
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT * FROM hbase_table_3_like ORDER BY key, value LIMIT 5
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@hbase_table_3_like
+#### A masked pattern was here ####
+0	val_0	3
+2	val_2	1
+4	val_4	1
+8	val_8	1
+10	val_10	1
+PREHOOK: query: DROP TABLE IF EXISTS hbase_table_1_like
+PREHOOK: type: DROPTABLE
+POSTHOOK: query: DROP TABLE IF EXISTS hbase_table_1_like
+POSTHOOK: type: DROPTABLE
+PREHOOK: query: CREATE EXTERNAL TABLE hbase_table_1_like LIKE hbase_table_1
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@hbase_table_1_like
+POSTHOOK: query: CREATE EXTERNAL TABLE hbase_table_1_like LIKE hbase_table_1
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@hbase_table_1_like
+PREHOOK: query: DESCRIBE EXTENDED hbase_table_1_like
+PREHOOK: type: DESCTABLE
+PREHOOK: Input: default@hbase_table_1_like
+POSTHOOK: query: DESCRIBE EXTENDED hbase_table_1_like
+POSTHOOK: type: DESCTABLE
+POSTHOOK: Input: default@hbase_table_1_like
+key                 	int                 	from deserializer   
+value               	string              	from deserializer   
+	 	 
+#### A masked pattern was here ####
+PREHOOK: query: INSERT OVERWRITE TABLE hbase_table_1_like SELECT * FROM hbase_table_1
+PREHOOK: type: QUERY
+PREHOOK: Input: default@hbase_table_1
+PREHOOK: Output: default@hbase_table_1_like
+POSTHOOK: query: INSERT OVERWRITE TABLE hbase_table_1_like SELECT * FROM hbase_table_1
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@hbase_table_1
+POSTHOOK: Output: default@hbase_table_1_like
+PREHOOK: query: SELECT COUNT(*) FROM hbase_table_1_like
+PREHOOK: type: QUERY
+PREHOOK: Input: default@hbase_table_1_like
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT COUNT(*) FROM hbase_table_1_like
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@hbase_table_1_like
+#### A masked pattern was here ####
+155
 PREHOOK: query: DROP TABLE hbase_table_1
 PREHOOK: type: DROPTABLE
 PREHOOK: Input: default@hbase_table_1
@@ -824,6 +907,14 @@ POSTHOOK: query: DROP TABLE hbase_table_1
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@hbase_table_1
 POSTHOOK: Output: default@hbase_table_1
+PREHOOK: query: DROP TABLE hbase_table_1_like
+PREHOOK: type: DROPTABLE
+PREHOOK: Input: default@hbase_table_1_like
+PREHOOK: Output: default@hbase_table_1_like
+POSTHOOK: query: DROP TABLE hbase_table_1_like
+POSTHOOK: type: DROPTABLE
+POSTHOOK: Input: default@hbase_table_1_like
+POSTHOOK: Output: default@hbase_table_1_like
 PREHOOK: query: DROP TABLE hbase_table_2
 PREHOOK: type: DROPTABLE
 PREHOOK: Input: default@hbase_table_2
@@ -840,6 +931,14 @@ POSTHOOK: query: DROP TABLE hbase_table_3
 POSTHOOK: type: DROPTABLE
 POSTHOOK: Input: default@hbase_table_3
 POSTHOOK: Output: default@hbase_table_3
+PREHOOK: query: DROP TABLE hbase_table_3_like
+PREHOOK: type: DROPTABLE
+PREHOOK: Input: default@hbase_table_3_like
+PREHOOK: Output: default@hbase_table_3_like
+POSTHOOK: query: DROP TABLE hbase_table_3_like
+POSTHOOK: type: DROPTABLE
+POSTHOOK: Input: default@hbase_table_3_like
+POSTHOOK: Output: default@hbase_table_3_like
 PREHOOK: query: DROP TABLE hbase_table_4
 PREHOOK: type: DROPTABLE
 PREHOOK: Input: default@hbase_table_4
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java
index 1a3b026..0cc9bc0 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java
@@ -206,6 +206,7 @@
 import java.util.TreeMap;
 import java.util.TreeSet;
 
+import static org.apache.hadoop.hive.metastore.api.hive_metastoreConstants.META_TABLE_STORAGE;
 import static org.apache.commons.lang.StringUtils.join;
 import static org.apache.hadoop.util.StringUtils.stringifyException;
 
@@ -2042,11 +2043,11 @@ else if (sortCol.getOrder() == BaseSemanticAnalyzer.HIVE_COLUMN_ORDER_DESC) {
         tbl_row_format.append("OUTPUTFORMAT \n  '" +
             escapeHiveCommand(sd.getOutputFormat()) + "'");
       } else {
-        duplicateProps.add(org.apache.hadoop.hive.metastore.api.hive_metastoreConstants.META_TABLE_STORAGE);
+        duplicateProps.add(META_TABLE_STORAGE);
         tbl_row_format.append(" SERDE \n  '" +
             escapeHiveCommand(serdeInfo.getSerializationLib()) + "' \n");
         tbl_row_format.append("STORED BY \n  '" + escapeHiveCommand(tbl.getParameters().get(
-            org.apache.hadoop.hive.metastore.api.hive_metastoreConstants.META_TABLE_STORAGE)) + "' \n");
+            META_TABLE_STORAGE)) + "' \n");
         // SerDe Properties
         if (serdeInfo.getParametersSize() > 0) {
           appendSerdeParams(tbl_row_format, serdeInfo.getParameters());
@@ -3880,9 +3881,7 @@ private int createTable(Hive db, CreateTableDesc crtTbl) throws HiveException {
     }
 
     if (crtTbl.getStorageHandler() != null) {
-      tbl.setProperty(
-          org.apache.hadoop.hive.metastore.api.hive_metastoreConstants.META_TABLE_STORAGE,
-          crtTbl.getStorageHandler());
+      tbl.setProperty(META_TABLE_STORAGE, crtTbl.getStorageHandler());
     }
     HiveStorageHandler storageHandler = tbl.getStorageHandler();
 
@@ -4110,6 +4109,8 @@ private int createTableLike(Hive db, CreateTableLikeDesc crtTbl) throws Exceptio
       String paramsStr = HiveConf.getVar(conf, HiveConf.ConfVars.DDL_CTL_PARAMETERS_WHITELIST);
 
       Set<String> retainer = new HashSet<String>();
+      // for non-native table, property storage_handler should be retained
+      retainer.add(META_TABLE_STORAGE);
       if (spec != null && spec.schemaProps() != null) {
         retainer.addAll(Arrays.asList(spec.schemaProps()));
       }
-- 
1.7.9.5

