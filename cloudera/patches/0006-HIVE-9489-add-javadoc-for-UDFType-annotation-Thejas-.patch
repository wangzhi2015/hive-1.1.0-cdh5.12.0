From 4cbd665e98b4d8bae92298daf22be3668bae912c Mon Sep 17 00:00:00 2001
From: Thejas Nair <thejas@apache.org>
Date: Thu, 29 Jan 2015 17:24:10 +0000
Subject: [PATCH 0006/1164] HIVE-9489 : add javadoc for UDFType annotation
 (Thejas Nair, reviewed by Lefty Leverenz,
 Ashutosh Chauhan)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1655757 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 57a3fc8ed5157de55a6b18e46ac36446c0c31079)
---
 .../org/apache/hadoop/hive/ql/udf/UDFType.java     |   37 +++++++++++++++++++-
 1 file changed, 36 insertions(+), 1 deletion(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFType.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFType.java
index 56575c3..fe9370f 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFType.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFType.java
@@ -23,16 +23,51 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.hadoop.hive.common.classification.InterfaceAudience.Public;
+import org.apache.hadoop.hive.common.classification.InterfaceStability.Evolving;
+
 /**
- * UDFType.
+ * UDFType annotations are used to describe properties of a UDF. This gives
+ * important information to the optimizer.
+ * If the UDF is not deterministic, or if it is stateful, it is necessary to
+ * annotate it as such for correctness.
  *
  */
+@Public
+@Evolving
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 public @interface UDFType {
+  /**
+   * Certain optimizations should not be applied if UDF is not deterministic.
+   * Deterministic UDF returns same result each time it is invoked with a
+   * particular input. This determinism just needs to hold within the context of
+   * a query.
+   *
+   * @return true if the UDF is deterministic
+   */
   boolean deterministic() default true;
+
+  /**
+   * If a UDF stores state based on the sequence of records it has processed, it
+   * is stateful. A stateful UDF cannot be used in certain expressions such as
+   * case statement and certain optimizations such as AND/OR short circuiting
+   * don't apply for such UDFs, as they need to be invoked for each record.
+   * row_sequence is an example of stateful UDF. A stateful UDF is considered to
+   * be non-deterministic, irrespective of what deterministic() returns.
+   *
+   * @return true
+   */
   boolean stateful() default false;
+
+  /**
+   * A UDF is considered distinctLike if the UDF can be evaluated on just the
+   * distinct values of a column. Examples include min and max UDFs. This
+   * information is used by metadata-only optimizer.
+   *
+   * @return true if UDF is distinctLike
+   */
   boolean distinctLike() default false;
 
   /**
-- 
1.7.9.5

