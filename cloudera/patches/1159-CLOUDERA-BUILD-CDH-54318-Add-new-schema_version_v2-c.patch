From c66015d1355ddda40adee52e8aa9870701729858 Mon Sep 17 00:00:00 2001
From: Vihang Karajgaonkar <vihang@cloudera.com>
Date: Thu, 25 May 2017 17:58:20 -0700
Subject: [PATCH 1159/1164] CLOUDERA-BUILD : CDH-54318 : Add new
 schema_version_v2 column to version table

Change-Id: Ic915d3ac9101a8651b2ad7970bb6f30c3512c16c
---
 .../org/apache/hive/beeline/TestSchemaTool.java    |    2 +-
 .../upgrade/derby/hive-schema-1.1.0.derby.sql      |    3 +-
 ...re-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.derby.sql |    1 +
 .../upgrade-1.1.0-to-1.1.0-cdh5.12.0.derby.sql     |    3 +-
 .../upgrade/mssql/hive-schema-1.1.0.mssql.sql      |    5 +-
 ...re-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.mssql.sql |    1 +
 .../upgrade-1.1.0-to-1.1.0-cdh5.12.0.mssql.sql     |    6 +-
 .../upgrade/mysql/hive-schema-1.1.0.mysql.sql      |    3 +-
 ...re-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.mysql.sql |    1 +
 .../upgrade-1.1.0-to-1.1.0-cdh5.12.0.mysql.sql     |    3 +-
 .../upgrade/oracle/hive-schema-1.1.0.oracle.sql    |    3 +-
 ...e-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.oracle.sql |    1 +
 .../upgrade-1.1.0-to-1.1.0-cdh5.12.0.oracle.sql    |    3 +-
 .../postgres/hive-schema-1.1.0.postgres.sql        |    3 +-
 ...0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.postgres.sql |    1 +
 .../upgrade-1.1.0-to-1.1.0-cdh5.12.0.postgres.sql  |    3 +-
 .../hive/metastore/CDHMetaStoreSchemaInfo.java     |   92 ++++++++++++++++-
 .../apache/hadoop/hive/metastore/ObjectStore.java  |    5 +
 .../hadoop/hive/metastore/model/MVersionTable.java |   12 ++-
 metastore/src/model/package.jdo                    |    3 +
 .../hive/metastore/TestCDHMetaStoreSchemaInfo.java |  105 ++++++++++++++++++++
 21 files changed, 240 insertions(+), 19 deletions(-)
 create mode 100644 metastore/scripts/upgrade/derby/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.derby.sql
 create mode 100644 metastore/scripts/upgrade/mssql/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.mssql.sql
 create mode 100644 metastore/scripts/upgrade/mysql/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.mysql.sql
 create mode 100644 metastore/scripts/upgrade/oracle/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.oracle.sql
 create mode 100644 metastore/scripts/upgrade/postgres/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.postgres.sql
 create mode 100644 metastore/src/test/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java

diff --git a/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestSchemaTool.java b/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestSchemaTool.java
index f87fe27..0c52d12 100644
--- a/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestSchemaTool.java
+++ b/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestSchemaTool.java
@@ -236,7 +236,7 @@ public void testValidateSchemaVersions() throws Exception {
    boolean isValid = schemaTool.validateSchemaVersions(conn);
    // Test an invalid case with multiple versions
    String[] scripts = new String[] {
-       "insert into VERSION values(100, '2.2.0', 'Hive release version 2.2.0')"
+      "insert into VERSION (VER_ID, SCHEMA_VERSION, SCHEMA_VERSION_V2, VERSION_COMMENT) values(100, '2.2.0', '2.2.0', 'Hive release version 2.2.0')"
    };
    File scriptFile = generateTestScript(scripts);
    schemaTool.runBeeLine(scriptFile.getPath());
diff --git a/metastore/scripts/upgrade/derby/hive-schema-1.1.0.derby.sql b/metastore/scripts/upgrade/derby/hive-schema-1.1.0.derby.sql
index 749ce3c..484bf55 100644
--- a/metastore/scripts/upgrade/derby/hive-schema-1.1.0.derby.sql
+++ b/metastore/scripts/upgrade/derby/hive-schema-1.1.0.derby.sql
@@ -334,8 +334,9 @@ RUN 'hive-txn-schema-0.13.0.derby.sql';
 --- ------------------------------------------
 RUN '041-HIVE-16556.derby.sql';
 
+ALTER TABLE "APP".VERSION ADD COLUMN SCHEMA_VERSION_V2 VARCHAR(255);
 -- -------------------------------------------------------------------------------------------------------------------------------------------------
 -- Record schema version. Should be the last step in the init script. Starting CDH-5.12.0 CDH version also needs to be recorded in the version table
 -- -------------------------------------------------------------------------------------------------------------------------------------------------
-INSERT INTO "APP"."VERSION" (VER_ID, SCHEMA_VERSION, VERSION_COMMENT) VALUES (1, '1.1.0-cdh5.12.0', 'Hive release version 1.1.0-cdh5.12.0');
+INSERT INTO "APP"."VERSION" (VER_ID, SCHEMA_VERSION, SCHEMA_VERSION_V2, VERSION_COMMENT) VALUES (1, '1.1.0', '1.1.0-cdh5.12.0', 'Hive release version 1.1.0-cdh5.12.0');
 
diff --git a/metastore/scripts/upgrade/derby/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.derby.sql b/metastore/scripts/upgrade/derby/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.derby.sql
new file mode 100644
index 0000000..3c0d5be
--- /dev/null
+++ b/metastore/scripts/upgrade/derby/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.derby.sql
@@ -0,0 +1 @@
+ALTER TABLE "APP".VERSION DROP COLUMN SCHEMA_VERSION_V2;
\ No newline at end of file
diff --git a/metastore/scripts/upgrade/derby/upgrade-1.1.0-to-1.1.0-cdh5.12.0.derby.sql b/metastore/scripts/upgrade/derby/upgrade-1.1.0-to-1.1.0-cdh5.12.0.derby.sql
index 70a5de3..cd9d794 100644
--- a/metastore/scripts/upgrade/derby/upgrade-1.1.0-to-1.1.0-cdh5.12.0.derby.sql
+++ b/metastore/scripts/upgrade/derby/upgrade-1.1.0-to-1.1.0-cdh5.12.0.derby.sql
@@ -2,4 +2,5 @@
 
 RUN '041-HIVE-16556.derby.sql';
 
-UPDATE "APP".VERSION SET SCHEMA_VERSION='1.1.0-cdh5.12.0', VERSION_COMMENT='Hive release version 1.1.0-cdh5.12.0' where VER_ID=1;
+ALTER TABLE "APP".VERSION ADD COLUMN SCHEMA_VERSION_V2 VARCHAR(255);
+UPDATE "APP".VERSION SET SCHEMA_VERSION='1.1.0', VERSION_COMMENT='Hive release version 1.1.0-cdh5.12.0', SCHEMA_VERSION_V2='1.1.0-cdh5.12.0' where VER_ID=1;
diff --git a/metastore/scripts/upgrade/mssql/hive-schema-1.1.0.mssql.sql b/metastore/scripts/upgrade/mssql/hive-schema-1.1.0.mssql.sql
index da019b2..a47c0b9 100644
--- a/metastore/scripts/upgrade/mssql/hive-schema-1.1.0.mssql.sql
+++ b/metastore/scripts/upgrade/mssql/hive-schema-1.1.0.mssql.sql
@@ -942,9 +942,10 @@ ALTER TABLE TXN_COMPONENTS  WITH CHECK ADD FOREIGN KEY(TC_TXNID) REFERENCES TXNS
 -- ------------------------------------------
 -- Cloudera specific metastore schema patches
 -- ------------------------------------------
-:r 026-HIVE-16556.mssql.sql;
+:r 026-HIVE-16556.mssql.sql
 
+ALTER TABLE VERSION ADD SCHEMA_VERSION_V2 VARCHAR(255);
 -- -----------------------------------------------------------------------------------------------------------------------------------------
 -- Record schema version. Should be the last step in the init script. Starting CDH-5.12.0 CDH version must be included in the schema version
 -- -----------------------------------------------------------------------------------------------------------------------------------------
-INSERT INTO VERSION (VER_ID, SCHEMA_VERSION, VERSION_COMMENT) VALUES (1, '1.1.0-cdh5.12.0', 'Hive release version 1.1.0-cdh5.12.0');
+INSERT INTO VERSION (VER_ID, SCHEMA_VERSION, SCHEMA_VERSION_V2, VERSION_COMMENT) VALUES (1, '1.1.0', '1.1.0-cdh5.12.0', 'Hive release version 1.1.0-cdh5.12.0');
diff --git a/metastore/scripts/upgrade/mssql/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.mssql.sql b/metastore/scripts/upgrade/mssql/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.mssql.sql
new file mode 100644
index 0000000..04fd67b
--- /dev/null
+++ b/metastore/scripts/upgrade/mssql/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.mssql.sql
@@ -0,0 +1 @@
+ALTER TABLE VERSION DROP COLUMN SCHEMA_VERSION_V2;
\ No newline at end of file
diff --git a/metastore/scripts/upgrade/mssql/upgrade-1.1.0-to-1.1.0-cdh5.12.0.mssql.sql b/metastore/scripts/upgrade/mssql/upgrade-1.1.0-to-1.1.0-cdh5.12.0.mssql.sql
index f040807..0525144 100644
--- a/metastore/scripts/upgrade/mssql/upgrade-1.1.0-to-1.1.0-cdh5.12.0.mssql.sql
+++ b/metastore/scripts/upgrade/mssql/upgrade-1.1.0-to-1.1.0-cdh5.12.0.mssql.sql
@@ -1,6 +1,8 @@
 SELECT 'Upgrading MetaStore schema from 1.1.0 to 1.1.0-cdh5.12.0' AS MESSAGE;
 
-:r 026-HIVE-16556.mssql.sql;
+:r 026-HIVE-16556.mssql.sql
 
-UPDATE VERSION SET SCHEMA_VERSION='1.1.0-cdh5.12.0', VERSION_COMMENT='Hive release version 1.1.0-cdh5.12.0' where VER_ID=1;
+ALTER TABLE VERSION ADD SCHEMA_VERSION_V2 VARCHAR(255);
+go
+UPDATE VERSION SET SCHEMA_VERSION='1.1.0', VERSION_COMMENT='Hive release version 1.1.0-cdh5.12.0', SCHEMA_VERSION_V2='1.1.0-cdh5.12.0' where VER_ID=1;
 SELECT 'Finished upgrading MetaStore schema from 1.1.0 to 1.1.0-cdh5.12.0' AS MESSAGE;
diff --git a/metastore/scripts/upgrade/mysql/hive-schema-1.1.0.mysql.sql b/metastore/scripts/upgrade/mysql/hive-schema-1.1.0.mysql.sql
index 7c98df9..f54fea94 100644
--- a/metastore/scripts/upgrade/mysql/hive-schema-1.1.0.mysql.sql
+++ b/metastore/scripts/upgrade/mysql/hive-schema-1.1.0.mysql.sql
@@ -826,10 +826,11 @@ SOURCE hive-txn-schema-0.13.0.mysql.sql;
 -- -------------------------------------------
 SOURCE 041-HIVE-16556.mysql.sql;
 
+ALTER TABLE VERSION ADD COLUMN SCHEMA_VERSION_V2 VARCHAR(255);
 -- ----------------------------------------------------------------------------------------------------------------------------------------
 -- Record schema version. Should be the last step in the init script. Starting CDH-5.12.0 the schema version should also include CDH version
 -- -----------------------------------------------------------------------------------------------------------------------------------------
-INSERT INTO VERSION (VER_ID, SCHEMA_VERSION, VERSION_COMMENT) VALUES (1, '1.1.0-cdh5.12.0', 'Hive release version 1.1.0-cdh5.12.0');
+INSERT INTO VERSION (VER_ID, SCHEMA_VERSION, SCHEMA_VERSION_V2, VERSION_COMMENT) VALUES (1, '1.1.0', '1.1.0-cdh5.12.0', 'Hive release version 1.1.0-cdh5.12.0');
 
 /*!40101 SET character_set_client = @saved_cs_client */;
 /*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;
diff --git a/metastore/scripts/upgrade/mysql/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.mysql.sql b/metastore/scripts/upgrade/mysql/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.mysql.sql
new file mode 100644
index 0000000..04fd67b
--- /dev/null
+++ b/metastore/scripts/upgrade/mysql/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.mysql.sql
@@ -0,0 +1 @@
+ALTER TABLE VERSION DROP COLUMN SCHEMA_VERSION_V2;
\ No newline at end of file
diff --git a/metastore/scripts/upgrade/mysql/upgrade-1.1.0-to-1.1.0-cdh5.12.0.mysql.sql b/metastore/scripts/upgrade/mysql/upgrade-1.1.0-to-1.1.0-cdh5.12.0.mysql.sql
index 5a5b07d..28bc2d6 100644
--- a/metastore/scripts/upgrade/mysql/upgrade-1.1.0-to-1.1.0-cdh5.12.0.mysql.sql
+++ b/metastore/scripts/upgrade/mysql/upgrade-1.1.0-to-1.1.0-cdh5.12.0.mysql.sql
@@ -2,5 +2,6 @@
 
 SOURCE 041-HIVE-16556.mysql.sql;
 
-UPDATE VERSION SET SCHEMA_VERSION='1.1.0-cdh5.12.0', VERSION_COMMENT='Hive release version 1.1.0-cdh5.12.0' where VER_ID=1;
+ALTER TABLE VERSION ADD COLUMN SCHEMA_VERSION_V2 VARCHAR(255);
+UPDATE VERSION SET SCHEMA_VERSION='1.1.0', VERSION_COMMENT='Hive release version 1.1.0-cdh5.12.0', SCHEMA_VERSION_V2='1.1.0-cdh5.12.0' where VER_ID=1;
 SELECT 'Finished upgrading MetaStore schema from 1.1.0 to 1.1.0-cdh5.12.0' AS ' ';
diff --git a/metastore/scripts/upgrade/oracle/hive-schema-1.1.0.oracle.sql b/metastore/scripts/upgrade/oracle/hive-schema-1.1.0.oracle.sql
index cc3a2ab..2475fd8 100644
--- a/metastore/scripts/upgrade/oracle/hive-schema-1.1.0.oracle.sql
+++ b/metastore/scripts/upgrade/oracle/hive-schema-1.1.0.oracle.sql
@@ -787,7 +787,8 @@ CREATE INDEX FUNC_RU_N49 ON FUNC_RU (FUNC_ID);
 -- ------------------------------------------
 @041-HIVE-16556.oracle.sql;
 
+ALTER TABLE VERSION ADD SCHEMA_VERSION_V2 VARCHAR2(255);
 -- -----------------------------------------------------------------
 -- Record schema version. Should be the last step in the init script. Starting CDH5.12.0 schema version must include the CDH version as well
 -- -----------------------------------------------------------------
-INSERT INTO VERSION (VER_ID, SCHEMA_VERSION, VERSION_COMMENT) VALUES (1, '1.1.0-cdh5.12.0', 'Hive release version 1.1.0-cdh5.12.0');
+INSERT INTO VERSION (VER_ID, SCHEMA_VERSION, SCHEMA_VERSION_V2, VERSION_COMMENT) VALUES (1, '1.1.0', '1.1.0-cdh5.12.0', 'Hive release version 1.1.0-cdh5.12.0');
diff --git a/metastore/scripts/upgrade/oracle/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.oracle.sql b/metastore/scripts/upgrade/oracle/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.oracle.sql
new file mode 100644
index 0000000..04fd67b
--- /dev/null
+++ b/metastore/scripts/upgrade/oracle/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.oracle.sql
@@ -0,0 +1 @@
+ALTER TABLE VERSION DROP COLUMN SCHEMA_VERSION_V2;
\ No newline at end of file
diff --git a/metastore/scripts/upgrade/oracle/upgrade-1.1.0-to-1.1.0-cdh5.12.0.oracle.sql b/metastore/scripts/upgrade/oracle/upgrade-1.1.0-to-1.1.0-cdh5.12.0.oracle.sql
index aef8945..8ade5f4 100644
--- a/metastore/scripts/upgrade/oracle/upgrade-1.1.0-to-1.1.0-cdh5.12.0.oracle.sql
+++ b/metastore/scripts/upgrade/oracle/upgrade-1.1.0-to-1.1.0-cdh5.12.0.oracle.sql
@@ -2,5 +2,6 @@
 
 @041-HIVE-16556.oracle.sql;
 
-UPDATE VERSION SET SCHEMA_VERSION='1.1.0-cdh5.12.0', VERSION_COMMENT='Hive release version 1.1.0-cdh5.12.0' where VER_ID=1;
+ALTER TABLE VERSION ADD SCHEMA_VERSION_V2 VARCHAR2(255);
+UPDATE VERSION SET SCHEMA_VERSION='1.1.0', VERSION_COMMENT='Hive release version 1.1.0-cdh5.12.0', SCHEMA_VERSION_V2='1.1.0-cdh5.12.0' where VER_ID=1;
 SELECT 'Finished upgrading MetaStore schema from 1.1.0 to 1.1.0-cdh5.12.0' AS Status from dual;
diff --git a/metastore/scripts/upgrade/postgres/hive-schema-1.1.0.postgres.sql b/metastore/scripts/upgrade/postgres/hive-schema-1.1.0.postgres.sql
index 6bf8f79..c48c042 100644
--- a/metastore/scripts/upgrade/postgres/hive-schema-1.1.0.postgres.sql
+++ b/metastore/scripts/upgrade/postgres/hive-schema-1.1.0.postgres.sql
@@ -1492,7 +1492,8 @@ GRANT ALL ON SCHEMA public TO PUBLIC;
 -- ------------------------------------------
 \i 040-HIVE-16556.postgres.sql;
 
+ALTER TABLE "VERSION" ADD COLUMN "SCHEMA_VERSION_V2" VARCHAR(255);
 -- ------------------------------------------------------------------------------------------------------------------------------
 -- Record schema version. Should be the last step in the init script. Starting CDH-5.12.0 schema version must include CDH version
 -- ------------------------------------------------------------------------------------------------------------------------------
-INSERT INTO "VERSION" ("VER_ID", "SCHEMA_VERSION", "VERSION_COMMENT") VALUES (1, '1.1.0-cdh5.12.0', 'Hive release version 1.1.0-cdh5.12.0');
+INSERT INTO "VERSION" ("VER_ID", "SCHEMA_VERSION", "SCHEMA_VERSION_V2", "VERSION_COMMENT") VALUES (1, '1.1.0', '1.1.0-cdh5.12.0', 'Hive release version 1.1.0-cdh5.12.0');
diff --git a/metastore/scripts/upgrade/postgres/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.postgres.sql b/metastore/scripts/upgrade/postgres/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.postgres.sql
new file mode 100644
index 0000000..f5ca8a4
--- /dev/null
+++ b/metastore/scripts/upgrade/postgres/pre-0-upgrade-1.1.0-to-1.1.0-cdh5.12.0.postgres.sql
@@ -0,0 +1 @@
+ALTER TABLE "VERSION" DROP COLUMN "SCHEMA_VERSION_V2";
\ No newline at end of file
diff --git a/metastore/scripts/upgrade/postgres/upgrade-1.1.0-to-1.1.0-cdh5.12.0.postgres.sql b/metastore/scripts/upgrade/postgres/upgrade-1.1.0-to-1.1.0-cdh5.12.0.postgres.sql
index 180fe03..d795cb5 100644
--- a/metastore/scripts/upgrade/postgres/upgrade-1.1.0-to-1.1.0-cdh5.12.0.postgres.sql
+++ b/metastore/scripts/upgrade/postgres/upgrade-1.1.0-to-1.1.0-cdh5.12.0.postgres.sql
@@ -2,5 +2,6 @@ SELECT 'Upgrading MetaStore schema from 1.1.0 to 1.1.0-cdh5.12.0';
 
 \i 040-HIVE-16556.postgres.sql;
 
-UPDATE "VERSION" SET "SCHEMA_VERSION"='1.1.0-cdh5.12.0', "VERSION_COMMENT"='Hive release version 1.1.0-cdh5.12.0' where "VER_ID"=1;
+ALTER TABLE "VERSION" ADD COLUMN "SCHEMA_VERSION_V2" VARCHAR(255); 
+UPDATE "VERSION" SET "SCHEMA_VERSION"='1.1.0', "VERSION_COMMENT"='Hive release version 1.1.0-cdh5.12.0', "SCHEMA_VERSION_V2"='1.1.0-cdh5.12.0' where "VER_ID"=1;
 SELECT 'Finished upgrading MetaStore schema from 1.1.0 to 1.1.0-cdh5.12.0';
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/CDHMetaStoreSchemaInfo.java b/metastore/src/java/org/apache/hadoop/hive/metastore/CDHMetaStoreSchemaInfo.java
index 207d62e..02914f3 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/CDHMetaStoreSchemaInfo.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/CDHMetaStoreSchemaInfo.java
@@ -4,14 +4,22 @@
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
+import java.sql.Connection;
+import java.sql.ResultSet;
+import java.sql.ResultSetMetaData;
+import java.sql.SQLException;
+import java.sql.Statement;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.hive.metastore.tools.HiveSchemaHelper;
+import org.apache.hadoop.hive.metastore.tools.HiveSchemaHelper.MetaStoreConnectionInfo;
 import org.apache.hive.common.util.HiveVersionInfo;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableMap;
 
 /**
@@ -33,7 +41,8 @@ public CDHMetaStoreSchemaInfo(String hiveHome, String dbType)
     super(hiveHome, dbType);
   }
 
-  private String[] loadAllCDHUpgradeScripts(String dbType) throws HiveMetaException {
+  @VisibleForTesting
+  String[] loadAllCDHUpgradeScripts(String dbType) throws HiveMetaException {
     List<String> cdhUpgradeOrderList = new ArrayList<String>();
 
     String upgradeListFile =
@@ -109,6 +118,12 @@ private String getMajorVersion(String fullVersion) {
     return fullVersion.split("-")[0];
   }
 
+  /**
+   * returns the CDH version from the HiveVersionAnnotation.java This annotation is created during
+   * the build time. Check saveVersion.sh and common/pom.xml for more details
+   * 
+   * @return CDH version string excluding the SNAPSHOT
+   */
   @Override
   public String getHiveSchemaVersion() {
     return HiveVersionInfo.getVersion().replaceAll("-SNAPSHOT", "");
@@ -125,13 +140,29 @@ public String getHiveSchemaVersion() {
     // the cdh.upgrade.order file will list all the upgrade paths
     // to reach the current distribution version.
     String[] cdhSchemaVersions = loadAllCDHUpgradeScripts(dbType);
-    for (int i=0; i < cdhSchemaVersions.length; i++) {
-      if (compareCDHVersions((cdhSchemaVersions[i].split("-to-"))[1].split("-")[1], cdhVersion.split("-")[1]) <= 0) {
+    String targetCdhVersion = cdhVersion.split("-")[1];
+    String[] versionParts = from.split("-");
+    String fromCdhVersion = null;
+    if (versionParts.length > 1) {
+      // from version contains cdh version
+      fromCdhVersion = versionParts[1];
+    }
+    for (int i = 0; i < cdhSchemaVersions.length; i++) {
+      // we should skip all the upgrade paths where target is lower than current version
+      String toVersionFromUpgradePath = cdhSchemaVersions[i].split("-to-")[1].split("-")[1];
+      if (fromCdhVersion != null
+        && compareCDHVersions(fromCdhVersion, toVersionFromUpgradePath) >= 0) {
+        System.out.println("Current version is higher than or equal to " + toVersionFromUpgradePath
+          + " Skipping file " + cdhSchemaVersions[i]);
+        continue;
+      }
+      if (compareCDHVersions(toVersionFromUpgradePath, targetCdhVersion) <= 0) {
         String scriptFile = generateUpgradeFileName(cdhSchemaVersions[i]);
         minorUpgradeList.add(scriptFile);
       } else {
-        System.out.println("Upgrade script version is newer than current hive version, skipping file "
-                      + cdhSchemaVersions[i]);
+        System.out
+          .println("Upgrade script version is newer than current hive version, skipping file "
+            + cdhSchemaVersions[i]);
       }
     }
     return minorUpgradeList;
@@ -202,4 +233,55 @@ public boolean isVersionCompatible(String cdhHiveVersion, String dbVersion) {
 
     return (compareCDHVersions(cdhFullVersion[1], hmsFullVersion[1]) > 0) ? false : true;
   }
+
+  @Override
+  public String getMetaStoreSchemaVersion(MetaStoreConnectionInfo connectionInfo)
+    throws HiveMetaException {
+    String versionQuery;
+    boolean needsQuotedIdentifier =
+      HiveSchemaHelper.getDbCommandParser(connectionInfo.getDbType()).needsQuotedIdentifier();
+    if (needsQuotedIdentifier) {
+      versionQuery = "select * from \"VERSION\" t";
+    } else {
+      versionQuery = "select * from VERSION t";
+    }
+
+    try (Connection metastoreDbConnection =
+      HiveSchemaHelper.getConnectionToMetastore(connectionInfo)) {
+      Statement stmt = metastoreDbConnection.createStatement();
+      ResultSet res = stmt.executeQuery(versionQuery);
+      if (!res.next()) {
+        throw new HiveMetaException("Could not find version info in metastore VERSION table.");
+      }
+      // get schema_version_v2 if available else fall-back to schema_version
+      String version = getSchemaVersion(res);
+      if (res.next()) {
+        throw new HiveMetaException("Multiple versions were found in metastore.");
+      }
+      return version;
+    } catch (SQLException e) {
+      throw new HiveMetaException("Failed to get schema version, Cause:" + e.getMessage());
+    }
+  }
+
+  private String getSchemaVersion(ResultSet res) throws SQLException {
+    String version = getColumnValue(res, "SCHEMA_VERSION_V2");
+    if (version == null) {
+      version = getColumnValue(res, "SCHEMA_VERSION");
+    }
+    return version;
+  }
+
+  private String getColumnValue(ResultSet res, String columnName) throws SQLException {
+    if (res.getMetaData() == null) {
+      throw new IllegalArgumentException("ResultSet metadata cannot be null");
+    }
+    int numCols = res.getMetaData().getColumnCount();
+    for (int i = 1; i <= numCols; i++) {
+      if (columnName.equalsIgnoreCase(res.getMetaData().getColumnName(i))) {
+        return res.getString(i);
+      }
+    }
+    return null;
+  }
 }
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
index b5ce7c0..8e6ff05 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
@@ -7326,6 +7326,11 @@ public String getMetaStoreSchemaVersion() throws MetaException {
     } catch (NoSuchObjectException e) {
       return null;
     }
+    // return schema version V2 if available else fall back to schemaVersion
+    String schemaVersionV2 = mSchemaVer.getSchemaVersionV2();
+    if(schemaVersionV2 != null) {
+      return schemaVersionV2;
+    }
     return mSchemaVer.getSchemaVersion();
   }
 
diff --git a/metastore/src/model/org/apache/hadoop/hive/metastore/model/MVersionTable.java b/metastore/src/model/org/apache/hadoop/hive/metastore/model/MVersionTable.java
index c6c4289..f740762 100644
--- a/metastore/src/model/org/apache/hadoop/hive/metastore/model/MVersionTable.java
+++ b/metastore/src/model/org/apache/hadoop/hive/metastore/model/MVersionTable.java
@@ -21,12 +21,14 @@
 public class MVersionTable {
   private String schemaVersion;
   private String versionComment;
+  private String schemaVersionV2;
 
   public MVersionTable() {}
 
-  public MVersionTable(String schemaVersion, String versionComment) {
+  public MVersionTable(String schemaVersion, String versionComment, String schemaVersionV2) {
     this.schemaVersion = schemaVersion;
     this.versionComment = versionComment;
+    this.schemaVersionV2 = schemaVersionV2;
   }
   /**
    * @return the versionComment
@@ -54,4 +56,12 @@ public void setSchemaVersion(String schemaVersion) {
     this.schemaVersion = schemaVersion;
   }
 
+  public String getSchemaVersionV2() {
+    return schemaVersionV2;
+  }
+
+  public void setSchemaVersionV2(String schemaVersionV2) {
+    this.schemaVersionV2 = schemaVersionV2;
+  }
+
 }
diff --git a/metastore/src/model/package.jdo b/metastore/src/model/package.jdo
index 735447a..81fd280 100644
--- a/metastore/src/model/package.jdo
+++ b/metastore/src/model/package.jdo
@@ -927,6 +927,9 @@
       <field name ="versionComment">
         <column name="VERSION_COMMENT" length="255" jdbc-type="VARCHAR" allows-null="false"/>
       </field>
+      <field name ="schemaVersionV2">
+        <column name="SCHEMA_VERSION_V2" length="255" jdbc-type="VARCHAR" allows-null="true"/>
+      </field>
     </class>
 
     <class name="MMetastoreDBProperties" table="METASTORE_DB_PROPERTIES" identity-type="application" detachable="true">
diff --git a/metastore/src/test/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java b/metastore/src/test/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java
new file mode 100644
index 0000000..9c6c712
--- /dev/null
+++ b/metastore/src/test/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java
@@ -0,0 +1,105 @@
+package org.apache.hadoop.hive.metastore;
+
+import java.util.List;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.metastore.tools.HiveSchemaHelper.MetaStoreConnectionInfo;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mockito;
+
+public class TestCDHMetaStoreSchemaInfo {
+  private IMetaStoreSchemaInfo metastoreSchemaInfo;
+  private static Configuration conf;
+
+  @BeforeClass
+  public static void beforeClass() {
+    conf = new HiveConf(TestCDHMetaStoreSchemaInfo.class);
+  }
+
+  @Before
+  public void setup() {
+    metastoreSchemaInfo = MetaStoreSchemaInfoFactory.get(conf);
+    Assert.assertNotNull(metastoreSchemaInfo);
+    Assert.assertTrue("Unexpected instance of IMetaStoreSchemaInfo",
+      metastoreSchemaInfo instanceof CDHMetaStoreSchemaInfo);
+  }
+
+  @Test
+  public void testGetHiveSchemaVersion() {
+    String hiveSchemaVersion = metastoreSchemaInfo.getHiveSchemaVersion();
+    Assert.assertTrue("HiveSchema version should contain CDH version",
+      hiveSchemaVersion.contains("-cdh"));
+  }
+
+  @Test
+  public void testUpgradeScripts() throws Exception {
+    MetaStoreConnectionInfo mockConnectionInfo = Mockito.mock(MetaStoreConnectionInfo.class);
+    Mockito.when(mockConnectionInfo.getDbType()).thenReturn("derby");
+    String[] dummyCDHUpgradeOrder =
+      new String[] { "1.1.0-to-1.1.0-cdh5.12.0", "1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0",
+        "1.1.0-cdh5.13.0-to-1.1.0-cdh5.15.0", "1.1.0-cdh5.15.0-to-2.1.0-cdh6.0.0" };
+    CDHMetaStoreSchemaInfo cdhSchemaInfo = Mockito.mock(CDHMetaStoreSchemaInfo.class);
+    Mockito.when(cdhSchemaInfo.loadAllCDHUpgradeScripts(Mockito.anyString()))
+      .thenReturn(dummyCDHUpgradeOrder);
+    // case 1. when hive version is 1.1.0 and db version is 1.1.0
+    // no upgrade is neccessary
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0");
+    // Mockito
+    // .when(cdhSchemaInfo.getMetaStoreSchemaVersion(Mockito.any(MetaStoreConnectionInfo.class)))
+    // .thenReturn("1.1.0");
+    Mockito.when(cdhSchemaInfo.getUpgradeScripts(Mockito.anyString())).thenCallRealMethod();
+
+    List<String> upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0");
+    Assert.assertTrue(
+      "Upgrade scripts should be have been empty when hive version and db version is same",
+      upgradeOrder.isEmpty());
+
+    // when hive version is 1.1.0-cdh-5.12.0 and db version is 1.1.0
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.12.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0");
+    Assert.assertEquals("upgrade order should contain only one script", 1, upgradeOrder.size());
+    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.12.0",
+      upgradeOrder.get(0).startsWith("upgrade-1.1.0-to-1.1.0-cdh5.12.0"));
+
+    // when hive version is 1.1.0-cdh-5.13.0 and db version is 1.1.0
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.13.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0");
+    Assert.assertEquals("upgrade order should contain 2 scripts", 2, upgradeOrder.size());
+    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.12.0",
+      upgradeOrder.get(0).startsWith("upgrade-1.1.0-to-1.1.0-cdh5.12.0"));
+    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.13.0",
+      upgradeOrder.get(1).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
+
+    // when db version is 1.1.0-cdh5.12.0 and hive version is 1.1.0-cdh5.13.0
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.13.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.12.0");
+    Assert.assertEquals("upgrade order should contain only one script", 1, upgradeOrder.size());
+    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.12.0",
+      upgradeOrder.get(0).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
+
+    // when db version is higher than hive version no upgrade is necessary
+    // this can happen if the env is rollbacked/downgraded to earlier version
+    // of CDH.
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.12.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.13.0");
+    Assert.assertEquals("upgrade order should not contain any scripts", 0, upgradeOrder.size());
+
+    //upgrade from cdh5.12 to cdh6.0 which involves a rebase
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("2.1.0-cdh6.0.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.12.0");
+    Assert.assertEquals("upgrade order should contain 3 scripts", 3, upgradeOrder.size());
+    Assert.assertTrue(upgradeOrder.get(0).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
+    Assert.assertTrue(upgradeOrder.get(1).startsWith("upgrade-1.1.0-cdh5.13.0-to-1.1.0-cdh5.15.0"));
+    Assert.assertTrue(upgradeOrder.get(2).startsWith("upgrade-1.1.0-cdh5.15.0-to-2.1.0-cdh6.0.0"));
+
+    //case when hive version is not present in upgrade order
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.14.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.12.0");
+    Assert.assertEquals("upgrade order should contain 1 scripts", 1, upgradeOrder.size());
+    Assert.assertTrue(upgradeOrder.get(0).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
+  }
+}
-- 
1.7.9.5

