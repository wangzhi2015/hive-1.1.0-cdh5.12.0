From 67fd85b632289fcb6438e0c36d35606f81283636 Mon Sep 17 00:00:00 2001
From: Hari Subramaniyan <harisankar@apache.org>
Date: Mon, 17 Aug 2015 11:32:06 -0700
Subject: [PATCH 0654/1164] HIVE-11490 : Lazily call ASTNode::toStringTree()
 after tree modification (Hari Subramaniyan,
 reviewed by Ashutosh Chauhan)

Change-Id: Ia50e080e9651739c2299a7b882afe520c301b41b
---
 .../hadoop/hive/ql/lib/DefaultGraphWalker.java     |    2 +-
 .../org/apache/hadoop/hive/ql/parse/ASTNode.java   |   18 +++++++++---------
 2 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/lib/DefaultGraphWalker.java b/ql/src/java/org/apache/hadoop/hive/ql/lib/DefaultGraphWalker.java
index a974b5b..920a54f 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/lib/DefaultGraphWalker.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/lib/DefaultGraphWalker.java
@@ -107,7 +107,7 @@ public void startWalking(Collection<Node> startNodes,
     while (toWalk.size() > 0) {
       Node nd = toWalk.remove(0);
       walk(nd);
-      if (nodeOutput != null) {
+      if (nodeOutput != null && getDispatchedList().contains(nd)) {
         nodeOutput.put(nd, retMap.get(nd));
       }
     }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/ASTNode.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/ASTNode.java
index 136d481..b96e2eb 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/ASTNode.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/ASTNode.java
@@ -143,9 +143,11 @@ private ASTNode getRootNodeWithValidASTStr (boolean useMemoizedRoot) {
       retNode = (ASTNode) retNode.parent;
     }
     rootNode=retNode;
-    rootNode.astStr = new StringBuffer();
-    rootNode.toStringTree(rootNode);
-    rootNode.isValidASTStr = true;
+    if (!rootNode.isValidASTStr) {
+      rootNode.astStr = new StringBuffer();
+      rootNode.toStringTree(rootNode);
+      rootNode.isValidASTStr = true;
+    }
     return retNode;
   }
 
@@ -159,9 +161,6 @@ private void resetRootInformation() {
       rootNode.astStr = null;
       rootNode.isValidASTStr = false;
     }
-    // The root might have changed because of tree modifications.
-    // Compute the new root for this tree and set the astStr.
-    getRootNodeWithValidASTStr(false);
   }
 
   private int getMemoizedStringLen() {
@@ -225,9 +224,10 @@ public void replaceChildren(int startChildIndex, int stopChildIndex, Object t) {
 
   @Override
   public String toStringTree() {
-    // The tree modifier functions invalidate the old astStr, rootNode, etc.
-    // Hence, we can use the memoized root node and string values here.
-    ASTNode rootNode = (ASTNode)this.getRootNodeWithValidASTStr(true);
+
+    // The root might have changed because of tree modifications.
+    // Compute the new root for this tree and set the astStr.
+    getRootNodeWithValidASTStr(true);
 
     // If rootNotModified is false, then startIndx and endIndx will be stale.
     if (startIndx >= 0 && endIndx <= rootNode.getMemoizedStringLen()) {
-- 
1.7.9.5

