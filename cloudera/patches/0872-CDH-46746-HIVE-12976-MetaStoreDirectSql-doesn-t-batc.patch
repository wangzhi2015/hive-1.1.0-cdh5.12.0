From 83fdea75ed5ebb1a02b0a64d3521e2bf3d85a8f2 Mon Sep 17 00:00:00 2001
From: Sergey Shelukhin <sershe@apache.org>
Date: Fri, 5 Feb 2016 16:14:28 -0800
Subject: [PATCH 0872/1164] CDH-46746: HIVE-12976: MetaStoreDirectSql doesn't
 batch IN lists in all cases

Change-Id: Id1c9c31b3c4a9d7bbfd02e896d3f2474542051f2
---
 .../hadoop/hive/metastore/MetaStoreDirectSql.java  |  295 +++++++++++++-------
 1 file changed, 193 insertions(+), 102 deletions(-)

diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java
index 39d9e0a..089ed4a 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java
@@ -21,6 +21,7 @@
 import static org.apache.commons.lang.StringUtils.join;
 import static org.apache.commons.lang.StringUtils.repeat;
 
+import com.google.common.collect.Lists;
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.text.ParseException;
@@ -31,12 +32,10 @@
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
-
 import javax.jdo.PersistenceManager;
 import javax.jdo.Query;
 import javax.jdo.Transaction;
 import javax.jdo.datastore.JDOConnection;
-
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -71,8 +70,6 @@
 import org.apache.hadoop.hive.serde.serdeConstants;
 import org.datanucleus.store.rdbms.query.ForwardQueryResult;
 
-import com.google.common.collect.Lists;
-
 /**
  * This class contains the optimizations for MetaStore that rely on direct SQL access to
  * the underlying database. It should use ANSI SQL and be compatible with common databases
@@ -359,14 +356,18 @@ public Database getDatabase(String dbName) throws MetaException{
    * @param partNames Partition names to get.
    * @return List of partitions.
    */
-  public List<Partition> getPartitionsViaSqlFilter(
-      String dbName, String tblName, List<String> partNames) throws MetaException {
+  public List<Partition> getPartitionsViaSqlFilter(final String dbName, final String tblName,
+      List<String> partNames) throws MetaException {
     if (partNames.isEmpty()) {
       return new ArrayList<Partition>();
     }
-    return getPartitionsViaSqlFilterInternal(dbName, tblName, null,
-        "\"PARTITIONS\".\"PART_NAME\" in (" + makeParams(partNames.size()) + ")",
-        partNames, new ArrayList<String>(), null);
+    return runBatched(partNames, new Batchable<String, Partition>() {
+      public List<Partition> run(List<String> input) throws MetaException {
+        String filter = "\"PARTITIONS\".\"PART_NAME\" in (" + makeParams(input.size()) + ")";
+        return getPartitionsViaSqlFilterInternal(dbName, tblName, null, filter, input,
+            new ArrayList<String>(), null);
+      }
+    });
   }
 
   /**
@@ -450,11 +451,10 @@ private boolean isViewTable(String dbName, String tblName) throws MetaException
    * @return List of partition objects.
    */
   private List<Partition> getPartitionsViaSqlFilterInternal(String dbName, String tblName,
-      Boolean isView, String sqlFilter, List<? extends Object> paramsForFilter,
+      final Boolean isView, String sqlFilter, List<? extends Object> paramsForFilter,
       List<String> joinsForFilter, Integer max) throws MetaException {
     boolean doTrace = LOG.isDebugEnabled();
-    dbName = dbName.toLowerCase();
-    tblName = tblName.toLowerCase();
+    final String dbNameLcase = dbName.toLowerCase(), tblNameLcase = tblName.toLowerCase();
     // We have to be mindful of order during filtering if we are not returning all partitions.
     String orderForFilter = (max != null) ? " order by \"PART_NAME\" asc" : "";
 
@@ -477,8 +477,8 @@ private boolean isViewTable(String dbName, String tblName) throws MetaException
       + join(joinsForFilter, ' ')
       + (StringUtils.isBlank(sqlFilter) ? "" : (" where " + sqlFilter)) + orderForFilter;
     Object[] params = new Object[paramsForFilter.size() + 2];
-    params[0] = tblName;
-    params[1] = dbName;
+    params[0] = tblNameLcase;
+    params[1] = dbNameLcase;
     for (int i = 0; i < paramsForFilter.size(); ++i) {
       params[i + 2] = paramsForFilter.get(i);
     }
@@ -495,23 +495,18 @@ private boolean isViewTable(String dbName, String tblName) throws MetaException
       return new ArrayList<Partition>(); // no partitions, bail early.
     }
 
-    // Get full objects. For Oracle, do it in batches.
-    List<Partition> result = null;
-    if (batchSize != NO_BATCHING && batchSize < sqlResult.size()) {
-      result = new ArrayList<Partition>(sqlResult.size());
-      while (result.size() < sqlResult.size()) {
-        int toIndex = Math.min(result.size() + batchSize, sqlResult.size());
-        List<Object> batchedSqlResult = sqlResult.subList(result.size(), toIndex);
-        result.addAll(getPartitionsFromPartitionIds(dbName, tblName, isView, batchedSqlResult));
+    // Get full objects. For Oracle/etc. do it in batches.
+    List<Partition> result = runBatched(sqlResult, new Batchable<Object, Partition>() {
+      public List<Partition> run(List<Object> input) throws MetaException {
+        return getPartitionsFromPartitionIds(dbNameLcase, tblNameLcase, isView, input);
       }
-    } else {
-      result = getPartitionsFromPartitionIds(dbName, tblName, isView, sqlResult);
-    }
+    });
 
     query.closeAll();
     return result;
   }
 
+  /** Should be called with the list short enough to not trip up Oracle/etc. */
   private List<Partition> getPartitionsFromPartitionIds(String dbName, String tblName,
       Boolean isView, List<Object> partIdList) throws MetaException {
     boolean doTrace = LOG.isDebugEnabled();
@@ -839,7 +834,6 @@ public int getNumPartitionsViaSqlFilter(SqlFilterForPushdown filter) throws Meta
     long start = doTrace ? System.nanoTime() : 0;
     Query query = pm.newQuery("javax.jdo.query.SQL", queryText);
     query.setUnique(true);
-    @SuppressWarnings("unchecked")
     int sqlResult = extractSqlInt(query.executeWithArray(params));
     long queryTime = doTrace ? System.nanoTime() : 0;
     timingTrace(doTrace, queryText, start, queryTime);
@@ -1069,10 +1063,10 @@ public void visit(LeafNode node) throws MetaException {
         return;
       }
 
-      // TODO: if Filter.g does date parsing for quoted strings, we'd need to verify there's no
-      //       type mismatch when string col is filtered by a string that looks like date.
+      // if Filter.g does date parsing for quoted strings, we'd need to verify there's no
+      // type mismatch when string col is filtered by a string that looks like date.
       if (colType == FilterType.Date && valType == FilterType.String) {
-        // TODO: Filter.g cannot parse a quoted date; try to parse date here too.
+        // Filter.g cannot parse a quoted date; try to parse date here too.
         try {
           nodeValue = new java.sql.Date(
               HiveMetaStore.PARTITION_DATE_FORMAT.get().parse((String)nodeValue).getTime());
@@ -1149,36 +1143,43 @@ public void visit(LeafNode node) throws MetaException {
     }
   }
 
-  public ColumnStatistics getTableStats(
-      String dbName, String tableName, List<String> colNames) throws MetaException {
+  public ColumnStatistics getTableStats(final String dbName, final String tableName,
+      List<String> colNames) throws MetaException {
     if (colNames.isEmpty()) {
       return null;
     }
     doDbSpecificInitializationsBeforeQuery();
-    boolean doTrace = LOG.isDebugEnabled();
-    long start = doTrace ? System.nanoTime() : 0;
-    String queryText = "select " + STATS_COLLIST + " from \"TAB_COL_STATS\" "
-      + " where \"DB_NAME\" = ? and \"TABLE_NAME\" = ? and \"COLUMN_NAME\" in ("
-      + makeParams(colNames.size()) + ")";
-    Query query = pm.newQuery("javax.jdo.query.SQL", queryText);
-    Object[] params = new Object[colNames.size() + 2];
-    params[0] = dbName;
-    params[1] = tableName;
-    for (int i = 0; i < colNames.size(); ++i) {
-      params[i + 2] = colNames.get(i);
-    }
-    Object qResult = executeWithArray(query, params, queryText);
-    long queryTime = doTrace ? System.nanoTime() : 0;
-    if (qResult == null) {
-      query.closeAll();
-      return null;
-    }
-    List<Object[]> list = ensureList(qResult);
+
+    final boolean doTrace = LOG.isDebugEnabled();
+    final String queryText0 = "select " + STATS_COLLIST + " from \"TAB_COL_STATS\" "
+          + " where \"DB_NAME\" = ? and \"TABLE_NAME\" = ? and \"COLUMN_NAME\" in (";
+    Batchable<String, Object[]> b = new Batchable<String, Object[]>() {
+      public List<Object[]> run(List<String> input) throws MetaException {
+        String queryText = queryText0 + makeParams(input.size()) + ")";
+        Object[] params = new Object[input.size() + 2];
+        params[0] = dbName;
+        params[1] = tableName;
+        for (int i = 0; i < input.size(); ++i) {
+          params[i + 2] = input.get(i);
+        }
+        long start = doTrace ? System.nanoTime() : 0;
+        Query query = pm.newQuery("javax.jdo.query.SQL", queryText);
+        Object qResult = executeWithArray(query, params, queryText);
+        timingTrace(doTrace, queryText0 + "...)", start, (doTrace ? System.nanoTime() : 0));
+        if (qResult == null) {
+          query.closeAll();
+          return null;
+        }
+        addQueryAfterUse(query);
+        return ensureList(qResult);
+      }
+    };
+    List<Object[]> list = runBatched(colNames, b);
+
     if (list.isEmpty()) return null;
     ColumnStatisticsDesc csd = new ColumnStatisticsDesc(true, dbName, tableName);
     ColumnStatistics result = makeColumnStats(list, csd, 0);
-    timingTrace(doTrace, queryText, start, queryTime);
-    query.closeAll();
+    b.closeAllQueries();
     return result;
   }
 
@@ -1186,7 +1187,7 @@ public AggrStats aggrColStatsForPartitions(String dbName, String tableName,
       List<String> partNames, List<String> colNames) throws MetaException {
     if (colNames.isEmpty() || partNames.isEmpty()) {
       LOG.debug("Columns is empty or partNames is empty : Short-circuiting stats eval");
-      return new AggrStats(new ArrayList<ColumnStatisticsObj>(),0); // Nothing to aggregate
+      return new AggrStats(new ArrayList<ColumnStatisticsObj>(), 0); // Nothing to aggregate
     }
     long partsFound = partsFoundForPartitions(dbName, tableName, partNames, colNames);
     List<ColumnStatisticsObj> stats = columnStatisticsObjForPartitions(dbName,
@@ -1194,37 +1195,71 @@ public AggrStats aggrColStatsForPartitions(String dbName, String tableName,
     return new AggrStats(stats, partsFound);
   }
 
-  private long partsFoundForPartitions(String dbName, String tableName,
-      List<String> partNames, List<String> colNames) throws MetaException {
+  private long partsFoundForPartitions(final String dbName, final String tableName,
+      final List<String> partNames, List<String> colNames) throws MetaException {
     assert !colNames.isEmpty() && !partNames.isEmpty();
-    long partsFound = 0;
-    boolean doTrace = LOG.isDebugEnabled();
-    String queryText = "select count(\"COLUMN_NAME\") from \"PART_COL_STATS\""
+    final boolean doTrace = LOG.isDebugEnabled();
+    final String queryText0  = "select count(\"COLUMN_NAME\") from \"PART_COL_STATS\""
         + " where \"DB_NAME\" = ? and \"TABLE_NAME\" = ? "
-        + " and \"COLUMN_NAME\" in (" + makeParams(colNames.size()) + ")"
-        + " and \"PARTITION_NAME\" in (" + makeParams(partNames.size()) + ")"
+        + " and \"COLUMN_NAME\" in (%1$s) and \"PARTITION_NAME\" in (%2$s)"
         + " group by \"PARTITION_NAME\"";
-    long start = doTrace ? System.nanoTime() : 0;
-    Query query = pm.newQuery("javax.jdo.query.SQL", queryText);
-    Object qResult = executeWithArray(query, prepareParams(
-        dbName, tableName, partNames, colNames), queryText);
-    long end = doTrace ? System.nanoTime() : 0;
-    timingTrace(doTrace, queryText, start, end);
-    ForwardQueryResult fqr = (ForwardQueryResult) qResult;
-    Iterator<?> iter = fqr.iterator();
-    while (iter.hasNext()) {
-      if (extractSqlLong(iter.next()) == colNames.size()) {
-        partsFound++;
+    List<Long> allCounts = runBatched(colNames, new Batchable<String, Long>() {
+      public List<Long> run(final List<String> inputColName) throws MetaException {
+        return runBatched(partNames, new Batchable<String, Long>() {
+          public List<Long> run(List<String> inputPartNames) throws MetaException {
+            long partsFound = 0;
+            String queryText = String.format(queryText0,
+                makeParams(inputColName.size()), makeParams(inputPartNames.size()));
+            long start = doTrace ? System.nanoTime() : 0;
+            Query query = pm.newQuery("javax.jdo.query.SQL", queryText);
+            try {
+              Object qResult = executeWithArray(query, prepareParams(
+                  dbName, tableName, inputPartNames, inputColName), queryText);
+              long end = doTrace ? System.nanoTime() : 0;
+              timingTrace(doTrace, queryText, start, end);
+              ForwardQueryResult fqr = (ForwardQueryResult) qResult;
+              Iterator<?> iter = fqr.iterator();
+              while (iter.hasNext()) {
+                if (extractSqlLong(iter.next()) == inputColName.size()) {
+                  partsFound++;
+                }
+              }
+              return Lists.<Long>newArrayList(partsFound);
+            } finally {
+              query.closeAll();
+            }
+          }
+        });
       }
+    });
+    long partsFound = 0;
+    for (Long val : allCounts) {
+      partsFound += val;
     }
-    query.closeAll();
     return partsFound;
   }
 
-  private List<ColumnStatisticsObj> columnStatisticsObjForPartitions(
-      String dbName, String tableName, List<String> partNames,
-      List<String> colNames, long partsFound) throws MetaException {
-    doDbSpecificInitializationsBeforeQuery();
+
+  private List<ColumnStatisticsObj> columnStatisticsObjForPartitions(final String dbName,
+    final String tableName, final List<String> partNames, List<String> colNames, long partsFound)
+    	throws MetaException {
+	doDbSpecificInitializationsBeforeQuery();
+	final boolean areAllPartsFound = (partsFound == partNames.size());
+    return runBatched(colNames, new Batchable<String, ColumnStatisticsObj>() {
+      public List<ColumnStatisticsObj> run(final List<String> inputColNames) throws MetaException {
+        return runBatched(partNames, new Batchable<String, ColumnStatisticsObj>() {
+          public List<ColumnStatisticsObj> run(List<String> inputPartNames) throws MetaException {
+            return columnStatisticsObjForPartitionsBatch(dbName, tableName, inputPartNames,
+                inputColNames, areAllPartsFound);
+          }
+        });
+      }
+    });
+  }
+
+  /** Should be called with the list short enough to not trip up Oracle/etc. */
+  private List<ColumnStatisticsObj> columnStatisticsObjForPartitionsBatch(String dbName,
+      String tableName, List<String> partNames, List<String> colNames, boolean areAllPartsFound) throws MetaException {
     // TODO: all the extrapolation logic should be moved out of this class,
     //       only mechanical data retrieval should remain here.
     String commonPrefix = "select \"COLUMN_NAME\", \"COLUMN_TYPE\", "
@@ -1241,9 +1276,9 @@ private long partsFoundForPartitions(String dbName, String tableName,
     ForwardQueryResult fqr = null;
     // Check if the status of all the columns of all the partitions exists
     // Extrapolation is not needed.
-    if (partsFound == partNames.size()) {
-      queryText = commonPrefix
-          + " and \"COLUMN_NAME\" in (" + makeParams(colNames.size()) + ")"
+
+    if (areAllPartsFound) {
+      queryText = commonPrefix + " and \"COLUMN_NAME\" in (" + makeParams(colNames.size()) + ")"
           + " and \"PARTITION_NAME\" in (" + makeParams(partNames.size()) + ")"
           + " group by \"COLUMN_NAME\", \"COLUMN_TYPE\"";
       start = doTrace ? System.nanoTime() : 0;
@@ -1368,8 +1403,7 @@ private long partsFoundForPartitions(String dbName, String tableName,
         end = doTrace ? System.nanoTime() : 0;
         timingTrace(doTrace, queryText, start, end);
         query.closeAll();
-        for (Map.Entry<String, String[]> entry : extraColumnNameTypeParts
-            .entrySet()) {
+        for (Map.Entry<String, String[]> entry : extraColumnNameTypeParts.entrySet()) {
           Object[] row = new Object[IExtrapolatePartStatus.colStatNames.length + 2];
           String colName = entry.getKey();
           String colType = entry.getValue()[0];
@@ -1465,29 +1499,45 @@ private ColumnStatisticsObj prepareCSObj (Object[] row, int i) throws MetaExcept
 
     return params;
   }
-  
-  public List<ColumnStatistics> getPartitionStats(String dbName, String tableName,
-      List<String> partNames, List<String> colNames) throws MetaException {
+
+  public List<ColumnStatistics> getPartitionStats(final String dbName, final String tableName,
+      final List<String> partNames, List<String> colNames) throws MetaException {
     if (colNames.isEmpty() || partNames.isEmpty()) {
       return Lists.newArrayList();
     }
-    boolean doTrace = LOG.isDebugEnabled();
+    final boolean doTrace = LOG.isDebugEnabled();
     doDbSpecificInitializationsBeforeQuery();
-    long start = doTrace ? System.nanoTime() : 0;
-    String queryText = "select \"PARTITION_NAME\", " + STATS_COLLIST + " from \"PART_COL_STATS\""
-      + " where \"DB_NAME\" = ? and \"TABLE_NAME\" = ? and \"COLUMN_NAME\" in ("
-      + makeParams(colNames.size()) + ") AND \"PARTITION_NAME\" in ("
-      + makeParams(partNames.size()) + ") order by \"PARTITION_NAME\"";
+    final String queryText0 = "select \"PARTITION_NAME\", " + STATS_COLLIST + " from "
+      + " \"PART_COL_STATS\" where \"DB_NAME\" = ? and \"TABLE_NAME\" = ? and \"COLUMN_NAME\""
+      + "  in (%1$s) AND \"PARTITION_NAME\" in (%2$s) order by \"PARTITION_NAME\"";
+    Batchable<String, Object[]> b = new Batchable<String, Object[]>() {
+      public List<Object[]> run(final List<String> inputColNames) throws MetaException {
+        Batchable<String, Object[]> b2 = new Batchable<String, Object[]>() {
+          public List<Object[]> run(List<String> inputPartNames) throws MetaException {
+            String queryText = String.format(queryText0,
+                makeParams(inputColNames.size()), makeParams(inputPartNames.size()));
+            long start = doTrace ? System.nanoTime() : 0;
+            Query query = pm.newQuery("javax.jdo.query.SQL", queryText);
+            Object qResult = executeWithArray(query, prepareParams(
+                dbName, tableName, inputPartNames, inputColNames), queryText);
+            timingTrace(doTrace, queryText0, start, (doTrace ? System.nanoTime() : 0));
+            if (qResult == null) {
+              query.closeAll();
+              return Lists.newArrayList();
+            }
+            addQueryAfterUse(query);
+            return ensureList(qResult);
+          }
+        };
+        try {
+          return runBatched(partNames, b2);
+        } finally {
+          addQueryAfterUse(b2);
+        }
+      }
+    };
+    List<Object[]> list = runBatched(colNames, b);
 
-    Query query = pm.newQuery("javax.jdo.query.SQL", queryText);
-    Object qResult = executeWithArray(query, prepareParams(
-        dbName, tableName, partNames, colNames), queryText);
-    long queryTime = doTrace ? System.nanoTime() : 0;
-    if (qResult == null) {
-      query.closeAll();
-      return Lists.newArrayList();
-    }
-    List<Object[]> list = ensureList(qResult);
     List<ColumnStatistics> result = new ArrayList<ColumnStatistics>(
         Math.min(list.size(), partNames.size()));
     String lastPartName = null;
@@ -1506,9 +1556,7 @@ private ColumnStatisticsObj prepareCSObj (Object[] row, int i) throws MetaExcept
       from = i;
       Deadline.checkTimeout();
     }
-
-    timingTrace(doTrace, queryText, start, queryTime);
-    query.closeAll();
+    b.closeAllQueries();
     return result;
   }
 
@@ -1569,4 +1617,47 @@ private String makeParams(int size) {
       throw new MetaException("See previous errors; " + ex.getMessage());
     }
   }
+
+  private static abstract class Batchable<I, R> {
+    private List<Query> queries = null;
+    public abstract List<R> run(List<I> input) throws MetaException;
+    public void addQueryAfterUse(Query query) {
+      if (queries == null) {
+        queries = new ArrayList<Query>(1);
+      }
+      queries.add(query);
+    }
+    protected void addQueryAfterUse(Batchable<?, ?> b) {
+      if (b.queries == null) return;
+      if (queries == null) {
+        queries = new ArrayList<Query>(1);
+      }
+      queries.addAll(b.queries);
+    }
+    public void closeAllQueries() {
+      for (Query q : queries) {
+        try {
+          q.closeAll();
+        } catch (Throwable t) {
+          LOG.error("Failed to close a query", t);
+        }
+      }
+    }
+  }
+
+  private <I,R> List<R> runBatched(List<I> input, Batchable<I, R> runnable) throws MetaException {
+    if (batchSize == NO_BATCHING || batchSize >= input.size()) {
+      return runnable.run(input);
+    }
+    List<R> result = new ArrayList<R>(input.size());
+    for (int fromIndex = 0, toIndex = 0; toIndex < input.size(); fromIndex = toIndex) {
+      toIndex = Math.min(fromIndex + batchSize, input.size());
+      List<I> batchedInput = input.subList(fromIndex, toIndex);
+      List<R> batchedOutput = runnable.run(batchedInput);
+      if (batchedOutput != null) {
+        result.addAll(batchedOutput);
+      }
+    }
+    return result;
+  }
 }
-- 
1.7.9.5

