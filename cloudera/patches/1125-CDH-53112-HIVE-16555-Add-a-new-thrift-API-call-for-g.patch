From ee0524578f7351a3fb57b4b1e15739954519b196 Mon Sep 17 00:00:00 2001
From: Vihang Karajgaonkar <vihang@cloudera.com>
Date: Mon, 15 May 2017 14:13:49 -0700
Subject: [PATCH 1125/1164] CDH-53112 : HIVE-16555 : Add a new thrift API call
 for get_metastore_uuid

Change-Id: Iba6067c6ef83f79ae647d2b013fccd7ea936aa5d
---
 .../hcatalog/listener/DummyRawStoreFailEvent.java  |    7 +-
 .../hive/metastore/TestEmbeddedHiveMetaStore.java  |   17 +-
 .../hadoop/hive/metastore/TestHiveMetaStore.java   |   49 +
 .../hive/metastore/TestRemoteHiveMetaStore.java    |   11 +-
 .../hive/metastore/TestSetUGIOnOnlyClient.java     |    9 +-
 .../hive/metastore/TestSetUGIOnOnlyServer.java     |    9 +-
 metastore/if/hive_metastore.thrift                 |    3 +
 .../src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp |  278 +++
 .../src/gen/thrift/gen-cpp/ThriftHiveMetastore.h   |  123 ++
 .../ThriftHiveMetastore_server.skeleton.cpp        |    5 +
 .../hive/metastore/api/ThriftHiveMetastore.java    | 2305 +++++++++++++-------
 .../gen-php/metastore/ThriftHiveMetastore.php      |  198 ++
 .../hive_metastore/ThriftHiveMetastore-remote      |    7 +
 .../gen-py/hive_metastore/ThriftHiveMetastore.py   |  159 ++
 .../src/gen/thrift/gen-rb/thrift_hive_metastore.rb |   60 +
 .../hadoop/hive/metastore/HiveMetaStore.java       |   10 +
 .../hadoop/hive/metastore/HiveMetaStoreClient.java |    5 +
 .../hadoop/hive/metastore/IMetaStoreClient.java    |    8 +
 .../apache/hadoop/hive/metastore/ObjectStore.java  |   87 +
 .../org/apache/hadoop/hive/metastore/RawStore.java |    7 +
 .../metastore/model/MMetastoreDBProperties.java    |   56 +
 metastore/src/model/package.jdo                    |   18 +
 .../metastore/DummyRawStoreControlledCommit.java   |    5 +
 .../metastore/DummyRawStoreForJdoConnection.java   |    7 +-
 24 files changed, 2667 insertions(+), 776 deletions(-)
 create mode 100644 metastore/src/model/org/apache/hadoop/hive/metastore/model/MMetastoreDBProperties.java

diff --git a/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/DummyRawStoreFailEvent.java b/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/DummyRawStoreFailEvent.java
index a6ed09d..3cfe93f 100644
--- a/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/DummyRawStoreFailEvent.java
+++ b/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/DummyRawStoreFailEvent.java
@@ -832,4 +832,9 @@ public int getPartitionCount() throws MetaException {
   public int getDatabaseCount() throws MetaException {
     return objectStore.getDatabaseCount();
   }
-}
\ No newline at end of file
+
+  @Override
+  public String getMetastoreDbUuid() throws MetaException {
+    throw new MetaException("getMetastoreDbUuid is not implemented");
+  }
+}
diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestEmbeddedHiveMetaStore.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestEmbeddedHiveMetaStore.java
index b6b0e6e..8c0cda9 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestEmbeddedHiveMetaStore.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestEmbeddedHiveMetaStore.java
@@ -29,22 +29,27 @@ protected void setUp() throws Exception {
     hiveConf.setBoolean(
         HiveConf.ConfVars.HIVE_WAREHOUSE_SUBDIR_INHERIT_PERMS.varname, true);
     warehouse = new Warehouse(hiveConf);
+    client = createClient();
+  }
+
+  @Override
+  protected void tearDown() throws Exception {
     try {
-      client = new HiveMetaStoreClient(hiveConf, null);
+      super.tearDown();
+      client.close();
     } catch (Throwable e) {
-      System.err.println("Unable to open the metastore");
+      System.err.println("Unable to close metastore");
       System.err.println(StringUtils.stringifyException(e));
       throw new Exception(e);
     }
   }
 
   @Override
-  protected void tearDown() throws Exception {
+  protected HiveMetaStoreClient createClient() throws Exception {
     try {
-      super.tearDown();
-      client.close();
+      return new HiveMetaStoreClient(hiveConf);
     } catch (Throwable e) {
-      System.err.println("Unable to close metastore");
+      System.err.println("Unable to open the metastore");
       System.err.println(StringUtils.stringifyException(e));
       throw new Exception(e);
     }
diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java
index e47c744..ba59776 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java
@@ -30,6 +30,10 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 
 import junit.framework.TestCase;
 
@@ -97,6 +101,8 @@
 
   private static final int DEFAULT_LIMIT_PARTITION_REQUEST = 100;
 
+  protected abstract HiveMetaStoreClient createClient() throws Exception;
+
   @Override
   protected void setUp() throws Exception {
     hiveConf = new HiveConf(this.getClass());
@@ -108,6 +114,7 @@ protected void setUp() throws Exception {
     hiveConf.set("hive.key2", "http://www.example.com");
     hiveConf.set("hive.key3", "");
     hiveConf.set("hive.key4", "0");
+    hiveConf.set("datanucleus.autoCreateTables", "false");
 
     hiveConf.setIntVar(ConfVars.METASTORE_BATCH_RETRIEVE_MAX, 2);
     hiveConf.setIntVar(ConfVars.METASTORE_LIMIT_PARTITION_REQUEST, DEFAULT_LIMIT_PARTITION_REQUEST);
@@ -3180,4 +3187,46 @@ public void testValidateTableCols() throws Throwable {
       throw e;
     }
   }
+
+  public void testGetMetastoreUuid() throws Throwable {
+    String uuid = client.getMetastoreDbUuid();
+    assertNotNull(uuid);
+  }
+
+  public void testGetUUIDInParallel() throws Exception {
+    int numThreads = 5;
+    int parallelCalls = 10;
+    final int numAPICallsPerThread = 10;
+    ExecutorService executorService = Executors.newFixedThreadPool(numThreads);
+    List<Future<List<String>>> futures = new ArrayList<>();
+    for (int n = 0; n < parallelCalls; n++) {
+      futures.add(executorService.submit(new Callable<List<String>>() {
+        @Override
+        public List<String> call() throws Exception {
+          HiveMetaStoreClient testClient = new HiveMetaStoreClient(hiveConf);
+          List<String> uuids = new ArrayList<>(10);
+          for (int i = 0; i < numAPICallsPerThread; i++) {
+            String uuid = testClient.getMetastoreDbUuid();
+            uuids.add(uuid);
+          }
+          return uuids;
+        }
+      }));
+    }
+
+    String firstUUID = null;
+    List<String> allUuids = new ArrayList<String>();
+    for (Future<List<String>> future : futures) {
+      for (String uuid : future.get()) {
+        if (firstUUID == null) {
+          firstUUID = uuid;
+        } else {
+          assertEquals(firstUUID.toLowerCase(), uuid.toLowerCase());
+        }
+        allUuids.add(uuid);
+      }
+    }
+    int size = allUuids.size();
+    assertEquals(numAPICallsPerThread * parallelCalls, size);
+  }
 }
diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestRemoteHiveMetaStore.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestRemoteHiveMetaStore.java
index ef02968..878f913 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestRemoteHiveMetaStore.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestRemoteHiveMetaStore.java
@@ -25,7 +25,7 @@
 
 public class TestRemoteHiveMetaStore extends TestHiveMetaStore {
   private static boolean isServerStarted = false;
-  private static int port;
+  protected static int port;
 
   public TestRemoteHiveMetaStore() {
     super();
@@ -48,12 +48,13 @@ protected void setUp() throws Exception {
     isServerStarted = true;
 
     // This is default case with setugi off for both client and server
-    createClient(false);
+    client = createClient();
   }
 
-  protected void createClient(boolean setugi) throws Exception {
+  @Override
+  protected HiveMetaStoreClient createClient() throws Exception {
     hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS, "thrift://localhost:" + port);
-    hiveConf.setBoolVar(ConfVars.METASTORE_EXECUTE_SET_UGI,setugi);
-    client = new HiveMetaStoreClient(hiveConf);
+    hiveConf.setBoolVar(ConfVars.METASTORE_EXECUTE_SET_UGI, false);
+    return new HiveMetaStoreClient(hiveConf);
   }
 }
\ No newline at end of file
diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestSetUGIOnOnlyClient.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestSetUGIOnOnlyClient.java
index 29768c1..1a9abc9 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestSetUGIOnOnlyClient.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestSetUGIOnOnlyClient.java
@@ -18,11 +18,14 @@
 
 package org.apache.hadoop.hive.metastore;
 
+import org.apache.hadoop.hive.conf.HiveConf;
+
 public class TestSetUGIOnOnlyClient extends TestRemoteHiveMetaStore{
 
   @Override
-  protected void createClient(boolean setugi) throws Exception {
-    // turn it on for client.
-    super.createClient(true);
+  protected HiveMetaStoreClient createClient() throws Exception {
+    hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS, "thrift://localhost:" + port);
+    hiveConf.setBoolVar(HiveConf.ConfVars.METASTORE_EXECUTE_SET_UGI, true);
+    return new HiveMetaStoreClient(hiveConf);
   }
 }
diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestSetUGIOnOnlyServer.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestSetUGIOnOnlyServer.java
index 4a46f75..b45fd01 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestSetUGIOnOnlyServer.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestSetUGIOnOnlyServer.java
@@ -18,11 +18,14 @@
 
 package org.apache.hadoop.hive.metastore;
 
+import org.apache.hadoop.hive.conf.HiveConf;
+
 public class TestSetUGIOnOnlyServer extends TestSetUGIOnBothClientServer {
 
   @Override
-  protected void createClient(boolean setugi) throws Exception {
-    // It is turned on for both client and server because of super class. Turn it off for client.
-    super.createClient(false);
+  protected HiveMetaStoreClient createClient() throws Exception {
+    hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS, "thrift://localhost:" + port);
+    hiveConf.setBoolVar(HiveConf.ConfVars.METASTORE_EXECUTE_SET_UGI, false);
+    return new HiveMetaStoreClient(hiveConf);
   }
 }
diff --git a/metastore/if/hive_metastore.thrift b/metastore/if/hive_metastore.thrift
index 086359b..2b4e29d 100755
--- a/metastore/if/hive_metastore.thrift
+++ b/metastore/if/hive_metastore.thrift
@@ -1187,6 +1187,9 @@ service ThriftHiveMetastore extends fb303.FacebookService
   NotificationEventResponse get_next_notification(1:NotificationEventRequest rqst) 
   CurrentNotificationEventId get_current_notificationEventId()
   FireEventResponse fire_listener_event(1:FireEventRequest rqst)
+
+  // Metastore DB properties
+  string get_metastore_db_uuid() throws (1:MetaException o1)
 }
 
 // * Note about the DDL_TIME: When creating or altering a table or a partition,
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
index 2c6a269..b170d77 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
@@ -28937,6 +28937,167 @@ uint32_t ThriftHiveMetastore_fire_listener_event_presult::read(::apache::thrift:
   return xfer;
 }
 
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    xfer += iprot->skip(ftype);
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_metastore_db_uuid_args");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_metastore_db_uuid_pargs");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->success);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_metastore_db_uuid_result");
+
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
+    xfer += oprot->writeString(this->success);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString((*(this->success)));
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
 void ThriftHiveMetastoreClient::getMetaConf(std::string& _return, const std::string& key)
 {
   send_getMetaConf(key);
@@ -36956,6 +37117,66 @@ void ThriftHiveMetastoreClient::recv_fire_listener_event(FireEventResponse& _ret
   throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "fire_listener_event failed: unknown result");
 }
 
+void ThriftHiveMetastoreClient::get_metastore_db_uuid(std::string& _return)
+{
+  send_get_metastore_db_uuid();
+  recv_get_metastore_db_uuid(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_metastore_db_uuid()
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_metastore_db_uuid", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_metastore_db_uuid_pargs args;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_metastore_db_uuid(std::string& _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_metastore_db_uuid") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_metastore_db_uuid_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_metastore_db_uuid failed: unknown result");
+}
+
 bool ThriftHiveMetastoreProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
   ProcessMap::iterator pfn;
   pfn = processMap_.find(fname);
@@ -44434,6 +44655,63 @@ void ThriftHiveMetastoreProcessor::process_fire_listener_event(int32_t seqid, ::
   }
 }
 
+void ThriftHiveMetastoreProcessor::process_get_metastore_db_uuid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+{
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_metastore_db_uuid", callContext);
+  }
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_metastore_db_uuid");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_metastore_db_uuid");
+  }
+
+  ThriftHiveMetastore_get_metastore_db_uuid_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_metastore_db_uuid", bytes);
+  }
+
+  ThriftHiveMetastore_get_metastore_db_uuid_result result;
+  try {
+    iface_->get_metastore_db_uuid(result.success);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_metastore_db_uuid");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("get_metastore_db_uuid", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
+    return;
+  }
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_metastore_db_uuid");
+  }
+
+  oprot->writeMessageBegin("get_metastore_db_uuid", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_metastore_db_uuid", bytes);
+  }
+}
+
 ::boost::shared_ptr< ::apache::thrift::TProcessor > ThriftHiveMetastoreProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
   ::apache::thrift::ReleaseHandler< ThriftHiveMetastoreIfFactory > cleanup(handlerFactory_);
   ::boost::shared_ptr< ThriftHiveMetastoreIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
index 5a1467a..a245f8c 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
@@ -141,6 +141,7 @@ class ThriftHiveMetastoreIf : virtual public  ::facebook::fb303::FacebookService
   virtual void get_next_notification(NotificationEventResponse& _return, const NotificationEventRequest& rqst) = 0;
   virtual void get_current_notificationEventId(CurrentNotificationEventId& _return) = 0;
   virtual void fire_listener_event(FireEventResponse& _return, const FireEventRequest& rqst) = 0;
+  virtual void get_metastore_db_uuid(std::string& _return) = 0;
 };
 
 class ThriftHiveMetastoreIfFactory : virtual public  ::facebook::fb303::FacebookServiceIfFactory {
@@ -568,6 +569,9 @@ class ThriftHiveMetastoreNull : virtual public ThriftHiveMetastoreIf , virtual p
   void fire_listener_event(FireEventResponse& /* _return */, const FireEventRequest& /* rqst */) {
     return;
   }
+  void get_metastore_db_uuid(std::string& /* _return */) {
+    return;
+  }
 };
 
 typedef struct _ThriftHiveMetastore_getMetaConf_args__isset {
@@ -17645,6 +17649,110 @@ class ThriftHiveMetastore_fire_listener_event_presult {
 
 };
 
+
+class ThriftHiveMetastore_get_metastore_db_uuid_args {
+ public:
+
+  ThriftHiveMetastore_get_metastore_db_uuid_args() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_metastore_db_uuid_args() throw() {}
+
+
+  bool operator == (const ThriftHiveMetastore_get_metastore_db_uuid_args & /* rhs */) const
+  {
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_metastore_db_uuid_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_metastore_db_uuid_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_get_metastore_db_uuid_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_metastore_db_uuid_pargs() throw() {}
+
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_metastore_db_uuid_result__isset {
+  _ThriftHiveMetastore_get_metastore_db_uuid_result__isset() : success(false), o1(false) {}
+  bool success;
+  bool o1;
+} _ThriftHiveMetastore_get_metastore_db_uuid_result__isset;
+
+class ThriftHiveMetastore_get_metastore_db_uuid_result {
+ public:
+
+  ThriftHiveMetastore_get_metastore_db_uuid_result() : success() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_metastore_db_uuid_result() throw() {}
+
+  std::string success;
+  MetaException o1;
+
+  _ThriftHiveMetastore_get_metastore_db_uuid_result__isset __isset;
+
+  void __set_success(const std::string& val) {
+    success = val;
+  }
+
+  void __set_o1(const MetaException& val) {
+    o1 = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_get_metastore_db_uuid_result & rhs) const
+  {
+    if (!(success == rhs.success))
+      return false;
+    if (!(o1 == rhs.o1))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_metastore_db_uuid_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_metastore_db_uuid_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_metastore_db_uuid_presult__isset {
+  _ThriftHiveMetastore_get_metastore_db_uuid_presult__isset() : success(false), o1(false) {}
+  bool success;
+  bool o1;
+} _ThriftHiveMetastore_get_metastore_db_uuid_presult__isset;
+
+class ThriftHiveMetastore_get_metastore_db_uuid_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_metastore_db_uuid_presult() throw() {}
+
+  std::string* success;
+  MetaException o1;
+
+  _ThriftHiveMetastore_get_metastore_db_uuid_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
 class ThriftHiveMetastoreClient : virtual public ThriftHiveMetastoreIf, public  ::facebook::fb303::FacebookServiceClient {
  public:
   ThriftHiveMetastoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
@@ -18032,6 +18140,9 @@ class ThriftHiveMetastoreClient : virtual public ThriftHiveMetastoreIf, public
   void fire_listener_event(FireEventResponse& _return, const FireEventRequest& rqst);
   void send_fire_listener_event(const FireEventRequest& rqst);
   void recv_fire_listener_event(FireEventResponse& _return);
+  void get_metastore_db_uuid(std::string& _return);
+  void send_get_metastore_db_uuid();
+  void recv_get_metastore_db_uuid(std::string& _return);
 };
 
 class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceProcessor {
@@ -18167,6 +18278,7 @@ class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceP
   void process_get_next_notification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_current_notificationEventId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_fire_listener_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_get_metastore_db_uuid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  public:
   ThriftHiveMetastoreProcessor(boost::shared_ptr<ThriftHiveMetastoreIf> iface) :
      ::facebook::fb303::FacebookServiceProcessor(iface),
@@ -18296,6 +18408,7 @@ class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceP
     processMap_["get_next_notification"] = &ThriftHiveMetastoreProcessor::process_get_next_notification;
     processMap_["get_current_notificationEventId"] = &ThriftHiveMetastoreProcessor::process_get_current_notificationEventId;
     processMap_["fire_listener_event"] = &ThriftHiveMetastoreProcessor::process_fire_listener_event;
+    processMap_["get_metastore_db_uuid"] = &ThriftHiveMetastoreProcessor::process_get_metastore_db_uuid;
   }
 
   virtual ~ThriftHiveMetastoreProcessor() {}
@@ -19530,6 +19643,16 @@ class ThriftHiveMetastoreMultiface : virtual public ThriftHiveMetastoreIf, publi
     return;
   }
 
+  void get_metastore_db_uuid(std::string& _return) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->get_metastore_db_uuid(_return);
+    }
+    ifaces_[i]->get_metastore_db_uuid(_return);
+    return;
+  }
+
 };
 
 }}} // namespace
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
index 867d0ac..eb7d7c6 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
@@ -647,6 +647,11 @@ class ThriftHiveMetastoreHandler : virtual public ThriftHiveMetastoreIf {
     printf("fire_listener_event\n");
   }
 
+  void get_metastore_db_uuid(std::string& _return) {
+    // Your implementation goes here
+    printf("get_metastore_db_uuid\n");
+  }
+
 };
 
 int main(int argc, char **argv) {
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
index a17eed6..1ec593b 100644
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
@@ -288,6 +288,8 @@
 
     public FireEventResponse fire_listener_event(FireEventRequest rqst) throws org.apache.thrift.TException;
 
+    public String get_metastore_db_uuid() throws MetaException, org.apache.thrift.TException;
+
   }
 
   public interface AsyncIface extends com.facebook.fb303.FacebookService .AsyncIface {
@@ -542,6 +544,8 @@
 
     public void fire_listener_event(FireEventRequest rqst, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fire_listener_event_call> resultHandler) throws org.apache.thrift.TException;
 
+    public void get_metastore_db_uuid(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_metastore_db_uuid_call> resultHandler) throws org.apache.thrift.TException;
+
   }
 
   public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface {
@@ -4260,6 +4264,31 @@ public FireEventResponse recv_fire_listener_event() throws org.apache.thrift.TEx
       throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fire_listener_event failed: unknown result");
     }
 
+    public String get_metastore_db_uuid() throws MetaException, org.apache.thrift.TException
+    {
+      send_get_metastore_db_uuid();
+      return recv_get_metastore_db_uuid();
+    }
+
+    public void send_get_metastore_db_uuid() throws org.apache.thrift.TException
+    {
+      get_metastore_db_uuid_args args = new get_metastore_db_uuid_args();
+      sendBase("get_metastore_db_uuid", args);
+    }
+
+    public String recv_get_metastore_db_uuid() throws MetaException, org.apache.thrift.TException
+    {
+      get_metastore_db_uuid_result result = new get_metastore_db_uuid_result();
+      receiveBase(result, "get_metastore_db_uuid");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      if (result.o1 != null) {
+        throw result.o1;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_metastore_db_uuid failed: unknown result");
+    }
+
   }
   public static class AsyncClient extends com.facebook.fb303.FacebookService.AsyncClient implements AsyncIface {
     public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
@@ -8743,6 +8772,35 @@ public FireEventResponse getResult() throws org.apache.thrift.TException {
       }
     }
 
+    public void get_metastore_db_uuid(org.apache.thrift.async.AsyncMethodCallback<get_metastore_db_uuid_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      get_metastore_db_uuid_call method_call = new get_metastore_db_uuid_call(resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class get_metastore_db_uuid_call extends org.apache.thrift.async.TAsyncMethodCall {
+      public get_metastore_db_uuid_call(org.apache.thrift.async.AsyncMethodCallback<get_metastore_db_uuid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_metastore_db_uuid", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        get_metastore_db_uuid_args args = new get_metastore_db_uuid_args();
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public String getResult() throws MetaException, org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_get_metastore_db_uuid();
+      }
+    }
+
   }
 
   public static class Processor<I extends Iface> extends com.facebook.fb303.FacebookService.Processor<I> implements org.apache.thrift.TProcessor {
@@ -8881,6 +8939,7 @@ protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ?
       processMap.put("get_next_notification", new get_next_notification());
       processMap.put("get_current_notificationEventId", new get_current_notificationEventId());
       processMap.put("fire_listener_event", new fire_listener_event());
+      processMap.put("get_metastore_db_uuid", new get_metastore_db_uuid());
       return processMap;
     }
 
@@ -12133,6 +12192,30 @@ public fire_listener_event_result getResult(I iface, fire_listener_event_args ar
       }
     }
 
+    public static class get_metastore_db_uuid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_metastore_db_uuid_args> {
+      public get_metastore_db_uuid() {
+        super("get_metastore_db_uuid");
+      }
+
+      public get_metastore_db_uuid_args getEmptyArgsInstance() {
+        return new get_metastore_db_uuid_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public get_metastore_db_uuid_result getResult(I iface, get_metastore_db_uuid_args args) throws org.apache.thrift.TException {
+        get_metastore_db_uuid_result result = new get_metastore_db_uuid_result();
+        try {
+          result.success = iface.get_metastore_db_uuid();
+        } catch (MetaException o1) {
+          result.o1 = o1;
+        }
+        return result;
+      }
+    }
+
   }
 
   public static class getMetaConf_args implements org.apache.thrift.TBase<getMetaConf_args, getMetaConf_args._Fields>, java.io.Serializable, Cloneable   {
@@ -141087,14 +141170,740 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("heartbeat_txn_range_args(");
+      StringBuilder sb = new StringBuilder("heartbeat_txn_range_args(");
+      boolean first = true;
+
+      sb.append("txns:");
+      if (this.txns == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.txns);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+      if (txns != null) {
+        txns.validate();
+      }
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class heartbeat_txn_range_argsStandardSchemeFactory implements SchemeFactory {
+      public heartbeat_txn_range_argsStandardScheme getScheme() {
+        return new heartbeat_txn_range_argsStandardScheme();
+      }
+    }
+
+    private static class heartbeat_txn_range_argsStandardScheme extends StandardScheme<heartbeat_txn_range_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_txn_range_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // TXNS
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.txns = new HeartbeatTxnRangeRequest();
+                struct.txns.read(iprot);
+                struct.setTxnsIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, heartbeat_txn_range_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.txns != null) {
+          oprot.writeFieldBegin(TXNS_FIELD_DESC);
+          struct.txns.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class heartbeat_txn_range_argsTupleSchemeFactory implements SchemeFactory {
+      public heartbeat_txn_range_argsTupleScheme getScheme() {
+        return new heartbeat_txn_range_argsTupleScheme();
+      }
+    }
+
+    private static class heartbeat_txn_range_argsTupleScheme extends TupleScheme<heartbeat_txn_range_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, heartbeat_txn_range_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetTxns()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetTxns()) {
+          struct.txns.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, heartbeat_txn_range_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.txns = new HeartbeatTxnRangeRequest();
+          struct.txns.read(iprot);
+          struct.setTxnsIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class heartbeat_txn_range_result implements org.apache.thrift.TBase<heartbeat_txn_range_result, heartbeat_txn_range_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartbeat_txn_range_result");
+
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new heartbeat_txn_range_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new heartbeat_txn_range_resultTupleSchemeFactory());
+    }
+
+    private HeartbeatTxnRangeResponse success; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HeartbeatTxnRangeResponse.class)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartbeat_txn_range_result.class, metaDataMap);
+    }
+
+    public heartbeat_txn_range_result() {
+    }
+
+    public heartbeat_txn_range_result(
+      HeartbeatTxnRangeResponse success)
+    {
+      this();
+      this.success = success;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public heartbeat_txn_range_result(heartbeat_txn_range_result other) {
+      if (other.isSetSuccess()) {
+        this.success = new HeartbeatTxnRangeResponse(other.success);
+      }
+    }
+
+    public heartbeat_txn_range_result deepCopy() {
+      return new heartbeat_txn_range_result(this);
+    }
+
+    @Override
+    public void clear() {
+      this.success = null;
+    }
+
+    public HeartbeatTxnRangeResponse getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(HeartbeatTxnRangeResponse success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((HeartbeatTxnRangeResponse)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof heartbeat_txn_range_result)
+        return this.equals((heartbeat_txn_range_result)that);
+      return false;
+    }
+
+    public boolean equals(heartbeat_txn_range_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(heartbeat_txn_range_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      heartbeat_txn_range_result typedOther = (heartbeat_txn_range_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("heartbeat_txn_range_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+      if (success != null) {
+        success.validate();
+      }
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class heartbeat_txn_range_resultStandardSchemeFactory implements SchemeFactory {
+      public heartbeat_txn_range_resultStandardScheme getScheme() {
+        return new heartbeat_txn_range_resultStandardScheme();
+      }
+    }
+
+    private static class heartbeat_txn_range_resultStandardScheme extends StandardScheme<heartbeat_txn_range_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_txn_range_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.success = new HeartbeatTxnRangeResponse();
+                struct.success.read(iprot);
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, heartbeat_txn_range_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          struct.success.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class heartbeat_txn_range_resultTupleSchemeFactory implements SchemeFactory {
+      public heartbeat_txn_range_resultTupleScheme getScheme() {
+        return new heartbeat_txn_range_resultTupleScheme();
+      }
+    }
+
+    private static class heartbeat_txn_range_resultTupleScheme extends TupleScheme<heartbeat_txn_range_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, heartbeat_txn_range_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetSuccess()) {
+          struct.success.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, heartbeat_txn_range_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.success = new HeartbeatTxnRangeResponse();
+          struct.success.read(iprot);
+          struct.setSuccessIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class compact_args implements org.apache.thrift.TBase<compact_args, compact_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compact_args");
+
+    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField("rqst", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new compact_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new compact_argsTupleSchemeFactory());
+    }
+
+    private CompactionRequest rqst; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      RQST((short)1, "rqst");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // RQST
+            return RQST;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.RQST, new org.apache.thrift.meta_data.FieldMetaData("rqst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompactionRequest.class)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compact_args.class, metaDataMap);
+    }
+
+    public compact_args() {
+    }
+
+    public compact_args(
+      CompactionRequest rqst)
+    {
+      this();
+      this.rqst = rqst;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public compact_args(compact_args other) {
+      if (other.isSetRqst()) {
+        this.rqst = new CompactionRequest(other.rqst);
+      }
+    }
+
+    public compact_args deepCopy() {
+      return new compact_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.rqst = null;
+    }
+
+    public CompactionRequest getRqst() {
+      return this.rqst;
+    }
+
+    public void setRqst(CompactionRequest rqst) {
+      this.rqst = rqst;
+    }
+
+    public void unsetRqst() {
+      this.rqst = null;
+    }
+
+    /** Returns true if field rqst is set (has been assigned a value) and false otherwise */
+    public boolean isSetRqst() {
+      return this.rqst != null;
+    }
+
+    public void setRqstIsSet(boolean value) {
+      if (!value) {
+        this.rqst = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case RQST:
+        if (value == null) {
+          unsetRqst();
+        } else {
+          setRqst((CompactionRequest)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case RQST:
+        return getRqst();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case RQST:
+        return isSetRqst();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof compact_args)
+        return this.equals((compact_args)that);
+      return false;
+    }
+
+    public boolean equals(compact_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_rqst = true && this.isSetRqst();
+      boolean that_present_rqst = true && that.isSetRqst();
+      if (this_present_rqst || that_present_rqst) {
+        if (!(this_present_rqst && that_present_rqst))
+          return false;
+        if (!this.rqst.equals(that.rqst))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_rqst = true && (isSetRqst());
+      builder.append(present_rqst);
+      if (present_rqst)
+        builder.append(rqst);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(compact_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      compact_args typedOther = (compact_args)other;
+
+      lastComparison = Boolean.valueOf(isSetRqst()).compareTo(typedOther.isSetRqst());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetRqst()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rqst, typedOther.rqst);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("compact_args(");
       boolean first = true;
 
-      sb.append("txns:");
-      if (this.txns == null) {
+      sb.append("rqst:");
+      if (this.rqst == null) {
         sb.append("null");
       } else {
-        sb.append(this.txns);
+        sb.append(this.rqst);
       }
       first = false;
       sb.append(")");
@@ -141104,8 +141913,8 @@ public String toString() {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
-      if (txns != null) {
-        txns.validate();
+      if (rqst != null) {
+        rqst.validate();
       }
     }
 
@@ -141125,15 +141934,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class heartbeat_txn_range_argsStandardSchemeFactory implements SchemeFactory {
-      public heartbeat_txn_range_argsStandardScheme getScheme() {
-        return new heartbeat_txn_range_argsStandardScheme();
+    private static class compact_argsStandardSchemeFactory implements SchemeFactory {
+      public compact_argsStandardScheme getScheme() {
+        return new compact_argsStandardScheme();
       }
     }
 
-    private static class heartbeat_txn_range_argsStandardScheme extends StandardScheme<heartbeat_txn_range_args> {
+    private static class compact_argsStandardScheme extends StandardScheme<compact_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_txn_range_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, compact_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -141143,11 +141952,11 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_txn_range
             break;
           }
           switch (schemeField.id) {
-            case 1: // TXNS
+            case 1: // RQST
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.txns = new HeartbeatTxnRangeRequest();
-                struct.txns.read(iprot);
-                struct.setTxnsIsSet(true);
+                struct.rqst = new CompactionRequest();
+                struct.rqst.read(iprot);
+                struct.setRqstIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -141161,13 +141970,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_txn_range
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, heartbeat_txn_range_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, compact_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.txns != null) {
-          oprot.writeFieldBegin(TXNS_FIELD_DESC);
-          struct.txns.write(oprot);
+        if (struct.rqst != null) {
+          oprot.writeFieldBegin(RQST_FIELD_DESC);
+          struct.rqst.write(oprot);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -141176,57 +141985,55 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, heartbeat_txn_rang
 
     }
 
-    private static class heartbeat_txn_range_argsTupleSchemeFactory implements SchemeFactory {
-      public heartbeat_txn_range_argsTupleScheme getScheme() {
-        return new heartbeat_txn_range_argsTupleScheme();
+    private static class compact_argsTupleSchemeFactory implements SchemeFactory {
+      public compact_argsTupleScheme getScheme() {
+        return new compact_argsTupleScheme();
       }
     }
 
-    private static class heartbeat_txn_range_argsTupleScheme extends TupleScheme<heartbeat_txn_range_args> {
+    private static class compact_argsTupleScheme extends TupleScheme<compact_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, heartbeat_txn_range_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, compact_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetTxns()) {
+        if (struct.isSetRqst()) {
           optionals.set(0);
         }
         oprot.writeBitSet(optionals, 1);
-        if (struct.isSetTxns()) {
-          struct.txns.write(oprot);
+        if (struct.isSetRqst()) {
+          struct.rqst.write(oprot);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, heartbeat_txn_range_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, compact_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.txns = new HeartbeatTxnRangeRequest();
-          struct.txns.read(iprot);
-          struct.setTxnsIsSet(true);
+          struct.rqst = new CompactionRequest();
+          struct.rqst.read(iprot);
+          struct.setRqstIsSet(true);
         }
       }
     }
 
   }
 
-  public static class heartbeat_txn_range_result implements org.apache.thrift.TBase<heartbeat_txn_range_result, heartbeat_txn_range_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartbeat_txn_range_result");
+  public static class compact_result implements org.apache.thrift.TBase<compact_result, compact_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compact_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new heartbeat_txn_range_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new heartbeat_txn_range_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new compact_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new compact_resultTupleSchemeFactory());
     }
 
-    private HeartbeatTxnRangeResponse success; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success");
+;
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -141241,8 +142048,6 @@ public void read(org.apache.thrift.protocol.TProtocol prot, heartbeat_txn_range_
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
           default:
             return null;
         }
@@ -141281,86 +142086,37 @@ public String getFieldName() {
         return _fieldName;
       }
     }
-
-    // isset id assignments
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HeartbeatTxnRangeResponse.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartbeat_txn_range_result.class, metaDataMap);
-    }
-
-    public heartbeat_txn_range_result() {
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compact_result.class, metaDataMap);
     }
 
-    public heartbeat_txn_range_result(
-      HeartbeatTxnRangeResponse success)
-    {
-      this();
-      this.success = success;
+    public compact_result() {
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public heartbeat_txn_range_result(heartbeat_txn_range_result other) {
-      if (other.isSetSuccess()) {
-        this.success = new HeartbeatTxnRangeResponse(other.success);
-      }
+    public compact_result(compact_result other) {
     }
 
-    public heartbeat_txn_range_result deepCopy() {
-      return new heartbeat_txn_range_result(this);
+    public compact_result deepCopy() {
+      return new compact_result(this);
     }
 
     @Override
     public void clear() {
-      this.success = null;
-    }
-
-    public HeartbeatTxnRangeResponse getSuccess() {
-      return this.success;
-    }
-
-    public void setSuccess(HeartbeatTxnRangeResponse success) {
-      this.success = success;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((HeartbeatTxnRangeResponse)value);
-        }
-        break;
-
       }
     }
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
       }
       throw new IllegalStateException();
     }
@@ -141372,8 +142128,6 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
       }
       throw new IllegalStateException();
     }
@@ -141382,24 +142136,15 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof heartbeat_txn_range_result)
-        return this.equals((heartbeat_txn_range_result)that);
+      if (that instanceof compact_result)
+        return this.equals((compact_result)that);
       return false;
     }
 
-    public boolean equals(heartbeat_txn_range_result that) {
+    public boolean equals(compact_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
       return true;
     }
 
@@ -141407,32 +142152,17 @@ public boolean equals(heartbeat_txn_range_result that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
-      if (present_success)
-        builder.append(success);
-
       return builder.toHashCode();
     }
 
-    public int compareTo(heartbeat_txn_range_result other) {
+    public int compareTo(compact_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      heartbeat_txn_range_result typedOther = (heartbeat_txn_range_result)other;
+      compact_result typedOther = (compact_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -141450,16 +142180,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("heartbeat_txn_range_result(");
+      StringBuilder sb = new StringBuilder("compact_result(");
       boolean first = true;
 
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -141467,9 +142190,6 @@ public String toString() {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
-      if (success != null) {
-        success.validate();
-      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -141488,15 +142208,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class heartbeat_txn_range_resultStandardSchemeFactory implements SchemeFactory {
-      public heartbeat_txn_range_resultStandardScheme getScheme() {
-        return new heartbeat_txn_range_resultStandardScheme();
+    private static class compact_resultStandardSchemeFactory implements SchemeFactory {
+      public compact_resultStandardScheme getScheme() {
+        return new compact_resultStandardScheme();
       }
     }
 
-    private static class heartbeat_txn_range_resultStandardScheme extends StandardScheme<heartbeat_txn_range_result> {
+    private static class compact_resultStandardScheme extends StandardScheme<compact_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_txn_range_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, compact_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -141506,15 +142226,6 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_txn_range
             break;
           }
           switch (schemeField.id) {
-            case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.success = new HeartbeatTxnRangeResponse();
-                struct.success.read(iprot);
-                struct.setSuccessIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -141524,68 +142235,49 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_txn_range
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, heartbeat_txn_range_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, compact_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.success != null) {
-          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          struct.success.write(oprot);
-          oprot.writeFieldEnd();
-        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class heartbeat_txn_range_resultTupleSchemeFactory implements SchemeFactory {
-      public heartbeat_txn_range_resultTupleScheme getScheme() {
-        return new heartbeat_txn_range_resultTupleScheme();
+    private static class compact_resultTupleSchemeFactory implements SchemeFactory {
+      public compact_resultTupleScheme getScheme() {
+        return new compact_resultTupleScheme();
       }
     }
 
-    private static class heartbeat_txn_range_resultTupleScheme extends TupleScheme<heartbeat_txn_range_result> {
+    private static class compact_resultTupleScheme extends TupleScheme<compact_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, heartbeat_txn_range_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, compact_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetSuccess()) {
-          optionals.set(0);
-        }
-        oprot.writeBitSet(optionals, 1);
-        if (struct.isSetSuccess()) {
-          struct.success.write(oprot);
-        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, heartbeat_txn_range_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, compact_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(1);
-        if (incoming.get(0)) {
-          struct.success = new HeartbeatTxnRangeResponse();
-          struct.success.read(iprot);
-          struct.setSuccessIsSet(true);
-        }
       }
     }
 
   }
 
-  public static class compact_args implements org.apache.thrift.TBase<compact_args, compact_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compact_args");
+  public static class show_compact_args implements org.apache.thrift.TBase<show_compact_args, show_compact_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("show_compact_args");
 
     private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField("rqst", org.apache.thrift.protocol.TType.STRUCT, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new compact_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new compact_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new show_compact_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new show_compact_argsTupleSchemeFactory());
     }
 
-    private CompactionRequest rqst; // required
+    private ShowCompactRequest rqst; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
@@ -141650,16 +142342,16 @@ public String getFieldName() {
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.RQST, new org.apache.thrift.meta_data.FieldMetaData("rqst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompactionRequest.class)));
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShowCompactRequest.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compact_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(show_compact_args.class, metaDataMap);
     }
 
-    public compact_args() {
+    public show_compact_args() {
     }
 
-    public compact_args(
-      CompactionRequest rqst)
+    public show_compact_args(
+      ShowCompactRequest rqst)
     {
       this();
       this.rqst = rqst;
@@ -141668,14 +142360,14 @@ public compact_args(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public compact_args(compact_args other) {
+    public show_compact_args(show_compact_args other) {
       if (other.isSetRqst()) {
-        this.rqst = new CompactionRequest(other.rqst);
+        this.rqst = new ShowCompactRequest(other.rqst);
       }
     }
 
-    public compact_args deepCopy() {
-      return new compact_args(this);
+    public show_compact_args deepCopy() {
+      return new show_compact_args(this);
     }
 
     @Override
@@ -141683,11 +142375,11 @@ public void clear() {
       this.rqst = null;
     }
 
-    public CompactionRequest getRqst() {
+    public ShowCompactRequest getRqst() {
       return this.rqst;
     }
 
-    public void setRqst(CompactionRequest rqst) {
+    public void setRqst(ShowCompactRequest rqst) {
       this.rqst = rqst;
     }
 
@@ -141712,7 +142404,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetRqst();
         } else {
-          setRqst((CompactionRequest)value);
+          setRqst((ShowCompactRequest)value);
         }
         break;
 
@@ -141745,12 +142437,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof compact_args)
-        return this.equals((compact_args)that);
+      if (that instanceof show_compact_args)
+        return this.equals((show_compact_args)that);
       return false;
     }
 
-    public boolean equals(compact_args that) {
+    public boolean equals(show_compact_args that) {
       if (that == null)
         return false;
 
@@ -141778,13 +142470,13 @@ public int hashCode() {
       return builder.toHashCode();
     }
 
-    public int compareTo(compact_args other) {
+    public int compareTo(show_compact_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      compact_args typedOther = (compact_args)other;
+      show_compact_args typedOther = (show_compact_args)other;
 
       lastComparison = Boolean.valueOf(isSetRqst()).compareTo(typedOther.isSetRqst());
       if (lastComparison != 0) {
@@ -141813,7 +142505,7 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("compact_args(");
+      StringBuilder sb = new StringBuilder("show_compact_args(");
       boolean first = true;
 
       sb.append("rqst:");
@@ -141851,15 +142543,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class compact_argsStandardSchemeFactory implements SchemeFactory {
-      public compact_argsStandardScheme getScheme() {
-        return new compact_argsStandardScheme();
+    private static class show_compact_argsStandardSchemeFactory implements SchemeFactory {
+      public show_compact_argsStandardScheme getScheme() {
+        return new show_compact_argsStandardScheme();
       }
     }
 
-    private static class compact_argsStandardScheme extends StandardScheme<compact_args> {
+    private static class show_compact_argsStandardScheme extends StandardScheme<show_compact_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, compact_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, show_compact_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -141871,7 +142563,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, compact_args struct
           switch (schemeField.id) {
             case 1: // RQST
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.rqst = new CompactionRequest();
+                struct.rqst = new ShowCompactRequest();
                 struct.rqst.read(iprot);
                 struct.setRqstIsSet(true);
               } else { 
@@ -141887,7 +142579,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, compact_args struct
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, compact_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, show_compact_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -141902,16 +142594,16 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, compact_args struc
 
     }
 
-    private static class compact_argsTupleSchemeFactory implements SchemeFactory {
-      public compact_argsTupleScheme getScheme() {
-        return new compact_argsTupleScheme();
+    private static class show_compact_argsTupleSchemeFactory implements SchemeFactory {
+      public show_compact_argsTupleScheme getScheme() {
+        return new show_compact_argsTupleScheme();
       }
     }
 
-    private static class compact_argsTupleScheme extends TupleScheme<compact_args> {
+    private static class show_compact_argsTupleScheme extends TupleScheme<show_compact_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, compact_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, show_compact_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetRqst()) {
@@ -141924,11 +142616,11 @@ public void write(org.apache.thrift.protocol.TProtocol prot, compact_args struct
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, compact_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, show_compact_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.rqst = new CompactionRequest();
+          struct.rqst = new ShowCompactRequest();
           struct.rqst.read(iprot);
           struct.setRqstIsSet(true);
         }
@@ -141937,20 +142629,22 @@ public void read(org.apache.thrift.protocol.TProtocol prot, compact_args struct)
 
   }
 
-  public static class compact_result implements org.apache.thrift.TBase<compact_result, compact_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compact_result");
+  public static class show_compact_result implements org.apache.thrift.TBase<show_compact_result, show_compact_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("show_compact_result");
 
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new compact_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new compact_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new show_compact_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new show_compact_resultTupleSchemeFactory());
     }
 
+    private ShowCompactResponse success; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-;
+      SUCCESS((short)0, "success");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -141965,6 +142659,8 @@ public void read(org.apache.thrift.protocol.TProtocol prot, compact_args struct)
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
           default:
             return null;
         }
@@ -142003,37 +142699,86 @@ public String getFieldName() {
         return _fieldName;
       }
     }
+
+    // isset id assignments
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShowCompactResponse.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compact_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(show_compact_result.class, metaDataMap);
     }
 
-    public compact_result() {
+    public show_compact_result() {
+    }
+
+    public show_compact_result(
+      ShowCompactResponse success)
+    {
+      this();
+      this.success = success;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public compact_result(compact_result other) {
+    public show_compact_result(show_compact_result other) {
+      if (other.isSetSuccess()) {
+        this.success = new ShowCompactResponse(other.success);
+      }
     }
 
-    public compact_result deepCopy() {
-      return new compact_result(this);
+    public show_compact_result deepCopy() {
+      return new show_compact_result(this);
     }
 
     @Override
     public void clear() {
+      this.success = null;
+    }
+
+    public ShowCompactResponse getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(ShowCompactResponse success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((ShowCompactResponse)value);
+        }
+        break;
+
       }
     }
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
       }
       throw new IllegalStateException();
     }
@@ -142045,6 +142790,8 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
       }
       throw new IllegalStateException();
     }
@@ -142053,15 +142800,24 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof compact_result)
-        return this.equals((compact_result)that);
+      if (that instanceof show_compact_result)
+        return this.equals((show_compact_result)that);
       return false;
     }
 
-    public boolean equals(compact_result that) {
+    public boolean equals(show_compact_result that) {
       if (that == null)
         return false;
 
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
       return true;
     }
 
@@ -142069,17 +142825,32 @@ public boolean equals(compact_result that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
       return builder.toHashCode();
     }
 
-    public int compareTo(compact_result other) {
+    public int compareTo(show_compact_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      compact_result typedOther = (compact_result)other;
+      show_compact_result typedOther = (show_compact_result)other;
 
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       return 0;
     }
 
@@ -142097,9 +142868,16 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("compact_result(");
+      StringBuilder sb = new StringBuilder("show_compact_result(");
       boolean first = true;
 
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -142107,6 +142885,9 @@ public String toString() {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
+      if (success != null) {
+        success.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -142125,15 +142906,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class compact_resultStandardSchemeFactory implements SchemeFactory {
-      public compact_resultStandardScheme getScheme() {
-        return new compact_resultStandardScheme();
+    private static class show_compact_resultStandardSchemeFactory implements SchemeFactory {
+      public show_compact_resultStandardScheme getScheme() {
+        return new show_compact_resultStandardScheme();
       }
     }
 
-    private static class compact_resultStandardScheme extends StandardScheme<compact_result> {
+    private static class show_compact_resultStandardScheme extends StandardScheme<show_compact_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, compact_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, show_compact_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -142143,6 +142924,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, compact_result stru
             break;
           }
           switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.success = new ShowCompactResponse();
+                struct.success.read(iprot);
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -142152,49 +142942,68 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, compact_result stru
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, compact_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, show_compact_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          struct.success.write(oprot);
+          oprot.writeFieldEnd();
+        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class compact_resultTupleSchemeFactory implements SchemeFactory {
-      public compact_resultTupleScheme getScheme() {
-        return new compact_resultTupleScheme();
+    private static class show_compact_resultTupleSchemeFactory implements SchemeFactory {
+      public show_compact_resultTupleScheme getScheme() {
+        return new show_compact_resultTupleScheme();
       }
     }
 
-    private static class compact_resultTupleScheme extends TupleScheme<compact_result> {
+    private static class show_compact_resultTupleScheme extends TupleScheme<show_compact_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, compact_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, show_compact_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetSuccess()) {
+          struct.success.write(oprot);
+        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, compact_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, show_compact_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.success = new ShowCompactResponse();
+          struct.success.read(iprot);
+          struct.setSuccessIsSet(true);
+        }
       }
     }
 
   }
 
-  public static class show_compact_args implements org.apache.thrift.TBase<show_compact_args, show_compact_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("show_compact_args");
+  public static class get_next_notification_args implements org.apache.thrift.TBase<get_next_notification_args, get_next_notification_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_next_notification_args");
 
     private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField("rqst", org.apache.thrift.protocol.TType.STRUCT, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new show_compact_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new show_compact_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_next_notification_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_next_notification_argsTupleSchemeFactory());
     }
 
-    private ShowCompactRequest rqst; // required
+    private NotificationEventRequest rqst; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
@@ -142259,16 +143068,16 @@ public String getFieldName() {
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.RQST, new org.apache.thrift.meta_data.FieldMetaData("rqst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShowCompactRequest.class)));
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NotificationEventRequest.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(show_compact_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_next_notification_args.class, metaDataMap);
     }
 
-    public show_compact_args() {
+    public get_next_notification_args() {
     }
 
-    public show_compact_args(
-      ShowCompactRequest rqst)
+    public get_next_notification_args(
+      NotificationEventRequest rqst)
     {
       this();
       this.rqst = rqst;
@@ -142277,14 +143086,14 @@ public show_compact_args(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public show_compact_args(show_compact_args other) {
+    public get_next_notification_args(get_next_notification_args other) {
       if (other.isSetRqst()) {
-        this.rqst = new ShowCompactRequest(other.rqst);
+        this.rqst = new NotificationEventRequest(other.rqst);
       }
     }
 
-    public show_compact_args deepCopy() {
-      return new show_compact_args(this);
+    public get_next_notification_args deepCopy() {
+      return new get_next_notification_args(this);
     }
 
     @Override
@@ -142292,11 +143101,11 @@ public void clear() {
       this.rqst = null;
     }
 
-    public ShowCompactRequest getRqst() {
+    public NotificationEventRequest getRqst() {
       return this.rqst;
     }
 
-    public void setRqst(ShowCompactRequest rqst) {
+    public void setRqst(NotificationEventRequest rqst) {
       this.rqst = rqst;
     }
 
@@ -142321,7 +143130,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetRqst();
         } else {
-          setRqst((ShowCompactRequest)value);
+          setRqst((NotificationEventRequest)value);
         }
         break;
 
@@ -142354,12 +143163,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof show_compact_args)
-        return this.equals((show_compact_args)that);
+      if (that instanceof get_next_notification_args)
+        return this.equals((get_next_notification_args)that);
       return false;
     }
 
-    public boolean equals(show_compact_args that) {
+    public boolean equals(get_next_notification_args that) {
       if (that == null)
         return false;
 
@@ -142387,13 +143196,13 @@ public int hashCode() {
       return builder.toHashCode();
     }
 
-    public int compareTo(show_compact_args other) {
+    public int compareTo(get_next_notification_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      show_compact_args typedOther = (show_compact_args)other;
+      get_next_notification_args typedOther = (get_next_notification_args)other;
 
       lastComparison = Boolean.valueOf(isSetRqst()).compareTo(typedOther.isSetRqst());
       if (lastComparison != 0) {
@@ -142422,7 +143231,7 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("show_compact_args(");
+      StringBuilder sb = new StringBuilder("get_next_notification_args(");
       boolean first = true;
 
       sb.append("rqst:");
@@ -142460,15 +143269,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class show_compact_argsStandardSchemeFactory implements SchemeFactory {
-      public show_compact_argsStandardScheme getScheme() {
-        return new show_compact_argsStandardScheme();
+    private static class get_next_notification_argsStandardSchemeFactory implements SchemeFactory {
+      public get_next_notification_argsStandardScheme getScheme() {
+        return new get_next_notification_argsStandardScheme();
       }
     }
 
-    private static class show_compact_argsStandardScheme extends StandardScheme<show_compact_args> {
+    private static class get_next_notification_argsStandardScheme extends StandardScheme<get_next_notification_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, show_compact_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_next_notification_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -142480,7 +143289,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, show_compact_args s
           switch (schemeField.id) {
             case 1: // RQST
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.rqst = new ShowCompactRequest();
+                struct.rqst = new NotificationEventRequest();
                 struct.rqst.read(iprot);
                 struct.setRqstIsSet(true);
               } else { 
@@ -142496,7 +143305,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, show_compact_args s
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, show_compact_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_next_notification_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -142511,16 +143320,16 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, show_compact_args
 
     }
 
-    private static class show_compact_argsTupleSchemeFactory implements SchemeFactory {
-      public show_compact_argsTupleScheme getScheme() {
-        return new show_compact_argsTupleScheme();
+    private static class get_next_notification_argsTupleSchemeFactory implements SchemeFactory {
+      public get_next_notification_argsTupleScheme getScheme() {
+        return new get_next_notification_argsTupleScheme();
       }
     }
 
-    private static class show_compact_argsTupleScheme extends TupleScheme<show_compact_args> {
+    private static class get_next_notification_argsTupleScheme extends TupleScheme<get_next_notification_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, show_compact_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_next_notification_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetRqst()) {
@@ -142533,11 +143342,11 @@ public void write(org.apache.thrift.protocol.TProtocol prot, show_compact_args s
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, show_compact_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_next_notification_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.rqst = new ShowCompactRequest();
+          struct.rqst = new NotificationEventRequest();
           struct.rqst.read(iprot);
           struct.setRqstIsSet(true);
         }
@@ -142546,18 +143355,18 @@ public void read(org.apache.thrift.protocol.TProtocol prot, show_compact_args st
 
   }
 
-  public static class show_compact_result implements org.apache.thrift.TBase<show_compact_result, show_compact_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("show_compact_result");
+  public static class get_next_notification_result implements org.apache.thrift.TBase<get_next_notification_result, get_next_notification_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_next_notification_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new show_compact_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new show_compact_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_next_notification_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_next_notification_resultTupleSchemeFactory());
     }
 
-    private ShowCompactResponse success; // required
+    private NotificationEventResponse success; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
@@ -142622,16 +143431,16 @@ public String getFieldName() {
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShowCompactResponse.class)));
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NotificationEventResponse.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(show_compact_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_next_notification_result.class, metaDataMap);
     }
 
-    public show_compact_result() {
+    public get_next_notification_result() {
     }
 
-    public show_compact_result(
-      ShowCompactResponse success)
+    public get_next_notification_result(
+      NotificationEventResponse success)
     {
       this();
       this.success = success;
@@ -142640,14 +143449,14 @@ public show_compact_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public show_compact_result(show_compact_result other) {
+    public get_next_notification_result(get_next_notification_result other) {
       if (other.isSetSuccess()) {
-        this.success = new ShowCompactResponse(other.success);
+        this.success = new NotificationEventResponse(other.success);
       }
     }
 
-    public show_compact_result deepCopy() {
-      return new show_compact_result(this);
+    public get_next_notification_result deepCopy() {
+      return new get_next_notification_result(this);
     }
 
     @Override
@@ -142655,11 +143464,11 @@ public void clear() {
       this.success = null;
     }
 
-    public ShowCompactResponse getSuccess() {
+    public NotificationEventResponse getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(ShowCompactResponse success) {
+    public void setSuccess(NotificationEventResponse success) {
       this.success = success;
     }
 
@@ -142684,7 +143493,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((ShowCompactResponse)value);
+          setSuccess((NotificationEventResponse)value);
         }
         break;
 
@@ -142717,12 +143526,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof show_compact_result)
-        return this.equals((show_compact_result)that);
+      if (that instanceof get_next_notification_result)
+        return this.equals((get_next_notification_result)that);
       return false;
     }
 
-    public boolean equals(show_compact_result that) {
+    public boolean equals(get_next_notification_result that) {
       if (that == null)
         return false;
 
@@ -142750,13 +143559,13 @@ public int hashCode() {
       return builder.toHashCode();
     }
 
-    public int compareTo(show_compact_result other) {
+    public int compareTo(get_next_notification_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      show_compact_result typedOther = (show_compact_result)other;
+      get_next_notification_result typedOther = (get_next_notification_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -142785,7 +143594,7 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("show_compact_result(");
+      StringBuilder sb = new StringBuilder("get_next_notification_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -142823,15 +143632,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class show_compact_resultStandardSchemeFactory implements SchemeFactory {
-      public show_compact_resultStandardScheme getScheme() {
-        return new show_compact_resultStandardScheme();
+    private static class get_next_notification_resultStandardSchemeFactory implements SchemeFactory {
+      public get_next_notification_resultStandardScheme getScheme() {
+        return new get_next_notification_resultStandardScheme();
       }
     }
 
-    private static class show_compact_resultStandardScheme extends StandardScheme<show_compact_result> {
+    private static class get_next_notification_resultStandardScheme extends StandardScheme<get_next_notification_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, show_compact_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_next_notification_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -142843,7 +143652,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, show_compact_result
           switch (schemeField.id) {
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.success = new ShowCompactResponse();
+                struct.success = new NotificationEventResponse();
                 struct.success.read(iprot);
                 struct.setSuccessIsSet(true);
               } else { 
@@ -142859,7 +143668,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, show_compact_result
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, show_compact_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_next_notification_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -142874,16 +143683,16 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, show_compact_resul
 
     }
 
-    private static class show_compact_resultTupleSchemeFactory implements SchemeFactory {
-      public show_compact_resultTupleScheme getScheme() {
-        return new show_compact_resultTupleScheme();
+    private static class get_next_notification_resultTupleSchemeFactory implements SchemeFactory {
+      public get_next_notification_resultTupleScheme getScheme() {
+        return new get_next_notification_resultTupleScheme();
       }
     }
 
-    private static class show_compact_resultTupleScheme extends TupleScheme<show_compact_result> {
+    private static class get_next_notification_resultTupleScheme extends TupleScheme<get_next_notification_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, show_compact_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_next_notification_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
@@ -142896,11 +143705,11 @@ public void write(org.apache.thrift.protocol.TProtocol prot, show_compact_result
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, show_compact_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_next_notification_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.success = new ShowCompactResponse();
+          struct.success = new NotificationEventResponse();
           struct.success.read(iprot);
           struct.setSuccessIsSet(true);
         }
@@ -142909,22 +143718,20 @@ public void read(org.apache.thrift.protocol.TProtocol prot, show_compact_result
 
   }
 
-  public static class get_next_notification_args implements org.apache.thrift.TBase<get_next_notification_args, get_next_notification_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_next_notification_args");
+  public static class get_current_notificationEventId_args implements org.apache.thrift.TBase<get_current_notificationEventId_args, get_current_notificationEventId_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_current_notificationEventId_args");
 
-    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField("rqst", org.apache.thrift.protocol.TType.STRUCT, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new get_next_notification_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new get_next_notification_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_current_notificationEventId_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_current_notificationEventId_argsTupleSchemeFactory());
     }
 
-    private NotificationEventRequest rqst; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      RQST((short)1, "rqst");
+;
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -142939,8 +143746,6 @@ public void read(org.apache.thrift.protocol.TProtocol prot, show_compact_result
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // RQST
-            return RQST;
           default:
             return null;
         }
@@ -142979,86 +143784,37 @@ public String getFieldName() {
         return _fieldName;
       }
     }
-
-    // isset id assignments
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.RQST, new org.apache.thrift.meta_data.FieldMetaData("rqst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NotificationEventRequest.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_next_notification_args.class, metaDataMap);
-    }
-
-    public get_next_notification_args() {
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_current_notificationEventId_args.class, metaDataMap);
     }
 
-    public get_next_notification_args(
-      NotificationEventRequest rqst)
-    {
-      this();
-      this.rqst = rqst;
+    public get_current_notificationEventId_args() {
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public get_next_notification_args(get_next_notification_args other) {
-      if (other.isSetRqst()) {
-        this.rqst = new NotificationEventRequest(other.rqst);
-      }
+    public get_current_notificationEventId_args(get_current_notificationEventId_args other) {
     }
 
-    public get_next_notification_args deepCopy() {
-      return new get_next_notification_args(this);
+    public get_current_notificationEventId_args deepCopy() {
+      return new get_current_notificationEventId_args(this);
     }
 
     @Override
     public void clear() {
-      this.rqst = null;
-    }
-
-    public NotificationEventRequest getRqst() {
-      return this.rqst;
-    }
-
-    public void setRqst(NotificationEventRequest rqst) {
-      this.rqst = rqst;
-    }
-
-    public void unsetRqst() {
-      this.rqst = null;
-    }
-
-    /** Returns true if field rqst is set (has been assigned a value) and false otherwise */
-    public boolean isSetRqst() {
-      return this.rqst != null;
-    }
-
-    public void setRqstIsSet(boolean value) {
-      if (!value) {
-        this.rqst = null;
-      }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case RQST:
-        if (value == null) {
-          unsetRqst();
-        } else {
-          setRqst((NotificationEventRequest)value);
-        }
-        break;
-
       }
     }
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case RQST:
-        return getRqst();
-
       }
       throw new IllegalStateException();
     }
@@ -143070,8 +143826,6 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case RQST:
-        return isSetRqst();
       }
       throw new IllegalStateException();
     }
@@ -143080,24 +143834,15 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_next_notification_args)
-        return this.equals((get_next_notification_args)that);
+      if (that instanceof get_current_notificationEventId_args)
+        return this.equals((get_current_notificationEventId_args)that);
       return false;
     }
 
-    public boolean equals(get_next_notification_args that) {
+    public boolean equals(get_current_notificationEventId_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_rqst = true && this.isSetRqst();
-      boolean that_present_rqst = true && that.isSetRqst();
-      if (this_present_rqst || that_present_rqst) {
-        if (!(this_present_rqst && that_present_rqst))
-          return false;
-        if (!this.rqst.equals(that.rqst))
-          return false;
-      }
-
       return true;
     }
 
@@ -143105,32 +143850,17 @@ public boolean equals(get_next_notification_args that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_rqst = true && (isSetRqst());
-      builder.append(present_rqst);
-      if (present_rqst)
-        builder.append(rqst);
-
       return builder.toHashCode();
     }
 
-    public int compareTo(get_next_notification_args other) {
+    public int compareTo(get_current_notificationEventId_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_next_notification_args typedOther = (get_next_notification_args)other;
+      get_current_notificationEventId_args typedOther = (get_current_notificationEventId_args)other;
 
-      lastComparison = Boolean.valueOf(isSetRqst()).compareTo(typedOther.isSetRqst());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetRqst()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rqst, typedOther.rqst);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -143148,16 +143878,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_next_notification_args(");
+      StringBuilder sb = new StringBuilder("get_current_notificationEventId_args(");
       boolean first = true;
 
-      sb.append("rqst:");
-      if (this.rqst == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.rqst);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -143165,9 +143888,6 @@ public String toString() {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
-      if (rqst != null) {
-        rqst.validate();
-      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -143186,15 +143906,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class get_next_notification_argsStandardSchemeFactory implements SchemeFactory {
-      public get_next_notification_argsStandardScheme getScheme() {
-        return new get_next_notification_argsStandardScheme();
+    private static class get_current_notificationEventId_argsStandardSchemeFactory implements SchemeFactory {
+      public get_current_notificationEventId_argsStandardScheme getScheme() {
+        return new get_current_notificationEventId_argsStandardScheme();
       }
     }
 
-    private static class get_next_notification_argsStandardScheme extends StandardScheme<get_next_notification_args> {
+    private static class get_current_notificationEventId_argsStandardScheme extends StandardScheme<get_current_notificationEventId_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, get_next_notification_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_current_notificationEventId_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -143204,15 +143924,6 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_next_notificati
             break;
           }
           switch (schemeField.id) {
-            case 1: // RQST
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.rqst = new NotificationEventRequest();
-                struct.rqst.read(iprot);
-                struct.setRqstIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -143222,68 +143933,49 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_next_notificati
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, get_next_notification_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_current_notificationEventId_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.rqst != null) {
-          oprot.writeFieldBegin(RQST_FIELD_DESC);
-          struct.rqst.write(oprot);
-          oprot.writeFieldEnd();
-        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class get_next_notification_argsTupleSchemeFactory implements SchemeFactory {
-      public get_next_notification_argsTupleScheme getScheme() {
-        return new get_next_notification_argsTupleScheme();
+    private static class get_current_notificationEventId_argsTupleSchemeFactory implements SchemeFactory {
+      public get_current_notificationEventId_argsTupleScheme getScheme() {
+        return new get_current_notificationEventId_argsTupleScheme();
       }
     }
 
-    private static class get_next_notification_argsTupleScheme extends TupleScheme<get_next_notification_args> {
+    private static class get_current_notificationEventId_argsTupleScheme extends TupleScheme<get_current_notificationEventId_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, get_next_notification_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_current_notificationEventId_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetRqst()) {
-          optionals.set(0);
-        }
-        oprot.writeBitSet(optionals, 1);
-        if (struct.isSetRqst()) {
-          struct.rqst.write(oprot);
-        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, get_next_notification_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_current_notificationEventId_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(1);
-        if (incoming.get(0)) {
-          struct.rqst = new NotificationEventRequest();
-          struct.rqst.read(iprot);
-          struct.setRqstIsSet(true);
-        }
       }
     }
 
   }
 
-  public static class get_next_notification_result implements org.apache.thrift.TBase<get_next_notification_result, get_next_notification_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_next_notification_result");
+  public static class get_current_notificationEventId_result implements org.apache.thrift.TBase<get_current_notificationEventId_result, get_current_notificationEventId_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_current_notificationEventId_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new get_next_notification_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new get_next_notification_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_current_notificationEventId_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_current_notificationEventId_resultTupleSchemeFactory());
     }
 
-    private NotificationEventResponse success; // required
+    private CurrentNotificationEventId success; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
@@ -143348,16 +144040,16 @@ public String getFieldName() {
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NotificationEventResponse.class)));
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrentNotificationEventId.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_next_notification_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_current_notificationEventId_result.class, metaDataMap);
     }
 
-    public get_next_notification_result() {
+    public get_current_notificationEventId_result() {
     }
 
-    public get_next_notification_result(
-      NotificationEventResponse success)
+    public get_current_notificationEventId_result(
+      CurrentNotificationEventId success)
     {
       this();
       this.success = success;
@@ -143366,14 +144058,14 @@ public get_next_notification_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public get_next_notification_result(get_next_notification_result other) {
+    public get_current_notificationEventId_result(get_current_notificationEventId_result other) {
       if (other.isSetSuccess()) {
-        this.success = new NotificationEventResponse(other.success);
+        this.success = new CurrentNotificationEventId(other.success);
       }
     }
 
-    public get_next_notification_result deepCopy() {
-      return new get_next_notification_result(this);
+    public get_current_notificationEventId_result deepCopy() {
+      return new get_current_notificationEventId_result(this);
     }
 
     @Override
@@ -143381,11 +144073,11 @@ public void clear() {
       this.success = null;
     }
 
-    public NotificationEventResponse getSuccess() {
+    public CurrentNotificationEventId getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(NotificationEventResponse success) {
+    public void setSuccess(CurrentNotificationEventId success) {
       this.success = success;
     }
 
@@ -143410,7 +144102,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((NotificationEventResponse)value);
+          setSuccess((CurrentNotificationEventId)value);
         }
         break;
 
@@ -143443,12 +144135,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_next_notification_result)
-        return this.equals((get_next_notification_result)that);
+      if (that instanceof get_current_notificationEventId_result)
+        return this.equals((get_current_notificationEventId_result)that);
       return false;
     }
 
-    public boolean equals(get_next_notification_result that) {
+    public boolean equals(get_current_notificationEventId_result that) {
       if (that == null)
         return false;
 
@@ -143476,13 +144168,13 @@ public int hashCode() {
       return builder.toHashCode();
     }
 
-    public int compareTo(get_next_notification_result other) {
+    public int compareTo(get_current_notificationEventId_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_next_notification_result typedOther = (get_next_notification_result)other;
+      get_current_notificationEventId_result typedOther = (get_current_notificationEventId_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -143511,7 +144203,7 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_next_notification_result(");
+      StringBuilder sb = new StringBuilder("get_current_notificationEventId_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -143549,15 +144241,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class get_next_notification_resultStandardSchemeFactory implements SchemeFactory {
-      public get_next_notification_resultStandardScheme getScheme() {
-        return new get_next_notification_resultStandardScheme();
+    private static class get_current_notificationEventId_resultStandardSchemeFactory implements SchemeFactory {
+      public get_current_notificationEventId_resultStandardScheme getScheme() {
+        return new get_current_notificationEventId_resultStandardScheme();
       }
     }
 
-    private static class get_next_notification_resultStandardScheme extends StandardScheme<get_next_notification_result> {
+    private static class get_current_notificationEventId_resultStandardScheme extends StandardScheme<get_current_notificationEventId_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, get_next_notification_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_current_notificationEventId_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -143569,7 +144261,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_next_notificati
           switch (schemeField.id) {
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.success = new NotificationEventResponse();
+                struct.success = new CurrentNotificationEventId();
                 struct.success.read(iprot);
                 struct.setSuccessIsSet(true);
               } else { 
@@ -143585,7 +144277,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_next_notificati
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, get_next_notification_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_current_notificationEventId_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -143600,16 +144292,16 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_next_notificat
 
     }
 
-    private static class get_next_notification_resultTupleSchemeFactory implements SchemeFactory {
-      public get_next_notification_resultTupleScheme getScheme() {
-        return new get_next_notification_resultTupleScheme();
+    private static class get_current_notificationEventId_resultTupleSchemeFactory implements SchemeFactory {
+      public get_current_notificationEventId_resultTupleScheme getScheme() {
+        return new get_current_notificationEventId_resultTupleScheme();
       }
     }
 
-    private static class get_next_notification_resultTupleScheme extends TupleScheme<get_next_notification_result> {
+    private static class get_current_notificationEventId_resultTupleScheme extends TupleScheme<get_current_notificationEventId_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, get_next_notification_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_current_notificationEventId_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
@@ -143622,11 +144314,11 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_next_notificati
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, get_next_notification_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_current_notificationEventId_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.success = new NotificationEventResponse();
+          struct.success = new CurrentNotificationEventId();
           struct.success.read(iprot);
           struct.setSuccessIsSet(true);
         }
@@ -143635,20 +144327,22 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_next_notificatio
 
   }
 
-  public static class get_current_notificationEventId_args implements org.apache.thrift.TBase<get_current_notificationEventId_args, get_current_notificationEventId_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_current_notificationEventId_args");
+  public static class fire_listener_event_args implements org.apache.thrift.TBase<fire_listener_event_args, fire_listener_event_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fire_listener_event_args");
 
+    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField("rqst", org.apache.thrift.protocol.TType.STRUCT, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new get_current_notificationEventId_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new get_current_notificationEventId_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new fire_listener_event_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new fire_listener_event_argsTupleSchemeFactory());
     }
 
+    private FireEventRequest rqst; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-;
+      RQST((short)1, "rqst");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -143663,6 +144357,8 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_next_notificatio
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
+          case 1: // RQST
+            return RQST;
           default:
             return null;
         }
@@ -143701,37 +144397,86 @@ public String getFieldName() {
         return _fieldName;
       }
     }
+
+    // isset id assignments
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.RQST, new org.apache.thrift.meta_data.FieldMetaData("rqst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireEventRequest.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_current_notificationEventId_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fire_listener_event_args.class, metaDataMap);
     }
 
-    public get_current_notificationEventId_args() {
+    public fire_listener_event_args() {
+    }
+
+    public fire_listener_event_args(
+      FireEventRequest rqst)
+    {
+      this();
+      this.rqst = rqst;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public get_current_notificationEventId_args(get_current_notificationEventId_args other) {
+    public fire_listener_event_args(fire_listener_event_args other) {
+      if (other.isSetRqst()) {
+        this.rqst = new FireEventRequest(other.rqst);
+      }
     }
 
-    public get_current_notificationEventId_args deepCopy() {
-      return new get_current_notificationEventId_args(this);
+    public fire_listener_event_args deepCopy() {
+      return new fire_listener_event_args(this);
     }
 
     @Override
     public void clear() {
+      this.rqst = null;
+    }
+
+    public FireEventRequest getRqst() {
+      return this.rqst;
+    }
+
+    public void setRqst(FireEventRequest rqst) {
+      this.rqst = rqst;
+    }
+
+    public void unsetRqst() {
+      this.rqst = null;
+    }
+
+    /** Returns true if field rqst is set (has been assigned a value) and false otherwise */
+    public boolean isSetRqst() {
+      return this.rqst != null;
+    }
+
+    public void setRqstIsSet(boolean value) {
+      if (!value) {
+        this.rqst = null;
+      }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
+      case RQST:
+        if (value == null) {
+          unsetRqst();
+        } else {
+          setRqst((FireEventRequest)value);
+        }
+        break;
+
       }
     }
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
+      case RQST:
+        return getRqst();
+
       }
       throw new IllegalStateException();
     }
@@ -143743,6 +144488,8 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
+      case RQST:
+        return isSetRqst();
       }
       throw new IllegalStateException();
     }
@@ -143751,15 +144498,24 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_current_notificationEventId_args)
-        return this.equals((get_current_notificationEventId_args)that);
+      if (that instanceof fire_listener_event_args)
+        return this.equals((fire_listener_event_args)that);
       return false;
     }
 
-    public boolean equals(get_current_notificationEventId_args that) {
+    public boolean equals(fire_listener_event_args that) {
       if (that == null)
         return false;
 
+      boolean this_present_rqst = true && this.isSetRqst();
+      boolean that_present_rqst = true && that.isSetRqst();
+      if (this_present_rqst || that_present_rqst) {
+        if (!(this_present_rqst && that_present_rqst))
+          return false;
+        if (!this.rqst.equals(that.rqst))
+          return false;
+      }
+
       return true;
     }
 
@@ -143767,17 +144523,32 @@ public boolean equals(get_current_notificationEventId_args that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
+      boolean present_rqst = true && (isSetRqst());
+      builder.append(present_rqst);
+      if (present_rqst)
+        builder.append(rqst);
+
       return builder.toHashCode();
     }
 
-    public int compareTo(get_current_notificationEventId_args other) {
+    public int compareTo(fire_listener_event_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_current_notificationEventId_args typedOther = (get_current_notificationEventId_args)other;
+      fire_listener_event_args typedOther = (fire_listener_event_args)other;
 
+      lastComparison = Boolean.valueOf(isSetRqst()).compareTo(typedOther.isSetRqst());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetRqst()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rqst, typedOther.rqst);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       return 0;
     }
 
@@ -143795,9 +144566,16 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_current_notificationEventId_args(");
+      StringBuilder sb = new StringBuilder("fire_listener_event_args(");
       boolean first = true;
 
+      sb.append("rqst:");
+      if (this.rqst == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.rqst);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -143805,6 +144583,9 @@ public String toString() {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
+      if (rqst != null) {
+        rqst.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -143823,15 +144604,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class get_current_notificationEventId_argsStandardSchemeFactory implements SchemeFactory {
-      public get_current_notificationEventId_argsStandardScheme getScheme() {
-        return new get_current_notificationEventId_argsStandardScheme();
+    private static class fire_listener_event_argsStandardSchemeFactory implements SchemeFactory {
+      public fire_listener_event_argsStandardScheme getScheme() {
+        return new fire_listener_event_argsStandardScheme();
       }
     }
 
-    private static class get_current_notificationEventId_argsStandardScheme extends StandardScheme<get_current_notificationEventId_args> {
+    private static class fire_listener_event_argsStandardScheme extends StandardScheme<fire_listener_event_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, get_current_notificationEventId_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, fire_listener_event_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -143841,6 +144622,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_current_notific
             break;
           }
           switch (schemeField.id) {
+            case 1: // RQST
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.rqst = new FireEventRequest();
+                struct.rqst.read(iprot);
+                struct.setRqstIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -143850,49 +144640,68 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_current_notific
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, get_current_notificationEventId_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, fire_listener_event_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.rqst != null) {
+          oprot.writeFieldBegin(RQST_FIELD_DESC);
+          struct.rqst.write(oprot);
+          oprot.writeFieldEnd();
+        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class get_current_notificationEventId_argsTupleSchemeFactory implements SchemeFactory {
-      public get_current_notificationEventId_argsTupleScheme getScheme() {
-        return new get_current_notificationEventId_argsTupleScheme();
+    private static class fire_listener_event_argsTupleSchemeFactory implements SchemeFactory {
+      public fire_listener_event_argsTupleScheme getScheme() {
+        return new fire_listener_event_argsTupleScheme();
       }
     }
 
-    private static class get_current_notificationEventId_argsTupleScheme extends TupleScheme<get_current_notificationEventId_args> {
+    private static class fire_listener_event_argsTupleScheme extends TupleScheme<fire_listener_event_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, get_current_notificationEventId_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, fire_listener_event_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetRqst()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetRqst()) {
+          struct.rqst.write(oprot);
+        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, get_current_notificationEventId_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, fire_listener_event_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.rqst = new FireEventRequest();
+          struct.rqst.read(iprot);
+          struct.setRqstIsSet(true);
+        }
       }
     }
 
   }
 
-  public static class get_current_notificationEventId_result implements org.apache.thrift.TBase<get_current_notificationEventId_result, get_current_notificationEventId_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_current_notificationEventId_result");
+  public static class fire_listener_event_result implements org.apache.thrift.TBase<fire_listener_event_result, fire_listener_event_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fire_listener_event_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new get_current_notificationEventId_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new get_current_notificationEventId_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new fire_listener_event_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new fire_listener_event_resultTupleSchemeFactory());
     }
 
-    private CurrentNotificationEventId success; // required
+    private FireEventResponse success; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
@@ -143957,16 +144766,16 @@ public String getFieldName() {
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrentNotificationEventId.class)));
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireEventResponse.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_current_notificationEventId_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fire_listener_event_result.class, metaDataMap);
     }
 
-    public get_current_notificationEventId_result() {
+    public fire_listener_event_result() {
     }
 
-    public get_current_notificationEventId_result(
-      CurrentNotificationEventId success)
+    public fire_listener_event_result(
+      FireEventResponse success)
     {
       this();
       this.success = success;
@@ -143975,14 +144784,14 @@ public get_current_notificationEventId_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public get_current_notificationEventId_result(get_current_notificationEventId_result other) {
+    public fire_listener_event_result(fire_listener_event_result other) {
       if (other.isSetSuccess()) {
-        this.success = new CurrentNotificationEventId(other.success);
+        this.success = new FireEventResponse(other.success);
       }
     }
 
-    public get_current_notificationEventId_result deepCopy() {
-      return new get_current_notificationEventId_result(this);
+    public fire_listener_event_result deepCopy() {
+      return new fire_listener_event_result(this);
     }
 
     @Override
@@ -143990,11 +144799,11 @@ public void clear() {
       this.success = null;
     }
 
-    public CurrentNotificationEventId getSuccess() {
+    public FireEventResponse getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(CurrentNotificationEventId success) {
+    public void setSuccess(FireEventResponse success) {
       this.success = success;
     }
 
@@ -144019,7 +144828,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((CurrentNotificationEventId)value);
+          setSuccess((FireEventResponse)value);
         }
         break;
 
@@ -144052,12 +144861,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_current_notificationEventId_result)
-        return this.equals((get_current_notificationEventId_result)that);
+      if (that instanceof fire_listener_event_result)
+        return this.equals((fire_listener_event_result)that);
       return false;
     }
 
-    public boolean equals(get_current_notificationEventId_result that) {
+    public boolean equals(fire_listener_event_result that) {
       if (that == null)
         return false;
 
@@ -144085,13 +144894,13 @@ public int hashCode() {
       return builder.toHashCode();
     }
 
-    public int compareTo(get_current_notificationEventId_result other) {
+    public int compareTo(fire_listener_event_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_current_notificationEventId_result typedOther = (get_current_notificationEventId_result)other;
+      fire_listener_event_result typedOther = (fire_listener_event_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -144120,7 +144929,7 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_current_notificationEventId_result(");
+      StringBuilder sb = new StringBuilder("fire_listener_event_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -144158,15 +144967,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class get_current_notificationEventId_resultStandardSchemeFactory implements SchemeFactory {
-      public get_current_notificationEventId_resultStandardScheme getScheme() {
-        return new get_current_notificationEventId_resultStandardScheme();
+    private static class fire_listener_event_resultStandardSchemeFactory implements SchemeFactory {
+      public fire_listener_event_resultStandardScheme getScheme() {
+        return new fire_listener_event_resultStandardScheme();
       }
     }
 
-    private static class get_current_notificationEventId_resultStandardScheme extends StandardScheme<get_current_notificationEventId_result> {
+    private static class fire_listener_event_resultStandardScheme extends StandardScheme<fire_listener_event_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, get_current_notificationEventId_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, fire_listener_event_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -144178,7 +144987,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_current_notific
           switch (schemeField.id) {
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.success = new CurrentNotificationEventId();
+                struct.success = new FireEventResponse();
                 struct.success.read(iprot);
                 struct.setSuccessIsSet(true);
               } else { 
@@ -144194,7 +145003,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_current_notific
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, get_current_notificationEventId_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, fire_listener_event_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -144209,16 +145018,16 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_current_notifi
 
     }
 
-    private static class get_current_notificationEventId_resultTupleSchemeFactory implements SchemeFactory {
-      public get_current_notificationEventId_resultTupleScheme getScheme() {
-        return new get_current_notificationEventId_resultTupleScheme();
+    private static class fire_listener_event_resultTupleSchemeFactory implements SchemeFactory {
+      public fire_listener_event_resultTupleScheme getScheme() {
+        return new fire_listener_event_resultTupleScheme();
       }
     }
 
-    private static class get_current_notificationEventId_resultTupleScheme extends TupleScheme<get_current_notificationEventId_result> {
+    private static class fire_listener_event_resultTupleScheme extends TupleScheme<fire_listener_event_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, get_current_notificationEventId_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, fire_listener_event_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
@@ -144231,11 +145040,11 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_current_notific
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, get_current_notificationEventId_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, fire_listener_event_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.success = new CurrentNotificationEventId();
+          struct.success = new FireEventResponse();
           struct.success.read(iprot);
           struct.setSuccessIsSet(true);
         }
@@ -144244,22 +145053,20 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_current_notifica
 
   }
 
-  public static class fire_listener_event_args implements org.apache.thrift.TBase<fire_listener_event_args, fire_listener_event_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fire_listener_event_args");
+  public static class get_metastore_db_uuid_args implements org.apache.thrift.TBase<get_metastore_db_uuid_args, get_metastore_db_uuid_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_metastore_db_uuid_args");
 
-    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField("rqst", org.apache.thrift.protocol.TType.STRUCT, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new fire_listener_event_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new fire_listener_event_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_metastore_db_uuid_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_metastore_db_uuid_argsTupleSchemeFactory());
     }
 
-    private FireEventRequest rqst; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      RQST((short)1, "rqst");
+;
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -144274,8 +145081,6 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_current_notifica
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // RQST
-            return RQST;
           default:
             return null;
         }
@@ -144314,86 +145119,37 @@ public String getFieldName() {
         return _fieldName;
       }
     }
-
-    // isset id assignments
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.RQST, new org.apache.thrift.meta_data.FieldMetaData("rqst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireEventRequest.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fire_listener_event_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_metastore_db_uuid_args.class, metaDataMap);
     }
 
-    public fire_listener_event_args() {
-    }
-
-    public fire_listener_event_args(
-      FireEventRequest rqst)
-    {
-      this();
-      this.rqst = rqst;
+    public get_metastore_db_uuid_args() {
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public fire_listener_event_args(fire_listener_event_args other) {
-      if (other.isSetRqst()) {
-        this.rqst = new FireEventRequest(other.rqst);
-      }
+    public get_metastore_db_uuid_args(get_metastore_db_uuid_args other) {
     }
 
-    public fire_listener_event_args deepCopy() {
-      return new fire_listener_event_args(this);
+    public get_metastore_db_uuid_args deepCopy() {
+      return new get_metastore_db_uuid_args(this);
     }
 
     @Override
     public void clear() {
-      this.rqst = null;
-    }
-
-    public FireEventRequest getRqst() {
-      return this.rqst;
-    }
-
-    public void setRqst(FireEventRequest rqst) {
-      this.rqst = rqst;
-    }
-
-    public void unsetRqst() {
-      this.rqst = null;
-    }
-
-    /** Returns true if field rqst is set (has been assigned a value) and false otherwise */
-    public boolean isSetRqst() {
-      return this.rqst != null;
-    }
-
-    public void setRqstIsSet(boolean value) {
-      if (!value) {
-        this.rqst = null;
-      }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case RQST:
-        if (value == null) {
-          unsetRqst();
-        } else {
-          setRqst((FireEventRequest)value);
-        }
-        break;
-
       }
     }
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case RQST:
-        return getRqst();
-
       }
       throw new IllegalStateException();
     }
@@ -144405,8 +145161,6 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case RQST:
-        return isSetRqst();
       }
       throw new IllegalStateException();
     }
@@ -144415,24 +145169,15 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof fire_listener_event_args)
-        return this.equals((fire_listener_event_args)that);
+      if (that instanceof get_metastore_db_uuid_args)
+        return this.equals((get_metastore_db_uuid_args)that);
       return false;
     }
 
-    public boolean equals(fire_listener_event_args that) {
+    public boolean equals(get_metastore_db_uuid_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_rqst = true && this.isSetRqst();
-      boolean that_present_rqst = true && that.isSetRqst();
-      if (this_present_rqst || that_present_rqst) {
-        if (!(this_present_rqst && that_present_rqst))
-          return false;
-        if (!this.rqst.equals(that.rqst))
-          return false;
-      }
-
       return true;
     }
 
@@ -144440,32 +145185,17 @@ public boolean equals(fire_listener_event_args that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_rqst = true && (isSetRqst());
-      builder.append(present_rqst);
-      if (present_rqst)
-        builder.append(rqst);
-
       return builder.toHashCode();
     }
 
-    public int compareTo(fire_listener_event_args other) {
+    public int compareTo(get_metastore_db_uuid_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      fire_listener_event_args typedOther = (fire_listener_event_args)other;
+      get_metastore_db_uuid_args typedOther = (get_metastore_db_uuid_args)other;
 
-      lastComparison = Boolean.valueOf(isSetRqst()).compareTo(typedOther.isSetRqst());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetRqst()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rqst, typedOther.rqst);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -144483,16 +145213,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("fire_listener_event_args(");
+      StringBuilder sb = new StringBuilder("get_metastore_db_uuid_args(");
       boolean first = true;
 
-      sb.append("rqst:");
-      if (this.rqst == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.rqst);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -144500,9 +145223,6 @@ public String toString() {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
-      if (rqst != null) {
-        rqst.validate();
-      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -144521,15 +145241,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class fire_listener_event_argsStandardSchemeFactory implements SchemeFactory {
-      public fire_listener_event_argsStandardScheme getScheme() {
-        return new fire_listener_event_argsStandardScheme();
+    private static class get_metastore_db_uuid_argsStandardSchemeFactory implements SchemeFactory {
+      public get_metastore_db_uuid_argsStandardScheme getScheme() {
+        return new get_metastore_db_uuid_argsStandardScheme();
       }
     }
 
-    private static class fire_listener_event_argsStandardScheme extends StandardScheme<fire_listener_event_args> {
+    private static class get_metastore_db_uuid_argsStandardScheme extends StandardScheme<get_metastore_db_uuid_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, fire_listener_event_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_metastore_db_uuid_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -144539,15 +145259,6 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, fire_listener_event
             break;
           }
           switch (schemeField.id) {
-            case 1: // RQST
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.rqst = new FireEventRequest();
-                struct.rqst.read(iprot);
-                struct.setRqstIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -144557,72 +145268,56 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, fire_listener_event
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, fire_listener_event_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_metastore_db_uuid_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.rqst != null) {
-          oprot.writeFieldBegin(RQST_FIELD_DESC);
-          struct.rqst.write(oprot);
-          oprot.writeFieldEnd();
-        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class fire_listener_event_argsTupleSchemeFactory implements SchemeFactory {
-      public fire_listener_event_argsTupleScheme getScheme() {
-        return new fire_listener_event_argsTupleScheme();
+    private static class get_metastore_db_uuid_argsTupleSchemeFactory implements SchemeFactory {
+      public get_metastore_db_uuid_argsTupleScheme getScheme() {
+        return new get_metastore_db_uuid_argsTupleScheme();
       }
     }
 
-    private static class fire_listener_event_argsTupleScheme extends TupleScheme<fire_listener_event_args> {
+    private static class get_metastore_db_uuid_argsTupleScheme extends TupleScheme<get_metastore_db_uuid_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, fire_listener_event_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_metastore_db_uuid_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetRqst()) {
-          optionals.set(0);
-        }
-        oprot.writeBitSet(optionals, 1);
-        if (struct.isSetRqst()) {
-          struct.rqst.write(oprot);
-        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, fire_listener_event_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_metastore_db_uuid_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(1);
-        if (incoming.get(0)) {
-          struct.rqst = new FireEventRequest();
-          struct.rqst.read(iprot);
-          struct.setRqstIsSet(true);
-        }
       }
     }
 
   }
 
-  public static class fire_listener_event_result implements org.apache.thrift.TBase<fire_listener_event_result, fire_listener_event_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fire_listener_event_result");
+  public static class get_metastore_db_uuid_result implements org.apache.thrift.TBase<get_metastore_db_uuid_result, get_metastore_db_uuid_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_metastore_db_uuid_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
+    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new fire_listener_event_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new fire_listener_event_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_metastore_db_uuid_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_metastore_db_uuid_resultTupleSchemeFactory());
     }
 
-    private FireEventResponse success; // required
+    private String success; // required
+    private MetaException o1; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success");
+      SUCCESS((short)0, "success"),
+      O1((short)1, "o1");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -144639,6 +145334,8 @@ public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
           case 0: // SUCCESS
             return SUCCESS;
+          case 1: // O1
+            return O1;
           default:
             return null;
         }
@@ -144683,44 +145380,52 @@ public String getFieldName() {
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireEventResponse.class)));
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fire_listener_event_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_metastore_db_uuid_result.class, metaDataMap);
     }
 
-    public fire_listener_event_result() {
+    public get_metastore_db_uuid_result() {
     }
 
-    public fire_listener_event_result(
-      FireEventResponse success)
+    public get_metastore_db_uuid_result(
+      String success,
+      MetaException o1)
     {
       this();
       this.success = success;
+      this.o1 = o1;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public fire_listener_event_result(fire_listener_event_result other) {
+    public get_metastore_db_uuid_result(get_metastore_db_uuid_result other) {
       if (other.isSetSuccess()) {
-        this.success = new FireEventResponse(other.success);
+        this.success = other.success;
+      }
+      if (other.isSetO1()) {
+        this.o1 = new MetaException(other.o1);
       }
     }
 
-    public fire_listener_event_result deepCopy() {
-      return new fire_listener_event_result(this);
+    public get_metastore_db_uuid_result deepCopy() {
+      return new get_metastore_db_uuid_result(this);
     }
 
     @Override
     public void clear() {
       this.success = null;
+      this.o1 = null;
     }
 
-    public FireEventResponse getSuccess() {
+    public String getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(FireEventResponse success) {
+    public void setSuccess(String success) {
       this.success = success;
     }
 
@@ -144739,13 +145444,44 @@ public void setSuccessIsSet(boolean value) {
       }
     }
 
+    public MetaException getO1() {
+      return this.o1;
+    }
+
+    public void setO1(MetaException o1) {
+      this.o1 = o1;
+    }
+
+    public void unsetO1() {
+      this.o1 = null;
+    }
+
+    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO1() {
+      return this.o1 != null;
+    }
+
+    public void setO1IsSet(boolean value) {
+      if (!value) {
+        this.o1 = null;
+      }
+    }
+
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
       case SUCCESS:
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((FireEventResponse)value);
+          setSuccess((String)value);
+        }
+        break;
+
+      case O1:
+        if (value == null) {
+          unsetO1();
+        } else {
+          setO1((MetaException)value);
         }
         break;
 
@@ -144757,6 +145493,9 @@ public Object getFieldValue(_Fields field) {
       case SUCCESS:
         return getSuccess();
 
+      case O1:
+        return getO1();
+
       }
       throw new IllegalStateException();
     }
@@ -144770,6 +145509,8 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case SUCCESS:
         return isSetSuccess();
+      case O1:
+        return isSetO1();
       }
       throw new IllegalStateException();
     }
@@ -144778,12 +145519,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof fire_listener_event_result)
-        return this.equals((fire_listener_event_result)that);
+      if (that instanceof get_metastore_db_uuid_result)
+        return this.equals((get_metastore_db_uuid_result)that);
       return false;
     }
 
-    public boolean equals(fire_listener_event_result that) {
+    public boolean equals(get_metastore_db_uuid_result that) {
       if (that == null)
         return false;
 
@@ -144796,6 +145537,15 @@ public boolean equals(fire_listener_event_result that) {
           return false;
       }
 
+      boolean this_present_o1 = true && this.isSetO1();
+      boolean that_present_o1 = true && that.isSetO1();
+      if (this_present_o1 || that_present_o1) {
+        if (!(this_present_o1 && that_present_o1))
+          return false;
+        if (!this.o1.equals(that.o1))
+          return false;
+      }
+
       return true;
     }
 
@@ -144808,16 +145558,21 @@ public int hashCode() {
       if (present_success)
         builder.append(success);
 
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
       return builder.toHashCode();
     }
 
-    public int compareTo(fire_listener_event_result other) {
+    public int compareTo(get_metastore_db_uuid_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      fire_listener_event_result typedOther = (fire_listener_event_result)other;
+      get_metastore_db_uuid_result typedOther = (get_metastore_db_uuid_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -144829,6 +145584,16 @@ public int compareTo(fire_listener_event_result other) {
           return lastComparison;
         }
       }
+      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO1()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       return 0;
     }
 
@@ -144846,7 +145611,7 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("fire_listener_event_result(");
+      StringBuilder sb = new StringBuilder("get_metastore_db_uuid_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -144856,6 +145621,14 @@ public String toString() {
         sb.append(this.success);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("o1:");
+      if (this.o1 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o1);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -144863,9 +145636,6 @@ public String toString() {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
-      if (success != null) {
-        success.validate();
-      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -144884,15 +145654,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class fire_listener_event_resultStandardSchemeFactory implements SchemeFactory {
-      public fire_listener_event_resultStandardScheme getScheme() {
-        return new fire_listener_event_resultStandardScheme();
+    private static class get_metastore_db_uuid_resultStandardSchemeFactory implements SchemeFactory {
+      public get_metastore_db_uuid_resultStandardScheme getScheme() {
+        return new get_metastore_db_uuid_resultStandardScheme();
       }
     }
 
-    private static class fire_listener_event_resultStandardScheme extends StandardScheme<fire_listener_event_result> {
+    private static class get_metastore_db_uuid_resultStandardScheme extends StandardScheme<get_metastore_db_uuid_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, fire_listener_event_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_metastore_db_uuid_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -144903,14 +145673,22 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, fire_listener_event
           }
           switch (schemeField.id) {
             case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.success = new FireEventResponse();
-                struct.success.read(iprot);
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.success = iprot.readString();
                 struct.setSuccessIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
+            case 1: // O1
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o1 = new MetaException();
+                struct.o1.read(iprot);
+                struct.setO1IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -144920,13 +145698,18 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, fire_listener_event
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, fire_listener_event_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_metastore_db_uuid_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
         if (struct.success != null) {
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          struct.success.write(oprot);
+          oprot.writeString(struct.success);
+          oprot.writeFieldEnd();
+        }
+        if (struct.o1 != null) {
+          oprot.writeFieldBegin(O1_FIELD_DESC);
+          struct.o1.write(oprot);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -144935,36 +145718,46 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, fire_listener_even
 
     }
 
-    private static class fire_listener_event_resultTupleSchemeFactory implements SchemeFactory {
-      public fire_listener_event_resultTupleScheme getScheme() {
-        return new fire_listener_event_resultTupleScheme();
+    private static class get_metastore_db_uuid_resultTupleSchemeFactory implements SchemeFactory {
+      public get_metastore_db_uuid_resultTupleScheme getScheme() {
+        return new get_metastore_db_uuid_resultTupleScheme();
       }
     }
 
-    private static class fire_listener_event_resultTupleScheme extends TupleScheme<fire_listener_event_result> {
+    private static class get_metastore_db_uuid_resultTupleScheme extends TupleScheme<get_metastore_db_uuid_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, fire_listener_event_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_metastore_db_uuid_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
           optionals.set(0);
         }
-        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetO1()) {
+          optionals.set(1);
+        }
+        oprot.writeBitSet(optionals, 2);
         if (struct.isSetSuccess()) {
-          struct.success.write(oprot);
+          oprot.writeString(struct.success);
+        }
+        if (struct.isSetO1()) {
+          struct.o1.write(oprot);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, fire_listener_event_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_metastore_db_uuid_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(1);
+        BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
-          struct.success = new FireEventResponse();
-          struct.success.read(iprot);
+          struct.success = iprot.readString();
           struct.setSuccessIsSet(true);
         }
+        if (incoming.get(1)) {
+          struct.o1 = new MetaException();
+          struct.o1.read(iprot);
+          struct.setO1IsSet(true);
+        }
       }
     }
 
diff --git a/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php b/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
index 2c3a029..529d55f 100644
--- a/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
+++ b/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
@@ -141,6 +141,7 @@ interface ThriftHiveMetastoreIf extends \FacebookServiceIf {
   public function get_next_notification(\metastore\NotificationEventRequest $rqst);
   public function get_current_notificationEventId();
   public function fire_listener_event(\metastore\FireEventRequest $rqst);
+  public function get_metastore_db_uuid();
 }
 
 class ThriftHiveMetastoreClient extends \FacebookServiceClient implements \metastore\ThriftHiveMetastoreIf {
@@ -7344,6 +7345,59 @@ class ThriftHiveMetastoreClient extends \FacebookServiceClient implements \metas
     throw new \Exception("fire_listener_event failed: unknown result");
   }
 
+  public function get_metastore_db_uuid()
+  {
+    $this->send_get_metastore_db_uuid();
+    return $this->recv_get_metastore_db_uuid();
+  }
+
+  public function send_get_metastore_db_uuid()
+  {
+    $args = new \metastore\ThriftHiveMetastore_get_metastore_db_uuid_args();
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'get_metastore_db_uuid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('get_metastore_db_uuid', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_get_metastore_db_uuid()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_get_metastore_db_uuid_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_get_metastore_db_uuid_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    if ($result->o1 !== null) {
+      throw $result->o1;
+    }
+    throw new \Exception("get_metastore_db_uuid failed: unknown result");
+  }
+
 }
 
 // HELPER FUNCTIONS AND STRUCTURES
@@ -35475,4 +35529,148 @@ class ThriftHiveMetastore_fire_listener_event_result {
 
 }
 
+class ThriftHiveMetastore_get_metastore_db_uuid_args {
+  static $_TSPEC;
+
+
+  public function __construct() {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        );
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_metastore_db_uuid_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_metastore_db_uuid_args');
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_get_metastore_db_uuid_result {
+  static $_TSPEC;
+
+  public $success = null;
+  public $o1 = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::STRING,
+          ),
+        1 => array(
+          'var' => 'o1',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\MetaException',
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
+      if (isset($vals['o1'])) {
+        $this->o1 = $vals['o1'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_metastore_db_uuid_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 0:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->success);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 1:
+          if ($ftype == TType::STRUCT) {
+            $this->o1 = new \metastore\MetaException();
+            $xfer += $this->o1->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_metastore_db_uuid_result');
+    if ($this->success !== null) {
+      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
+      $xfer += $output->writeString($this->success);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o1 !== null) {
+      $xfer += $output->writeFieldBegin('o1', TType::STRUCT, 1);
+      $xfer += $this->o1->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
 
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
index c6ab4d4..c3f93cf 100755
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
@@ -148,6 +148,7 @@ if len(sys.argv) <= 1 or sys.argv[1] == '--help':
   print '  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)'
   print '  CurrentNotificationEventId get_current_notificationEventId()'
   print '  FireEventResponse fire_listener_event(FireEventRequest rqst)'
+  print '  string get_metastore_db_uuid()'
   print ''
   sys.exit(0)
 
@@ -949,6 +950,12 @@ elif cmd == 'fire_listener_event':
     sys.exit(1)
   pp.pprint(client.fire_listener_event(eval(args[0]),))
 
+elif cmd == 'get_metastore_db_uuid':
+  if len(args) != 0:
+    print 'get_metastore_db_uuid requires 0 args'
+    sys.exit(1)
+  pp.pprint(client.get_metastore_db_uuid())
+
 else:
   print 'Unrecognized method %s' % cmd
   sys.exit(1)
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
index a94a8f5..ef87582 100644
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
@@ -1034,6 +1034,9 @@ def fire_listener_event(self, rqst):
     """
     pass
 
+  def get_metastore_db_uuid(self, ):
+    pass
+
 
 class Client(fb303.FacebookService.Client, Iface):
   """
@@ -5528,6 +5531,33 @@ def recv_fire_listener_event(self, ):
       return result.success
     raise TApplicationException(TApplicationException.MISSING_RESULT, "fire_listener_event failed: unknown result");
 
+  def get_metastore_db_uuid(self, ):
+    self.send_get_metastore_db_uuid()
+    return self.recv_get_metastore_db_uuid()
+
+  def send_get_metastore_db_uuid(self, ):
+    self._oprot.writeMessageBegin('get_metastore_db_uuid', TMessageType.CALL, self._seqid)
+    args = get_metastore_db_uuid_args()
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_get_metastore_db_uuid(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = get_metastore_db_uuid_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    if result.o1 is not None:
+      raise result.o1
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_metastore_db_uuid failed: unknown result");
+
 
 class Processor(fb303.FacebookService.Processor, Iface, TProcessor):
   def __init__(self, handler):
@@ -5657,6 +5687,7 @@ def __init__(self, handler):
     self._processMap["get_next_notification"] = Processor.process_get_next_notification
     self._processMap["get_current_notificationEventId"] = Processor.process_get_current_notificationEventId
     self._processMap["fire_listener_event"] = Processor.process_fire_listener_event
+    self._processMap["get_metastore_db_uuid"] = Processor.process_get_metastore_db_uuid
 
   def process(self, iprot, oprot):
     (name, type, seqid) = iprot.readMessageBegin()
@@ -7659,6 +7690,20 @@ def process_fire_listener_event(self, seqid, iprot, oprot):
     oprot.writeMessageEnd()
     oprot.trans.flush()
 
+  def process_get_metastore_db_uuid(self, seqid, iprot, oprot):
+    args = get_metastore_db_uuid_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = get_metastore_db_uuid_result()
+    try:
+      result.success = self._handler.get_metastore_db_uuid()
+    except MetaException as o1:
+      result.o1 = o1
+    oprot.writeMessageBegin("get_metastore_db_uuid", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
 
 # HELPER FUNCTIONS AND STRUCTURES
 
@@ -27891,3 +27936,117 @@ def __eq__(self, other):
 
   def __ne__(self, other):
     return not (self == other)
+
+class get_metastore_db_uuid_args:
+
+  thrift_spec = (
+  )
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_metastore_db_uuid_args')
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_metastore_db_uuid_result:
+  """
+  Attributes:
+   - success
+   - o1
+  """
+
+  thrift_spec = (
+    (0, TType.STRING, 'success', None, None, ), # 0
+    (1, TType.STRUCT, 'o1', (MetaException, MetaException.thrift_spec), None, ), # 1
+  )
+
+  def __init__(self, success=None, o1=None,):
+    self.success = success
+    self.o1 = o1
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.STRING:
+          self.success = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      elif fid == 1:
+        if ftype == TType.STRUCT:
+          self.o1 = MetaException()
+          self.o1.read(iprot)
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_metastore_db_uuid_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.STRING, 0)
+      oprot.writeString(self.success)
+      oprot.writeFieldEnd()
+    if self.o1 is not None:
+      oprot.writeFieldBegin('o1', TType.STRUCT, 1)
+      self.o1.write(oprot)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
diff --git a/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb b/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
index f311964..db374e6 100644
--- a/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
+++ b/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
@@ -2109,6 +2109,22 @@ module ThriftHiveMetastore
       raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fire_listener_event failed: unknown result')
     end
 
+    def get_metastore_db_uuid()
+      send_get_metastore_db_uuid()
+      return recv_get_metastore_db_uuid()
+    end
+
+    def send_get_metastore_db_uuid()
+      send_message('get_metastore_db_uuid', Get_metastore_db_uuid_args)
+    end
+
+    def recv_get_metastore_db_uuid()
+      result = receive_message(Get_metastore_db_uuid_result)
+      return result.success unless result.success.nil?
+      raise result.o1 unless result.o1.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_metastore_db_uuid failed: unknown result')
+    end
+
   end
 
   class Processor < ::FacebookService::Processor 
@@ -3715,6 +3731,17 @@ module ThriftHiveMetastore
       write_result(result, oprot, 'fire_listener_event', seqid)
     end
 
+    def process_get_metastore_db_uuid(seqid, iprot, oprot)
+      args = read_args(iprot, Get_metastore_db_uuid_args)
+      result = Get_metastore_db_uuid_result.new()
+      begin
+        result.success = @handler.get_metastore_db_uuid()
+      rescue ::MetaException => o1
+        result.o1 = o1
+      end
+      write_result(result, oprot, 'get_metastore_db_uuid', seqid)
+    end
+
   end
 
   # HELPER FUNCTIONS AND STRUCTURES
@@ -8501,5 +8528,38 @@ module ThriftHiveMetastore
     ::Thrift::Struct.generate_accessors self
   end
 
+  class Get_metastore_db_uuid_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+
+    FIELDS = {
+
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Get_metastore_db_uuid_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+    O1 = 1
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
+      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
 end
 
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
index c09f1bf..468a0fb 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
@@ -6290,6 +6290,16 @@ public FireEventResponse fire_listener_event(FireEventRequest rqst) throws TExce
               " not currently supported.");
       }
     }
+
+    @Override
+    public String get_metastore_db_uuid() throws MetaException, TException {
+      try {
+        return getMS().getMetastoreDbUuid();
+      } catch (MetaException e) {
+        LOG.error("Exception thrown while querying metastore db uuid", e);
+        throw e;
+      }
+    }
   }
 
   public static IHMSHandler newRetryingHMSHandler(IHMSHandler baseHandler, HiveConf hiveConf)
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
index b3ceb86..1ac4c32 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
@@ -2151,4 +2151,9 @@ public AggrStats getAggrColStatsFor(String dbName, String tblName,
     PartitionsStatsRequest req = new PartitionsStatsRequest(dbName, tblName, colNames, partNames);
     return client.get_aggr_stats_for(req);
   }
+
+  @Override
+  public String getMetastoreDbUuid() throws TException {
+    return client.get_metastore_db_uuid();
+  }
 }
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java b/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
index 79bf87c..3d67949 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
@@ -1478,4 +1478,12 @@ public AggrStats getAggrColStatsFor(String dbName, String tblName,
       List<String> colNames, List<String> partName)  throws NoSuchObjectException, MetaException, TException;
 
   boolean setPartitionColumnStatistics(SetPartitionsStatsRequest request) throws NoSuchObjectException, InvalidObjectException, MetaException, TException, InvalidInputException;
+
+  /**
+   * Gets the unique id of the backing database instance used for storing metadata
+   * @return unique id of the backing database instance
+   * @throws MetaException if HMS is not able to fetch the UUID or if there are multiple UUIDs found in the database
+   * @throws TException in case of Thrift errors
+   */
+  String getMetastoreDbUuid() throws MetaException, TException;
 }
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
index 3897224..9093d10 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
@@ -23,9 +23,12 @@
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.URI;
+import java.nio.ByteBuffer;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -37,6 +40,7 @@
 import java.util.Set;
 import java.util.Timer;
 import java.util.TimerTask;
+import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -143,6 +147,7 @@
 import org.apache.hadoop.hive.metastore.model.MTablePrivilege;
 import org.apache.hadoop.hive.metastore.model.MType;
 import org.apache.hadoop.hive.metastore.model.MVersionTable;
+import org.apache.hadoop.hive.metastore.model.MMetastoreDBProperties;
 import org.apache.hadoop.hive.metastore.parser.ExpressionTree;
 import org.apache.hadoop.hive.metastore.parser.ExpressionTree.ANTLRNoCaseStringStream;
 import org.apache.hadoop.hive.metastore.parser.ExpressionTree.FilterBuilder;
@@ -161,6 +166,7 @@
 
 import com.google.common.collect.Lists;
 
+
 /**
  * This class is the interface between the application logic and the database
  * store that contains the objects. Refrain putting any logic in mode.M* objects
@@ -3377,6 +3383,87 @@ private void preDropStorageDescriptor(MStorageDescriptor msd) {
   }
 
   @Override
+  public String getMetastoreDbUuid() throws MetaException {
+    String ret = getGuidFromDB();
+    if(ret != null) {
+      return ret;
+    }
+    return createDbGuidAndPersist();
+  }
+
+  private String createDbGuidAndPersist() throws MetaException {
+    boolean success = false;
+    Query query = null;
+    try {
+      openTransaction();
+      MMetastoreDBProperties prop = new MMetastoreDBProperties();
+      prop.setPropertykey("guid");
+      final String guid = UUID.randomUUID().toString();
+      LOG.debug("Attempting to add a guid " + guid + " for the metastore db");
+      prop.setPropertyValue(guid);
+      prop.setDescription("Metastore DB GUID generated on "
+          + (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date())));
+      pm.makePersistent(prop);
+      success = commitTransaction();
+      if (success) {
+        LOG.info("Metastore db guid " + guid + " created successfully");
+        return guid;
+      }
+    } catch (Exception e) {
+      LOG.warn(e.getMessage(), e);
+    } finally {
+      if (!success) {
+        rollbackTransaction();
+      }
+      if (query != null) {
+        query.closeAll();
+      }
+    }
+    // it possible that some other HMS instance could have created the guid
+    // at the same time due which this instance could not create a guid above
+    // in such case return the guid already generated
+    final String guid = getGuidFromDB();
+    if (guid == null) {
+      throw new MetaException("Unable to create or fetch the metastore database uuid");
+    }
+    return guid;
+  }
+
+  private String getGuidFromDB() throws MetaException {
+    boolean success = false;
+    Query query = null;
+    try {
+      openTransaction();
+      query = pm.newQuery(MMetastoreDBProperties.class, "this.propertyKey == key");
+      query.declareParameters("java.lang.String key");
+      Collection<MMetastoreDBProperties> names = (Collection<MMetastoreDBProperties>) query.execute("guid");
+      List<String> uuids = new ArrayList<String>();
+      for (Iterator<MMetastoreDBProperties> i = names.iterator(); i.hasNext();) {
+        String uuid = i.next().getPropertyValue();
+        LOG.debug("Found guid " + uuid);
+        uuids.add(uuid);
+      }
+      success = commitTransaction();
+      if(uuids.size() > 1) {
+        throw new MetaException("Multiple uuids found");
+      }
+      if(!uuids.isEmpty()) {
+        LOG.debug("Returning guid of metastore db : " + uuids.get(0));
+        return uuids.get(0);
+      }
+    } finally {
+      if (!success) {
+        rollbackTransaction();
+      }
+      if (query != null) {
+        query.closeAll();
+      }
+    }
+    LOG.warn("Guid for metastore db not found");
+    return null;
+  }
+
+  @Override
   public boolean addIndex(Index index) throws InvalidObjectException,
       MetaException {
     boolean commited = false;
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/RawStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/RawStore.java
index 67dd122..57c754b 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/RawStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/RawStore.java
@@ -624,4 +624,11 @@ public AggrStats get_aggr_stats_for(String dbName, String tblName,
    */
   @InterfaceStability.Evolving
   int getDatabaseCount() throws MetaException;
+
+  /**
+   * Gets the unique id of the backing datastore for the metadata
+   * @return
+   * @throws MetaException
+   */
+  String getMetastoreDbUuid() throws MetaException;
 }
diff --git a/metastore/src/model/org/apache/hadoop/hive/metastore/model/MMetastoreDBProperties.java b/metastore/src/model/org/apache/hadoop/hive/metastore/model/MMetastoreDBProperties.java
new file mode 100644
index 0000000..c0a2485
--- /dev/null
+++ b/metastore/src/model/org/apache/hadoop/hive/metastore/model/MMetastoreDBProperties.java
@@ -0,0 +1,56 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hive.metastore.model;
+
+public class MMetastoreDBProperties {
+  private String propertyKey;
+  private String propertyValue;
+  private String description;
+
+  public MMetastoreDBProperties() {}
+
+  public MMetastoreDBProperties(String propertykey, String propertyValue, String description) {
+    this.propertyKey = propertykey;
+    this.propertyValue = propertyValue;
+    this.description = description;
+  }
+
+  public String getPropertykey() {
+    return propertyKey;
+  }
+
+  public void setPropertykey(String propertykey) {
+    this.propertyKey = propertykey;
+  }
+
+  public String getPropertyValue() {
+    return propertyValue;
+  }
+
+  public void setPropertyValue(String propertyValue) {
+    this.propertyValue = propertyValue;
+  }
+
+  public String getDescription() {
+    return description;
+  }
+
+  public void setDescription(String description) {
+    this.description = description;
+  }
+}
diff --git a/metastore/src/model/package.jdo b/metastore/src/model/package.jdo
index b41b3d8..d3dc926 100644
--- a/metastore/src/model/package.jdo
+++ b/metastore/src/model/package.jdo
@@ -929,6 +929,24 @@
       </field>
     </class>
 
+    <class name="MMetastoreDBProperties" table="METASTORE_DB_PROPERTIES" identity-type="datastore" detachable="true">
+      <datastore-identity>
+        <column name="PROPERTY_ID"/>
+      </datastore-identity>
+      <field name ="propertyKey">
+        <column name="PROPERTY_KEY" length="255" jdbc-type="VARCHAR" allows-null="false"/>
+      </field>
+      <field name ="propertyValue">
+        <column name="PROPERTY_VALUE" length="1000" jdbc-type="VARCHAR" allows-null="false"/>
+      </field>
+      <field name ="description">
+        <column name="DESCRIPTION" length="1000" jdbc-type="VARCHAR" allows-null="false"/>
+      </field>
+      <index name="PropertyKeyIndex" unique="true">
+        <column name="PROPERTY_KEY"/>
+      </index>
+    </class>
+
     <class name="MResourceUri" embedded-only="true" table="RESOURCE_URI" detachable="true">
       <field name="resourceType">
         <column name="RESOURCE_TYPE" jdbc-type="INTEGER"/>
diff --git a/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreControlledCommit.java b/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreControlledCommit.java
index b7315f7..968ea79 100644
--- a/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreControlledCommit.java
+++ b/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreControlledCommit.java
@@ -791,4 +791,9 @@ public int getPartitionCount() throws MetaException {
   public int getDatabaseCount() throws MetaException {
     return objectStore.getDatabaseCount();
   }
+
+  @Override
+  public String getMetastoreDbUuid() throws MetaException {
+    throw new MetaException("Get metastore uuid is not implemented");
+  }
 }
diff --git a/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreForJdoConnection.java b/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreForJdoConnection.java
index 899fe7b..3287993 100644
--- a/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreForJdoConnection.java
+++ b/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreForJdoConnection.java
@@ -805,6 +805,9 @@ public int getPartitionCount() throws MetaException {
   public int getDatabaseCount() throws MetaException {
     return 0;
   }
-}
-
 
+  @Override
+  public String getMetastoreDbUuid() throws MetaException {
+    throw new MetaException("Get metastore uuid is not implemented");
+  }
+}
-- 
1.7.9.5

