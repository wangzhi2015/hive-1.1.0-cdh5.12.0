From 07c789598d6e34f5000545f1ea87a5c83a28eb8e Mon Sep 17 00:00:00 2001
From: Vihang Karajgaonkar <vihang@cloudera.com>
Date: Sun, 4 Jun 2017 14:18:05 -0700
Subject: [PATCH 1163/1164] CDH-54813 : CLOUDERA-BUILD : Introduce CDH version
 compatibility in CDHMetaStoreSchemaInfo

This change implements the isVersionCompatible method for CDHMetaStoreSchemaInfo. It makes sure that
value stored in SCHEMA_VERSION_V2 is compatible with the CDH version from the jars. Specifically,
it makes sure the SCHEMA_VERSION_V2 stored in the db is atleast at the minimum required version
so that HMS can safely start

Change-Id: I768e2c9cb6763058fdff119d63555a7448aeac67
---
 .../hive/metastore/TestCDHMetaStoreSchemaInfo.java |  170 +++++++++++++++
 .../hive/metastore/CDHMetaStoreSchemaInfo.java     |  230 ++++++++++++++++----
 .../hive/metastore/TestCDHMetaStoreSchemaInfo.java |  105 ---------
 3 files changed, 357 insertions(+), 148 deletions(-)
 create mode 100644 itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java
 delete mode 100644 metastore/src/test/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java

diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java
new file mode 100644
index 0000000..099d9bc
--- /dev/null
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java
@@ -0,0 +1,170 @@
+package org.apache.hadoop.hive.metastore;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.TreeSet;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.metastore.CDHMetaStoreSchemaInfo.CDHVersion;
+import org.apache.hadoop.hive.metastore.tools.HiveSchemaHelper.MetaStoreConnectionInfo;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mockito;
+
+public class TestCDHMetaStoreSchemaInfo {
+  private IMetaStoreSchemaInfo metastoreSchemaInfo;
+  private static Configuration conf;
+
+  @BeforeClass
+  public static void beforeClass() {
+    conf = new HiveConf(TestCDHMetaStoreSchemaInfo.class);
+  }
+
+  @Before
+  public void setup() {
+    metastoreSchemaInfo = MetaStoreSchemaInfoFactory.get(conf,
+      System.getProperty("test.tmp.dir", "target/tmp"), "derby");
+    Assert.assertNotNull(metastoreSchemaInfo);
+    Assert.assertTrue("Unexpected instance of IMetaStoreSchemaInfo",
+      metastoreSchemaInfo instanceof CDHMetaStoreSchemaInfo);
+  }
+
+  @Test
+  public void testGetHiveSchemaVersion() {
+    String hiveSchemaVersion = metastoreSchemaInfo.getHiveSchemaVersion();
+    Assert.assertTrue("HiveSchema version should contain CDH version",
+      hiveSchemaVersion.contains("-cdh"));
+  }
+
+  @Test
+  public void testUpgradeScripts() throws Exception {
+    MetaStoreConnectionInfo mockConnectionInfo = Mockito.mock(MetaStoreConnectionInfo.class);
+    Mockito.when(mockConnectionInfo.getDbType()).thenReturn("derby");
+    String[] dummyCDHUpgradeOrder =
+      new String[] { "1.1.0-to-1.1.0-cdh5.12.0", "1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0",
+        "1.1.0-cdh5.13.0-to-1.1.0-cdh5.15.0", "1.1.0-cdh5.15.0-to-2.1.0-cdh6.0.0" };
+    CDHMetaStoreSchemaInfo cdhSchemaInfo = Mockito.mock(CDHMetaStoreSchemaInfo.class);
+    Mockito.when(cdhSchemaInfo.loadAllCDHUpgradeScripts(Mockito.anyString()))
+      .thenReturn(dummyCDHUpgradeOrder);
+    // case 1. when hive version is 1.1.0 and db version is 1.1.0
+    // no upgrade is neccessary
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0");
+    // Mockito
+    // .when(cdhSchemaInfo.getMetaStoreSchemaVersion(Mockito.any(MetaStoreConnectionInfo.class)))
+    // .thenReturn("1.1.0");
+    Mockito.when(cdhSchemaInfo.getUpgradeScripts(Mockito.anyString())).thenCallRealMethod();
+
+    List<String> upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0");
+    Assert.assertTrue(
+      "Upgrade scripts should be have been empty when hive version and db version is same",
+      upgradeOrder.isEmpty());
+
+    // when hive version is 1.1.0-cdh-5.12.0 and db version is 1.1.0
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.12.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0");
+    Assert.assertEquals("upgrade order should contain only one script", 1, upgradeOrder.size());
+    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.12.0",
+      upgradeOrder.get(0).startsWith("upgrade-1.1.0-to-1.1.0-cdh5.12.0"));
+
+    // when hive version is 1.1.0-cdh-5.13.0 and db version is 1.1.0
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.13.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0");
+    Assert.assertEquals("upgrade order should contain 2 scripts", 2, upgradeOrder.size());
+    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.12.0",
+      upgradeOrder.get(0).startsWith("upgrade-1.1.0-to-1.1.0-cdh5.12.0"));
+    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.13.0",
+      upgradeOrder.get(1).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
+
+    // when db version is 1.1.0-cdh5.12.0 and hive version is 1.1.0-cdh5.13.0
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.13.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.12.0");
+    Assert.assertEquals("upgrade order should contain only one script", 1, upgradeOrder.size());
+    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.12.0",
+      upgradeOrder.get(0).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
+
+    // when db version is higher than hive version no upgrade is necessary
+    // this can happen if the env is rollbacked/downgraded to earlier version
+    // of CDH.
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.12.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.13.0");
+    Assert.assertEquals("upgrade order should not contain any scripts", 0, upgradeOrder.size());
+
+    //upgrade from cdh5.12 to cdh6.0 which involves a rebase
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("2.1.0-cdh6.0.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.12.0");
+    Assert.assertEquals("upgrade order should contain 3 scripts", 3, upgradeOrder.size());
+    Assert.assertTrue(upgradeOrder.get(0).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
+    Assert.assertTrue(upgradeOrder.get(1).startsWith("upgrade-1.1.0-cdh5.13.0-to-1.1.0-cdh5.15.0"));
+    Assert.assertTrue(upgradeOrder.get(2).startsWith("upgrade-1.1.0-cdh5.15.0-to-2.1.0-cdh6.0.0"));
+
+    //case when hive version is not present in upgrade order
+    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.14.0");
+    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.12.0");
+    Assert.assertEquals("upgrade order should contain 1 scripts", 1, upgradeOrder.size());
+    Assert.assertTrue(upgradeOrder.get(0).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
+  }
+
+  @Test
+  public void testSameVersionCompatibility() {
+    Assert.assertTrue("Same version string should be always compatible",
+      metastoreSchemaInfo.isVersionCompatible("1.1.0-cdh5.12.0", "1.1.0-cdh5.12.0"));
+  }
+
+  @Test
+  public void testVersionCompatibility() throws HiveMetaException {
+    Collection<String> dummySchemaChangeVersions = Arrays.asList(new String[] {
+      "1.1.0-cdh5.12.0",
+      "1.1.0-cdh5.12.5",
+      "1.1.0-cdh5.14.0",
+      "2.1.1-cdh6.0.0",
+      "2.1.1-cdh6.1.2"
+    });
+    CDHMetaStoreSchemaInfo cdhSchemaInfo = createMockMetaStoreSchemaInfo(dummySchemaChangeVersions);
+    //both the cdh and db versions are before the first schema change version
+    Assert.assertTrue(cdhSchemaInfo.isVersionCompatible("1.1.0-cdh5.11.0", "1.1.0-cdh5.11.3"));
+    // Schema changes in metastore are backwards compatible. So cdh version less than
+    // db version should not break
+    Assert.assertTrue(cdhSchemaInfo.isVersionCompatible("1.1.0-cdh5.11.0", "1.1.0-cdh5.12.3"));
+    //cdh and db versions both have schema changes from 5.12.0
+    Assert.assertTrue(cdhSchemaInfo.isVersionCompatible("1.1.0-cdh5.12.1", "1.1.0-cdh5.12.3"));
+    Assert.assertTrue(cdhSchemaInfo.isVersionCompatible("1.1.0-cdh5.12.0", "1.1.0-cdh5.12.4"));
+    //db version 5.12.0 does not have the schema changes required by cdh 5.12.5
+    Assert.assertFalse(cdhSchemaInfo.isVersionCompatible("1.1.0-cdh5.12.5", "1.1.0-cdh5.12.0"));
+    //db version 5.12.6 does not have schema changes required by from 5.14.3
+    Assert.assertFalse(cdhSchemaInfo.isVersionCompatible("1.1.0-cdh5.14.3", "1.1.0-cdh5.12.6"));
+    //major version difference
+    Assert.assertFalse("Major version difference should not be compatible",
+      cdhSchemaInfo.isVersionCompatible("2.1.1-cdh6.0.0", "1.1.0-cdh6.0.0"));
+    Assert.assertTrue(
+      "maintainence release which does not have any schema changes should be compatible",
+      cdhSchemaInfo.isVersionCompatible("2.1.1-cdh6.0.0", "2.1.1-cdh6.0.1"));
+  }
+
+  @Test
+  public void testCDHVersionsWithSchemaChanges() throws Exception {
+    Collection<CDHVersion> cdhVersionsWithSchemaChanges =
+      ((CDHMetaStoreSchemaInfo) metastoreSchemaInfo).getCDHVersionsWithSchemaChanges();
+    Assert.assertNotNull("CDH versions with schema changes should never be null",
+      cdhVersionsWithSchemaChanges);
+    Assert.assertFalse(
+      "As of CDH 5.12.0 there is atleast one schema change so this collection should not be empty",
+      cdhVersionsWithSchemaChanges.isEmpty());
+  }
+
+  private CDHMetaStoreSchemaInfo createMockMetaStoreSchemaInfo(
+    Collection<String> dummySchemaChangeVersions) throws HiveMetaException {
+    Collection<CDHVersion> cdhVersions = new TreeSet<>(); 
+    for(String version : dummySchemaChangeVersions) {
+      cdhVersions.add(new CDHVersion(version));
+    }
+    CDHMetaStoreSchemaInfo cdhSchemaInfo = Mockito.mock(CDHMetaStoreSchemaInfo.class);
+    Mockito.when(cdhSchemaInfo.getCDHVersionsWithSchemaChanges()).thenReturn(cdhVersions);
+    Mockito.when(cdhSchemaInfo.isVersionCompatible(Mockito.anyString(), Mockito.anyString()))
+      .thenCallRealMethod();
+    return cdhSchemaInfo;
+  }
+}
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/CDHMetaStoreSchemaInfo.java b/metastore/src/java/org/apache/hadoop/hive/metastore/CDHMetaStoreSchemaInfo.java
index 1bccb2e..189f8f2 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/CDHMetaStoreSchemaInfo.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/CDHMetaStoreSchemaInfo.java
@@ -6,12 +6,13 @@
 import java.io.IOException;
 import java.sql.Connection;
 import java.sql.ResultSet;
-import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Comparator;
 import java.util.List;
-import java.util.Map;
+import java.util.TreeSet;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -20,7 +21,7 @@
 import org.apache.hive.common.util.HiveVersionInfo;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.ImmutableMap;
+
 
 /**
  * This class defines the Cloudera specific implementation of IMetaStoreSchemaInfo It overrides the
@@ -36,6 +37,27 @@
 
   private static final Log LOG = LogFactory.getLog(CDHMetaStoreSchemaInfo.class.getName());
 
+  /**
+   * This method returns a collection of CDHVersions which introduce CDH specific schema
+   * changes. This is used to determine the compatibility of the running CDH hive version and the
+   * version stored in the database. It uses the scripts directory and gets the file names using
+   * cdh.upgrade.order.<dbtype> file
+   *
+   * @return sorted collection of CDHVersions which introduce schema changes
+   * @throws HiveMetaException
+   */
+  @VisibleForTesting
+  Collection<CDHVersion> getCDHVersionsWithSchemaChanges() throws HiveMetaException {
+    String[] cdhUpgradeScriptNames = loadAllCDHUpgradeScripts(dbType);
+    TreeSet<CDHVersion> cdhVersionsWithSchemaChanges = new TreeSet<>();
+    for (String cdhUpgradeScriptName : cdhUpgradeScriptNames) {
+      String toVersionFromUpgradePath = cdhUpgradeScriptName.split("-to-")[1];
+      LOG.debug("Adding " + toVersionFromUpgradePath + " to cdh versions with schema changes");
+      cdhVersionsWithSchemaChanges.add(new CDHVersion(toVersionFromUpgradePath));
+    }
+    return cdhVersionsWithSchemaChanges;
+  }
+
   public CDHMetaStoreSchemaInfo(String hiveHome, String dbType)
     throws HiveMetaException {
     super(hiveHome, dbType);
@@ -137,63 +159,35 @@ public String getHiveSchemaVersion() {
       return minorUpgradeList;
     }
 
+    CDHVersion currentCdhVersion = new CDHVersion(cdhVersion);
     // the cdh.upgrade.order file will list all the upgrade paths
     // to reach the current distribution version.
     String[] cdhSchemaVersions = loadAllCDHUpgradeScripts(dbType);
-    String targetCdhVersion = cdhVersion.split("-")[1];
-    String[] versionParts = from.split("-");
-    String fromCdhVersion = null;
-    if (versionParts.length > 1) {
+    CDHVersion fromCdhVersion = null;
+    if (from.indexOf('-') != -1) {
       // from version contains cdh version
-      fromCdhVersion = versionParts[1];
+      fromCdhVersion = new CDHVersion(from);
     }
     for (int i = 0; i < cdhSchemaVersions.length; i++) {
       // we should skip all the upgrade paths where target is lower than current version
-      String toVersionFromUpgradePath = cdhSchemaVersions[i].split("-to-")[1].split("-")[1];
+      CDHVersion toVersionFromUpgradePath = new CDHVersion(cdhSchemaVersions[i].split("-to-")[1]);
       if (fromCdhVersion != null
-        && compareCDHVersions(fromCdhVersion, toVersionFromUpgradePath) >= 0) {
-        System.out.println("Current version is higher than or equal to " + toVersionFromUpgradePath
+        && fromCdhVersion.compareTo(toVersionFromUpgradePath) >= 0) {
+        LOG.info("Current version is higher than or equal to " + toVersionFromUpgradePath
           + " Skipping file " + cdhSchemaVersions[i]);
         continue;
       }
-      if (compareCDHVersions(toVersionFromUpgradePath, targetCdhVersion) <= 0) {
+      if (toVersionFromUpgradePath.compareTo(currentCdhVersion) <= 0) {
         String scriptFile = generateUpgradeFileName(cdhSchemaVersions[i]);
         minorUpgradeList.add(scriptFile);
       } else {
-        System.out
-          .println("Upgrade script version is newer than current hive version, skipping file "
+        LOG.info("Upgrade script version is newer than current hive version, skipping file "
             + cdhSchemaVersions[i]);
       }
     }
     return minorUpgradeList;
   }
 
-  // Compare the 2 version strings based on the version's numerical values.
-  // returns a negative, zero or positive integer based on whether version1
-  private static int compareCDHVersions(String version1, String version2) {
-    System.out.println("Comparing " + version1 + " with " + version2);
-    version1 = version1.toLowerCase().replaceAll("cdh","");
-    version2 = version2.toLowerCase().replaceAll("cdh","");
-
-    String[] aVersionParts = version1.split("\\.");
-    String[] bVersionParts = version2.split("\\.");
-
-    for (int i = 0; i < aVersionParts.length; i++) {
-      Integer aVersionPart = Integer.valueOf(aVersionParts[i]);
-      Integer bVersionPart = Integer.valueOf(bVersionParts[i]);
-      if (aVersionPart > bVersionPart) {
-        System.out.println("Version " + aVersionPart + " is higher than " + bVersionPart);
-        return 1;
-      } else if (aVersionPart < bVersionPart) {
-        System.out.println("Version " + aVersionPart + " is lower than " + bVersionPart);
-        return -1;
-      } else {
-        continue; // compare next part
-      }
-    }
-    return 0; // versions are equal
-  }
-
   /**
    * A dbVersion is compatible with hive version if it is greater or equal to
    * the hive version. This is result of the db schema upgrade design principles
@@ -211,10 +205,11 @@ public boolean isVersionCompatible(String cdhHiveVersion, String dbVersion) {
     boolean isCompatible = super.isVersionCompatible(getMajorVersion(cdhHiveVersion),
                              getMajorVersion(dbVersion));
 
-    LOG.debug("Upstream versions are compatible, comparing downstream");
-    if (!isCompatible)
+    if (!isCompatible) {
       return isCompatible;
+    }
 
+    LOG.debug("Upstream versions are compatible, comparing downstream");
     String[] cdhFullVersion = cdhHiveVersion.split("-");
     String[] hmsFullVersion = dbVersion.split("-");
 
@@ -230,8 +225,50 @@ public boolean isVersionCompatible(String cdhHiveVersion, String dbVersion) {
       throw new RuntimeException("Invalid CDH version string " + cdhHiveVersion
         + ". The version string should be of the format <hiveversion>-<cdhversion>");
     }
+    return isCDHVersionCompatible(new CDHVersion(cdhHiveVersion), new CDHVersion(dbVersion));
+  }
 
-    return (compareCDHVersions(cdhFullVersion[1], hmsFullVersion[1]) > 0) ? false : true;
+  private boolean isCDHVersionCompatible(CDHVersion cdhVersion, CDHVersion dbVersion) {
+    // happy path both the versions are same
+    if (cdhVersion.equals(dbVersion)) {
+      return true;
+    }
+    // in order to determine if the current CDH version will work with
+    // the schema version stored in DB the DB version should be atleast
+    // equal to the highest schema change version which is less than current cdh version
+    // In this context incompatibility means that HMS cannot be booted unless the db version is
+    // upgraded to certain version using schemaTool upgradeSchema
+    // This version is referred to as minimumRequiredSchemaVersion below.
+    // eg. if there is schema changes introduced in 5.12.0, 5.12.2 and 5.14.2 like seen in timeline
+    // below. In this case any CDH version which < 5.12.0 does not really need the schema changes
+    // introduced in 5.12.0. So the minimumRequiredSchemaVersion in this case is null (compatible)
+    // So in the example below all CDH versions will work irrespective of what is the DB
+    // version.
+    // In case of CDH versions >=5.12.0 and <5.12.2 the db version should be atleast 5.12.0
+    // In case of CDH versions >=5.12.2 and <5.14.2 the db version should be atleast 5.12.2
+    // In case of CDH versions >=5.14.2 the db version should be atleast 5.14.2
+    // ---------------------------------------------------------------------------------------------
+    // Schema change versions: ----------------------5.12.0------------5.12.2-------------5.14.2----
+    // CDH Versions:           ----5.11.0---5.11.3---5.12.0---5.12.1---5.12.2---5.13.0----5.14.2----
+    // Min required db version:---------null---------5.12.0------------5.12.2-------------5.14.2----
+    CDHVersion minRequiredSchemaVersion = null;
+    Collection<CDHVersion> cdhVersionsWithSchemaChanges;
+    try {
+      cdhVersionsWithSchemaChanges = getCDHVersionsWithSchemaChanges();
+    } catch (HiveMetaException e) {
+      LOG.error("Unable to load the cdh versions with schema changes ", e);
+      throw new RuntimeException(e);
+    }
+    for (CDHVersion currentCheckPoint : cdhVersionsWithSchemaChanges) {
+      if (currentCheckPoint.compareTo(cdhVersion) <= 0) {
+        minRequiredSchemaVersion = currentCheckPoint;
+      }
+    }
+    if (minRequiredSchemaVersion != null) {
+      return dbVersion.compareTo(minRequiredSchemaVersion) >= 0 ? true : false;
+    }
+    // there is no minRequiredSchemaVersion so assume compatible
+    return true;
   }
 
   @Override
@@ -284,4 +321,111 @@ private String getColumnValue(ResultSet res, String columnName) throws SQLExcept
     }
     return null;
   }
+
+  /**
+   * Comparable class for CDH Versions
+   */
+  @VisibleForTesting
+  static class CDHVersion implements Comparable<CDHVersion> {
+    private final String version;
+    private final boolean skipMaintainenceRelease;
+
+    /**
+     * Given a full version string like 1.1.0-cdh5.12.0 returns the CDH version
+     *
+     * @param versionString full version string including the hive version
+     * @return cdh version string
+     */
+    private String getCdhVersionString() {
+      // versionString is of the format <hiveversion>-<cdhversion> eg: 1.1.0-cdh5.12.0
+      String[] parts = version.split("-");
+      if (parts.length > 1) {
+        return parts[1].replaceAll("cdh", "");
+      }
+      throw new IllegalArgumentException("Invalid format of cdh version string " + version);
+    }
+
+    public CDHVersion(String versionStr) {
+      this(versionStr, false);
+    }
+
+    public String toString() {
+      return version;
+    }
+
+    public CDHVersion(String versionStr, boolean skipMaintainenceRelease) {
+      if(versionStr == null) {
+        throw new IllegalArgumentException("Version cannot be null");
+      }
+      this.version = versionStr.toLowerCase();
+      this.skipMaintainenceRelease = skipMaintainenceRelease;
+    }
+
+    /**
+     * Compares if this with the given CDHVersion and return -1, 0 or 1 based on whether this is
+     * lesser, equals or greater than the give CDHVersion respectively. If skipMaintainenceRelease
+     * is true comparison skips the Maintenance release versions for comparison. Maintenance release
+     * versions are the last numeric values in the dot separated version string. Eg. 5.12.2, 5.12.0,
+     * 5.12.4 will all be equivalent versions if this parameter is set to true
+     *
+     * @param other CDHVersion to be used for comparison with this
+     * @return -1 if this is strictly less than given version, 0 if this is equal and 1 if this is
+     *         strictly greater than given version.
+     */
+    @Override
+    public int compareTo(CDHVersion other) {
+      LOG.debug("Comparing " + this + " with " + other);
+      String cdhVersion1 = getCdhVersionString();
+      String cdhVersion2 = other.getCdhVersionString();
+
+      String[] aVersionParts = cdhVersion1.split("\\.");
+      String[] bVersionParts = cdhVersion2.split("\\.");
+
+      if (aVersionParts.length != bVersionParts.length) {
+        // cannot compare if both the version strings are of different format
+        throw new IllegalArgumentException("Cannot compare Version strings " + cdhVersion1 + " and "
+          + cdhVersion2 + " since follow different format");
+      }
+      for (int i = 0; i < aVersionParts.length; i++) {
+        Integer aVersionPart = Integer.valueOf(aVersionParts[i]);
+        Integer bVersionPart = Integer.valueOf(bVersionParts[i]);
+        if (this.skipMaintainenceRelease && i == aVersionParts.length - 1) {
+          continue;
+        }
+        if (aVersionPart > bVersionPart) {
+          LOG.debug("Version " + aVersionPart + " is higher than " + bVersionPart);
+          return 1;
+        } else if (aVersionPart < bVersionPart) {
+          LOG.debug("Version " + aVersionPart + " is lower than " + bVersionPart);
+          return -1;
+        }
+      }
+      return 0; // versions are equal
+    }
+
+    @Override
+    public int hashCode() {
+      final int prime = 31;
+      int result = 1;
+      result = prime * result + ((version == null) ? 0 : version.hashCode());
+      return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (this == obj)
+        return true;
+      if (obj == null)
+        return false;
+      if (getClass() != obj.getClass())
+        return false;
+      CDHVersion other = (CDHVersion) obj;
+      if (version == null) {
+        if (other.version != null)
+          return false;
+      } else if (!version.equals(other.version))
+        return false;
+      return true;
+    }
+  }
 }
diff --git a/metastore/src/test/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java b/metastore/src/test/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java
deleted file mode 100644
index 9c6c712..0000000
--- a/metastore/src/test/org/apache/hadoop/hive/metastore/TestCDHMetaStoreSchemaInfo.java
+++ /dev/null
@@ -1,105 +0,0 @@
-package org.apache.hadoop.hive.metastore;
-
-import java.util.List;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.hive.conf.HiveConf;
-import org.apache.hadoop.hive.metastore.tools.HiveSchemaHelper.MetaStoreConnectionInfo;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mockito;
-
-public class TestCDHMetaStoreSchemaInfo {
-  private IMetaStoreSchemaInfo metastoreSchemaInfo;
-  private static Configuration conf;
-
-  @BeforeClass
-  public static void beforeClass() {
-    conf = new HiveConf(TestCDHMetaStoreSchemaInfo.class);
-  }
-
-  @Before
-  public void setup() {
-    metastoreSchemaInfo = MetaStoreSchemaInfoFactory.get(conf);
-    Assert.assertNotNull(metastoreSchemaInfo);
-    Assert.assertTrue("Unexpected instance of IMetaStoreSchemaInfo",
-      metastoreSchemaInfo instanceof CDHMetaStoreSchemaInfo);
-  }
-
-  @Test
-  public void testGetHiveSchemaVersion() {
-    String hiveSchemaVersion = metastoreSchemaInfo.getHiveSchemaVersion();
-    Assert.assertTrue("HiveSchema version should contain CDH version",
-      hiveSchemaVersion.contains("-cdh"));
-  }
-
-  @Test
-  public void testUpgradeScripts() throws Exception {
-    MetaStoreConnectionInfo mockConnectionInfo = Mockito.mock(MetaStoreConnectionInfo.class);
-    Mockito.when(mockConnectionInfo.getDbType()).thenReturn("derby");
-    String[] dummyCDHUpgradeOrder =
-      new String[] { "1.1.0-to-1.1.0-cdh5.12.0", "1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0",
-        "1.1.0-cdh5.13.0-to-1.1.0-cdh5.15.0", "1.1.0-cdh5.15.0-to-2.1.0-cdh6.0.0" };
-    CDHMetaStoreSchemaInfo cdhSchemaInfo = Mockito.mock(CDHMetaStoreSchemaInfo.class);
-    Mockito.when(cdhSchemaInfo.loadAllCDHUpgradeScripts(Mockito.anyString()))
-      .thenReturn(dummyCDHUpgradeOrder);
-    // case 1. when hive version is 1.1.0 and db version is 1.1.0
-    // no upgrade is neccessary
-    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0");
-    // Mockito
-    // .when(cdhSchemaInfo.getMetaStoreSchemaVersion(Mockito.any(MetaStoreConnectionInfo.class)))
-    // .thenReturn("1.1.0");
-    Mockito.when(cdhSchemaInfo.getUpgradeScripts(Mockito.anyString())).thenCallRealMethod();
-
-    List<String> upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0");
-    Assert.assertTrue(
-      "Upgrade scripts should be have been empty when hive version and db version is same",
-      upgradeOrder.isEmpty());
-
-    // when hive version is 1.1.0-cdh-5.12.0 and db version is 1.1.0
-    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.12.0");
-    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0");
-    Assert.assertEquals("upgrade order should contain only one script", 1, upgradeOrder.size());
-    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.12.0",
-      upgradeOrder.get(0).startsWith("upgrade-1.1.0-to-1.1.0-cdh5.12.0"));
-
-    // when hive version is 1.1.0-cdh-5.13.0 and db version is 1.1.0
-    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.13.0");
-    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0");
-    Assert.assertEquals("upgrade order should contain 2 scripts", 2, upgradeOrder.size());
-    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.12.0",
-      upgradeOrder.get(0).startsWith("upgrade-1.1.0-to-1.1.0-cdh5.12.0"));
-    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.13.0",
-      upgradeOrder.get(1).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
-
-    // when db version is 1.1.0-cdh5.12.0 and hive version is 1.1.0-cdh5.13.0
-    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.13.0");
-    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.12.0");
-    Assert.assertEquals("upgrade order should contain only one script", 1, upgradeOrder.size());
-    Assert.assertTrue("Upgrade script should contain upgrade script to CDH5.12.0",
-      upgradeOrder.get(0).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
-
-    // when db version is higher than hive version no upgrade is necessary
-    // this can happen if the env is rollbacked/downgraded to earlier version
-    // of CDH.
-    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.12.0");
-    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.13.0");
-    Assert.assertEquals("upgrade order should not contain any scripts", 0, upgradeOrder.size());
-
-    //upgrade from cdh5.12 to cdh6.0 which involves a rebase
-    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("2.1.0-cdh6.0.0");
-    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.12.0");
-    Assert.assertEquals("upgrade order should contain 3 scripts", 3, upgradeOrder.size());
-    Assert.assertTrue(upgradeOrder.get(0).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
-    Assert.assertTrue(upgradeOrder.get(1).startsWith("upgrade-1.1.0-cdh5.13.0-to-1.1.0-cdh5.15.0"));
-    Assert.assertTrue(upgradeOrder.get(2).startsWith("upgrade-1.1.0-cdh5.15.0-to-2.1.0-cdh6.0.0"));
-
-    //case when hive version is not present in upgrade order
-    Mockito.when(cdhSchemaInfo.getHiveSchemaVersion()).thenReturn("1.1.0-cdh5.14.0");
-    upgradeOrder = cdhSchemaInfo.getUpgradeScripts("1.1.0-cdh5.12.0");
-    Assert.assertEquals("upgrade order should contain 1 scripts", 1, upgradeOrder.size());
-    Assert.assertTrue(upgradeOrder.get(0).startsWith("upgrade-1.1.0-cdh5.12.0-to-1.1.0-cdh5.13.0"));
-  }
-}
-- 
1.7.9.5

