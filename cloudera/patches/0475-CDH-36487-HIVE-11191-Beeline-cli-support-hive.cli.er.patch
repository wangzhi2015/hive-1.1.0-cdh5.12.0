From e13710b1d81aa5938ced7b0b7b736818b3142957 Mon Sep 17 00:00:00 2001
From: Ferdinand Xu <cheng.a.xu@intel.com>
Date: Thu, 9 Jul 2015 20:58:14 -0400
Subject: [PATCH 0475/1164] CDH-36487: HIVE-11191: Beeline-cli: support
 hive.cli.errors.ignore in new CLI(Ferdinand Xu,
 reviewed by Xuefu Zhang)

Conflicts:
	beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java

Change-Id: I70460652289d54409c0abe9d59128fddb886192b
---
 .../src/java/org/apache/hive/beeline/BeeLine.java  |   37 ++++++++++++++++----
 .../java/org/apache/hive/beeline/BeeLineOpts.java  |   19 ++++++++++
 .../src/java/org/apache/hive/beeline/Commands.java |   36 ++++++++++++++-----
 .../org/apache/hive/beeline/cli/TestHiveCli.java   |    3 +-
 4 files changed, 78 insertions(+), 17 deletions(-)

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index d441f94..2c129ec 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -88,7 +88,6 @@
 import org.apache.commons.cli.OptionBuilder;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
-import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.io.IOUtils;
 import org.apache.hive.beeline.cli.CliOptionsProcessor;
 
@@ -401,10 +400,8 @@ String getManifestAttribute(String name) {
   String getApplicationTitle() {
     Package pack = BeeLine.class.getPackage();
 
-    return loc("app-introduction", new Object[] {
-        "Beeline",
-        pack.getImplementationVersion() == null ? "???"
-            : pack.getImplementationVersion(),
+    return loc("app-introduction", new Object[] { "Beeline",
+        pack.getImplementationVersion() == null ? "???" : pack.getImplementationVersion(),
         "Apache Hive",
         // getManifestAttribute ("Specification-Title"),
         // getManifestAttribute ("Implementation-Version"),
@@ -830,8 +827,10 @@ public int begin(String[] args, InputStream inputStream) throws IOException {
       } else {
         int code = initArgsFromCliVars(args);
         defaultConnect(false);
-        if (code != 0)
+        if (code != 0){
           return code;
+        }
+        getOpts().updateBeeLineOptsFromConf();
       }
 
       if (getOpts().getScriptFile() != null) {
@@ -1081,8 +1080,32 @@ boolean dispatch(String line) {
       return cmdMap.values().iterator().next()
           .execute(line);
     } else {
-      return commands.sql(line, getOpts().getEntireLineAsCommand());
+      boolean needsUpdate = isConfNeedsUpdate(line);
+      boolean res = commands.sql(line, getOpts().getEntireLineAsCommand());
+      if (needsUpdate) {
+        getOpts().setHiveConf(getCommands().getHiveConf(true));
+      }
+      return res;
+    }
+  }
+
+  /**
+   * Update the configurations for the CLI mode in the client side
+   *
+   * @param line
+   */
+  private boolean isConfNeedsUpdate(String line) {
+    if (isBeeLine) {
+      return false;
+    }
+    String[] cmds = line.split(";");
+    boolean containsSetCMD = false;
+    for (String s : cmds) {
+      if (s.toLowerCase().startsWith("set")) {
+        return true;
+      }
     }
+    return containsSetCMD;
   }
 
   /**
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index 17cf7a1..894f74f 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -42,6 +42,7 @@
 import jline.TerminalFactory;
 import jline.console.completer.Completer;
 import jline.console.completer.StringsCompleter;
+import org.apache.hadoop.hive.conf.HiveConf;
 
 class BeeLineOpts implements Completer {
   public static final int DEFAULT_MAX_WIDTH = 80;
@@ -78,6 +79,8 @@
   int timeout = -1;
   private String isolation = DEFAULT_ISOLATION_LEVEL;
   private String outputFormat = "table";
+  // This configuration is used only for client side configuration.
+  private HiveConf conf;
   private boolean trimScripts = true;
   private boolean allowMultiLineCommand = true;
 
@@ -219,6 +222,22 @@ public void load(InputStream fin) throws IOException {
     loadProperties(p);
   }
 
+  /**
+   * Update the options after connection is established in CLI mode.
+   */
+  public void updateBeeLineOptsFromConf() {
+    if (!beeLine.isBeeLine()) {
+      if (conf == null) {
+        conf = beeLine.getCommands().getHiveConf(true);
+      }
+      setForce(HiveConf.getBoolVar(conf, HiveConf.ConfVars.CLIIGNOREERRORS));
+    }
+  }
+
+  public void setHiveConf(HiveConf conf) {
+    this.conf = conf;
+  }
+
   public void loadProperties(Properties props) {
     for (Object element : props.keySet()) {
       String key = element.toString();
diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index 444ccf3..6706335 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -682,7 +682,7 @@ public boolean sql(String line) {
    */
   private Map<String, String> getHiveVariables() {
     Map<String, String> result = new HashMap<>();
-    BufferedRows rows = getConfInternal();
+    BufferedRows rows = getConfInternal(true);
     while (rows.hasNext()) {
       Rows.Row row = (Rows.Row) rows.next();
       if (!row.isMeta) {
@@ -692,27 +692,45 @@ public boolean sql(String line) {
     return result;
   }
 
-  private HiveConf getHiveConf() {
+  /**
+   * This method should only be used in CLI mode.
+   *
+   * @return the hive configuration from server side
+   */
+  public HiveConf getHiveConf(boolean call) {
     HiveConf conf = new HiveConf();
-    BufferedRows rows = getConfInternal();
-    while (rows.hasNext()) {
+    BufferedRows rows = getConfInternal(call);
+    while (rows != null && rows.hasNext()) {
       addConf((Rows.Row) rows.next(), conf);
     }
     return conf;
   }
 
-  private BufferedRows getConfInternal() {
+  /**
+   * Use call statement to retrieve the configurations for substitution and sql for the substitution.
+   *
+   * @param call
+   * @return
+   */
+  private BufferedRows getConfInternal(boolean call) {
     Statement stmnt = null;
     BufferedRows rows = null;
     try {
-      stmnt = beeLine.createStatement();
-      boolean hasResults = stmnt.execute("set");
+      boolean hasResults;
+      if (call) {
+        stmnt = beeLine.getDatabaseConnection().getConnection().prepareCall("set");
+        hasResults = ((CallableStatement) stmnt).execute();
+      } else {
+        stmnt = beeLine.createStatement();
+        hasResults = stmnt.execute("set");
+      }
       if (hasResults) {
         ResultSet rs = stmnt.getResultSet();
         rows = new BufferedRows(beeLine, rs);
       }
     } catch (SQLException e) {
       beeLine.error(e);
+    } finally {
       if (stmnt != null) {
         try {
           stmnt.close();
@@ -763,7 +781,7 @@ private boolean sourceFile(String cmd) {
     String[] tokens = tokenizeCmd(cmd);
     String cmd_1 = getFirstCmd(cmd, tokens[0].length());
 
-    cmd_1 = substituteVariables(getHiveConf(), cmd_1);
+    cmd_1 = substituteVariables(getHiveConf(false), cmd_1);
     File sourceFile = new File(cmd_1);
     if (!sourceFile.isFile()) {
       return false;
@@ -981,7 +999,7 @@ public boolean sh(String line) {
     }
 
     line = line.substring("sh".length()).trim();
-    line = substituteVariables(getHiveConf(), line.trim());
+    line = substituteVariables(getHiveConf(false), line.trim());
 
     try {
       ShellCmdExecutor executor = new ShellCmdExecutor(line, beeLine.getOutputStream(),
diff --git a/beeline/src/test/org/apache/hive/beeline/cli/TestHiveCli.java b/beeline/src/test/org/apache/hive/beeline/cli/TestHiveCli.java
index ff8ab17..fa94c89 100644
--- a/beeline/src/test/org/apache/hive/beeline/cli/TestHiveCli.java
+++ b/beeline/src/test/org/apache/hive/beeline/cli/TestHiveCli.java
@@ -78,7 +78,8 @@ private void verifyCMD(String CMD, String keywords, OutputStream os, String[] op
       int retCode) {
     executeCMD(options, CMD, retCode);
     String output = os.toString();
-    Assert.assertTrue(output.contains(keywords));
+    Assert.assertTrue("The expected keyword doesn't occur in the output: " + output,
+        output.contains(keywords));
   }
 
   @Test
-- 
1.7.9.5

