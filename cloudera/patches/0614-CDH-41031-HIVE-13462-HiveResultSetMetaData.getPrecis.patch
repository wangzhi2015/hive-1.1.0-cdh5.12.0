From ad5d7f9ff1dbd0b7d29b5064f889eed795e31067 Mon Sep 17 00:00:00 2001
From: Jason Dere <jdere@hortonworks.com>
Date: Fri, 8 Apr 2016 12:59:00 -0800
Subject: [PATCH 0614/1164] CDH-41031: HIVE-13462 :
 HiveResultSetMetaData.getPrecision() fails for
 NULL columns (Jason Dere via Ashutosh Chauhan)

Change-Id: I68e720e9804e22fd219637ba890e049e0637424a
---
 .../java/org/apache/hive/jdbc/TestJdbcDriver2.java |   25 ++++++++++++++------
 jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java |    7 ++++++
 2 files changed, 25 insertions(+), 7 deletions(-)

diff --git a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java
index 67569fa..1e6d2d4 100644
--- a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java
+++ b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java
@@ -1540,14 +1540,14 @@ public void testResultSetMetaData() throws SQLException {
 
     ResultSet res = stmt.executeQuery(
         "select c1, c2, c3, c4, c5 as a, c6, c7, c8, c9, c10, c11, c12, " +
-            "c1*2, sentences(null, null, null) as b, c17, c18, c20, c21, c22, c23 from " + dataTypeTableName +
+            "c1*2, sentences(null, null, null) as b, c17, c18, c20, c21, c22, c23, null as null_val from " + dataTypeTableName +
         " limit 1");
     ResultSetMetaData meta = res.getMetaData();
 
     ResultSet colRS = con.getMetaData().getColumns(null, null,
         dataTypeTableName.toLowerCase(), null);
 
-    assertEquals(20, meta.getColumnCount());
+    assertEquals(21, meta.getColumnCount());
 
     assertTrue(colRS.next());
 
@@ -1811,6 +1811,14 @@ public void testResultSetMetaData() throws SQLException {
     assertEquals(15, meta.getPrecision(19));
     assertEquals(0, meta.getScale(19));
 
+    assertEquals("c22", colRS.getString("COLUMN_NAME"));
+    assertEquals(Types.CHAR, colRS.getInt("DATA_TYPE"));
+    assertEquals("char", colRS.getString("TYPE_NAME").toLowerCase());
+    assertEquals(meta.getPrecision(19), colRS.getInt("COLUMN_SIZE"));
+    assertEquals(meta.getScale(19), colRS.getInt("DECIMAL_DIGITS"));
+
+    assertTrue(colRS.next());
+
     assertEquals("c23", meta.getColumnName(20));
     assertEquals(Types.BINARY, meta.getColumnType(20));
     assertEquals("binary", meta.getColumnTypeName(20));
@@ -1818,11 +1826,14 @@ public void testResultSetMetaData() throws SQLException {
     assertEquals(Integer.MAX_VALUE, meta.getPrecision(20));
     assertEquals(0, meta.getScale(20));
 
-    assertEquals("c22", colRS.getString("COLUMN_NAME"));
-    assertEquals(Types.CHAR, colRS.getInt("DATA_TYPE"));
-    assertEquals("char", colRS.getString("TYPE_NAME").toLowerCase());
-    assertEquals(meta.getPrecision(19), colRS.getInt("COLUMN_SIZE"));
-    assertEquals(meta.getScale(19), colRS.getInt("DECIMAL_DIGITS"));
+    assertTrue(colRS.next());
+
+    assertEquals("null_val", meta.getColumnName(21));
+    assertEquals(Types.NULL, meta.getColumnType(21));
+    assertEquals("void", meta.getColumnTypeName(21));
+    assertEquals(4, meta.getColumnDisplaySize(21));
+    assertEquals(0, meta.getPrecision(21));
+    assertEquals(0, meta.getScale(21));
 
     for (int i = 1; i <= meta.getColumnCount(); i++) {
       assertFalse(meta.isAutoIncrement(i));
diff --git a/jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java b/jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java
index 4383f56..dc9a896 100644
--- a/jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java
+++ b/jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java
@@ -137,6 +137,8 @@ public static int hiveTypeToSqlType(String type) throws SQLException {
       return Types.ARRAY;
     } else if ("struct".equalsIgnoreCase(type)) {
       return Types.STRUCT;
+    } else if ("void".equalsIgnoreCase(type) || "null".equalsIgnoreCase(type)) {
+      return Types.NULL;
     }
     throw new SQLException("Unrecognized column type: " + type);
   }
@@ -189,6 +191,8 @@ static int columnDisplaySize(int columnType, JdbcColumnAttributes columnAttribut
       throws SQLException {
     // according to hiveTypeToSqlType possible options are:
     switch(columnType) {
+    case Types.NULL:
+      return 4; // "NULL"
     case Types.BOOLEAN:
       return columnPrecision(columnType, columnAttributes);
     case Types.CHAR:
@@ -227,6 +231,8 @@ static int columnPrecision(int columnType, JdbcColumnAttributes columnAttributes
       throws SQLException {
     // according to hiveTypeToSqlType possible options are:
     switch(columnType) {
+    case Types.NULL:
+      return 0;
     case Types.BOOLEAN:
       return 1;
     case Types.CHAR:
@@ -268,6 +274,7 @@ static int columnScale(int columnType, JdbcColumnAttributes columnAttributes)
       throws SQLException {
     // according to hiveTypeToSqlType possible options are:
     switch(columnType) {
+    case Types.NULL:
     case Types.BOOLEAN:
     case Types.CHAR:
     case Types.VARCHAR:
-- 
1.7.9.5

