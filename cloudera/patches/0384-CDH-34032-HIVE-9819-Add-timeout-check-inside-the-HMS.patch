From 9235b7d422dc3eaa11f00503a4e121551fdc85a9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Sergio=20Pe=C3=B1a?= <spena@apache.org>
Date: Tue, 7 Apr 2015 17:13:07 +0000
Subject: [PATCH 0384/1164] CDH-34032: HIVE-9819: Add timeout check inside the
 HMS server

Change-Id: I5b99ef3aba45817f2de4ecaa8f9bd1941bd2f53b
---
 .../hadoop/hive/metastore/MetaStoreDirectSql.java  |    8 ++++++++
 .../apache/hadoop/hive/metastore/ObjectStore.java  |    4 ++++
 2 files changed, 12 insertions(+)

diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java
index 2c9f7d8..057da4f 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java
@@ -883,6 +883,7 @@ private static String trimCommaList(StringBuilder sb) {
         func.apply(entry.getValue(), fields);
         fields = null;
       }
+      Deadline.checkTimeout();
     }
     int rv = list.size();
     query.closeAll();
@@ -1184,6 +1185,7 @@ private long partsFoundForPartitions(String dbName, String tableName,
           list.size());
       for (Object[] row : list) {
         colStats.add(prepareCSObj(row, 0));
+        Deadline.checkTimeout();
       }
       query.closeAll();
       return colStats;
@@ -1225,6 +1227,7 @@ private long partsFoundForPartitions(String dbName, String tableName,
         } else {
           extraColumnNameTypeParts.put(colName, new String[] { colType, String.valueOf(count) });
         }
+        Deadline.checkTimeout();
       }
       query.closeAll();
       // Extrapolation is not needed for columns noExtraColumnNames
@@ -1244,6 +1247,7 @@ private long partsFoundForPartitions(String dbName, String tableName,
         list = ensureList(qResult);
         for (Object[] row : list) {
           colStats.add(prepareCSObj(row, 0));
+          Deadline.checkTimeout();
         }
         end = doTrace ? System.nanoTime() : 0;
         timingTrace(doTrace, queryText, start, end);
@@ -1283,6 +1287,7 @@ private long partsFoundForPartitions(String dbName, String tableName,
             indexToObject.put(sumIndex[ind - 1], row[ind]);
           }
           sumMap.put((String) row[0], indexToObject);
+          Deadline.checkTimeout();
         }
         end = doTrace ? System.nanoTime() : 0;
         timingTrace(doTrace, queryText, start, end);
@@ -1350,6 +1355,7 @@ private long partsFoundForPartitions(String dbName, String tableName,
             }
           }
           colStats.add(prepareCSObj(row, 0));
+          Deadline.checkTimeout();
         }
       }
       return colStats;
@@ -1421,6 +1427,7 @@ private ColumnStatisticsObj prepareCSObj (Object[] row, int i) throws MetaExcept
       }
       lastPartName = partName;
       from = i;
+      Deadline.checkTimeout();
     }
 
     timingTrace(doTrace, queryText, start, queryTime);
@@ -1448,6 +1455,7 @@ private ColumnStatistics makeColumnStats(
         csd.setLastAnalyzed(extractSqlLong(laObj));
       }
       csos.add(prepareCSObj(row, offset));
+      Deadline.checkTimeout();
     }
     result.setStatsObj(csos);
     return result;
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
index 5011af7..82d7a02 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
@@ -1899,6 +1899,7 @@ public Partition getPartitionWithAuth(String dbName, String tblName,
     }
     for (MPartition mp : src) {
       dest.add(convertToPart(mp));
+      Deadline.checkTimeout();
     }
     return dest;
   }
@@ -1908,6 +1909,7 @@ public Partition getPartitionWithAuth(String dbName, String tblName,
     List<Partition> parts = new ArrayList<Partition>(mparts.size());
     for (MPartition mp : mparts) {
       parts.add(convertToPart(dbName, tblName, mp));
+      Deadline.checkTimeout();
     }
     return parts;
   }
@@ -6318,6 +6320,7 @@ protected ColumnStatistics getJdoResult(
             desc.setLastAnalyzed(mStat.getLastAnalyzed());
           }
           statObjs.add(StatObjectConverter.getTableColumnStatisticsObj(mStat));
+          Deadline.checkTimeout();
         }
         return new ColumnStatistics(desc, statObjs);
         } finally {
@@ -6371,6 +6374,7 @@ protected ColumnStatistics getJdoResult(
             }
             curList.add(StatObjectConverter.getPartitionColumnStatisticsObj(mStatsObj));
             lastPartName = partName;
+            Deadline.checkTimeout();
           }
           return result;
         } finally {
-- 
1.7.9.5

