From 76a58660599e6c0f09867aaf49ad2e6fae64f796 Mon Sep 17 00:00:00 2001
From: Yongzhi Chen <ychena@apache.org>
Date: Mon, 5 Dec 2016 17:45:41 -0500
Subject: [PATCH 0860/1164] CDH=48042 HIVE-15359: skip.footer.line.count
 doesnt work properly for certain situations
 (Yongzhi Chen, reviewed by Aihua Xu)

Change-Id: I4badbf8edbf410d8f23daae92eedb51fe371ffb0
---
 .../hadoop/hive/ql/io/CombineHiveRecordReader.java |   12 +++++++++++-
 .../hive/ql/io/HiveContextAwareRecordReader.java   |   10 ++++++++++
 .../hadoop/hive/shims/HadoopShimsSecure.java       |    6 ++++--
 3 files changed, 25 insertions(+), 3 deletions(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/io/CombineHiveRecordReader.java b/ql/src/java/org/apache/hadoop/hive/ql/io/CombineHiveRecordReader.java
index aa607cc..ba25573 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/io/CombineHiveRecordReader.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/io/CombineHiveRecordReader.java
@@ -31,6 +31,7 @@
 import org.apache.hadoop.mapred.InputSplit;
 import org.apache.hadoop.mapred.JobConf;
 import org.apache.hadoop.mapred.Reporter;
+import org.apache.hadoop.mapred.RecordReader;
 import org.apache.hadoop.mapred.lib.CombineFileSplit;
 
 /**
@@ -43,7 +44,7 @@
     extends HiveContextAwareRecordReader<K, V> {
 
   public CombineHiveRecordReader(InputSplit split, Configuration conf,
-      Reporter reporter, Integer partition) throws IOException {
+      Reporter reporter, Integer partition, RecordReader preReader) throws IOException {
     super((JobConf)conf);
     CombineHiveInputSplit hsplit = split instanceof CombineHiveInputSplit ?
         (CombineHiveInputSplit) split :
@@ -67,6 +68,15 @@ public CombineHiveRecordReader(InputSplit split, Configuration conf,
     this.setRecordReader(inputFormat.getRecordReader(fsplit, jobConf, reporter));
 
     this.initIOContext(fsplit, jobConf, inputFormatClass, this.recordReader);
+
+    //If current split is from the same file as preceding split and the preceding split has footerbuffer,
+    //the current split should use the preceding split's footerbuffer in order to skip footer correctly.
+    if (preReader != null && preReader instanceof CombineHiveRecordReader
+        && ((CombineHiveRecordReader)preReader).getFooterBuffer() != null) {
+      if (partition != 0 && hsplit.getPaths()[partition -1].equals(hsplit.getPaths()[partition]))
+        this.setFooterBuffer(((CombineHiveRecordReader)preReader).getFooterBuffer());
+    }
+
   }
 
   @Override
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/io/HiveContextAwareRecordReader.java b/ql/src/java/org/apache/hadoop/hive/ql/io/HiveContextAwareRecordReader.java
index 9b3f8ec..edeedce 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/io/HiveContextAwareRecordReader.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/io/HiveContextAwareRecordReader.java
@@ -244,6 +244,15 @@ public float getProgress() throws IOException {
   private int headerCount = 0;
   private int footerCount = 0;
 
+  protected FooterBuffer getFooterBuffer() {
+       return footerBuffer;
+  }
+
+  protected void setFooterBuffer( FooterBuffer buf) {
+    footerBuffer = buf;
+  }
+
+
   public boolean doNext(K key, V value) throws IOException {
     if (this.isSorted) {
       if (this.getIOContext().shouldEndBinarySearch() ||
@@ -308,6 +317,7 @@ public boolean doNext(K key, V value) throws IOException {
       if (this.ioCxtRef.getCurrentBlockStart() == 0) {
 
         // Check if the table file has header to skip.
+        footerBuffer = null;
         Path filePath = this.ioCxtRef.getInputPath();
         PartitionDesc part = null;
         try {
diff --git a/shims/common/src/main/java/org/apache/hadoop/hive/shims/HadoopShimsSecure.java b/shims/common/src/main/java/org/apache/hadoop/hive/shims/HadoopShimsSecure.java
index 279a02c..9d1854c 100644
--- a/shims/common/src/main/java/org/apache/hadoop/hive/shims/HadoopShimsSecure.java
+++ b/shims/common/src/main/java/org/apache/hadoop/hive/shims/HadoopShimsSecure.java
@@ -114,7 +114,8 @@ public void write(DataOutput out) throws IOException {
         InputSplit.class,
         Configuration.class,
         Reporter.class,
-        Integer.class
+        Integer.class,
+        RecordReader.class
         };
 
     protected CombineFileSplit split;
@@ -233,6 +234,7 @@ private boolean doNextWithExceptionHandler(K key, V value) throws IOException {
      */
     protected boolean initNextRecordReader(K key) throws IOException {
 
+      RecordReader preReader = curReader; //it is OK, curReader is closed, for we only need footer buffer info from preReader.
       if (curReader != null) {
         curReader.close();
         curReader = null;
@@ -249,7 +251,7 @@ protected boolean initNextRecordReader(K key) throws IOException {
       // get a record reader for the idx-th chunk
       try {
         curReader = rrConstructor.newInstance(new Object[]
-            {split, jc, reporter, Integer.valueOf(idx)});
+            {split, jc, reporter, Integer.valueOf(idx), preReader});
 
         // change the key if need be
         if (key != null) {
-- 
1.7.9.5

