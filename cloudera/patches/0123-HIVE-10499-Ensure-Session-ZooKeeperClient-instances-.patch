From 20e8883f3696a998addeb7793bc84958fe33cb04 Mon Sep 17 00:00:00 2001
From: Jimmy Xiang <jxiang@cloudera.com>
Date: Wed, 22 Apr 2015 16:06:00 -0700
Subject: [PATCH 0123/1164] HIVE-10499 Ensure Session/ZooKeeperClient
 instances are closed (Jimmy, reviewed by Szehon)

---
 .../hive/jdbc/ZooKeeperHiveClientHelper.java       |    2 +-
 .../hive/service/cli/session/HiveSessionImpl.java  |   14 +++++-
 .../hive/service/cli/session/SessionManager.java   |   49 +++++++++++++-------
 .../apache/hive/service/server/HiveServer2.java    |   18 +++----
 4 files changed, 55 insertions(+), 28 deletions(-)

diff --git a/jdbc/src/java/org/apache/hive/jdbc/ZooKeeperHiveClientHelper.java b/jdbc/src/java/org/apache/hive/jdbc/ZooKeeperHiveClientHelper.java
index 496c820..e24b3dc 100644
--- a/jdbc/src/java/org/apache/hive/jdbc/ZooKeeperHiveClientHelper.java
+++ b/jdbc/src/java/org/apache/hive/jdbc/ZooKeeperHiveClientHelper.java
@@ -64,8 +64,8 @@ static String getNextServerUriFromZooKeeper(JdbcConnectionParams connParams)
     CuratorFramework zooKeeperClient =
         CuratorFrameworkFactory.builder().connectString(zooKeeperEnsemble)
             .retryPolicy(new ExponentialBackoffRetry(1000, 3)).build();
-    zooKeeperClient.start();
     try {
+      zooKeeperClient.start();
       serverHosts = zooKeeperClient.getChildren().forPath("/" + zooKeeperNamespace);
       // Remove the znodes we've already tried from this list
       serverHosts.removeAll(connParams.getRejectedHostZnodePaths());
diff --git a/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java b/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java
index f14b974..cc3e807 100644
--- a/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java
+++ b/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java
@@ -563,10 +563,22 @@ public void close() throws HiveSQLException {
       if (null != hiveHist) {
         hiveHist.closeStream();
       }
-      sessionState.close();
+      try {
+        sessionState.close();
+      } finally {
+        sessionState = null;
+      }
     } catch (IOException ioe) {
       throw new HiveSQLException("Failure to close", ioe);
     } finally {
+      if (sessionState != null) {
+        try {
+          sessionState.close();
+        } catch (Throwable t) {
+          LOG.warn("Error closing session", t);
+        }
+        sessionState = null;
+      }
       release(true);
     }
   }
diff --git a/service/src/java/org/apache/hive/service/cli/session/SessionManager.java b/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
index e02997a..36a30b1 100644
--- a/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
+++ b/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
@@ -257,6 +257,12 @@ public SessionHandle openSession(TProtocolVersion protocol, String username, Str
     try {
       session.open(sessionConf);
     } catch (Exception e) {
+      try {
+        session.close();
+      } catch (Throwable t) {
+        LOG.warn("Error closing session", t);
+      }
+      session = null;
       throw new HiveSQLException("Failed to open new session: " + e, e);
     }
     if (isOperationLogEnabled) {
@@ -265,6 +271,12 @@ public SessionHandle openSession(TProtocolVersion protocol, String username, Str
     try {
       executeSessionHooks(session);
     } catch (Exception e) {
+      try {
+        session.close();
+      } catch (Throwable t) {
+        LOG.warn("Error closing session", t);
+      }
+      session = null;
       throw new HiveSQLException("Failed to execute session hooks", e);
     }
     handleToSession.put(session.getSessionHandle(), session);
@@ -276,23 +288,26 @@ public void closeSession(SessionHandle sessionHandle) throws HiveSQLException {
     if (session == null) {
       throw new HiveSQLException("Session does not exist!");
     }
-    session.close();
-    // Shutdown HiveServer2 if it has been deregistered from ZooKeeper and has no active sessions
-    if (!(hiveServer2 == null) && (hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY))
-        && (!hiveServer2.isRegisteredWithZooKeeper())) {
-      // Asynchronously shutdown this instance of HiveServer2,
-      // if there are no active client sessions
-      if (getOpenSessionCount() == 0) {
-        LOG.info("This instance of HiveServer2 has been removed from the list of server "
-            + "instances available for dynamic service discovery. "
-            + "The last client session has ended - will shutdown now.");
-        Thread shutdownThread = new Thread() {
-          @Override
-          public void run() {
-            hiveServer2.stop();
-          }
-        };
-        shutdownThread.start();
+    try {
+      session.close();
+    } finally {
+      // Shutdown HiveServer2 if it has been deregistered from ZooKeeper and has no active sessions
+      if (!(hiveServer2 == null) && (hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY))
+          && (!hiveServer2.isRegisteredWithZooKeeper())) {
+        // Asynchronously shutdown this instance of HiveServer2,
+        // if there are no active client sessions
+        if (getOpenSessionCount() == 0) {
+          LOG.info("This instance of HiveServer2 has been removed from the list of server "
+              + "instances available for dynamic service discovery. "
+              + "The last client session has ended - will shutdown now.");
+          Thread shutdownThread = new Thread() {
+            @Override
+            public void run() {
+              hiveServer2.stop();
+            }
+          };
+          shutdownThread.start();
+        }
       }
     }
   }
diff --git a/service/src/java/org/apache/hive/service/server/HiveServer2.java b/service/src/java/org/apache/hive/service/server/HiveServer2.java
index 21025a2..6ab08db 100644
--- a/service/src/java/org/apache/hive/service/server/HiveServer2.java
+++ b/service/src/java/org/apache/hive/service/server/HiveServer2.java
@@ -324,21 +324,21 @@ private static void startHiveServer2() throws Throwable {
         }
         break;
       } catch (Throwable throwable) {
+        if (server != null) {
+          try {
+            server.stop();
+          } catch (Throwable t) {
+            LOG.info("Exception caught when calling stop of HiveServer2 before retrying start", t);
+          } finally {
+            server = null;
+          }
+        }
         if (++attempts >= maxAttempts) {
           throw new Error("Max start attempts " + maxAttempts + " exhausted", throwable);
         } else {
           LOG.warn("Error starting HiveServer2 on attempt " + attempts
               + ", will retry in 60 seconds", throwable);
           try {
-            if (server != null) {
-              server.stop();
-              server = null;
-            }
-          } catch (Exception e) {
-            LOG.info(
-                "Exception caught when calling stop of HiveServer2 before" + " retrying start", e);
-          }
-          try {
             Thread.sleep(60L * 1000L);
           } catch (InterruptedException e) {
             Thread.currentThread().interrupt();
-- 
1.7.9.5

