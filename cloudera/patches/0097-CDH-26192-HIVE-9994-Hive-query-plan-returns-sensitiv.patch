From 4db09675568718ad7c87228fac34f0e1942018d0 Mon Sep 17 00:00:00 2001
From: Sergio Pena <sergio.pena@cloudera.com>
Date: Wed, 18 Mar 2015 16:30:36 -0500
Subject: [PATCH 0097/1164] CDH-26192 HIVE-9994: Hive query plan returns
 sensitive data to external applications like
 Navigator

---
 ql/src/java/org/apache/hadoop/hive/ql/Driver.java  |   14 ++++++--------
 .../org/apache/hadoop/hive/ql/hooks/HookUtils.java |   15 +++++++++++++++
 .../org/apache/hadoop/hive/ql/hooks/TestHooks.java |   17 +++++++++++++++++
 3 files changed, 38 insertions(+), 8 deletions(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/Driver.java b/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
index 33c9648..065cf98 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
@@ -436,15 +436,13 @@ public int compile(String command, boolean resetTaskIds) {
       sem.validate();
       perfLogger.PerfLogEnd(CLASS_NAME, PerfLogger.ANALYZE);
 
-      plan = new QueryPlan(command, sem, perfLogger.getStartTime(PerfLogger.DRIVER_RUN), queryId,
-        SessionState.get().getCommandType());
+      // Command should be redacted before passing it to the QueryPlan in order
+      // to avoid returning sensitive data
+      String queryStr = HookUtils.redactLogString(conf, command);
+
+      plan = new QueryPlan(queryStr, sem, perfLogger.getStartTime(PerfLogger.DRIVER_RUN), queryId,
+          SessionState.get().getCommandType());
 
-      String queryStr = plan.getQueryStr();
-      List<Redactor> queryRedactors = getHooks(ConfVars.QUERYREDACTORHOOKS, Redactor.class);
-      for (Redactor redactor : queryRedactors) {
-        redactor.setConf(conf);
-        queryStr = redactor.redactQuery(queryStr);
-      }
       conf.setVar(HiveConf.ConfVars.HIVEQUERYSTRING, queryStr);
 
       conf.set("mapreduce.workflow.id", "hive_" + queryId);
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookUtils.java b/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookUtils.java
index 390ffd9..2f0bd88 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookUtils.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookUtils.java
@@ -65,4 +65,19 @@
     return hooks;
   }
 
+  public static String redactLogString(HiveConf conf, String logString)
+      throws InstantiationException, IllegalAccessException, ClassNotFoundException {
+
+    String redactedString = logString;
+
+    if (conf != null && logString != null) {
+      List<Redactor> queryRedactors = getHooks(conf, ConfVars.QUERYREDACTORHOOKS, Redactor.class);
+      for (Redactor redactor : queryRedactors) {
+        redactor.setConf(conf);
+        redactedString = redactor.redactQuery(redactedString);
+      }
+    }
+
+    return redactedString;
+  }
 }
diff --git a/ql/src/test/org/apache/hadoop/hive/ql/hooks/TestHooks.java b/ql/src/test/org/apache/hadoop/hive/ql/hooks/TestHooks.java
index a55aaa7..8d27762 100644
--- a/ql/src/test/org/apache/hadoop/hive/ql/hooks/TestHooks.java
+++ b/ql/src/test/org/apache/hadoop/hive/ql/hooks/TestHooks.java
@@ -49,6 +49,23 @@ public void setup() {
   }
 
   @Test
+  public void testRedactLogString() throws Exception {
+    HiveConf conf = new HiveConf(TestHooks.class);
+    String str;
+
+    HiveConf.setVar(conf, HiveConf.ConfVars.QUERYREDACTORHOOKS, SimpleQueryRedactor.class.getName());
+
+    str = HookUtils.redactLogString(null, null);
+    assertEquals(str, null);
+
+    str = HookUtils.redactLogString(conf, null);
+    assertEquals(str, null);
+
+    str = HookUtils.redactLogString(conf, "select 'XXX' from t1");
+    assertEquals(str, "select 'AAA' from t1");
+  }
+
+  @Test
   public void testQueryRedactor() throws Exception {
     HiveConf conf = new HiveConf(TestHooks.class);
     HiveConf.setVar(conf, HiveConf.ConfVars.QUERYREDACTORHOOKS,
-- 
1.7.9.5

