From 4de2e9665ddc1a25fb9c748fbe1d2e2c87935248 Mon Sep 17 00:00:00 2001
From: Sushanth Sowmyan <khorgath@gmail.com>
Date: Thu, 14 Jul 2016 13:34:50 -0700
Subject: [PATCH 0734/1164] CDH-43289: HIVE-14207 : Strip HiveConf hidden
 params in webui conf (Sushanth Sowmyan, reviewed
 by Thejas Nair)

Had to modify TestHS2HttpServer.java as it did not compile with the actual dependency tree at downstream.

(cherry picked from commit 3522f3f4c56773db70150798275ad35ef7c978a1)

Change-Id: I2eb3f70c6f36e4fa47d79d98246eaa2d905c265f
---
 .../src/java/org/apache/hive/http/HttpServer.java  |    5 +-
 .../hadoop/hive/metastore/MetaStoreUtils.java      |   27 ++++++++++
 .../apache/hive/service/server/HiveServer2.java    |   17 +++---
 .../hive/service/server/TestHS2HttpServer.java     |   57 ++++++++++++++++++--
 4 files changed, 91 insertions(+), 15 deletions(-)

diff --git a/common/src/java/org/apache/hive/http/HttpServer.java b/common/src/java/org/apache/hive/http/HttpServer.java
index 42f7fbf..aae4e84 100644
--- a/common/src/java/org/apache/hive/http/HttpServer.java
+++ b/common/src/java/org/apache/hive/http/HttpServer.java
@@ -112,9 +112,10 @@ public HttpServer build() throws IOException {
       return new HttpServer(this);
     }
 
-    public Builder setConf(HiveConf conf) {
+    public Builder setConf(HiveConf origConf) {
+      this.conf = new HiveConf(origConf);
+      origConf.stripHiddenConfigurations(conf);
       setContextAttribute(CONF_CONTEXT_ATTRIBUTE, conf);
-      this.conf = conf;
       return this;
     }
 
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java
index eadc61c..12b0ca9 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java
@@ -1180,6 +1180,33 @@ public static int findFreePort() throws IOException {
   }
 
   /**
+   * Finds a free port on the machine, but allow the
+   * ability to specify a port number to not use, no matter what.
+   */
+  public static int findFreePortExcepting(int portToExclude) throws IOException {
+    ServerSocket socket1 = null;
+    ServerSocket socket2 = null;
+    try {
+      socket1 = new ServerSocket(0);
+      socket2 = new ServerSocket(0);
+      if (socket1.getLocalPort() != portToExclude) {
+        return socket1.getLocalPort();
+      }
+      // If we're here, then socket1.getLocalPort was the port to exclude
+      // Since both sockets were open together at a point in time, we're
+      // guaranteed that socket2.getLocalPort() is not the same.
+      return socket2.getLocalPort();
+    } finally {
+      if (socket1 != null){
+        socket1.close();
+      }
+      if (socket2 != null){
+        socket2.close();
+      }
+    }
+  }
+
+  /**
    * Catches exceptions that can't be handled and bundles them to MetaException
    *
    * @param e
diff --git a/service/src/java/org/apache/hive/service/server/HiveServer2.java b/service/src/java/org/apache/hive/service/server/HiveServer2.java
index eda61dc..3d8f7d5 100644
--- a/service/src/java/org/apache/hive/service/server/HiveServer2.java
+++ b/service/src/java/org/apache/hive/service/server/HiveServer2.java
@@ -48,7 +48,6 @@
 import org.apache.hadoop.hive.common.JvmPauseMonitor;
 import org.apache.hadoop.hive.common.LogUtils;
 import org.apache.hadoop.hive.common.LogUtils.LogInitializationException;
-import org.apache.hadoop.hive.common.ServerUtils;
 import org.apache.hadoop.hive.common.metrics.common.MetricsFactory;
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
@@ -75,9 +74,6 @@
 import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.ZooDefs.Perms;
 import org.apache.zookeeper.data.ACL;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.google.common.base.Joiner;
 
 /**
@@ -129,14 +125,19 @@ public synchronized void init(HiveConf hiveConf) {
     }
     // Setup web UI
     try {
-      if (hiveConf.getBoolVar(ConfVars.HIVE_IN_TEST)) {
-        LOG.info("Web UI is disabled since in test mode");
-      } else {
-        int webUIPort =
+      int webUIPort =
           hiveConf.getIntVar(ConfVars.HIVE_SERVER2_WEBUI_PORT);
+      // We disable web UI in tests unless the test is explicitly setting a
+      // unique web ui port so that we don't mess up ptests.
+      boolean uiDisabledInTest = hiveConf.getBoolVar(ConfVars.HIVE_IN_TEST) &&
+          (webUIPort == Integer.valueOf(ConfVars.HIVE_SERVER2_WEBUI_PORT.getDefaultValue()));
+      if (uiDisabledInTest) {
+        LOG.info("Web UI is disabled in test mode since webui port was not specified");
+      } else {
         if (webUIPort <= 0) {
           LOG.info("Web UI is disabled since port is set to " + webUIPort);
         } else {
+          LOG.info("Starting Web UI on port "+ webUIPort);
           HttpServer.Builder builder = new HttpServer.Builder();
           builder.setName("hiveserver2").setPort(webUIPort).setConf(hiveConf);
           builder.setHost(hiveConf.getVar(ConfVars.HIVE_SERVER2_WEBUI_BIND_HOST));
diff --git a/service/src/test/org/apache/hive/service/server/TestHS2HttpServer.java b/service/src/test/org/apache/hive/service/server/TestHS2HttpServer.java
index c06ea26..9f32c1f 100644
--- a/service/src/test/org/apache/hive/service/server/TestHS2HttpServer.java
+++ b/service/src/test/org/apache/hive/service/server/TestHS2HttpServer.java
@@ -25,22 +25,39 @@
 
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
+import org.apache.hadoop.hive.metastore.MetaStoreUtils;
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertNotNull;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.util.EntityUtils;
+
 /**
  * TestHS2HttpServer -- executes tests of HiveServer2 HTTP Server
  */
 public class TestHS2HttpServer {
 
   private static HiveServer2 hiveServer2 = null;
+  private static HiveConf hiveConf = null;
+  private static String metastorePasswd = "61ecbc41cdae3e6b32712a06c73606fa"; //random md5
+  private static Integer webUIPort = null;
 
   @BeforeClass
   public static void beforeTests() throws Exception {
-    HiveConf hiveConf = new HiveConf();
-    hiveConf.setBoolVar(ConfVars.HIVE_IN_TEST, false);
+    webUIPort = MetaStoreUtils.findFreePortExcepting(
+        Integer.valueOf(ConfVars.HIVE_SERVER2_WEBUI_PORT.getDefaultValue()));
+    hiveConf = new HiveConf();
+    hiveConf.set(ConfVars.METASTOREPWD.varname, metastorePasswd);
+    hiveConf.set(ConfVars.HIVE_SERVER2_WEBUI_PORT.varname, webUIPort.toString());
     hiveServer2 = new HiveServer2();
     hiveServer2.init(hiveConf);
     hiveServer2.start();
@@ -48,9 +65,8 @@ public static void beforeTests() throws Exception {
   }
 
   @Test
-  public void testStackServket() throws Exception {
-    String baseURL = "http://localhost:"
-      + ConfVars.HIVE_SERVER2_WEBUI_PORT.getDefaultValue() + "/stacks";
+  public void testStackServlet() throws Exception {
+    String baseURL = "http://localhost:" + webUIPort + "/stacks";
     URL url = new URL(baseURL);
     HttpURLConnection conn = (HttpURLConnection) url.openConnection();
     Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode());
@@ -66,6 +82,37 @@ public void testStackServket() throws Exception {
     Assert.assertTrue(contents);
   }
 
+  @Test
+  public void testConfStrippedFromWebUI() throws Exception {
+
+    String pwdValFound = null;
+    String pwdKeyFound = null;
+    HttpClient httpclient = new DefaultHttpClient();
+    HttpGet httpGet = new HttpGet("http://localhost:"+webUIPort+"/conf");
+    HttpResponse response1 = httpclient.execute(httpGet);
+
+    try {
+      HttpEntity entity1 = response1.getEntity();
+      BufferedReader br = new BufferedReader(new InputStreamReader(entity1.getContent()));
+      String line;
+      while ((line = br.readLine())!= null) {
+        if (line.contains(metastorePasswd)){
+          pwdValFound = line;
+        }
+        if (line.contains(ConfVars.METASTOREPWD.varname)){
+          pwdKeyFound = line;
+        }
+      }
+      EntityUtils.consume(entity1);
+    } finally {
+      httpGet.releaseConnection();
+    }
+
+    assertNotNull(pwdKeyFound);
+    assertNull(pwdValFound);
+  }
+
+
   @AfterClass
   public static void afterTests() throws Exception {
     hiveServer2.stop();
-- 
1.7.9.5

