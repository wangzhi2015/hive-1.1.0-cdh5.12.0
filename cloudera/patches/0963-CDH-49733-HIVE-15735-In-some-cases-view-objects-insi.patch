From 2a5fe7aade8716742926258795c63af93dbbafdc Mon Sep 17 00:00:00 2001
From: Yongzhi Chen <ychena@apache.org>
Date: Thu, 26 Jan 2017 16:43:52 -0500
Subject: [PATCH 0963/1164] CDH-49733: HIVE-15735: In some cases, view objects
 inside a view do not have parents. (Yongzhi Chen,
 reviewed by Aihua Xu)

Conflicts:
	ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java

Change-Id: Ib67523e163e2b4e1cd4084a45c703ee0629381ec
---
 .../hadoop/hive/ql/parse/SemanticAnalyzer.java     |    4 +++
 .../org/apache/hadoop/hive/ql/plan/PlanUtils.java  |    3 +-
 .../apache/hadoop/hive/ql/plan/TestViewEntity.java |   37 ++++++++++++++++++++
 3 files changed, 43 insertions(+), 1 deletion(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
index 45cb295..e17f95a 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
@@ -1655,6 +1655,10 @@ public void getMetaData(QB qb, ReadEntity parentInput) throws SemanticException
           replaceViewReferenceWithDefinition(qb, tab, tab_name, alias);
           // This is the last time we'll see the Table objects for views, so add it to the inputs
           // now. isInsideView will tell if this view is embedded in another view.
+          // If the view is Inside another view, it should have at least one parent
+          if (qb.isInsideView() && parentInput == null) {
+            parentInput = PlanUtils.getParentViewInfo(getAliasId(alias, qb), viewAliasToInput);
+          }
           ReadEntity viewInput = new ReadEntity(tab, parentInput, !qb.isInsideView());
           viewInput = PlanUtils.addInput(inputs, viewInput);
           aliasToViewInfo.put(alias, new ObjectPair<String, ReadEntity>(fullViewName, viewInput));
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/plan/PlanUtils.java b/ql/src/java/org/apache/hadoop/hive/ql/plan/PlanUtils.java
index b48b627..5f9ea3f 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/plan/PlanUtils.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/plan/PlanUtils.java
@@ -977,7 +977,8 @@ public static ReadEntity getParentViewInfo(String alias_id,
     // For eg: for a query like 'select * from V3', where V3 -> V2, V2 -> V1, V1 -> T
     // -> implies depends on.
     // T's parent would be V1
-    for (int pos = 0; pos < aliases.length; pos++) {
+    // do not check last alias in the array for parent can not be itself.
+    for (int pos = 0; pos < aliases.length -1; pos++) {
       currentAlias = currentAlias == null ? aliases[pos] : currentAlias + ":" + aliases[pos];
 
       currentAlias = currentAlias.replace(SemanticAnalyzer.SUBQUERY_TAG_1, "")
diff --git a/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java b/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java
index 88bc360..448539e 100644
--- a/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java
+++ b/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java
@@ -165,8 +165,45 @@ public void testSubQueryInSubView() throws Exception {
     // table1 and view1 as second read entity
     assertEquals("default@" + view1, CheckInputReadEntity.readEntities[1].getName());
     assertFalse("Table is not direct input", CheckInputReadEntity.readEntities[1].isDirect());
+    Set<ReadEntity> parents = CheckInputReadEntity.readEntities[1].getParents();
+    assertTrue("Table does not have parent", parents != null && parents.size() > 0);
     assertEquals("default@" + tab1, CheckInputReadEntity.readEntities[2].getName());
     assertFalse("Table is not direct input", CheckInputReadEntity.readEntities[2].isDirect());
 
   }
+
+  /**
+   * Verify that the the query with the subquery inside a view will have the correct
+   * direct and indirect inputs.
+   * @throws Exception
+   */
+  @Test
+  public void testUnionAllInSubView() throws Exception {
+    String prefix = "tvunionallinsubview" + NAME_PREFIX;
+    final String tab1 = prefix + "t";
+    final String view1 = prefix + "v";
+    final String view2 = prefix + "v2";
+
+    int ret = driver.run("create table " + tab1 + "(id int)").getResponseCode();
+    assertEquals("Checking command success", 0, ret);
+    ret = driver.run("create view " + view1 + " as select * from " + tab1).getResponseCode();
+    assertEquals("Checking command success", 0, ret);
+
+    ret = driver.run("create view " + view2 + " as select * from (select * from " + view1 + " union all select * from " + view1 + ") x").getResponseCode();
+    assertEquals("Checking command success", 0, ret);
+
+    driver.compile("select * from " + view2);
+    // view entity
+    assertEquals("default@" + view2, CheckInputReadEntity.readEntities[0].getName());
+
+    // table1 and view1 as second read entity
+    assertEquals("default@" + view1, CheckInputReadEntity.readEntities[1].getName());
+    assertFalse("Table is not direct input", CheckInputReadEntity.readEntities[1].isDirect());
+    Set<ReadEntity> parents = CheckInputReadEntity.readEntities[1].getParents();
+    assertTrue("Table does not have parent", parents != null && parents.size() > 0);
+    assertEquals("default@" + tab1, CheckInputReadEntity.readEntities[2].getName());
+    assertFalse("Table is not direct input", CheckInputReadEntity.readEntities[2].isDirect());
+
+  }
+
 }
-- 
1.7.9.5

