From 74762f040550794cd29f5cf684321ebdd8d71f1e Mon Sep 17 00:00:00 2001
From: Prasad Mujumdar <prasadm@cloudera.com>
Date: Thu, 12 Mar 2015 16:55:35 -0700
Subject: [PATCH 0088/1164] PROPOSED - CDH-25479: Backport HIVE-9828: Semantic
 analyzer does not capture view parent entity for
 tables referred in view with union all

---
 .../hadoop/hive/ql/parse/SemanticAnalyzer.java     |    3 +
 .../org/apache/hadoop/hive/ql/plan/PlanUtils.java  |    4 +
 .../apache/hadoop/hive/ql/plan/TestViewEntity.java |  108 ++++++++++++++++++++
 3 files changed, 115 insertions(+)
 create mode 100644 ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
index 661669e..c7cdf32 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
@@ -221,6 +221,9 @@
 
   public static final String DUMMY_DATABASE = "_dummy_database";
   public static final String DUMMY_TABLE = "_dummy_table";
+  public static final String SUBQUERY_TAG_1 = "-subquery1";
+  public static final String SUBQUERY_TAG_2 = "-subquery2";
+
   // Max characters when auto generating the column name with func name
   private static final int AUTOGEN_COLALIAS_PRFX_MAXLENGTH = 20;
 
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/plan/PlanUtils.java b/ql/src/java/org/apache/hadoop/hive/ql/plan/PlanUtils.java
index b62ffed..e749b6f 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/plan/PlanUtils.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/plan/PlanUtils.java
@@ -52,6 +52,7 @@
 import org.apache.hadoop.hive.ql.metadata.HiveUtils;
 import org.apache.hadoop.hive.ql.metadata.Table;
 import org.apache.hadoop.hive.ql.parse.ParseContext;
+import org.apache.hadoop.hive.ql.parse.SemanticAnalyzer;
 import org.apache.hadoop.hive.ql.parse.SemanticException;
 import org.apache.hadoop.hive.ql.parse.TypeCheckProcFactory;
 import org.apache.hadoop.hive.ql.session.SessionState;
@@ -973,6 +974,9 @@ public static ReadEntity getParentViewInfo(String alias_id,
     // T's parent would be V1
     for (int pos = 0; pos < aliases.length; pos++) {
       currentAlias = currentAlias == null ? aliases[pos] : currentAlias + ":" + aliases[pos];
+
+      currentAlias = currentAlias.replace(SemanticAnalyzer.SUBQUERY_TAG_1, "")
+          .replace(SemanticAnalyzer.SUBQUERY_TAG_2, "");
       ReadEntity input = viewAliasToInput.get(currentAlias);
       if (input == null) {
         return currentInput;
diff --git a/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java b/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java
new file mode 100644
index 0000000..17a4e06
--- /dev/null
+++ b/ql/src/test/org/apache/hadoop/hive/ql/plan/TestViewEntity.java
@@ -0,0 +1,108 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hive.ql.plan;
+
+import static org.junit.Assert.*;
+
+import java.io.Serializable;
+import java.util.List;
+import java.util.Set;
+
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.ql.CommandNeedRetryException;
+import org.apache.hadoop.hive.ql.Driver;
+import org.apache.hadoop.hive.ql.exec.Task;
+import org.apache.hadoop.hive.ql.hooks.ReadEntity;
+import org.apache.hadoop.hive.ql.parse.AbstractSemanticAnalyzerHook;
+import org.apache.hadoop.hive.ql.parse.HiveSemanticAnalyzerHookContext;
+import org.apache.hadoop.hive.ql.parse.SemanticException;
+import org.apache.hadoop.hive.ql.plan.TestReadEntityDirect.CheckInputReadEntityDirect;
+import org.apache.hadoop.hive.ql.session.SessionState;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+public class TestViewEntity {
+  /**
+   * Hook used in the test to capture the set of ReadEntities
+   */
+  public static class CheckInputReadEntity extends
+      AbstractSemanticAnalyzerHook {
+    public static ReadEntity[] readEntities;
+
+    @Override
+    public void postAnalyze(HiveSemanticAnalyzerHookContext context,
+        List<Task<? extends Serializable>> rootTasks) throws SemanticException {
+      readEntities = context.getInputs().toArray(new ReadEntity[0]);
+    }
+
+  }
+
+  private static Driver driver;
+
+  @BeforeClass
+  public static void onetimeSetup() throws Exception {
+    HiveConf conf = new HiveConf(Driver.class);
+    conf.setVar(HiveConf.ConfVars.SEMANTIC_ANALYZER_HOOK,
+        CheckInputReadEntity.class.getName());
+    HiveConf
+        .setBoolVar(conf, HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);
+    SessionState.start(conf);
+    driver = new Driver(conf);
+    driver.init();
+  }
+
+  @AfterClass
+  public static void cleanUp() throws Exception {
+    driver.close();
+    driver.destroy();
+  }
+
+  /**
+   * Verify that the parent entities are captured correctly for union views
+   * @throws Exception
+   */
+  @Test
+  public void testUnionView() throws Exception {
+    int ret = driver.run("create table t1(id int)").getResponseCode();
+    assertEquals("Checking command success", 0, ret);
+    ret = driver.run("create table t2(id int)").getResponseCode();
+    assertEquals("Checking command success", 0, ret);
+    ret = driver.run("create view v1 as select t.id from "
+            + "(select t1.id from t1 union all select t2.id from t2) as t")
+        .getResponseCode();
+    assertEquals("Checking command success", 0, ret);
+
+    driver.compile("select * from v1");
+    // view entity
+    assertEquals("default@v1", CheckInputReadEntity.readEntities[0].getName());
+
+    // first table in union query with view as parent
+    assertEquals("default@t1", CheckInputReadEntity.readEntities[1].getName());
+    assertEquals("default@v1", CheckInputReadEntity.readEntities[1]
+        .getParents()
+        .iterator().next().getName());
+    // second table in union query with view as parent
+    assertEquals("default@t2", CheckInputReadEntity.readEntities[2].getName());
+    assertEquals("default@v1", CheckInputReadEntity.readEntities[2]
+        .getParents()
+        .iterator().next().getName());
+
+  }
+
+}
-- 
1.7.9.5

