From e2da2b92f4f71368225cbab0be3e6a26bb51a58c Mon Sep 17 00:00:00 2001
From: Jimmy Xiang <jxiang@apache.org>
Date: Fri, 20 Nov 2015 13:39:30 -0800
Subject: [PATCH 0444/1164] HIVE-12471: Secure HS2 web UI with SSL (Jimmy,
 reviewed by Mohit, Szehon)

Conflicts:
	common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
	common/src/java/org/apache/hive/http/HttpServer.java
	service/src/java/org/apache/hive/service/server/HiveServer2.java

Change-Id: Ib8dec68dee082b21c8740ac6ccb2cfa23fd7a9c7
---
 .../java/org/apache/hadoop/hive/conf/HiveConf.java |    6 +
 .../src/java/org/apache/hive/http/HttpServer.java  |  169 +++++++++++++++-----
 .../apache/hive/service/server/HiveServer2.java    |   38 +++--
 3 files changed, 160 insertions(+), 53 deletions(-)

diff --git a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
index a2a7b05..98476a3 100644
--- a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
+++ b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
@@ -1756,6 +1756,12 @@ public void setSparkConfigUpdated(boolean isSparkConfigUpdated) {
     HIVE_SERVER2_WEBUI_BIND_HOST("hive.server2.webui.host", "0.0.0.0", "The host address the HiveServer2 WebUI will listen on"),
     HIVE_SERVER2_WEBUI_PORT("hive.server2.webui.port", 10002, "The port the HiveServer2 WebUI will listen on"),
     HIVE_SERVER2_WEBUI_MAX_THREADS("hive.server2.webui.max.threads", 50, "The max HiveServer2 WebUI threads"),
+    HIVE_SERVER2_WEBUI_USE_SSL("hive.server2.webui.use.SSL", false,
+      "Set this to true for using SSL encryption for HiveServer2 WebUI."),
+    HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PATH("hive.server2.webui.keystore.path", "",
+      "SSL certificate keystore location for HiveServer2 WebUI."),
+    HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PASSWORD("hive.server2.webui.keystore.password", "",
+      "SSL certificate keystore password for HiveServer2 WebUI."),
 
     // Configuration for async thread pool in SessionManager
     HIVE_SERVER2_ASYNC_EXEC_THREADS("hive.server2.async.exec.threads", 100,
diff --git a/common/src/java/org/apache/hive/http/HttpServer.java b/common/src/java/org/apache/hive/http/HttpServer.java
index 86dfc1a..c5ed6cb 100644
--- a/common/src/java/org/apache/hive/http/HttpServer.java
+++ b/common/src/java/org/apache/hive/http/HttpServer.java
@@ -18,8 +18,12 @@
 
 package org.apache.hive.http;
 
+
+
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.CommonConfigurationKeys;
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.hadoop.security.authorize.AccessControlList;
 import org.apache.hadoop.util.Shell;
@@ -31,9 +35,11 @@
 import org.eclipse.jetty.server.handler.ContextHandler.Context;
 import org.eclipse.jetty.server.handler.ContextHandlerCollection;
 import org.eclipse.jetty.server.nio.SelectChannelConnector;
+import org.eclipse.jetty.server.ssl.SslSelectChannelConnector;
 import org.eclipse.jetty.servlet.DefaultServlet;
 import org.eclipse.jetty.servlet.ServletContextHandler;
 import org.eclipse.jetty.servlet.ServletHolder;
+import org.eclipse.jetty.util.ssl.SslContextFactory;
 import org.eclipse.jetty.util.thread.QueuedThreadPool;
 import org.eclipse.jetty.webapp.WebAppContext;
 
@@ -45,7 +51,13 @@
 import java.io.IOException;
 import java.net.URL;
 import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
 
+import com.google.common.base.Splitter;
+import com.google.common.base.Strings;
+import com.google.common.collect.Sets;
 
 /**
  * A simple embedded Jetty server to serve as HS2/HMS web UI.
@@ -54,32 +66,90 @@
   public static final String CONF_CONTEXT_ATTRIBUTE = "hive.conf";
   public static final String ADMINS_ACL = "admins.acl";
 
-  private final AccessControlList adminsAcl;
   private final String appDir;
-  private final String name;
-  private final String host;
   private final int port;
-  private final int maxThreads;
-  private final Configuration conf;
   private final WebAppContext webAppContext;
   private final Server webServer;
 
   /**
    * Create a status server on the given port.
    */
-  public HttpServer(String name, String host, int port, int maxThreads,
-      Configuration conf, AccessControlList adminsAcl) throws IOException {
-    this.name = name;
-    this.host = host;
-    this.port = port;
-    this.maxThreads = maxThreads;
-    this.conf = conf;
-    this.adminsAcl = adminsAcl;
+  private HttpServer(final Builder b) throws IOException {
+    this.port = b.port;
 
     webServer = new Server();
-    appDir = getWebAppsPath(name);
-    webAppContext = createWebAppContext();
-    initializeWebServer();
+    appDir = getWebAppsPath(b.name);
+    webAppContext = createWebAppContext(b);
+    initializeWebServer(b);
+  }
+
+  public static class Builder {
+    private String name;
+    private String host;
+    private int port;
+    private int maxThreads;
+    private HiveConf conf;
+    private Map<String, Object> contextAttrs = new HashMap<String, Object>();
+    private String keyStorePassword;
+    private String keyStorePath;
+    private boolean useSSL;
+
+    public HttpServer build() throws IOException {
+      return new HttpServer(this);
+    }
+
+    public Builder setConf(HiveConf conf) {
+      setContextAttribute(CONF_CONTEXT_ATTRIBUTE, conf);
+      this.conf = conf;
+      return this;
+    }
+
+    public Builder setName(String name) {
+      this.name = name;
+      return this;
+    }
+
+    public Builder setHost(String host) {
+      this.host = host;
+      return this;
+    }
+
+    public Builder setPort(int port) {
+      this.port = port;
+      return this;
+    }
+
+    public Builder setMaxThreads(int maxThreads) {
+      this.maxThreads = maxThreads;
+      return this;
+    }
+
+    public Builder setAdmins(String admins) {
+      if (admins != null) {
+        setContextAttribute(ADMINS_ACL, new AccessControlList(admins));
+      }
+      return this;
+    }
+
+    public Builder setKeyStorePassword(String keyStorePassword) {
+      this.keyStorePassword = keyStorePassword;
+      return this;
+    }
+
+    public Builder setKeyStorePath(String keyStorePath) {
+      this.keyStorePath = keyStorePath;
+      return this;
+    }
+
+    public Builder setUseSSL(boolean useSSL) {
+      this.useSSL = useSSL;
+      return this;
+    }
+
+    public Builder setContextAttribute(String name, Object value) {
+      contextAttrs.put(name, value);
+      return this;
+    }
   }
 
   public void start() throws Exception {
@@ -95,13 +165,6 @@ public int getPort() {
   }
 
   /**
-   * Set servlet context attribute that can be used in jsp.
-   */
-  public void setContextAttribute(String name, Object value) {
-    webAppContext.getServletContext().setAttribute(name, value);
-  }
-
-  /**
    * Checks the user has privileges to access to instrumentation servlets.
    * <p/>
    * If <code>hadoop.security.instrumentation.requires.admin</code> is set to FALSE
@@ -192,44 +255,64 @@ static boolean userHasAdministratorAccess(ServletContext servletContext,
   /**
    * Create the web context for the application of specified name
    */
-  WebAppContext createWebAppContext() {
+  WebAppContext createWebAppContext(Builder b) {
     WebAppContext ctx = new WebAppContext();
-    setContextAttributes(ctx.getServletContext());
-    ctx.setDisplayName(name);
+    setContextAttributes(ctx.getServletContext(), b.contextAttrs);
+    ctx.setDisplayName(b.name);
     ctx.setContextPath("/");
-    ctx.setWar(appDir + "/" + name);
+    ctx.setWar(appDir + "/" + b.name);
     return ctx;
   }
 
   /**
-   * Create a default regular channel connector for "http" requests
+   * Create a channel connector for "http/https" requests
    */
-  Connector createDefaultChannelConnector() {
-    SelectChannelConnector connector = new SelectChannelConnector();
+  Connector createChannelConnector(int queueSize, Builder b) {
+    SelectChannelConnector connector;
+    if (!b.useSSL) {
+      connector = new SelectChannelConnector();
+    } else {
+      SslContextFactory sslContextFactory = new SslContextFactory();
+      sslContextFactory.setKeyStorePath(b.keyStorePath);
+      Set<String> excludedSSLProtocols = Sets.newHashSet(
+        Splitter.on(",").trimResults().omitEmptyStrings().split(
+          Strings.nullToEmpty(b.conf.getVar(ConfVars.HIVE_SSL_PROTOCOL_BLACKLIST))));
+      sslContextFactory.addExcludeProtocols(excludedSSLProtocols.toArray(
+          new String[excludedSSLProtocols.size()]));
+      sslContextFactory.setKeyStorePassword(b.keyStorePassword);
+      connector = new SslSelectChannelConnector(sslContextFactory);
+    }
+
     connector.setLowResourcesMaxIdleTime(10000);
-    connector.setAcceptQueueSize(maxThreads);
+    connector.setAcceptQueueSize(queueSize);
     connector.setResolveNames(false);
     connector.setUseDirectBuffers(false);
     connector.setReuseAddress(!Shell.WINDOWS);
     return connector;
   }
 
-  void setContextAttributes(Context ctx) {
-    ctx.setAttribute(CONF_CONTEXT_ATTRIBUTE, conf);
-    ctx.setAttribute(ADMINS_ACL, adminsAcl);
+  /**
+   * Set servlet context attributes that can be used in jsp.
+   */
+  void setContextAttributes(Context ctx, Map<String, Object> contextAttrs) {
+    for (Map.Entry<String, Object> e: contextAttrs.entrySet()) {
+      ctx.setAttribute(e.getKey(), e.getValue());
+    }
   }
 
-  void initializeWebServer() {
+  void initializeWebServer(Builder b) {
     // Create the thread pool for the web server to handle HTTP requests
-    QueuedThreadPool threadPool = maxThreads <= 0 ? new QueuedThreadPool()
-      : new QueuedThreadPool(maxThreads);
+    QueuedThreadPool threadPool = new QueuedThreadPool();
+    if (b.maxThreads > 0) {
+      threadPool.setMaxThreads(b.maxThreads);
+    }
     threadPool.setDaemon(true);
-    threadPool.setName(name + "-web");
+    threadPool.setName(b.name + "-web");
     webServer.setThreadPool(threadPool);
 
     // Create the channel connector for the web server
-    Connector connector = createDefaultChannelConnector();
-    connector.setHost(host);
+    Connector connector = createChannelConnector(threadPool.getMaxThreads(), b);
+    connector.setHost(b.host);
     connector.setPort(port);
     webServer.addConnector(connector);
 
@@ -247,18 +330,18 @@ void initializeWebServer() {
     staticCtx.addServlet(DefaultServlet.class, "/*");
     staticCtx.setDisplayName("static");
 
-    String logDir = getLogDir();
+    String logDir = getLogDir(b.conf);
     if (logDir != null) {
       ServletContextHandler logCtx =
         new ServletContextHandler(contexts, "/logs");
-      setContextAttributes(logCtx.getServletContext());
+      setContextAttributes(logCtx.getServletContext(), b.contextAttrs);
       logCtx.addServlet(AdminAuthorizedServlet.class, "/*");
       logCtx.setResourceBase(logDir);
       logCtx.setDisplayName("logs");
     }
   }
 
-  String getLogDir() {
+  String getLogDir(Configuration conf) {
     String logDir = conf.get("hive.log.dir");
     if (logDir == null) {
       logDir = System.getProperty("hive.log.dir");
diff --git a/service/src/java/org/apache/hive/service/server/HiveServer2.java b/service/src/java/org/apache/hive/service/server/HiveServer2.java
index 78b10f7..4bfc1f3 100644
--- a/service/src/java/org/apache/hive/service/server/HiveServer2.java
+++ b/service/src/java/org/apache/hive/service/server/HiveServer2.java
@@ -28,6 +28,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
+import com.google.common.base.Strings;
 import org.apache.commons.cli.GnuParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Option;
@@ -47,15 +48,16 @@
 import org.apache.hadoop.hive.common.JvmPauseMonitor;
 import org.apache.hadoop.hive.common.LogUtils;
 import org.apache.hadoop.hive.common.LogUtils.LogInitializationException;
+import org.apache.hadoop.hive.common.ServerUtils;
 import org.apache.hadoop.hive.common.metrics.common.MetricsFactory;
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
 import org.apache.hadoop.hive.ql.exec.spark.session.SparkSessionManagerImpl;
 import org.apache.hadoop.hive.ql.exec.tez.TezSessionPoolManager;
 import org.apache.hadoop.hive.ql.util.ZooKeeperHiveHelper;
+import org.apache.hadoop.hive.shims.ShimLoader;
 import org.apache.hadoop.hive.shims.Utils;
 import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.hadoop.security.authorize.AccessControlList;
 import org.apache.hive.common.util.HiveStringUtils;
 import org.apache.hive.common.util.HiveVersionInfo;
 import org.apache.hive.http.HttpServer;
@@ -72,6 +74,8 @@
 import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.ZooDefs.Perms;
 import org.apache.zookeeper.data.ACL;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.google.common.base.Joiner;
 
@@ -123,17 +127,31 @@ public synchronized void init(HiveConf hiveConf) {
         if (webUIPort <= 0) {
           LOG.info("Web UI is disabled since port is set to " + webUIPort);
         } else {
-          AccessControlList adminsAcl =
-            new AccessControlList(hiveConf.getVar(ConfVars.USERS_IN_ADMIN_ROLE));
-          hiveConf.set("startcode", String.valueOf(System.currentTimeMillis()));
-          webServer = new HttpServer("hiveserver2",
-            hiveConf.getVar(ConfVars.HIVE_SERVER2_WEBUI_BIND_HOST),
-            webUIPort,
-            hiveConf.getIntVar(ConfVars.HIVE_SERVER2_WEBUI_MAX_THREADS),
-            hiveConf, adminsAcl);
+          HttpServer.Builder builder = new HttpServer.Builder();
+          builder.setName("hiveserver2").setPort(webUIPort).setConf(hiveConf);
+          builder.setHost(hiveConf.getVar(ConfVars.HIVE_SERVER2_WEBUI_BIND_HOST));
+          builder.setMaxThreads(
+            hiveConf.getIntVar(ConfVars.HIVE_SERVER2_WEBUI_MAX_THREADS));
+          builder.setAdmins(hiveConf.getVar(ConfVars.USERS_IN_ADMIN_ROLE));
           // SessionManager is initialized
-          webServer.setContextAttribute("hive.sm",
+          builder.setContextAttribute("hive.sm",
             cliService.getSessionManager());
+          hiveConf.set("startcode",
+            String.valueOf(System.currentTimeMillis()));
+          if (hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_WEBUI_USE_SSL)) {
+            String keyStorePath = hiveConf.getVar(
+              ConfVars.HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PATH);
+            if (Strings.isNullOrEmpty(keyStorePath)) {
+              throw new IllegalArgumentException(
+                ConfVars.HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PATH.varname
+                  + " Not configured for SSL connection");
+            }
+            builder.setKeyStorePassword(ShimLoader.getHadoopShims().getPassword(
+              hiveConf, ConfVars.HIVE_SERVER2_WEBUI_SSL_KEYSTORE_PASSWORD.varname));
+            builder.setKeyStorePath(keyStorePath);
+            builder.setUseSSL(true);
+          }
+          webServer = builder.build();
         }
       }
     } catch (IOException ie) {
-- 
1.7.9.5

