From 891d0edde725b19f08626e07ea1af6a2c7e2f94b Mon Sep 17 00:00:00 2001
From: Ashutosh Chauhan <hashutosh@apache.org>
Date: Wed, 16 Dec 2015 21:00:21 -0800
Subject: [PATCH 0681/1164] CDH-40038: HIVE-12590 : Repeated UDAFs with
 literals can produce incorrect result (Ashutosh
 Chauhan via John Pullokkaran)

Change-Id: I39b2313dc360fc0ea7a2a7013e4fd6a794b9de4c
Signed-off-by: Ashutosh Chauhan <hashutosh@apache.org>
---
 .../org/apache/hadoop/hive/ql/parse/ASTNode.java   |   27 +--
 .../hadoop/hive/ql/parse/CalcitePlanner.java       |    2 +-
 .../apache/hadoop/hive/ql/parse/RowResolver.java   |    4 +-
 .../hadoop/hive/ql/parse/SemanticAnalyzer.java     |   15 +-
 .../hadoop/hive/ql/parse/TypeCheckProcFactory.java |    2 +-
 .../org/apache/hadoop/hive/ql/parse/TestIUD.java   |  209 ++++++++++----------
 .../hadoop/hive/ql/parse/TestQBSubQuery.java       |   66 +++----
 .../queries/clientpositive/groupby_duplicate_key.q |    4 +
 .../join_cond_unqual_ambiguous_vc.q.out            |    2 +-
 .../results/clientpositive/case_sensitivity.q.out  |    2 +-
 .../results/clientpositive/constant_prop.q.out     |    2 +-
 .../clientpositive/groupby_duplicate_key.q.out     |   70 +++++++
 12 files changed, 241 insertions(+), 164 deletions(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/ASTNode.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/ASTNode.java
index b96e2eb..8400ee8 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/ASTNode.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/ASTNode.java
@@ -32,7 +32,7 @@
  */
 public class ASTNode extends CommonTree implements Node,Serializable {
   private static final long serialVersionUID = 1L;
-  private transient StringBuffer astStr;
+  private transient StringBuilder astStr;
   private transient ASTNodeOrigin origin;
   private transient int startIndx = -1;
   private transient int endIndx = -1;
@@ -133,10 +133,11 @@ private StringBuilder dump(StringBuilder sb, String ws) {
     return sb;
   }
 
-  private ASTNode getRootNodeWithValidASTStr (boolean useMemoizedRoot) {
-    if (useMemoizedRoot && rootNode != null && rootNode.parent == null &&
+  private void getRootNodeWithValidASTStr () {
+
+    if (rootNode != null && rootNode.parent == null &&
         rootNode.hasValidMemoizedString()) {
-      return rootNode;
+      return;
     }
     ASTNode retNode = this;
     while (retNode.parent != null) {
@@ -144,11 +145,11 @@ private ASTNode getRootNodeWithValidASTStr (boolean useMemoizedRoot) {
     }
     rootNode=retNode;
     if (!rootNode.isValidASTStr) {
-      rootNode.astStr = new StringBuffer();
+      rootNode.astStr = new StringBuilder();
       rootNode.toStringTree(rootNode);
       rootNode.isValidASTStr = true;
     }
-    return retNode;
+    return;
   }
 
   private boolean hasValidMemoizedString() {
@@ -174,7 +175,7 @@ private String getMemoizedSubString(int start, int end) {
 
   private void addtoMemoizedString(String string) {
     if (astStr == null) {
-      astStr = new StringBuffer();
+      astStr = new StringBuilder();
     }
     astStr.append(string);
   }
@@ -227,7 +228,7 @@ public String toStringTree() {
 
     // The root might have changed because of tree modifications.
     // Compute the new root for this tree and set the astStr.
-    getRootNodeWithValidASTStr(true);
+    getRootNodeWithValidASTStr();
 
     // If rootNotModified is false, then startIndx and endIndx will be stale.
     if (startIndx >= 0 && endIndx <= rootNode.getMemoizedStringLen()) {
@@ -240,14 +241,18 @@ private String toStringTree(ASTNode rootNode) {
     this.rootNode = rootNode;
     startIndx = rootNode.getMemoizedStringLen();
     // Leaf node
+    String str;
     if ( children==null || children.size()==0 ) {
-      rootNode.addtoMemoizedString(this.toString());
+      str = this.toString();
+      rootNode.addtoMemoizedString(this.getType() != HiveParser.StringLiteral ? str.toLowerCase() : str);
       endIndx =  rootNode.getMemoizedStringLen();
-      return this.toString();
+      return this.getType() != HiveParser.StringLiteral ? str.toLowerCase() : str;
     }
+
     if ( !isNil() ) {
       rootNode.addtoMemoizedString("(");
-      rootNode.addtoMemoizedString(this.toString());
+      str = this.toString();
+      rootNode.addtoMemoizedString((this.getType() == HiveParser.StringLiteral || null == str) ? str :  str.toLowerCase());
       rootNode.addtoMemoizedString(" ");
     }
     for (int i = 0; children!=null && i < children.size(); i++) {
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/CalcitePlanner.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/CalcitePlanner.java
index f2f116f..168fda4 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/CalcitePlanner.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/CalcitePlanner.java
@@ -1242,7 +1242,7 @@ private RelNode genTableLogicalPlan(String tableAlias, QB qb) throws SemanticExc
           VirtualColumn vc = vcs.next();
           colInfo = new ColumnInfo(vc.getName(), vc.getTypeInfo(), tableAlias, true,
               vc.getIsHidden());
-          rr.put(tableAlias, vc.getName(), colInfo);
+          rr.put(tableAlias, vc.getName().toLowerCase(), colInfo);
           cInfoLst.add(colInfo);
         }
 
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/RowResolver.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/RowResolver.java
index 5190bda..0226095 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/RowResolver.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/RowResolver.java
@@ -112,7 +112,6 @@ public boolean addMappingOnly(String tab_alias, String col_alias, ColumnInfo col
     if (tab_alias != null) {
       tab_alias = tab_alias.toLowerCase();
     }
-    col_alias = col_alias.toLowerCase();
 
     /*
      * allow multiple mappings to the same ColumnInfo.
@@ -169,7 +168,6 @@ public boolean hasTableAlias(String tab_alias) {
    * @throws SemanticException
    */
   public ColumnInfo get(String tab_alias, String col_alias) throws SemanticException {
-    col_alias = col_alias.toLowerCase();
     ColumnInfo ret = null;
 
     if (tab_alias != null) {
@@ -476,4 +474,4 @@ public RowResolver duplicate() {
     resolver.isExprResolver = isExprResolver;
     return resolver;
   }
-}
+}
\ No newline at end of file
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
index 8712b5f..e74dfd6 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java
@@ -547,7 +547,7 @@ private void doPhase1GetAllAggregations(ASTNode expressionTree,
           if(containsLeadLagUDF(expressionTree)) {
             throw new SemanticException(ErrorMsg.MISSING_OVER_CLAUSE.getMsg(functionName));
           }
-          aggregations.put(expressionTree.toStringTree().toLowerCase(), expressionTree);
+          aggregations.put(expressionTree.toStringTree(), expressionTree);
           FunctionInfo fi = FunctionRegistry.getFunctionInfo(functionName);
           if (!fi.isNative()) {
             unparseTranslator.addIdentifierTranslation((ASTNode) expressionTree
@@ -3452,7 +3452,7 @@ private int setBit(int bitmap, int bitIdx) {
         (selExpr.getChildCount() == 3 &&
         selExpr.getChild(2).getType() == HiveParser.TOK_WINDOWSPEC)) {
       // return zz for "xx + yy AS zz"
-      colAlias = unescapeIdentifier(selExpr.getChild(1).getText());
+      colAlias = unescapeIdentifier(selExpr.getChild(1).getText().toLowerCase());
       colRef[0] = tabAlias;
       colRef[1] = colAlias;
       return colRef;
@@ -3461,7 +3461,7 @@ private int setBit(int bitmap, int bitIdx) {
     ASTNode root = (ASTNode) selExpr.getChild(0);
     if (root.getType() == HiveParser.TOK_TABLE_OR_COL) {
       colAlias =
-          BaseSemanticAnalyzer.unescapeIdentifier(root.getChild(0).getText());
+          BaseSemanticAnalyzer.unescapeIdentifier(root.getChild(0).getText().toLowerCase());
       colRef[0] = tabAlias;
       colRef[1] = colAlias;
       return colRef;
@@ -3479,7 +3479,7 @@ private int setBit(int bitmap, int bitIdx) {
       // Return zz for "xx.zz" and "xx.yy.zz"
       ASTNode col = (ASTNode) root.getChild(1);
       if (col.getType() == HiveParser.Identifier) {
-        colAlias = unescapeIdentifier(col.getText());
+        colAlias = unescapeIdentifier(col.getText().toLowerCase());
       }
     }
 
@@ -3489,7 +3489,7 @@ private int setBit(int bitmap, int bitIdx) {
       String expr_flattened = root.toStringTree();
 
       // remove all TOK tokens
-      String expr_no_tok = expr_flattened.replaceAll("TOK_\\S+", "");
+      String expr_no_tok = expr_flattened.replaceAll("tok_\\S+", "");
 
       // remove all non alphanumeric letters, replace whitespace spans with underscore
       String expr_formatted = expr_no_tok.replaceAll("\\W", " ").trim().replaceAll("\\s+", "_");
@@ -3627,7 +3627,7 @@ static boolean isRegex(String pattern, HiveConf conf) {
         ASTNode selExprChild = (ASTNode) selExpr.getChild(i);
         switch (selExprChild.getType()) {
         case HiveParser.Identifier:
-          udtfColAliases.add(unescapeIdentifier(selExprChild.getText()));
+          udtfColAliases.add(unescapeIdentifier(selExprChild.getText().toLowerCase()));
           unparseTranslator.addIdentifierTranslation(selExprChild);
           break;
         case HiveParser.TOK_TABALIAS:
@@ -5199,6 +5199,7 @@ private Operator genGroupByPlan1ReduceMultiGBY(List<String> dests, QB qb, Operat
     List<ExprNodeDesc.ExprNodeDescEqualityWrapper> whereExpressions =
         new ArrayList<ExprNodeDesc.ExprNodeDescEqualityWrapper>();
     for (String dest : dests) {
+
       ASTNode whereExpr = parseInfo.getWhrForClause(dest);
 
       if (whereExpr != null) {
@@ -9248,7 +9249,7 @@ private Operator genTablePlan(String alias, QB qb) throws SemanticException {
       List<VirtualColumn> vcList = new ArrayList<VirtualColumn>();
       while (vcs.hasNext()) {
         VirtualColumn vc = vcs.next();
-        rwsch.put(alias, vc.getName(), new ColumnInfo(vc.getName(),
+        rwsch.put(alias, vc.getName().toLowerCase(), new ColumnInfo(vc.getName(),
             vc.getTypeInfo(), alias, true, vc.getIsHidden()));
         vcList.add(vc);
       }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java
index dc8db2e..a036335 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java
@@ -358,7 +358,7 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,
       default:
         // HiveParser.identifier | HiveParse.KW_IF | HiveParse.KW_LEFT |
         // HiveParse.KW_RIGHT
-        str = BaseSemanticAnalyzer.unescapeIdentifier(expr.getText());
+        str = BaseSemanticAnalyzer.unescapeIdentifier(expr.getText().toLowerCase());
         break;
       }
       return new ExprNodeConstantDesc(TypeInfoFactory.stringTypeInfo, str);
diff --git a/ql/src/test/org/apache/hadoop/hive/ql/parse/TestIUD.java b/ql/src/test/org/apache/hadoop/hive/ql/parse/TestIUD.java
index 1003ce3..d533ce3 100644
--- a/ql/src/test/org/apache/hadoop/hive/ql/parse/TestIUD.java
+++ b/ql/src/test/org/apache/hadoop/hive/ql/parse/TestIUD.java
@@ -49,99 +49,100 @@ ASTNode parse(String query) throws ParseException {
     ASTNode nd = pd.parse(query);
     return (ASTNode) nd.getChild(0);
   }
+
   @Test
   public void testDeleteNoWhere() throws ParseException {
     ASTNode ast = parse("DELETE FROM src");
-    Assert.assertEquals("AST doesn't match", 
-      "(TOK_DELETE_FROM " +
-        "(TOK_TABNAME src))", ast.toStringTree());
+    Assert.assertEquals("AST doesn't match",
+      "(tok_delete_from " +
+        "(tok_tabname src))", ast.toStringTree());
   }
   @Test
   public void testDeleteWithWhere() throws ParseException {
     ASTNode ast = parse("DELETE FROM src WHERE key IS NOT NULL AND src.value < 0");
-    Assert.assertEquals("AST doesn't match", 
-      "(TOK_DELETE_FROM " +
-        "(TOK_TABNAME src) " +
-        "(TOK_WHERE " +
-          "(AND " +
-            "(TOK_FUNCTION TOK_ISNOTNULL (TOK_TABLE_OR_COL key)) " +
-            "(< (. (TOK_TABLE_OR_COL src) value) 0))))",
+    Assert.assertEquals("AST doesn't match",
+      "(tok_delete_from " +
+        "(tok_tabname src) " +
+        "(tok_where " +
+          "(and " +
+            "(tok_function tok_isnotnull (tok_table_or_col key)) " +
+            "(< (. (tok_table_or_col src) value) 0))))",
       ast.toStringTree());
   }
   @Test
   public void testUpdateNoWhereSingleSet() throws ParseException {
     ASTNode ast = parse("UPDATE src set key = 3");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_UPDATE_TABLE " +
-        "(TOK_TABNAME src) " +
-        "(TOK_SET_COLUMNS_CLAUSE " +
+      "(tok_update_table " +
+        "(tok_tabname src) " +
+        "(tok_set_columns_clause " +
           "(= " +
-            "(TOK_TABLE_OR_COL key) 3)))",
+            "(tok_table_or_col key) 3)))",
       ast.toStringTree());
   }
   @Test
   public void testUpdateNoWhereMultiSet() throws ParseException {
     ASTNode ast = parse("UPDATE src set key = 3, value = 8");
-    Assert.assertEquals("AST doesn't match", 
-      "(TOK_UPDATE_TABLE " +
-        "(TOK_TABNAME src) " +
-        "(TOK_SET_COLUMNS_CLAUSE " +
+    Assert.assertEquals("AST doesn't match",
+      "(tok_update_table " +
+        "(tok_tabname src) " +
+        "(tok_set_columns_clause " +
           "(= " +
-            "(TOK_TABLE_OR_COL key) 3) " +
+            "(tok_table_or_col key) 3) " +
           "(= " +
-            "(TOK_TABLE_OR_COL value) 8)))",
+            "(tok_table_or_col value) 8)))",
       ast.toStringTree());
   }
   @Test
   public void testUpdateWithWhereSingleSet() throws ParseException {
     ASTNode ast = parse("UPDATE src SET key = 3 WHERE value IS NULL");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_UPDATE_TABLE " +
-        "(TOK_TABNAME src) " +
-        "(TOK_SET_COLUMNS_CLAUSE " +
+      "(tok_update_table " +
+        "(tok_tabname src) " +
+        "(tok_set_columns_clause " +
           "(= " +
-            "(TOK_TABLE_OR_COL key) 3)) " +
-        "(TOK_WHERE (TOK_FUNCTION TOK_ISNULL (TOK_TABLE_OR_COL value))))",
+            "(tok_table_or_col key) 3)) " +
+        "(tok_where (tok_function tok_isnull (tok_table_or_col value))))",
       ast.toStringTree());
   }
   @Test
   public void testUpdateWithWhereSingleSetExpr() throws ParseException {
     ASTNode ast = parse("UPDATE src SET key = -3+(5*9)%8, val = cast(6.1 + c as INT), d = d - 1 WHERE value IS NULL");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_UPDATE_TABLE (TOK_TABNAME src) " +
-        "(TOK_SET_COLUMNS_CLAUSE " +
-        "(= (TOK_TABLE_OR_COL key) (+ (- 3) (% (* 5 9) 8))) " +
-        "(= (TOK_TABLE_OR_COL val) (TOK_FUNCTION TOK_INT (+ 6.1 (TOK_TABLE_OR_COL c)))) " +
-        "(= (TOK_TABLE_OR_COL d) (- (TOK_TABLE_OR_COL d) 1))) " +
-        "(TOK_WHERE (TOK_FUNCTION TOK_ISNULL (TOK_TABLE_OR_COL value))))",
+      "(tok_update_table (tok_tabname src) " +
+        "(tok_set_columns_clause " +
+        "(= (tok_table_or_col key) (+ (- 3) (% (* 5 9) 8))) " +
+        "(= (tok_table_or_col val) (tok_function tok_int (+ 6.1 (tok_table_or_col c)))) " +
+        "(= (tok_table_or_col d) (- (tok_table_or_col d) 1))) " +
+        "(tok_where (tok_function tok_isnull (tok_table_or_col value))))",
       ast.toStringTree());
   }
   @Test
   public void testUpdateWithWhereMultiSet() throws ParseException {
     ASTNode ast = parse("UPDATE src SET key = 3, value = 8 WHERE VALUE = 1230997");
-    Assert.assertEquals("AST doesn't match", 
-      "(TOK_UPDATE_TABLE " +
-        "(TOK_TABNAME src) " +
-        "(TOK_SET_COLUMNS_CLAUSE " +
+    Assert.assertEquals("AST doesn't match",
+      "(tok_update_table " +
+        "(tok_tabname src) " +
+        "(tok_set_columns_clause " +
         "(= " +
-          "(TOK_TABLE_OR_COL key) 3) " +
+          "(tok_table_or_col key) 3) " +
         "(= " +
-          "(TOK_TABLE_OR_COL value) 8)) " +
-        "(TOK_WHERE (= (TOK_TABLE_OR_COL VALUE) 1230997)))",
+          "(tok_table_or_col value) 8)) " +
+        "(tok_where (= (tok_table_or_col value) 1230997)))",
       ast.toStringTree());
   }
   @Test
   public void testStandardInsertIntoTable() throws ParseException {
     ASTNode ast = parse("INSERT into TABLE page_view SELECT pvs.viewTime, pvs.userid from page_view_stg pvs where pvs.userid is null");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_QUERY " +
-        "(TOK_FROM " +
-          "(TOK_TABREF (TOK_TABNAME page_view_stg) pvs)) " +
-        "(TOK_INSERT (TOK_INSERT_INTO (TOK_TAB (TOK_TABNAME page_view))) " +
-        "(TOK_SELECT " +
-          "(TOK_SELEXPR (. (TOK_TABLE_OR_COL pvs) viewTime)) " +
-          "(TOK_SELEXPR (. (TOK_TABLE_OR_COL pvs) userid))) " +
-        "(TOK_WHERE (TOK_FUNCTION TOK_ISNULL (. (TOK_TABLE_OR_COL pvs) userid)))))",
+      "(tok_query " +
+        "(tok_from " +
+          "(tok_tabref (tok_tabname page_view_stg) pvs)) " +
+        "(tok_insert (tok_insert_into (tok_tab (tok_tabname page_view))) " +
+        "(tok_select " +
+          "(tok_selexpr (. (tok_table_or_col pvs) viewtime)) " +
+          "(tok_selexpr (. (tok_table_or_col pvs) userid))) " +
+        "(tok_where (tok_function tok_isnull (. (tok_table_or_col pvs) userid)))))",
       ast.toStringTree());
   }
   @Test
@@ -156,99 +157,99 @@ public void testSelectStarFromAnonymousVirtTable1Row() throws ParseException {
   }
   @Test
   public void testSelectStarFromVirtTable1Row() throws ParseException {
-    ASTNode ast = parse("select * from (values (3,4)) as VC(a,b)");
+    ASTNode ast = parse("select * from (values (3,4)) as vc(a,b)");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_QUERY " +
-        "(TOK_FROM " +
-          "(TOK_VIRTUAL_TABLE " +
-            "(TOK_VIRTUAL_TABREF (TOK_TABNAME VC) (TOK_COL_NAME a b)) " +
-            "(TOK_VALUES_TABLE (TOK_VALUE_ROW 3 4)))) " +
-        "(TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF))))",
+      "(tok_query " +
+        "(tok_from " +
+          "(tok_virtual_table " +
+            "(tok_virtual_tabref (tok_tabname vc) (tok_col_name a b)) " +
+            "(tok_values_table (tok_value_row 3 4)))) " +
+        "(tok_insert (tok_destination (tok_dir tok_tmp_file)) (tok_select (tok_selexpr tok_allcolref))))",
       ast.toStringTree());
   }
   @Test
   public void testSelectStarFromVirtTable2Row() throws ParseException {
-    ASTNode ast = parse("select * from (values (1,2),(3,4)) as VC(a,b)");
+    ASTNode ast = parse("select * from (values (1,2),(3,4)) as vc(a,b)");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_QUERY " +
-        "(TOK_FROM " +
-          "(TOK_VIRTUAL_TABLE " +
-            "(TOK_VIRTUAL_TABREF (TOK_TABNAME VC) (TOK_COL_NAME a b)) " +
-            "(TOK_VALUES_TABLE (TOK_VALUE_ROW 1 2) (TOK_VALUE_ROW 3 4)))) " +
-        "(TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF))))",
+      "(tok_query " +
+        "(tok_from " +
+          "(tok_virtual_table " +
+            "(tok_virtual_tabref (tok_tabname vc) (tok_col_name a b)) " +
+            "(tok_values_table (tok_value_row 1 2) (tok_value_row 3 4)))) " +
+        "(tok_insert (tok_destination (tok_dir tok_tmp_file)) (tok_select (tok_selexpr tok_allcolref))))",
       ast.toStringTree());
   }
   @Test
   public void testSelectStarFromVirtTable2RowNamedProjections() throws ParseException {
-    ASTNode ast = parse("select a as c, b as d from (values (1,2),(3,4)) as VC(a,b)");
+    ASTNode ast = parse("select a as c, b as d from (values (1,2),(3,4)) as vc(a,b)");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_QUERY " +
-        "(TOK_FROM " +
-        "(TOK_VIRTUAL_TABLE " +
-          "(TOK_VIRTUAL_TABREF (TOK_TABNAME VC) (TOK_COL_NAME a b)) " +
-          "(TOK_VALUES_TABLE (TOK_VALUE_ROW 1 2) (TOK_VALUE_ROW 3 4)))) " +
-        "(TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) " +
-          "(TOK_SELECT (TOK_SELEXPR (TOK_TABLE_OR_COL a) c) (TOK_SELEXPR (TOK_TABLE_OR_COL b) d))))",
+      "(tok_query " +
+        "(tok_from " +
+        "(tok_virtual_table " +
+          "(tok_virtual_tabref (tok_tabname vc) (tok_col_name a b)) " +
+          "(tok_values_table (tok_value_row 1 2) (tok_value_row 3 4)))) " +
+        "(tok_insert (tok_destination (tok_dir tok_tmp_file)) " +
+          "(tok_select (tok_selexpr (tok_table_or_col a) c) (tok_selexpr (tok_table_or_col b) d))))",
       ast.toStringTree());
   }
   @Test
   public void testInsertIntoTableAsSelectFromNamedVirtTable() throws ParseException {
-    ASTNode ast = parse("insert into page_view select a,b as c from (values (1,2),(3,4)) as VC(a,b) where b = 9");
+    ASTNode ast = parse("insert into page_view select a,b as c from (values (1,2),(3,4)) as vc(a,b) where b = 9");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_QUERY " +
-        "(TOK_FROM " +
-          "(TOK_VIRTUAL_TABLE " +
-            "(TOK_VIRTUAL_TABREF (TOK_TABNAME VC) (TOK_COL_NAME a b)) " +
-            "(TOK_VALUES_TABLE (TOK_VALUE_ROW 1 2) (TOK_VALUE_ROW 3 4)))) " +
-        "(TOK_INSERT (TOK_INSERT_INTO (TOK_TAB (TOK_TABNAME page_view))) " +
-          "(TOK_SELECT " +
-            "(TOK_SELEXPR (TOK_TABLE_OR_COL a)) " +
-            "(TOK_SELEXPR (TOK_TABLE_OR_COL b) c)) " +
-          "(TOK_WHERE (= (TOK_TABLE_OR_COL b) 9))))",
+      "(tok_query " +
+        "(tok_from " +
+          "(tok_virtual_table " +
+            "(tok_virtual_tabref (tok_tabname vc) (tok_col_name a b)) " +
+            "(tok_values_table (tok_value_row 1 2) (tok_value_row 3 4)))) " +
+        "(tok_insert (tok_insert_into (tok_tab (tok_tabname page_view))) " +
+          "(tok_select " +
+            "(tok_selexpr (tok_table_or_col a)) " +
+            "(tok_selexpr (tok_table_or_col b) c)) " +
+          "(tok_where (= (tok_table_or_col b) 9))))",
       ast.toStringTree());
   }
   @Test
   public void testInsertIntoTableFromAnonymousTable1Row() throws ParseException {
     ASTNode ast = parse("insert into page_view values(1,2)");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_QUERY " +
-        "(TOK_FROM " +
-        "(TOK_VIRTUAL_TABLE " +
-        "(TOK_VIRTUAL_TABREF TOK_ANONYMOUS) " +
-        "(TOK_VALUES_TABLE (TOK_VALUE_ROW 1 2)))) " +
-        "(TOK_INSERT (TOK_INSERT_INTO (TOK_TAB (TOK_TABNAME page_view))) " +
-        "(TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF))))",
+      "(tok_query " +
+        "(tok_from " +
+        "(tok_virtual_table " +
+        "(tok_virtual_tabref tok_anonymous) " +
+        "(tok_values_table (tok_value_row 1 2)))) " +
+        "(tok_insert (tok_insert_into (tok_tab (tok_tabname page_view))) " +
+        "(tok_select (tok_selexpr tok_allcolref))))",
       ast.toStringTree());
   }
   @Test
   public void testInsertIntoTableFromAnonymousTable() throws ParseException {
     ASTNode ast = parse("insert into table page_view values(-1,2),(3,+4)");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_QUERY " +
-        "(TOK_FROM " +
-          "(TOK_VIRTUAL_TABLE " +
-          "(TOK_VIRTUAL_TABREF TOK_ANONYMOUS) " +
-          "(TOK_VALUES_TABLE (TOK_VALUE_ROW (- 1) 2) (TOK_VALUE_ROW 3 (+ 4))))) " +
-        "(TOK_INSERT (TOK_INSERT_INTO (TOK_TAB (TOK_TABNAME page_view))) " +
-          "(TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF))))",
+      "(tok_query " +
+        "(tok_from " +
+          "(tok_virtual_table " +
+          "(tok_virtual_tabref tok_anonymous) " +
+          "(tok_values_table (tok_value_row (- 1) 2) (tok_value_row 3 (+ 4))))) " +
+        "(tok_insert (tok_insert_into (tok_tab (tok_tabname page_view))) " +
+          "(tok_select (tok_selexpr tok_allcolref))))",
       ast.toStringTree());
-    //same query as above less the "table" keyword KW_TABLE
+    //same query as above less the "table" keyword KW_table
     ast = parse("insert into page_view values(-1,2),(3,+4)");
     Assert.assertEquals("AST doesn't match",
-      "(TOK_QUERY " +
-        "(TOK_FROM " +
-        "(TOK_VIRTUAL_TABLE " +
-        "(TOK_VIRTUAL_TABREF TOK_ANONYMOUS) " +
-        "(TOK_VALUES_TABLE (TOK_VALUE_ROW (- 1) 2) (TOK_VALUE_ROW 3 (+ 4))))) " +
-        "(TOK_INSERT (TOK_INSERT_INTO (TOK_TAB (TOK_TABNAME page_view))) " +
-        "(TOK_SELECT (TOK_SELEXPR TOK_ALLCOLREF))))",
+      "(tok_query " +
+        "(tok_from " +
+        "(tok_virtual_table " +
+        "(tok_virtual_tabref tok_anonymous) " +
+        "(tok_values_table (tok_value_row (- 1) 2) (tok_value_row 3 (+ 4))))) " +
+        "(tok_insert (tok_insert_into (tok_tab (tok_tabname page_view))) " +
+        "(tok_select (tok_selexpr tok_allcolref))))",
       ast.toStringTree());
   }
   @Test
   public void testMultiInsert() throws ParseException {
     ASTNode ast = parse("from S insert into T1 select a, b insert into T2 select c, d");
-    Assert.assertEquals("AST doesn't match", "(TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME S))) " +
-      "(TOK_INSERT (TOK_INSERT_INTO (TOK_TAB (TOK_TABNAME T1))) (TOK_SELECT (TOK_SELEXPR (TOK_TABLE_OR_COL a)) (TOK_SELEXPR (TOK_TABLE_OR_COL b)))) " +
-      "(TOK_INSERT (TOK_INSERT_INTO (TOK_TAB (TOK_TABNAME T2))) (TOK_SELECT (TOK_SELEXPR (TOK_TABLE_OR_COL c)) (TOK_SELEXPR (TOK_TABLE_OR_COL d)))))", ast.toStringTree());
+    Assert.assertEquals("AST doesn't match", "(tok_query (tok_from (tok_tabref (tok_tabname s))) " +
+      "(tok_insert (tok_insert_into (tok_tab (tok_tabname t1))) (tok_select (tok_selexpr (tok_table_or_col a)) (tok_selexpr (tok_table_or_col b)))) " +
+      "(tok_insert (tok_insert_into (tok_tab (tok_tabname t2))) (tok_select (tok_selexpr (tok_table_or_col c)) (tok_selexpr (tok_table_or_col d)))))", ast.toStringTree());
   }
 }
diff --git a/ql/src/test/org/apache/hadoop/hive/ql/parse/TestQBSubQuery.java b/ql/src/test/org/apache/hadoop/hive/ql/parse/TestQBSubQuery.java
index 77ff79a..f6f0abb 100644
--- a/ql/src/test/org/apache/hadoop/hive/ql/parse/TestQBSubQuery.java
+++ b/ql/src/test/org/apache/hadoop/hive/ql/parse/TestQBSubQuery.java
@@ -21,25 +21,24 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import junit.framework.Assert;
-
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.ql.session.SessionState;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 public class TestQBSubQuery {
   static HiveConf conf;
-  
+
   private static String IN_QUERY = " select * " +
   		"from src " +
   		"where src.key in (select key from src s1 where s1.key > '9' and s1.value > '9') ";
-  
+
   private static String IN_QUERY2 = " select * " +
       "from src " +
       "where src.key in (select key from src s1 where s1.key > '9' and s1.value > '9') and value > '9'";
-  
+
   private static String QUERY3 = "select p_mfgr, min(p_size), rank() over(partition by p_mfgr) as r from part group by p_mfgr";
 
   ParseDriver pd;
@@ -61,73 +60,72 @@ ASTNode parse(String query) throws ParseException {
     ASTNode nd = pd.parse(query);
     return (ASTNode) nd.getChild(0);
   }
-  
+
   @Test
   public void testExtractSubQueries() throws Exception {
     ASTNode ast = parse(IN_QUERY);
     ASTNode where = where(ast);
     List<ASTNode> sqs = SubQueryUtils.findSubQueries((ASTNode) where.getChild(0));
-    Assert.assertEquals(sqs.size(), 1);
-    
+    Assert.assertEquals(1,sqs.size());
+
     ASTNode sq = sqs.get(0);
-    Assert.assertEquals(sq.toStringTree(),
-        "(TOK_SUBQUERY_EXPR (TOK_SUBQUERY_OP in) (TOK_QUERY (TOK_FROM (TOK_TABREF (TOK_TABNAME src) s1)) (TOK_INSERT (TOK_DESTINATION (TOK_DIR TOK_TMP_FILE)) (TOK_SELECT (TOK_SELEXPR (TOK_TABLE_OR_COL key))) (TOK_WHERE (and (> (. (TOK_TABLE_OR_COL s1) key) '9') (> (. (TOK_TABLE_OR_COL s1) value) '9'))))) (. (TOK_TABLE_OR_COL src) key))"
-        );
+    Assert.assertEquals("(tok_subquery_expr (tok_subquery_op in) (tok_query (tok_from (tok_tabref (tok_tabname src) s1)) (tok_insert (tok_destination (tok_dir tok_tmp_file)) (tok_select (tok_selexpr (tok_table_or_col key))) (tok_where (and (> (. (tok_table_or_col s1) key) '9') (> (. (tok_table_or_col s1) value) '9'))))) (. (tok_table_or_col src) key))"
+        ,sq.toStringTree());
   }
-  
+
   @Test
   public void testExtractConjuncts() throws Exception {
     ASTNode ast = parse(IN_QUERY);
     ASTNode where = where(ast);
-    List<ASTNode> sqs = SubQueryUtils.findSubQueries((ASTNode) where.getChild(0));    
+    List<ASTNode> sqs = SubQueryUtils.findSubQueries((ASTNode) where.getChild(0));
     ASTNode sq = sqs.get(0);
-    
+
     ASTNode sqWhere = where((ASTNode) sq.getChild(1));
-    
+
     List<ASTNode> conjuncts = new ArrayList<ASTNode>();
     SubQueryUtils.extractConjuncts((ASTNode) sqWhere.getChild(0), conjuncts);
-    Assert.assertEquals(conjuncts.size(), 2);
-    
-    Assert.assertEquals(conjuncts.get(0).toStringTree(), "(> (. (TOK_TABLE_OR_COL s1) key) '9')");
-    Assert.assertEquals(conjuncts.get(1).toStringTree(), "(> (. (TOK_TABLE_OR_COL s1) value) '9')");
+    Assert.assertEquals(2, conjuncts.size());
+
+    Assert.assertEquals("(> (. (tok_table_or_col s1) key) '9')", conjuncts.get(0).toStringTree());
+    Assert.assertEquals("(> (. (tok_table_or_col s1) value) '9')", conjuncts.get(1).toStringTree());
   }
-  
+
   @Test
   public void testRewriteOuterQueryWhere() throws Exception {
     ASTNode ast = parse(IN_QUERY);
     ASTNode where = where(ast);
-    List<ASTNode> sqs = SubQueryUtils.findSubQueries((ASTNode) where.getChild(0));    
+    List<ASTNode> sqs = SubQueryUtils.findSubQueries((ASTNode) where.getChild(0));
     ASTNode sq = sqs.get(0);
-    
+
     ASTNode newWhere = SubQueryUtils.rewriteParentQueryWhere((ASTNode) where.getChild(0), sq);
-    Assert.assertEquals(newWhere.toStringTree(), "(= 1 1)");
+    Assert.assertEquals("(= 1 1)",newWhere.toStringTree());
   }
-  
+
   @Test
   public void testRewriteOuterQueryWhere2() throws Exception {
     ASTNode ast = parse(IN_QUERY2);
     ASTNode where = where(ast);
-    List<ASTNode> sqs = SubQueryUtils.findSubQueries((ASTNode) where.getChild(0));    
+    List<ASTNode> sqs = SubQueryUtils.findSubQueries((ASTNode) where.getChild(0));
     ASTNode sq = sqs.get(0);
-    
+
     ASTNode newWhere = SubQueryUtils.rewriteParentQueryWhere((ASTNode) where.getChild(0), sq);
-    Assert.assertEquals(newWhere.toStringTree(), "(> (TOK_TABLE_OR_COL value) '9')");
+    Assert.assertEquals("(> (tok_table_or_col value) '9')",newWhere.toStringTree());
   }
-  
+
   @Test
   public void testCheckAggOrWindowing() throws Exception {
     ASTNode ast = parse(QUERY3);
     ASTNode select = select(ast);
-    
-    Assert.assertEquals(SubQueryUtils.checkAggOrWindowing((ASTNode) select.getChild(0)), 0);
-    Assert.assertEquals(SubQueryUtils.checkAggOrWindowing((ASTNode) select.getChild(1)), 1);
-    Assert.assertEquals(SubQueryUtils.checkAggOrWindowing((ASTNode) select.getChild(2)), 2);
+
+    Assert.assertEquals(0, SubQueryUtils.checkAggOrWindowing((ASTNode) select.getChild(0)));
+    Assert.assertEquals(1, SubQueryUtils.checkAggOrWindowing((ASTNode) select.getChild(1)));
+    Assert.assertEquals(2, SubQueryUtils.checkAggOrWindowing((ASTNode) select.getChild(2)));
   }
-  
+
   private ASTNode where(ASTNode qry) {
     return (ASTNode) qry.getChild(1).getChild(2);
   }
-  
+
   private ASTNode select(ASTNode qry) {
     return (ASTNode) qry.getChild(1).getChild(1);
   }
diff --git a/ql/src/test/queries/clientpositive/groupby_duplicate_key.q b/ql/src/test/queries/clientpositive/groupby_duplicate_key.q
index 7f38efe..1909873 100644
--- a/ql/src/test/queries/clientpositive/groupby_duplicate_key.q
+++ b/ql/src/test/queries/clientpositive/groupby_duplicate_key.q
@@ -11,3 +11,7 @@ create table dummy as
 select distinct key, "X" as dummy1, "X" as dummy2 from src tablesample (10 rows);
 
 select key,dummy1,dummy2 from dummy;
+
+explain
+select max('pants'), max('pANTS') from src group by key limit 1;
+select max('pants'), max('pANTS') from src group by key limit 1;
diff --git a/ql/src/test/results/clientnegative/join_cond_unqual_ambiguous_vc.q.out b/ql/src/test/results/clientnegative/join_cond_unqual_ambiguous_vc.q.out
index 06c1ab5..3d9735a 100644
--- a/ql/src/test/results/clientnegative/join_cond_unqual_ambiguous_vc.q.out
+++ b/ql/src/test/results/clientnegative/join_cond_unqual_ambiguous_vc.q.out
@@ -1 +1 @@
-FAILED: SemanticException Column input__file__name Found in more than One Tables/Subqueries
+FAILED: SemanticException Column INPUT__FILE__NAME Found in more than One Tables/Subqueries
diff --git a/ql/src/test/results/clientpositive/case_sensitivity.q.out b/ql/src/test/results/clientpositive/case_sensitivity.q.out
index a5b14e8..b3969cc 100644
--- a/ql/src/test/results/clientpositive/case_sensitivity.q.out
+++ b/ql/src/test/results/clientpositive/case_sensitivity.q.out
@@ -35,7 +35,7 @@ STAGE PLANS:
               predicate: (lint[0] > 0) (type: boolean)
               Statistics: Num rows: 3 Data size: 837 Basic stats: COMPLETE Column stats: NONE
               Select Operator
-                expressions: lint[1] (type: int), lintstring[0].MYSTRING (type: string)
+                expressions: lint[1] (type: int), lintstring[0].mystring (type: string)
                 outputColumnNames: _col0, _col1
                 Statistics: Num rows: 3 Data size: 837 Basic stats: COMPLETE Column stats: NONE
                 File Output Operator
diff --git a/ql/src/test/results/clientpositive/constant_prop.q.out b/ql/src/test/results/clientpositive/constant_prop.q.out
index 1199709..001a3c8 100644
--- a/ql/src/test/results/clientpositive/constant_prop.q.out
+++ b/ql/src/test/results/clientpositive/constant_prop.q.out
@@ -33,7 +33,7 @@ STAGE PLANS:
           Row Limit Per Split: 1
           Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: COMPLETE
           Select Operator
-            expressions: named_struct(if(array_contains(array(1,2), 3), 'F1', 'B1'),1,if(array_contains(map_keys(map('b':'x')), 'b'), 'F2', 'B2'),2) (type: struct<b1:int,f2:int>), named_struct(if(array_contains(array(1,2), 3), 'F1', 'B1'),1,if(array_contains(map_keys(map('b':'x')), 'b'), 'F2', 'B2'),2).F2 (type: int)
+            expressions: named_struct(if(array_contains(array(1,2), 3), 'F1', 'B1'),1,if(array_contains(map_keys(map('b':'x')), 'b'), 'F2', 'B2'),2) (type: struct<b1:int,f2:int>), named_struct(if(array_contains(array(1,2), 3), 'F1', 'B1'),1,if(array_contains(map_keys(map('b':'x')), 'b'), 'F2', 'B2'),2).f2 (type: int)
             outputColumnNames: _col0, _col1
             Statistics: Num rows: 500 Data size: 30000 Basic stats: COMPLETE Column stats: COMPLETE
             ListSink
diff --git a/ql/src/test/results/clientpositive/groupby_duplicate_key.q.out b/ql/src/test/results/clientpositive/groupby_duplicate_key.q.out
index 2f2a6e6..07e9fc3 100644
--- a/ql/src/test/results/clientpositive/groupby_duplicate_key.q.out
+++ b/ql/src/test/results/clientpositive/groupby_duplicate_key.q.out
@@ -175,3 +175,73 @@ POSTHOOK: Input: default@dummy
 484	X	X
 86	X	X
 98	X	X
+PREHOOK: query: explain
+select max('pants'), max('pANTS') from src group by key limit 1
+PREHOOK: type: QUERY
+POSTHOOK: query: explain
+select max('pants'), max('pANTS') from src group by key limit 1
+POSTHOOK: type: QUERY
+STAGE DEPENDENCIES:
+  Stage-1 is a root stage
+  Stage-0 depends on stages: Stage-1
+
+STAGE PLANS:
+  Stage: Stage-1
+    Map Reduce
+      Map Operator Tree:
+          TableScan
+            alias: src
+            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
+            Select Operator
+              expressions: key (type: string)
+              outputColumnNames: _col0
+              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
+              Group By Operator
+                aggregations: max('pants'), max('pANTS')
+                keys: _col0 (type: string)
+                mode: hash
+                outputColumnNames: _col0, _col1, _col2
+                Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
+                Reduce Output Operator
+                  key expressions: _col0 (type: string)
+                  sort order: +
+                  Map-reduce partition columns: _col0 (type: string)
+                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE
+                  value expressions: _col1 (type: string), _col2 (type: string)
+      Reduce Operator Tree:
+        Group By Operator
+          aggregations: max(VALUE._col0), max(VALUE._col1)
+          keys: KEY._col0 (type: string)
+          mode: mergepartial
+          outputColumnNames: _col0, _col1, _col2
+          Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
+          Select Operator
+            expressions: _col1 (type: string), _col2 (type: string)
+            outputColumnNames: _col0, _col1
+            Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
+            Limit
+              Number of rows: 1
+              Statistics: Num rows: 1 Data size: 10 Basic stats: COMPLETE Column stats: NONE
+              File Output Operator
+                compressed: false
+                Statistics: Num rows: 1 Data size: 10 Basic stats: COMPLETE Column stats: NONE
+                table:
+                    input format: org.apache.hadoop.mapred.TextInputFormat
+                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
+                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
+
+  Stage: Stage-0
+    Fetch Operator
+      limit: 1
+      Processor Tree:
+        ListSink
+
+PREHOOK: query: select max('pants'), max('pANTS') from src group by key limit 1
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src
+#### A masked pattern was here ####
+POSTHOOK: query: select max('pants'), max('pANTS') from src group by key limit 1
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src
+#### A masked pattern was here ####
+pants	pANTS
-- 
1.7.9.5

