From 796d8b3a833a6a290938f581c1c75b45d083c079 Mon Sep 17 00:00:00 2001
From: ctang <ctang@cloudera.com>
Date: Thu, 1 Oct 2015 22:24:13 -0400
Subject: [PATCH 0331/1164] CDH-31943: Backport HIVE-9867: Migrate usage of
 deprecated Calcite methods (only part for
 HIVE-8398)

---
 .../hadoop/hive/ql/parse/TypeCheckProcFactory.java |   13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java
index 706390b..e8217fd 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/TypeCheckProcFactory.java
@@ -555,7 +555,7 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,
 
   private static ExprNodeDesc toExprNodeDesc(ColumnInfo colInfo) {
     ObjectInspector inspector = colInfo.getObjectInspector();
-    if (inspector instanceof ConstantObjectInspector && 
+    if (inspector instanceof ConstantObjectInspector &&
         inspector instanceof PrimitiveObjectInspector) {
       PrimitiveObjectInspector poi = (PrimitiveObjectInspector) inspector;
       Object constant = ((ConstantObjectInspector) inspector).getWritableConstantValue();
@@ -994,8 +994,15 @@ protected ExprNodeDesc processQualifiedColRef(TypeCheckCtx ctx, ASTNode expr,
           .getText());
       // NOTE: tableAlias must be a valid non-ambiguous table alias,
       // because we've checked that in TOK_TABLE_OR_COL's process method.
-      ColumnInfo colInfo = input.get(tableAlias, ((ExprNodeConstantDesc) nodeOutputs[1]).getValue()
-          .toString());
+      String colName;
+      if (nodeOutputs[1] instanceof ExprNodeConstantDesc) {
+        colName = ((ExprNodeConstantDesc) nodeOutputs[1]).getValue().toString();
+      }  else if (nodeOutputs[1] instanceof ExprNodeColumnDesc) {
+        colName = ((ExprNodeColumnDesc)nodeOutputs[1]).getColumn();
+      } else {
+        throw new SemanticException("Unexpected ExprNode : " + nodeOutputs[1]);
+      }
+      ColumnInfo colInfo = input.get(tableAlias, colName);
 
       if (colInfo == null) {
         ctx.setError(ErrorMsg.INVALID_COLUMN.getMsg(expr.getChild(1)), expr);
-- 
1.7.9.5

