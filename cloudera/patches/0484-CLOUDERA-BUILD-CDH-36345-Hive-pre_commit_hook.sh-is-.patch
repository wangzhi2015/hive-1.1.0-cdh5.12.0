From 18011cb69addfc208b12330787525ece2ec813cf Mon Sep 17 00:00:00 2001
From: Sergio Pena <sergio.pena@cloudera.com>
Date: Thu, 4 Feb 2016 15:05:10 -0600
Subject: [PATCH 0484/1164] CLOUDERA-BUILD: CDH-36345: Hive pre_commit_hook.sh
 is not running TestEncryptedHDFSCliDriver and
 TestSparkCliDriver tests

Change-Id: I530379adad966d4808d032c6b09fd151e8078cc5
---
 cloudera/pre_commit_hook.sh   |   16 +++++++++---
 cloudera/qtest-driver-info.py |   57 ++++++++++++++++++++++++++++++-----------
 2 files changed, 54 insertions(+), 19 deletions(-)

diff --git a/cloudera/pre_commit_hook.sh b/cloudera/pre_commit_hook.sh
index b949b51..791ab77 100755
--- a/cloudera/pre_commit_hook.sh
+++ b/cloudera/pre_commit_hook.sh
@@ -72,10 +72,18 @@ mvn clean install -Phadoop-2 -Dmaven.repo.local="$MVN_REPO_LOCAL" -DskipTests
 # Execute .q tests that were modified in the patch
 tests_modified=`get_qtests_to_execute`
 if [ -n "$tests_modified" ]; then
-  for t in `python ../cloudera/qtest-driver-info.py --pom ../itests/qtest/pom.xml --properties ../itests/src/test/resources/testconfiguration.properties --paths $tests_modified`; do
-    driver=`echo $t | cut -d: -f1`
-    files=`echo $t | cut -d: -f2`
+  declare -a QTEST_POM_PATHS=(
+    "../itests/qtest/pom.xml"
+    "../itests/qtest-spark/pom.xml"
+  )
 
-    mvn test -Phadoop-2 -Dmaven.repo.local="$MVN_REPO_LOCAL" -Dtest=$driver -Dqfile=$files
+  for pom in ${QTEST_POM_PATHS[@]}; do
+    for t in `python ../cloudera/qtest-driver-info.py --hadoopVersion "hadoop-23" --pom $pom --properties ../itests/src/test/resources/testconfiguration.properties --paths $tests_modified`
+    do
+      driver=`echo $t | cut -d: -f1`
+      files=`echo $t | cut -d: -f2`
+
+      mvn test -Phadoop-2 -Dmaven.repo.local="$MVN_REPO_LOCAL" -Dtest=$driver -Dqfile=$files
+    done
   done
 fi
diff --git a/cloudera/qtest-driver-info.py b/cloudera/qtest-driver-info.py
index 67a2c97..c3394da 100644
--- a/cloudera/qtest-driver-info.py
+++ b/cloudera/qtest-driver-info.py
@@ -11,6 +11,10 @@
 import sys
 import xml.etree.ElementTree as ET
 
+PREFIX_XMLNS = "{http://maven.apache.org/POM/4.0.0}"
+
+POM_HADOOP_VERSION_NAME = "active.hadoop.version"
+POM_HADOOP2_VERSION_VALUE = "hadoop-23.version"
 
 def load_properties(filepath, sep='=', comment_char='#'):
     """
@@ -41,12 +45,13 @@ def replace_vars(line, propsVars):
         line = line.replace("${" + var + "}", propsVars[var])
     return line
 
+def get_tag(name):
+    return "%s%s" % (PREFIX_XMLNS, name)
+
 #
 # Find all <qtestgen ... /> sections from the pom.xml file.
 #
-def find_qtestgen(pomtree):
-    PREFIX_XMLNS = "{http://maven.apache.org/POM/4.0.0}"
-
+def find_qtestgen(pomtree, properties):
     '''
     Example of a XML structure to find:
 
@@ -73,20 +78,37 @@ def find_qtestgen(pomtree):
     '''
 
     plugins = pomtree.getroot() \
-        .find("%sbuild" % PREFIX_XMLNS) \
-        .find("%splugins" % PREFIX_XMLNS)
+        .find(get_tag("build")) \
+        .find(get_tag("plugins"))
+
+    qtestgen = None
 
-    for plugin in plugins.findall("%splugin" % PREFIX_XMLNS):
-        if plugin.find("%sgroupId" % PREFIX_XMLNS).text == "org.apache.maven.plugins":
-            executions = plugin.find("%sexecutions" % PREFIX_XMLNS)
-            for execution in executions.findall("%sexecution" % PREFIX_XMLNS):
+    for plugin in plugins.findall(get_tag("plugin")):
+        groupId = plugin.find(get_tag("groupId")).text
+        artifactId = plugin.find(get_tag("artifactId")).text
+        if groupId == "org.apache.maven.plugins" and artifactId == "maven-antrun-plugin":
+            executions = plugin.find(get_tag("executions"))
+            for execution in executions.findall(get_tag("execution")):
                 if execution.find("%sid" % PREFIX_XMLNS).text == "generate-tests-sources":
-                    target = execution.find("%sconfiguration" % PREFIX_XMLNS) \
-                        .find("%starget" % PREFIX_XMLNS)
+                    target = execution.find(get_tag("configuration")) \
+                        .find(get_tag("target"))
 
-                    return target.findall("%sqtestgen" % PREFIX_XMLNS)
+                    # Get the list of all <qtestgen>. This is excluding the ones inside <if> tags.
+                    qtestgen = target.findall(get_tag("qtestgen"))
 
-    return None
+                    # Get the list of all <qtestgen> found inside <if> tags
+                    for iftag in target.findall(get_tag("if")):
+                        equals = iftag.find(get_tag("equals"))
+                        arg1 = equals.get("arg1")
+                        arg2 = equals.get("arg2")
+
+                        thentag = iftag.find(get_tag("then"), None)
+                        if POM_HADOOP_VERSION_NAME in arg1:
+                            if properties[POM_HADOOP_VERSION_NAME] in arg2:
+                                for qtest in thentag.findall(get_tag("qtestgen")):
+                                    qtestgen.append(qtest)
+
+    return qtestgen
 
 # Check if a qfile is included in the <qtestgen> tag by looking into the following
 # attributes:
@@ -134,7 +156,7 @@ def is_qfile_include(qtestgen, qfile, testproperties):
 def get_drivers_for_qfile(pomtree, testproperties, qdir, qfile):
     drivers = []
 
-    for qtestgen in find_qtestgen(pomtree):
+    for qtestgen in find_qtestgen(pomtree, testproperties):
         # Search for the <qtestgen> that matches the desired 'queryDirectory'
         if re.compile(qdir).search(qtestgen.get("queryDirectory")) is not None:
             if is_qfile_include(qtestgen, qfile, testproperties):
@@ -146,7 +168,7 @@ def get_drivers_for_qfile(pomtree, testproperties, qdir, qfile):
 def get_drivers_for_qresults(pomtree, testproperties, qresults, qfile):
     drivers = []
 
-    for qtestgen in find_qtestgen(pomtree):
+    for qtestgen in find_qtestgen(pomtree, testproperties):
         if qtestgen.get("resultsDirectory"):
             # Search for the <qtestgen> that matches the desired 'resultsDirectory'
             if re.compile(qresults).search(qtestgen.get("resultsDirectory")) is not None:
@@ -167,6 +189,7 @@ def get_drivers_for_qresults(pomtree, testproperties, qresults, qfile):
     parser.add_argument("--paths")
     parser.add_argument("--pom")
     parser.add_argument("--properties")
+    parser.add_argument("--hadoopVersion")
     args = parser.parse_args()
 
     if args.pom is None:
@@ -187,6 +210,10 @@ def get_drivers_for_qresults(pomtree, testproperties, qresults, qfile):
     pomtree = ET.parse(args.pom)
     testproperties = load_properties(args.properties)
 
+    testproperties[POM_HADOOP_VERSION_NAME] = POM_HADOOP2_VERSION_VALUE
+    if args.hadoopVersion is not None:
+        testproperties[POM_HADOOP_VERSION_NAME] = args.hadoopVersion
+
     # Get all paths information, and get the correct Test driver
     if args.paths:
         tests = {}
-- 
1.7.9.5

