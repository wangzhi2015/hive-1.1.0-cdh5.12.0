From 20e6a5366d00f67c7840179be45f2f8e2f6cd704 Mon Sep 17 00:00:00 2001
From: Yongzhi Chen <ychena@apache.org>
Date: Thu, 4 Feb 2016 10:18:22 -0500
Subject: [PATCH 0524/1164] CDH-37979 : HIVE-12941 Unexpected result when
 using MIN() on struct with NULL in first field
 (Yongzhi Chen, reviewed by Aihua Xu)

Change-Id: Ie3fc555af2906a917b00da7b81989cb571620b17
---
 .../hadoop/hive/ql/udf/generic/GenericUDAFMin.java |    4 +-
 .../test/queries/clientpositive/min_structvalue.q  |   10 +++++
 .../results/clientpositive/min_structvalue.q.out   |   45 ++++++++++++++++++++
 .../objectinspector/ObjectInspectorUtils.java      |   42 +++++++++++++++---
 4 files changed, 95 insertions(+), 6 deletions(-)
 create mode 100644 ql/src/test/queries/clientpositive/min_structvalue.q
 create mode 100644 ql/src/test/results/clientpositive/min_structvalue.q.out

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFMin.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFMin.java
index 816350f..9edc6b3 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFMin.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFMin.java
@@ -28,7 +28,9 @@
 import org.apache.hadoop.hive.ql.udf.UDFType;
 import org.apache.hadoop.hive.ql.udf.generic.GenericUDAFMax.MaxStreamingFixedWindow;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
+import org.apache.hadoop.hive.serde2.objectinspector.FullMapEqualComparer;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorUtils.NullValueOption;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorUtils.ObjectInspectorCopyOption;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
@@ -109,7 +111,7 @@ public void merge(AggregationBuffer agg, Object partial)
         throws HiveException {
       if (partial != null) {
         MinAgg myagg = (MinAgg) agg;
-        int r = ObjectInspectorUtils.compare(myagg.o, outputOI, partial, inputOI);
+        int r = ObjectInspectorUtils.compare(myagg.o, outputOI, partial, inputOI, new FullMapEqualComparer(), NullValueOption.MAXVALUE);
         if (myagg.o == null || r > 0) {
           myagg.o = ObjectInspectorUtils.copyToStandardObject(partial, inputOI,
               ObjectInspectorCopyOption.JAVA);
diff --git a/ql/src/test/queries/clientpositive/min_structvalue.q b/ql/src/test/queries/clientpositive/min_structvalue.q
new file mode 100644
index 0000000..4431a0d
--- /dev/null
+++ b/ql/src/test/queries/clientpositive/min_structvalue.q
@@ -0,0 +1,10 @@
+select max(a), min(a) FROM (select named_struct("field",1) as a union all select named_struct("field",2) as a union all select named_struct("field",cast(null as int)) as a) tmp;
+
+select min(a) FROM (select named_struct("field",1) as a union all select named_struct("field",-2) as a union all select named_struct("field",cast(null as int)) as a) tmp;
+
+select min(a) FROM (select named_struct("field",1) as a union all select named_struct("field",2) as a union all select named_struct("field",cast(5 as int)) as a) tmp;
+
+select min(a) FROM (select named_struct("field",1, "secf", cast(null as int) ) as a union all select named_struct("field",2, "secf", 3) as a union all select named_struct("field",cast(5 as int), "secf", 4) as a) tmp;
+
+select min(a) FROM (select named_struct("field",1, "secf", 2) as a union all select named_struct("field",-2, "secf", 3) as a union all select named_struct("field",cast(null as int), "secf", 1) as a) tmp;
+
diff --git a/ql/src/test/results/clientpositive/min_structvalue.q.out b/ql/src/test/results/clientpositive/min_structvalue.q.out
new file mode 100644
index 0000000..3582837
--- /dev/null
+++ b/ql/src/test/results/clientpositive/min_structvalue.q.out
@@ -0,0 +1,45 @@
+PREHOOK: query: select max(a), min(a) FROM (select named_struct("field",1) as a union all select named_struct("field",2) as a union all select named_struct("field",cast(null as int)) as a) tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+POSTHOOK: query: select max(a), min(a) FROM (select named_struct("field",1) as a union all select named_struct("field",2) as a union all select named_struct("field",cast(null as int)) as a) tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+{"field":2}	{"field":1}
+PREHOOK: query: select min(a) FROM (select named_struct("field",1) as a union all select named_struct("field",-2) as a union all select named_struct("field",cast(null as int)) as a) tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+POSTHOOK: query: select min(a) FROM (select named_struct("field",1) as a union all select named_struct("field",-2) as a union all select named_struct("field",cast(null as int)) as a) tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+{"field":-2}
+PREHOOK: query: select min(a) FROM (select named_struct("field",1) as a union all select named_struct("field",2) as a union all select named_struct("field",cast(5 as int)) as a) tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+POSTHOOK: query: select min(a) FROM (select named_struct("field",1) as a union all select named_struct("field",2) as a union all select named_struct("field",cast(5 as int)) as a) tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+{"field":1}
+PREHOOK: query: select min(a) FROM (select named_struct("field",1, "secf", cast(null as int) ) as a union all select named_struct("field",2, "secf", 3) as a union all select named_struct("field",cast(5 as int), "secf", 4) as a) tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+POSTHOOK: query: select min(a) FROM (select named_struct("field",1, "secf", cast(null as int) ) as a union all select named_struct("field",2, "secf", 3) as a union all select named_struct("field",cast(5 as int), "secf", 4) as a) tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+{"field":1,"secf":null}
+PREHOOK: query: select min(a) FROM (select named_struct("field",1, "secf", 2) as a union all select named_struct("field",-2, "secf", 3) as a union all select named_struct("field",cast(null as int), "secf", 1) as a) tmp
+PREHOOK: type: QUERY
+PREHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+POSTHOOK: query: select min(a) FROM (select named_struct("field",1, "secf", 2) as a union all select named_struct("field",-2, "secf", 3) as a union all select named_struct("field",cast(null as int), "secf", 1) as a) tmp
+POSTHOOK: type: QUERY
+POSTHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+{"field":-2,"secf":3}
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java
index c328d90..be12a59 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ObjectInspectorUtils.java
@@ -100,6 +100,17 @@
   }
 
   /**
+   * This enum controls how we interpret null value when compare two objects.
+   *
+   * MINVALUE means treating null value as the minimum value.
+   * MAXVALUE means treating null value as the maximum value.
+   *
+   */
+  public enum NullValueOption {
+	MINVALUE, MAXVALUE
+  }
+
+  /**
    * Calculates the hash code for array of Objects that contains writables. This is used
    * to work around the buggy Hadoop DoubleWritable hashCode implementation. This should
    * only be used for process-local hash codes; don't replace stored hash codes like bucketing.
@@ -682,17 +693,38 @@ public static int compare(Object o1, ObjectInspector oi1, Object o2,
 
   /**
    * Compare two objects with their respective ObjectInspectors.
+   * Treat null as minimum value.
    */
   public static int compare(Object o1, ObjectInspector oi1, Object o2,
       ObjectInspector oi2, MapEqualComparer mapEqualComparer) {
+    return compare(o1, oi1, o2, oi2, mapEqualComparer, NullValueOption.MINVALUE);
+  }
+
+  /**
+   * Compare two objects with their respective ObjectInspectors.
+   * if nullValueOpt is MAXVALUE, treat null as maximum value.
+   * if nullValueOpt is MINVALUE, treat null as minimum value.
+   */
+  public static int compare(Object o1, ObjectInspector oi1, Object o2,
+      ObjectInspector oi2, MapEqualComparer mapEqualComparer, NullValueOption nullValueOpt) {
     if (oi1.getCategory() != oi2.getCategory()) {
       return oi1.getCategory().compareTo(oi2.getCategory());
     }
 
+    int nullCmpRtn = -1;
+    switch (nullValueOpt) {
+    case MAXVALUE:
+      nullCmpRtn = 1;
+      break;
+    case MINVALUE:
+      nullCmpRtn = -1;
+      break;
+    }
+
     if (o1 == null) {
-      return o2 == null ? 0 : -1;
+      return o2 == null ? 0 : nullCmpRtn;
     } else if (o2 == null) {
-      return 1;
+      return -nullCmpRtn;
     }
 
     switch (oi1.getCategory()) {
@@ -821,7 +853,7 @@ public static int compare(Object o1, ObjectInspector oi1, Object o2,
         int r = compare(soi1.getStructFieldData(o1, fields1.get(i)), fields1
             .get(i).getFieldObjectInspector(), soi2.getStructFieldData(o2,
             fields2.get(i)), fields2.get(i).getFieldObjectInspector(),
-            mapEqualComparer);
+            mapEqualComparer, nullValueOpt);
         if (r != 0) {
           return r;
         }
@@ -836,7 +868,7 @@ public static int compare(Object o1, ObjectInspector oi1, Object o2,
         int r = compare(loi1.getListElement(o1, i), loi1
             .getListElementObjectInspector(), loi2.getListElement(o2, i), loi2
             .getListElementObjectInspector(),
-            mapEqualComparer);
+            mapEqualComparer, nullValueOpt);
         if (r != 0) {
           return r;
         }
@@ -861,7 +893,7 @@ public static int compare(Object o1, ObjectInspector oi1, Object o2,
       return compare(uoi1.getField(o1),
           uoi1.getObjectInspectors().get(tag1),
           uoi2.getField(o2), uoi2.getObjectInspectors().get(tag2),
-          mapEqualComparer);
+          mapEqualComparer, nullValueOpt);
     }
     default:
       throw new RuntimeException("Compare on unknown type: "
-- 
1.7.9.5

