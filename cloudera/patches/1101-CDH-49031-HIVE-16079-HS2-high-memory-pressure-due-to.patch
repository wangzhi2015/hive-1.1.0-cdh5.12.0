From f151ff1059bfa12d4626e9cc07d3651eeb1331ab Mon Sep 17 00:00:00 2001
From: Misha Dmitriev <misha@cloudera.com>
Date: Fri, 10 Feb 2017 19:40:33 -0800
Subject: [PATCH 1101/1164] CDH-49031: HIVE-16079: HS2: high memory pressure
 due to duplicate Properties objects

When multiple concurrent Hive queries run, a separate copy of
org.apache.hadoop.hive.ql.metadata.Partition and
ql.plan.PartitionDesc is created for each table partition
per each query instance. So when in my benchmark explained in
CDH-49031 we have 2000 partitions and 50 concurrent queries running
over them, we end up, in the worst case, with 2000*50=100,000 instances
of Partition and PartitionDesc in memory. These objects themselves
collectively take just ~2% of memory. However, other data structures
that each of them reference, take a lot more. In particular, Properties
objects take more than 20% of memory. When we have 50 concurrent
read-only queries, there are 50 identical copies of Properties per
each partition. That's a huge waste of memory.

This change introduces a new class that extends Properties, called
CopyOnFirstWriteProperties. It utilizes a unique interned copy of
Properties whenever possible. However, when one of the methods that
modify properties is called, a copy is created. When this class is
used, memory consumption by Properties falls from 20% to 5..6%.

Change-Id: Id36a1db4a36a24db15276e57d035312198bcc51b
---
 .../hive/common/CopyOnFirstWriteProperties.java    |  327 ++++++++++++++++++++
 .../org/apache/hadoop/hive/ql/exec/Utilities.java  |   33 +-
 .../apache/hadoop/hive/ql/plan/PartitionDesc.java  |   30 +-
 3 files changed, 370 insertions(+), 20 deletions(-)
 create mode 100644 common/src/java/org/apache/hadoop/hive/common/CopyOnFirstWriteProperties.java

diff --git a/common/src/java/org/apache/hadoop/hive/common/CopyOnFirstWriteProperties.java b/common/src/java/org/apache/hadoop/hive/common/CopyOnFirstWriteProperties.java
new file mode 100644
index 0000000..91802b8
--- /dev/null
+++ b/common/src/java/org/apache/hadoop/hive/common/CopyOnFirstWriteProperties.java
@@ -0,0 +1,327 @@
+package org.apache.hadoop.hive.common;
+
+import com.google.common.collect.Interner;
+import com.google.common.collect.Interners;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.PrintStream;
+import java.io.PrintWriter;
+import java.io.Reader;
+import java.lang.reflect.Field;
+import java.util.Collection;
+import java.util.Enumeration;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+
+/**
+ * A special subclass of Properties, designed to save memory when many identical
+ * copies of Properties would otherwise be created. To achieve that, we use the
+ * 'interned' field, which points to the same Properties object for all instances
+ * of CopyOnFirstWriteProperties that were created with identical contents.
+ * However, as soon as any mutating method is called, contents are copied from
+ * the 'interned' properties into this instance.
+ */
+public class CopyOnFirstWriteProperties extends Properties {
+
+  private Properties interned;
+
+  private static Interner<Properties> INTERNER = Interners.newWeakInterner();
+  private static Field defaultsField;
+  static {
+    try {
+      defaultsField = Properties.class.getDeclaredField("defaults");
+      defaultsField.setAccessible(true);
+    } catch (Exception e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  public CopyOnFirstWriteProperties(Properties p) {
+    setInterned(p);
+  }
+
+  /*************   Public API of java.util.Properties   ************/
+
+  @Override
+  public String getProperty(String key) {
+    if (interned != null) return interned.getProperty(key);
+    else return super.getProperty(key);
+  }
+
+  @Override
+  public String getProperty(String key, String defaultValue) {
+    if (interned != null) return interned.getProperty(key, defaultValue);
+    else return super.getProperty(key, defaultValue);
+  }
+
+  @Override
+  public void list(PrintStream out) {
+    if (interned != null) interned.list(out);
+    else super.list(out);
+  }
+
+  @Override
+  public void list(PrintWriter out) {
+    if (interned != null) interned.list(out);
+    else super.list(out);
+  }
+
+  @Override
+  public synchronized void load(InputStream inStream) throws IOException {
+    if (interned != null) copyFromInternedToThis();
+    super.load(inStream);
+  }
+
+  @Override
+  public synchronized void load(Reader reader) throws IOException {
+    if (interned != null) copyFromInternedToThis();
+    super.load(reader);
+  }
+
+  @Override
+  public synchronized void loadFromXML(InputStream inStream) throws IOException {
+    if (interned != null) copyFromInternedToThis();
+    super.loadFromXML(inStream);
+  }
+
+  @Override
+  public Enumeration<?> propertyNames() {
+    if (interned != null) return interned.propertyNames();
+    else return super.propertyNames();
+  }
+
+  @Override
+  public synchronized Object setProperty(String key, String value) {
+    if (interned != null) copyFromInternedToThis();
+    return super.setProperty(key, value);
+  }
+
+  @Override
+  public void store(OutputStream out, String comments) throws IOException {
+    if (interned != null) interned.store(out, comments);
+    else super.store(out, comments);
+  }
+
+  @Override
+  public void storeToXML(OutputStream os, String comment) throws IOException {
+    if (interned != null) interned.storeToXML(os, comment);
+    else super.storeToXML(os, comment);
+  }
+
+  @Override
+  public void storeToXML(OutputStream os, String comment, String encoding)
+      throws IOException {
+    if (interned != null) interned.storeToXML(os, comment, encoding);
+    else super.storeToXML(os, comment, encoding);
+  }
+
+  @Override
+  public Set<String> stringPropertyNames() {
+    if (interned != null) return interned.stringPropertyNames();
+    else return super.stringPropertyNames();
+  }
+
+  /*************   Public API of java.util.Hashtable   ************/
+
+  // Note that in JDK 8, some methods were added to the public API of Hashtable.
+  // Most of them cannot be compiled on JDK 7, since they need e.g. Function and
+  // BiFunction JDK classes that are only available from JDK 8. Thus these methods,
+  // that we should overridde to work correctly in CopyOnFirstWriteProperties, are
+  // currently commented out. They should be implemented properly once Hive moves
+  // to JDK8. However, it's highly unlikely that anyone would want to call these
+  // methods on our Properties objects.
+
+  @Override
+  public synchronized void clear() {
+    if (interned != null) copyFromInternedToThis();
+    super.clear();
+  }
+
+  @Override
+  public synchronized Object clone() {
+    if (interned != null) return new CopyOnFirstWriteProperties(interned);
+    else return super.clone();
+  }
+
+  /*
+  @Override
+  public synchronized Object compute(Object key, BiFunction remappingFunction)
+
+  @Override
+  public synchronized Object computeIfAbsent(Object key, Function mappingFunction)
+
+  @Override
+  public synchronized Object computeIfPresent(Object key, BiFunction remappingFunction)
+  */
+
+  @Override
+  public synchronized boolean contains(Object value) {
+    if (interned != null) return interned.contains(value);
+    else return super.contains(value);
+  }
+
+  @Override
+  public synchronized boolean containsKey(Object key) {
+    if (interned != null) return interned.containsKey(key);
+    else return super.containsKey(key);
+  }
+
+  @Override
+  public synchronized boolean containsValue(Object value) {
+    if (interned != null) return interned.containsValue(value);
+    else return super.containsValue(value);
+  }
+
+  @Override
+  public synchronized Enumeration<Object> elements() {
+    if (interned != null) return interned.elements();
+    else return super.elements();
+  }
+
+  @Override
+  public Set<Map.Entry<Object, Object>> entrySet() {
+    if (interned != null) return interned.entrySet();
+    else return super.entrySet();
+  }
+
+  @Override
+  public synchronized boolean equals(Object o) {
+    if (interned != null) return interned.equals(o);
+    else return super.equals(o);
+  }
+
+  /* Available starting from JDK 8
+  @Override
+  public synchronized void forEach(BiConsumer action)
+  */
+
+  @Override
+  public synchronized Object get(Object key) {
+    if (interned != null) return interned.get(key);
+    else return super.get(key);
+  }
+
+  /* Available starting from JDK 8
+  @Override
+  public synchronized Object getOrDefault(Object key, Object defaultValue)
+  */
+
+  @Override
+  public synchronized int hashCode() {
+    if (interned != null) return interned.hashCode();
+    else return super.hashCode();
+  }
+
+  @Override
+  public synchronized boolean isEmpty() {
+    if (interned != null) return interned.isEmpty();
+    else return super.isEmpty();
+  }
+
+  @Override
+  public synchronized Enumeration<Object> keys() {
+    if (interned != null) return interned.keys();
+    else return super.keys();
+  }
+
+  @Override
+  public Set<Object> keySet() {
+    if (interned != null) return interned.keySet();
+    else return super.keySet();
+  }
+
+  /* Available starting from JDK 8
+  @Override
+  public synchronized V merge(K key, V value, BiFunction remappingFunction)
+  */
+
+  @Override
+  public synchronized Object put(Object key, Object value) {
+    if (interned != null) copyFromInternedToThis();
+    return super.put(key, value);
+  }
+
+  @Override
+  public synchronized void putAll(Map<? extends Object, ? extends Object> t) {
+    if (interned != null) copyFromInternedToThis();
+    super.putAll(t);
+  }
+
+  /* Available starting from JDK 8
+  @Override
+  public synchronized Object putIfAbsent(Object key, Object value)
+  */
+
+  @Override
+  public synchronized Object remove(Object key) {
+    if (interned != null) copyFromInternedToThis();
+    return super.remove(key);
+  }
+
+  /* Available starting from JDK 8
+  @Override
+  public synchronized boolean remove(Object key, Object value)
+
+  @Override
+  public synchronized Object replace(Object key, Object value)
+
+  @Override
+  public synchronized boolean replace(Object key, Object oldValue, Object newValue)
+
+  @Override
+  public synchronized void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)
+  */
+
+  @Override
+  public synchronized int size() {
+    if (interned != null) return interned.size();
+    else return super.size();
+  }
+
+  @Override
+  public synchronized String toString() {
+    if (interned != null) return interned.toString();
+    else return super.toString();
+  }
+
+  @Override
+  public Collection<Object> values() {
+    if (interned != null) return interned.values();
+    else return super.values();
+  }
+
+  /*************   Private implementation ************/
+
+  private void copyFromInternedToThis() {
+    for (Map.Entry<?,?> e : interned.entrySet()) {
+      super.put(e.getKey(), e.getValue());
+    }
+    try {
+      // Unfortunately, we cannot directly read a protected field of non-this object
+      this.defaults = (Properties) defaultsField.get(interned);
+    } catch (IllegalAccessException e) {   // Shouldn't happen
+      throw new RuntimeException(e);
+    }
+    setInterned(null);
+  }
+
+  public void setInterned(Properties p) {
+    if (p != null) {
+      this.interned = INTERNER.intern(p);
+    } else {
+      this.interned = p;
+    }
+  }
+
+  // These methods are required by serialization
+
+  public CopyOnFirstWriteProperties() {
+  }
+
+  public Properties getInterned() {
+    return interned;
+  }
+}
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java
index c64e33c..c228270 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java
@@ -99,6 +99,7 @@
 import org.apache.hadoop.fs.PathFilter;
 import org.apache.hadoop.fs.permission.FsPermission;
 import org.apache.hadoop.hive.common.BlobStorageUtils;
+import org.apache.hadoop.hive.common.CopyOnFirstWriteProperties;
 import org.apache.hadoop.hive.common.FileUtils;
 import org.apache.hadoop.hive.common.HiveInterruptCallback;
 import org.apache.hadoop.hive.common.HiveInterruptUtils;
@@ -907,7 +908,7 @@ public CommonToken read(Kryo kryo, Input input, Class<CommonToken> clazz) {
     }
 
     @Override
-  public void write(Kryo kryo, Output output, CommonToken token) {
+    public void write(Kryo kryo, Output output, CommonToken token) {
       output.writeInt(token.getType());
       output.writeString(token.getText());
     }
@@ -926,6 +927,33 @@ public Path read(Kryo kryo, Input input, Class<Path> type) {
     }
   }
 
+  /**
+   * CopyOnFirstWriteProperties needs a special serializer, since it extends Properties,
+   * which implements Map, so MapSerializer would be used for it by default. Yet it has
+   * the additional 'interned' field that the standard MapSerializer doesn't handle
+   * properly. But FieldSerializer doesn't work for it as well, because the Hashtable
+   * superclass declares most of its fields transient.
+   */
+  private static class CopyOnFirstWritePropertiesSerializer extends
+      com.esotericsoftware.kryo.serializers.MapSerializer {
+
+    @Override
+    public void write(Kryo kryo, Output output, Map map) {
+      super.write(kryo, output, map);
+      CopyOnFirstWriteProperties p = (CopyOnFirstWriteProperties) map;
+      Properties ip = p.getInterned();
+      kryo.writeObjectOrNull(output, ip, Properties.class);
+    }
+
+    @Override
+    public Map read(Kryo kryo, Input input, Class<Map> type) {
+      Map map = super.read(kryo, input, type);
+      Properties ip = kryo.readObjectOrNull(input, Properties.class);
+      ((CopyOnFirstWriteProperties) map).setInterned(ip);
+      return map;
+    }
+  }
+
   public static List<Operator<?>> cloneOperatorTree(Configuration conf, List<Operator<?>> roots) {
     ByteArrayOutputStream baos = new ByteArrayOutputStream(4096);
     serializePlan(roots, baos, conf, true);
@@ -1101,6 +1129,7 @@ protected synchronized Kryo initialValue() {
       kryo.setInstantiatorStrategy(new StdInstantiatorStrategy());
       removeField(kryo, Operator.class, "colExprMap");
       removeField(kryo, ColumnInfo.class, "objectInspector");
+      kryo.register(CopyOnFirstWriteProperties.class, new CopyOnFirstWritePropertiesSerializer());
       return kryo;
     };
   };
@@ -1128,6 +1157,7 @@ protected synchronized Kryo initialValue() {
       kryo.register(SparkWork.class);
       kryo.register(TableDesc.class);
       kryo.register(Pair.class);
+      kryo.register(CopyOnFirstWriteProperties.class, new CopyOnFirstWritePropertiesSerializer());
       return kryo;
     };
   };
@@ -1141,6 +1171,7 @@ protected synchronized Kryo initialValue() {
       kryo.register(java.sql.Date.class, new SqlDateSerializer());
       kryo.register(java.sql.Timestamp.class, new TimestampSerializer());
       kryo.register(Path.class, new PathSerializer());
+      kryo.register(CopyOnFirstWriteProperties.class, new CopyOnFirstWritePropertiesSerializer());
       kryo.setInstantiatorStrategy(new StdInstantiatorStrategy());
       return kryo;
     };
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/plan/PartitionDesc.java b/ql/src/java/org/apache/hadoop/hive/ql/plan/PartitionDesc.java
index ccfef72..1d1d6d0 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/plan/PartitionDesc.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/plan/PartitionDesc.java
@@ -30,6 +30,7 @@
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hive.common.StringInternUtils;
+import org.apache.hadoop.hive.common.CopyOnFirstWriteProperties;
 import org.apache.hadoop.hive.metastore.api.hive_metastoreConstants;
 import org.apache.hadoop.hive.ql.exec.Utilities;
 import org.apache.hadoop.hive.ql.io.HiveFileFormatUtils;
@@ -52,13 +53,7 @@
 @Explain(displayName = "Partition")
 public class PartitionDesc implements Serializable, Cloneable {
 
-  static {
-    STRING_INTERNER = Interners.newWeakInterner();
-    CLASS_INTERNER = Interners.newWeakInterner();
-  }
-
-  private static final Interner<String> STRING_INTERNER;
-  private static final Interner<Class<?>> CLASS_INTERNER;
+  private static final Interner<Class<?>> CLASS_INTERNER = Interners.newWeakInterner();
 
   private TableDesc tableDesc;
   private LinkedHashMap<String, String> partSpec;
@@ -185,8 +180,12 @@ public Map getPropertiesExplain() {
   }
 
   public void setProperties(final Properties properties) {
-    internProperties(properties);
-    this.properties = properties;
+    if (properties instanceof CopyOnFirstWriteProperties) {
+      this.properties = properties;
+    } else {
+      internProperties(properties);
+      this.properties = new CopyOnFirstWriteProperties(properties);
+    }
   }
 
   private static TableDesc getTableDesc(Table table) {
@@ -196,12 +195,11 @@ private static TableDesc getTableDesc(Table table) {
   }
 
   private static void internProperties(Properties properties) {
-    for (Enumeration<?> keys =  properties.propertyNames(); keys.hasMoreElements();) {
+    for (Enumeration<?> keys = properties.propertyNames(); keys.hasMoreElements();) {
       String key = (String) keys.nextElement();
       String oldValue = properties.getProperty(key);
       if (oldValue != null) {
-        String value = STRING_INTERNER.intern(oldValue);
-        properties.setProperty(key, value);
+        properties.setProperty(key, oldValue.intern());
       }
     }
   }
@@ -245,13 +243,7 @@ public PartitionDesc clone() {
     ret.inputFileFormatClass = inputFileFormatClass;
     ret.outputFileFormatClass = outputFileFormatClass;
     if (properties != null) {
-      Properties newProp = new Properties();
-      Enumeration<Object> keysProp = properties.keys();
-      while (keysProp.hasMoreElements()) {
-        Object key = keysProp.nextElement();
-        newProp.put(key, properties.get(key));
-      }
-      ret.setProperties(newProp);
+      ret.setProperties((Properties) properties.clone());
     }
     ret.tableDesc = (TableDesc) tableDesc.clone();
     // The partition spec is not present
-- 
1.7.9.5

