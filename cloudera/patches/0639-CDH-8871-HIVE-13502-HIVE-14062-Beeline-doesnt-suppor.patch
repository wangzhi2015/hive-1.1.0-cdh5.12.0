From bd1fab695bb7360e00f48a975f41afeb2bf62992 Mon Sep 17 00:00:00 2001
From: Aihua Xu <aihuaxu@apache.org>
Date: Mon, 23 May 2016 10:25:13 -0400
Subject: [PATCH 0639/1164] CDH-8871: HIVE-13502, HIVE-14062 : Beeline doesnt
 support session parameters in JDBC URL as
 documentation states. (Naveen Gangam, reviewed by
 Aihua Xu)

(cherry picked from commit b84154be3ca8120062ebc14851e5860521716da1)

Conflicts:
    beeline/src/java/org/apache/hive/beeline/BeeLine.java
    beeline/src/java/org/apache/hive/beeline/Commands.java
    itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java
    jdbc/src/java/org/apache/hive/jdbc/Utils.java

Change-Id: I1b707a5d40c148da03892cc66da35ca45c1d470c
---
 .../src/java/org/apache/hive/beeline/BeeLine.java  |   14 +++-
 .../src/java/org/apache/hive/beeline/Commands.java |   72 +++++++++++++-------
 .../apache/hive/beeline/TestBeeLineWithArgs.java   |   33 ++++++++-
 jdbc/src/java/org/apache/hive/jdbc/Utils.java      |   54 +++++++++------
 4 files changed, 126 insertions(+), 47 deletions(-)

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index f6b2e61..e90f8e7 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -91,6 +91,9 @@
 import org.apache.hive.beeline.cli.CliOptionsProcessor;
 import org.apache.thrift.transport.TTransportException;
 
+import org.apache.hive.jdbc.Utils;
+import org.apache.hive.jdbc.Utils.JdbcConnectionParams;
+
 /**
  * A console SQL shell with command completion.
  * <p>
@@ -137,6 +140,7 @@
 
   public static final String BEELINE_DEFAULT_JDBC_DRIVER = "org.apache.hive.jdbc.HiveDriver";
   public static final String BEELINE_DEFAULT_JDBC_URL = "jdbc:hive2://";
+  public static final String DEFAULT_DATABASE_NAME = "default";
 
   private static final String SCRIPT_OUTPUT_PREFIX = ">>>";
   private static final int SCRIPT_OUTPUT_PAD_SIZE = 5;
@@ -769,6 +773,14 @@ int initArgs(String[] args) {
     */
 
     if (url != null) {
+      if (user == null) {
+        user = Utils.parsePropertyFromUrl(url, JdbcConnectionParams.AUTH_USER);
+      }
+
+      if (pass == null) {
+        pass = Utils.parsePropertyFromUrl(url, JdbcConnectionParams.AUTH_PASSWD);
+      }
+
       String com = constructCmd(url, user, pass, driver, false);
       String comForDebug = constructCmd(url, user, pass, driver, true);
       debug("issuing: " + comForDebug);
@@ -889,7 +901,7 @@ int runInit() {
   }
 
   private int embeddedConnect() {
-    if (!dispatch("!connect " + BEELINE_DEFAULT_JDBC_URL + " '' ''")) {
+    if (!dispatch("!connect " + Utils.URL_PREFIX + " '' ''")) {
       return ERRNO_OTHER;
     } else {
       return ERRNO_OK;
diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index 82fe12e..08fdcdc 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -60,6 +60,8 @@
 
 import org.apache.hadoop.hive.common.cli.ShellCmdExecutor;
 import org.apache.hive.jdbc.HiveStatement;
+import org.apache.hive.jdbc.Utils;
+import org.apache.hive.jdbc.Utils.JdbcConnectionParams;
 
 
 public class Commands {
@@ -1282,18 +1284,41 @@ public boolean connect(String line) throws Exception {
 
     Properties props = new Properties();
     if (url != null) {
-      props.setProperty("url", url);
+      props.setProperty(JdbcConnectionParams.PROPERTY_URL, url);
     }
+
+    String value = null;
     if (driver != null) {
-      props.setProperty("driver", driver);
+      props.setProperty(JdbcConnectionParams.PROPERTY_DRIVER, driver);
+    } else {
+      value = Utils.parsePropertyFromUrl(url, JdbcConnectionParams.PROPERTY_DRIVER);
+      if (value != null) {
+        props.setProperty(JdbcConnectionParams.PROPERTY_DRIVER, value);
+      }
     }
+
     if (user != null) {
-      props.setProperty("user", user);
+      props.setProperty(JdbcConnectionParams.AUTH_USER, user);
+    } else {
+      value = Utils.parsePropertyFromUrl(url, JdbcConnectionParams.AUTH_USER);
+      if (value != null) {
+        props.setProperty(JdbcConnectionParams.AUTH_USER, value);
+      }
     }
+
     if (pass != null) {
-      props.setProperty("password", pass);
+      props.setProperty(JdbcConnectionParams.AUTH_PASSWD, pass);
+    } else {
+      value = Utils.parsePropertyFromUrl(url, JdbcConnectionParams.AUTH_PASSWD);
+      if (value != null) {
+        props.setProperty(JdbcConnectionParams.AUTH_PASSWD, value);
+      }
     }
 
+    value = Utils.parsePropertyFromUrl(url, JdbcConnectionParams.AUTH_TYPE);
+    if (value != null) {
+      props.setProperty(JdbcConnectionParams.AUTH_TYPE, value);
+    }
     return connect(props);
   }
 
@@ -1321,26 +1346,25 @@ private String getProperty(Properties props, String[] keys) {
 
   public boolean connect(Properties props) throws IOException {
     String url = getProperty(props, new String[] {
-        "url",
+        JdbcConnectionParams.PROPERTY_URL,
         "javax.jdo.option.ConnectionURL",
         "ConnectionURL",
     });
     String driver = getProperty(props, new String[] {
-        "driver",
+        JdbcConnectionParams.PROPERTY_DRIVER,
         "javax.jdo.option.ConnectionDriverName",
         "ConnectionDriverName",
     });
     String username = getProperty(props, new String[] {
-        "user",
+        JdbcConnectionParams.AUTH_USER,
         "javax.jdo.option.ConnectionUserName",
         "ConnectionUserName",
     });
     String password = getProperty(props, new String[] {
-        "password",
+        JdbcConnectionParams.AUTH_PASSWD,
         "javax.jdo.option.ConnectionPassword",
         "ConnectionPassword",
     });
-    String auth = getProperty(props, new String[] {"auth"});
 
     if (url == null || url.length() == 0) {
       return beeLine.error("Property \"url\" is required");
@@ -1351,23 +1375,25 @@ public boolean connect(Properties props) throws IOException {
       }
     }
 
-    beeLine.info("Connecting to " + url);
-
-    if (username == null) {
-      username = beeLine.getConsoleReader().readLine("Enter username for " + url + ": ");
-    }
-    props.setProperty("user", username);
-    if (password == null) {
-      password = beeLine.getConsoleReader().readLine("Enter password for " + url + ": ",
-          new Character('*'));
-    }
-    props.setProperty("password", password);
-
+    String auth = getProperty(props, new String[] {JdbcConnectionParams.AUTH_TYPE});
     if (auth == null) {
       auth = beeLine.getOpts().getAuthType();
+      if (auth != null) {
+        props.setProperty(JdbcConnectionParams.AUTH_TYPE, auth);
+      }
     }
-    if (auth != null) {
-      props.setProperty("auth", auth);
+
+    beeLine.info("Connecting to " + url);
+    if (Utils.parsePropertyFromUrl(url, JdbcConnectionParams.AUTH_PRINCIPAL) == null) {
+      if (username == null) {
+        username = beeLine.getConsoleReader().readLine("Enter username for " + url + ": ");
+      }
+      props.setProperty(JdbcConnectionParams.AUTH_USER, username);
+      if (password == null) {
+        password = beeLine.getConsoleReader().readLine("Enter password for " + url + ": ",
+          new Character('*'));
+      }
+      props.setProperty(JdbcConnectionParams.AUTH_PASSWD, password);
     }
 
     try {
diff --git a/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java b/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java
index 03861d9..126dbbb 100644
--- a/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java
+++ b/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java
@@ -39,6 +39,7 @@
 
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hive.jdbc.Utils;
 import org.apache.hive.jdbc.miniHS2.MiniHS2;
 import org.junit.AfterClass;
 import org.junit.Assert;
@@ -158,6 +159,7 @@ private void testScriptFile(String scriptText, String expectedPattern,
 
     // Put the script content in a temp file
     File scriptFile = File.createTempFile(this.getClass().getSimpleName(), "temp");
+    System.out.println("script file is " + scriptFile.getAbsolutePath());
     scriptFile.deleteOnExit();
     PrintStream os = new PrintStream(new FileOutputStream(scriptFile));
     os.print(scriptText);
@@ -635,7 +637,7 @@ public void testHiveVarSubstitution() throws Throwable {
 
   @Test
   public void testEmbeddedBeelineConnection() throws Throwable{
-    String embeddedJdbcURL = BeeLine.BEELINE_DEFAULT_JDBC_URL+"/Default";
+    String embeddedJdbcURL = Utils.URL_PREFIX+"/Default";
     List<String> argList = getBaseArgs(embeddedJdbcURL);
 	  argList.add("--hivevar");
     argList.add("DUMMY_TBL=embedded_table");
@@ -750,7 +752,7 @@ public void testEscapeSemiColonInEnclosedQuery() throws Throwable {
 
   @Test
   public void testEmbeddedBeelineOutputs() throws Throwable{
-    String embeddedJdbcURL = BeeLine.BEELINE_DEFAULT_JDBC_URL+"/Default";
+    String embeddedJdbcURL = Utils.URL_PREFIX+"/Default";
     List<String> argList = getBaseArgs(embeddedJdbcURL);
     // Set to non-zk lock manager to avoid trying to connect to zookeeper
     final String SCRIPT_TEXT =
@@ -760,4 +762,31 @@ public void testEmbeddedBeelineOutputs() throws Throwable{
     final String EXPECTED_PATTERN = "Stage-1 map =";
     testScriptFile(SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
   }
+
+  @Test
+  public void testConnectionUrlWithSemiColon() throws Throwable{
+    List<String> argList = getBaseArgs(miniHS2.getJdbcURL("default", "sess_var_list?var1=value1"));
+    final String SCRIPT_TEXT = "set var1";
+    final String EXPECTED_PATTERN = "var1=value1";
+    testScriptFile(SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
+  }
+
+  /**
+   * Attempt to execute a simple script file with the usage of user & password variables in URL.
+   * Test for presence of an expected pattern
+   * in the output (stdout or stderr), fail if not found
+   * Print PASSED or FAILED
+   */
+  @Test
+  public void testConnectionWithURLParams() throws Throwable {
+    final String EXPECTED_PATTERN = " hivetest ";
+    List<String> argList = new ArrayList<String>();
+    argList.add("-d");
+    argList.add(BeeLine.BEELINE_DEFAULT_JDBC_DRIVER);
+    argList.add("-u");
+    argList.add(miniHS2.getBaseJdbcURL() + ";user=hivetest;password=hive");
+    String SCRIPT_TEXT = "select current_user();";
+
+    testScriptFile( SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
+  }
 }
diff --git a/jdbc/src/java/org/apache/hive/jdbc/Utils.java b/jdbc/src/java/org/apache/hive/jdbc/Utils.java
index 054161d..7c53c31 100644
--- a/jdbc/src/java/org/apache/hive/jdbc/Utils.java
+++ b/jdbc/src/java/org/apache/hive/jdbc/Utils.java
@@ -34,12 +34,12 @@
 import org.apache.hive.service.cli.thrift.TStatus;
 import org.apache.hive.service.cli.thrift.TStatusCode;
 
-class Utils {
+public class Utils {
   static final Log LOG = LogFactory.getLog(Utils.class.getName());
   /**
     * The required prefix for the connection URL.
     */
-  static final String URL_PREFIX = "jdbc:hive2://";
+  public static final String URL_PREFIX = "jdbc:hive2://";
 
   /**
     * If host is provided, without a port.
@@ -60,7 +60,7 @@
   static final String HIVE_SERVER2_RETRY_TRUE = "true";
   static final String HIVE_SERVER2_RETRY_FALSE = "false";
 
-  static class JdbcConnectionParams {
+  public static class JdbcConnectionParams {
     // Note on client side parameter naming convention:
     // Prefer using a shorter camelCase param name instead of using the same name as the
     // corresponding
@@ -73,31 +73,33 @@
     // Retry setting
     static final String RETRIES = "retries";
 
-    static final String AUTH_TYPE = "auth";
+    public static final String AUTH_TYPE = "auth";
     // We're deprecating this variable's name.
-    static final String AUTH_QOP_DEPRECATED = "sasl.qop";
-    static final String AUTH_QOP = "saslQop";
-    static final String AUTH_SIMPLE = "noSasl";
-    static final String AUTH_TOKEN = "delegationToken";
-    static final String AUTH_USER = "user";
-    static final String AUTH_PRINCIPAL = "principal";
-    static final String AUTH_PASSWD = "password";
-    static final String AUTH_KERBEROS_AUTH_TYPE = "kerberosAuthType";
-    static final String AUTH_KERBEROS_AUTH_TYPE_FROM_SUBJECT = "fromSubject";
-    static final String ANONYMOUS_USER = "anonymous";
-    static final String ANONYMOUS_PASSWD = "anonymous";
-    static final String USE_SSL = "ssl";
-    static final String SSL_TRUST_STORE = "sslTrustStore";
-    static final String SSL_TRUST_STORE_PASSWORD = "trustStorePassword";
+    public static final String AUTH_QOP_DEPRECATED = "sasl.qop";
+    public static final String AUTH_QOP = "saslQop";
+    public static final String AUTH_SIMPLE = "noSasl";
+    public static final String AUTH_TOKEN = "delegationToken";
+    public static final String AUTH_USER = "user";
+    public static final String AUTH_PRINCIPAL = "principal";
+    public static final String AUTH_PASSWD = "password";
+    public static final String AUTH_KERBEROS_AUTH_TYPE = "kerberosAuthType";
+    public static final String AUTH_KERBEROS_AUTH_TYPE_FROM_SUBJECT = "fromSubject";
+    public static final String ANONYMOUS_USER = "anonymous";
+    public static final String ANONYMOUS_PASSWD = "anonymous";
+    public static final String USE_SSL = "ssl";
+    public static final String SSL_TRUST_STORE = "sslTrustStore";
+    public static final String SSL_TRUST_STORE_PASSWORD = "trustStorePassword";
     // We're deprecating the name and placement of this in the parsed map (from hive conf vars to
     // hive session vars).
     static final String TRANSPORT_MODE_DEPRECATED = "hive.server2.transport.mode";
-    static final String TRANSPORT_MODE = "transportMode";
+    public static final String TRANSPORT_MODE = "transportMode";
     // We're deprecating the name and placement of this in the parsed map (from hive conf vars to
     // hive session vars).
     static final String HTTP_PATH_DEPRECATED = "hive.server2.thrift.http.path";
-    static final String HTTP_PATH = "httpPath";
-    static final String SERVICE_DISCOVERY_MODE = "serviceDiscoveryMode";
+    public static final String HTTP_PATH = "httpPath";
+    public static final String SERVICE_DISCOVERY_MODE = "serviceDiscoveryMode";
+    public static final String PROPERTY_DRIVER        = "driver";
+    public static final String PROPERTY_URL           = "url";
     // Don't use dynamic service discovery
     static final String SERVICE_DISCOVERY_MODE_NONE = "none";
     // Use ZooKeeper for indirection while using dynamic service discovery
@@ -538,4 +540,14 @@ static int getVersionPart(String fullVersion, int position) {
     }
     return version;
   }
+
+  public static String parsePropertyFromUrl(final String url, final String key) {
+    String[] tokens = url.split(";");
+    for (String token : tokens) {
+      if (token.trim().startsWith(key.trim() + "=")) {
+        return token.trim().substring((key.trim() + "=").length());
+      }
+    }
+    return null;
+  }
 }
-- 
1.7.9.5

