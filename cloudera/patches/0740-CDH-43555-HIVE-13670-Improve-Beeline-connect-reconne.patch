From 95ad2292f3a1c4fd6ce0edb69309a58f3ff4e552 Mon Sep 17 00:00:00 2001
From: Sushanth Sowmyan <khorgath@gmail.com>
Date: Thu, 12 May 2016 01:09:36 -0700
Subject: [PATCH 0740/1164] CDH-43555 : HIVE-13670 : Improve Beeline
 connect/reconnect semantics (Sushanth Sowmyan,
 reviewed by Thejas Nair)

Change-Id: Ib197d0d9ca0846bc0321c18388c1fa4833a9e13b
---
 .../src/java/org/apache/hive/beeline/BeeLine.java  |   10 +++
 .../java/org/apache/hive/beeline/BeeLineOpts.java  |   92 +++++++++++++++++---
 .../src/java/org/apache/hive/beeline/Commands.java |   45 +++++++++-
 beeline/src/main/resources/BeeLine.properties      |    1 +
 .../apache/hive/beeline/TestBeeLineWithArgs.java   |   84 ++++++++++++++++--
 5 files changed, 212 insertions(+), 20 deletions(-)

diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLine.java b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
index a710cf2..b68a786 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLine.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLine.java
@@ -301,6 +301,12 @@
         .withDescription("the JDBC URL to connect to")
         .create('u'));
 
+    // -r
+    options.addOption(OptionBuilder
+        .withLongOpt("reconnect")
+        .withDescription("Reconnect to last saved connect url (in conjunction with !save)")
+        .create('r'));
+
     // -n <username>
     options.addOption(OptionBuilder
         .hasArg()
@@ -764,6 +770,10 @@ int initArgs(String[] args) {
       pass = cl.getOptionValue("p");
     }
     url = cl.getOptionValue("u");
+    if ((url == null) && cl.hasOption("reconnect")){
+      // If url was not specified with -u, but -r was present, use that.
+      url = getOpts().getLastConnectedUrl();
+    }
     getOpts().setInitFiles(cl.getOptionValues("i"));
     getOpts().setScriptFile(cl.getOptionValue("f"));
     if (cl.getOptionValues('e') != null) {
diff --git a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
index 35acf91..3c86e41 100644
--- a/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
+++ b/beeline/src/java/org/apache/hive/beeline/BeeLineOpts.java
@@ -28,6 +28,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Arrays;
@@ -36,6 +38,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
+import java.util.Set;
 import java.util.TreeSet;
 
 import jline.Terminal;
@@ -57,6 +60,8 @@
   public static final char DEFAULT_DELIMITER_FOR_DSV = '|';
   public static final int DEFAULT_MAX_COLUMN_WIDTH = 50;
 
+  public static String URL_ENV_PREFIX = "BEELINE_URL_";
+
   private final BeeLine beeLine;
   private boolean autosave = false;
   private boolean silent = false;
@@ -102,6 +107,36 @@
   private Map<String, String> hiveConfVariables = new HashMap<String, String>();
   private boolean helpAsked;
 
+  private String lastConnectedUrl = null;
+
+  private TreeSet<String> cachedPropertyNameSet = null;
+
+  @Retention(RetentionPolicy.RUNTIME)
+  public @interface Ignore {
+    // marker annotations for functions that Reflector should ignore / pretend it does not exist
+
+    // NOTE: BeeLineOpts uses Reflector in an extensive way to call getters and setters on itself
+    // If you want to add any getters or setters to this class, but not have it interfere with
+    // saved variables in beeline.properties, careful use of this marker is needed.
+    // Also possible to get this by naming these functions obtainBlah instead of getBlah
+    // and so on, but that is not explicit and will likely surprise people looking at the
+    // code in the future. Better to be explicit in intent.
+  }
+
+  public interface Env {
+    // Env interface to mock out dealing with Environment variables
+    // This allows us to interface with Environment vars through
+    // BeeLineOpts while allowing tests to mock out Env setting if needed.
+    String get(String envVar);
+  }
+
+  public static Env env = new Env() {
+    @Override
+    public String get(String envVar) {
+      return System.getenv(envVar); // base env impl simply defers to System.getenv.
+    }
+  };
+
   public BeeLineOpts(BeeLine beeLine, Properties props) {
     this.beeLine = beeLine;
     if (terminal.getWidth() > 0) {
@@ -177,24 +212,35 @@ public void save(OutputStream out) throws IOException {
 
   String[] propertyNames()
       throws IllegalAccessException, InvocationTargetException {
-    TreeSet<String> names = new TreeSet<String>();
+    Set<String> names = propertyNamesSet(); // make sure we initialize if necessary
+    return names.toArray(new String[names.size()]);
+  }
 
-    // get all the values from getXXX methods
-    Method[] m = getClass().getDeclaredMethods();
-    for (int i = 0; m != null && i < m.length; i++) {
-      if (!(m[i].getName().startsWith("get"))) {
-        continue;
+  Set<String> propertyNamesSet()
+    throws IllegalAccessException, InvocationTargetException {
+    if (cachedPropertyNameSet == null){
+      TreeSet<String> names = new TreeSet<String>();
+
+      // get all the values from getXXX methods
+      Method[] m = getClass().getDeclaredMethods();
+      for (int i = 0; m != null && i < m.length; i++) {
+        if (!(m[i].getName().startsWith("get"))) {
+          continue;
+        }
+        if (m[i].getAnnotation(Ignore.class) != null){
+          continue; // not actually a getter
+        }
+        if (m[i].getParameterTypes().length != 0) {
+          continue;
+        }
+        String propName = m[i].getName().substring(3).toLowerCase();
+        names.add(propName);
       }
-      if (m[i].getParameterTypes().length != 0) {
-        continue;
-      }
-      String propName = m[i].getName().substring(3).toLowerCase();
-      names.add(propName);
+      cachedPropertyNameSet = names;
     }
-    return names.toArray(new String[names.size()]);
+    return cachedPropertyNameSet;
   }
 
-
   public Properties toProperties()
       throws IllegalAccessException, InvocationTargetException,
       ClassNotFoundException {
@@ -488,6 +534,7 @@ public int getMaxHeight() {
     return maxHeight;
   }
 
+  @Ignore
   public File getPropertiesFile() {
     return rcFile;
   }
@@ -520,6 +567,7 @@ public void setNullEmptyString(boolean nullStringEmpty) {
     this.nullEmptyString = nullStringEmpty;
   }
 
+  @Ignore
   public String getNullString(){
     return nullEmptyString ? "" : DEFAULT_NULL_STRING;
   }
@@ -559,5 +607,23 @@ public boolean isHelpAsked() {
   public HiveConf getConf() {
     return conf;
   }
+
+  public String getLastConnectedUrl(){
+    return lastConnectedUrl;
+  }
+
+  public void setLastConnectedUrl(String lastConnectedUrl){
+    this.lastConnectedUrl = lastConnectedUrl;
+  }
+
+  @Ignore
+  public static Env getEnv(){
+    return env;
+  }
+
+  @Ignore
+  public static void setEnv(Env envToUse){
+    env = envToUse;
+  }
 }
 
diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java
index aa36c07..cf7e7c7 100644
--- a/beeline/src/java/org/apache/hive/beeline/Commands.java
+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java
@@ -37,6 +37,8 @@
 import java.io.InputStreamReader;
 import java.lang.reflect.Method;
 import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.sql.CallableStatement;
@@ -311,7 +313,19 @@ public boolean dropall(String line) {
 
   public boolean reconnect(String line) {
     if (beeLine.getDatabaseConnection() == null || beeLine.getDatabaseConnection().getUrl() == null) {
-      return beeLine.error(beeLine.loc("no-current-connection"));
+      // First, let's try connecting using the last successful url - if that fails, then we error out.
+      String lastConnectedUrl = beeLine.getOpts().getLastConnectedUrl();
+      if (lastConnectedUrl != null){
+        Properties props = new Properties();
+        props.setProperty("url",lastConnectedUrl);
+        try {
+          return connect(props);
+        } catch (IOException e) {
+          return beeLine.error(e);
+        }
+      } else {
+        return beeLine.error(beeLine.loc("no-current-connection"));
+      }
     }
     beeLine.info(beeLine.loc("reconnecting", beeLine.getDatabaseConnection().getUrl()));
     try {
@@ -1299,7 +1313,8 @@ public boolean connect(String line) throws Exception {
 
     Properties props = new Properties();
     if (url != null) {
-      props.setProperty(JdbcConnectionParams.PROPERTY_URL, url);
+      String saveUrl = getUrlToUse(url);
+      props.setProperty(JdbcConnectionParams.PROPERTY_URL, saveUrl);
     }
 
     String value = null;
@@ -1337,6 +1352,31 @@ public boolean connect(String line) throws Exception {
     return connect(props);
   }
 
+  private String getUrlToUse(String urlParam) {
+    boolean useIndirectUrl = false;
+    // If the url passed to us is a valid url with a protocol, we use it as-is
+    // Otherwise, we assume it is a name of parameter that we have to get the url from
+    try {
+      URI tryParse = new URI(urlParam);
+      if (tryParse.getScheme() == null){
+        // param had no scheme, so not a URL
+        useIndirectUrl = true;
+      }
+    } catch (URISyntaxException e){
+      // param did not parse as a URL, so not a URL
+      useIndirectUrl = true;
+    }
+    if (useIndirectUrl){
+      // Use url param indirectly - as the name of an env var that contains the url
+      // If the urlParam is "default", we would look for a BEELINE_URL_DEFAULT url
+      String envUrl = beeLine.getOpts().getEnv().get(
+          BeeLineOpts.URL_ENV_PREFIX + urlParam.toUpperCase());
+      if (envUrl != null){
+        return envUrl;
+      }
+    }
+    return urlParam; // default return the urlParam passed in as-is.
+  }
 
   private String getProperty(Properties props, String[] keys) {
     for (int i = 0; i < keys.length; i++) {
@@ -1422,6 +1462,7 @@ public boolean connect(Properties props) throws IOException {
       beeLine.runInit();
 
       beeLine.setCompletions();
+      beeLine.getOpts().setLastConnectedUrl(url);
       return true;
     } catch (SQLException sqle) {
       beeLine.getDatabaseConnections().remove();
diff --git a/beeline/src/main/resources/BeeLine.properties b/beeline/src/main/resources/BeeLine.properties
index 7e57c39..e649209 100644
--- a/beeline/src/main/resources/BeeLine.properties
+++ b/beeline/src/main/resources/BeeLine.properties
@@ -146,6 +146,7 @@ hs2-unavailable: HS2 may be unavailable, check server status
 
 cmd-usage: Usage: java org.apache.hive.cli.beeline.BeeLine \n \
 \  -u <database url>               the JDBC URL to connect to\n \
+\  -r                              reconnect to last saved connect url (in conjunction with !save)\n \
 \  -n <username>                   the username to connect as\n \
 \  -p <password>                   the password to connect as\n \
 \  -d <driver class>               the driver class to use\n \
diff --git a/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java b/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java
index 126dbbb..acc159d 100644
--- a/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java
+++ b/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestBeeLineWithArgs.java
@@ -146,9 +146,9 @@ private String testCommandLineScript(List<String> argList, InputStream inputStre
   }
 
   /**
-   * Attempt to execute a simple script file with the -f option to BeeLine
-   * Test for presence of an expected pattern
-   * in the output (stdout or stderr), fail if not found
+   * Attempt to execute a simple script file with the -f and -i option
+   * to BeeLine to test for presence of an expected pattern
+   * in the output (stdout or stderr), fail if not found.
    * Print PASSED or FAILED
    * @param expectedPattern Text to look for in command output/error
    * @param shouldMatch true if the pattern should be found, false if it should not
@@ -156,6 +156,23 @@ private String testCommandLineScript(List<String> argList, InputStream inputStre
    */
   private void testScriptFile(String scriptText, String expectedPattern,
       boolean shouldMatch, List<String> argList) throws Throwable {
+    testScriptFile(scriptText, expectedPattern, shouldMatch, argList, true, true);
+  }
+
+  /**
+   * Attempt to execute a simple script file with the -f or -i option
+   * to BeeLine (or both) to  test for presence of an expected pattern
+   * in the output (stdout or stderr), fail if not found.
+   * Print PASSED or FAILED
+   * @param expectedPattern Text to look for in command output/error
+   * @param shouldMatch true if the pattern should be found, false if it should not
+   * @param testScript Whether we should test -f
+   * @param testInit Whether we should test -i
+   * @throws Exception on command execution error
+   */
+  private void testScriptFile(String scriptText, String expectedPattern,
+      boolean shouldMatch, List<String> argList,
+      boolean testScript, boolean testInit) throws Throwable {
 
     // Put the script content in a temp file
     File scriptFile = File.createTempFile(this.getClass().getSimpleName(), "temp");
@@ -165,7 +182,7 @@ private void testScriptFile(String scriptText, String expectedPattern,
     os.print(scriptText);
     os.close();
 
-    {
+    if (testScript) {
       List<String> copy = new ArrayList<String>(argList);
       copy.add("-f");
       copy.add(scriptFile.getAbsolutePath());
@@ -179,7 +196,10 @@ private void testScriptFile(String scriptText, String expectedPattern,
       }
     }
 
-    {
+    // Not all scripts can be used as init scripts, so we parameterize.
+    // (scripts that test !connect, for eg., since -i runs after connects)
+    // So, we keep this optional. Most tests should leave this as true, however.
+    if (testInit) {
       List<String> copy = new ArrayList<String>(argList);
       copy.add("-i");
       copy.add(scriptFile.getAbsolutePath());
@@ -789,4 +809,58 @@ public void testConnectionWithURLParams() throws Throwable {
 
     testScriptFile( SCRIPT_TEXT, EXPECTED_PATTERN, true, argList);
   }
+
+  /**
+   * Test Beeline !connect with beeline saved vars
+   * @throws Throwable
+   */
+  @Test
+  public void testBeelineConnectEnvVar() throws Throwable {
+    final String jdbcUrl = miniHS2.getBaseJdbcURL();
+    List<String> argList = new ArrayList<String>();
+    argList.add("-u");
+    argList.add("blue");
+    argList.add("-d");
+    argList.add(BeeLine.BEELINE_DEFAULT_JDBC_DRIVER);
+
+    final String SCRIPT_TEXT =
+        "create table blueconnecttest (d int);\nshow tables;\n";
+    final String EXPECTED_PATTERN = "blueconnecttest";
+
+    // We go through these hijinxes because java considers System.getEnv
+    // to be read-only, and offers no way to set an env var from within
+    // a process, only for processes that we sub-spawn.
+
+    final BeeLineOpts.Env baseEnv = BeeLineOpts.getEnv();
+    BeeLineOpts.Env newEnv = new BeeLineOpts.Env() {
+      @Override
+      public String get(String envVar) {
+        if (envVar.equalsIgnoreCase("BEELINE_URL_BLUE")){
+          return jdbcUrl;
+        } else {
+          return baseEnv.get(envVar);
+        }
+      }
+    };
+    BeeLineOpts.setEnv(newEnv);
+
+    testScriptFile(SCRIPT_TEXT, EXPECTED_PATTERN, true, argList, true, false);
+  }
+
+  /**
+   * Test that if we !close, we can still !reconnect
+   * @throws Throwable
+   */
+  @Test
+  public void testBeelineReconnect() throws  Throwable {
+    List<String> argList = getBaseArgs(miniHS2.getBaseJdbcURL());
+    final String SCRIPT_TEXT =
+        "!close\n" +
+        "!reconnect\n\n\n" +
+        "create table reconnecttest (d int);\nshow tables;\n";
+    final String EXPECTED_PATTERN = "reconnecttest";
+
+    testScriptFile(SCRIPT_TEXT, EXPECTED_PATTERN, true, argList, true, false);
+
+  }
 }
-- 
1.7.9.5

