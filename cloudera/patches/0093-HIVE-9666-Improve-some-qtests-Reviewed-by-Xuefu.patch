From 780378ca73933585795b38321c2e1e9ad88b4272 Mon Sep 17 00:00:00 2001
From: Chao Sun <sunchao.chris@gmail.com>
Date: Mon, 16 Mar 2015 18:34:25 -0700
Subject: [PATCH 0093/1164] HIVE-9666: Improve some qtests (Reviewed by Xuefu)

---
 .../groupby7_noskew_multi_single_reducer.q         |    4 +-
 .../clientpositive/groupby_multi_single_reducer3.q |    3 +
 .../test/queries/clientpositive/parallel_join0.q   |    2 +-
 ql/src/test/queries/clientpositive/union3.q        |    2 +-
 ql/src/test/queries/clientpositive/union4.q        |    2 +
 .../groupby7_noskew_multi_single_reducer.q.out     |   60 ++++-----
 .../groupby_multi_single_reducer3.q.out            |    6 +
 .../results/clientpositive/parallel_join0.q.out    |  134 ++++++++++----------
 .../groupby7_noskew_multi_single_reducer.q.out     |   44 +++----
 .../spark/groupby_multi_single_reducer3.q.out      |   14 +-
 .../clientpositive/spark/parallel_join0.q.out      |    4 +-
 .../test/results/clientpositive/spark/union3.q.out |    8 +-
 .../test/results/clientpositive/spark/union4.q.out |    8 +-
 .../test/results/clientpositive/tez/union3.q.out   |    4 +-
 .../test/results/clientpositive/tez/union4.q.out   |    8 +-
 ql/src/test/results/clientpositive/union3.q.out    |    4 +-
 ql/src/test/results/clientpositive/union4.q.out    |    8 +-
 17 files changed, 168 insertions(+), 147 deletions(-)

diff --git a/ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q b/ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q
index ec6cd46..aa5773a 100644
--- a/ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q
+++ b/ql/src/test/queries/clientpositive/groupby7_noskew_multi_single_reducer.q
@@ -12,8 +12,8 @@ SET hive.exec.compress.output=true;
 
 EXPLAIN
 FROM SRC
-INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10
-INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10;
+INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10
+INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10;
 
 FROM SRC
 INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10
diff --git a/ql/src/test/queries/clientpositive/groupby_multi_single_reducer3.q b/ql/src/test/queries/clientpositive/groupby_multi_single_reducer3.q
index 1253ddf..59a4698 100644
--- a/ql/src/test/queries/clientpositive/groupby_multi_single_reducer3.q
+++ b/ql/src/test/queries/clientpositive/groupby_multi_single_reducer3.q
@@ -1,4 +1,7 @@
 -- HIVE-3849 Aliased column in where clause for multi-groupby single reducer cannot be resolved
+
+-- SORT_QUERY_RESULTS
+
 create table e1 (key string, count int);
 create table e2 (key string, count int);
 
diff --git a/ql/src/test/queries/clientpositive/parallel_join0.q b/ql/src/test/queries/clientpositive/parallel_join0.q
index 5180947..b892769 100644
--- a/ql/src/test/queries/clientpositive/parallel_join0.q
+++ b/ql/src/test/queries/clientpositive/parallel_join0.q
@@ -1,6 +1,6 @@
 set mapreduce.job.reduces=4;
 
--- SORT_BEFORE_DIFF
+-- SORT_QUERY_RESULTS
 
 EXPLAIN
 SELECT src1.key as k1, src1.value as v1, 
diff --git a/ql/src/test/queries/clientpositive/union3.q b/ql/src/test/queries/clientpositive/union3.q
index d402cb0..cb4d2a7 100644
--- a/ql/src/test/queries/clientpositive/union3.q
+++ b/ql/src/test/queries/clientpositive/union3.q
@@ -1,4 +1,4 @@
--- SORT_BEFORE_DIFF
+-- SORT_QUERY_RESULTS
 
 explain
 SELECT *
diff --git a/ql/src/test/queries/clientpositive/union4.q b/ql/src/test/queries/clientpositive/union4.q
index ee13e7a..b9219d9 100644
--- a/ql/src/test/queries/clientpositive/union4.q
+++ b/ql/src/test/queries/clientpositive/union4.q
@@ -1,5 +1,7 @@
 set hive.map.aggr = true;
 
+-- SORT_QUERY_RESULTS
+
 -- union case: both subqueries are map-reduce jobs on same input, followed by filesink
 
 
diff --git a/ql/src/test/results/clientpositive/groupby7_noskew_multi_single_reducer.q.out b/ql/src/test/results/clientpositive/groupby7_noskew_multi_single_reducer.q.out
index bd852c8..cb6c73c 100644
--- a/ql/src/test/results/clientpositive/groupby7_noskew_multi_single_reducer.q.out
+++ b/ql/src/test/results/clientpositive/groupby7_noskew_multi_single_reducer.q.out
@@ -20,13 +20,13 @@ POSTHOOK: Output: database:default
 POSTHOOK: Output: default@DEST2
 PREHOOK: query: EXPLAIN
 FROM SRC
-INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10
-INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10
+INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10
+INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10
 PREHOOK: type: QUERY
 POSTHOOK: query: EXPLAIN
 FROM SRC
-INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10
-INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10
+INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10
+INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10
 POSTHOOK: type: QUERY
 STAGE DEPENDENCIES:
   Stage-2 is a root stage
@@ -63,44 +63,39 @@ STAGE PLANS:
             mode: complete
             outputColumnNames: _col0, _col1
             Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
-            Limit
-              Number of rows: 10
-              Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
-              File Output Operator
-                compressed: true
-                table:
-                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
-                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
-                    serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
+            File Output Operator
+              compressed: true
+              table:
+                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
+                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
+                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
           Group By Operator
             aggregations: sum(VALUE._col0)
             keys: KEY._col0 (type: string)
             mode: complete
             outputColumnNames: _col0, _col1
             Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
-            Limit
-              Number of rows: 10
-              Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
-              File Output Operator
-                compressed: true
-                table:
-                    input format: org.apache.hadoop.mapred.SequenceFileInputFormat
-                    output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
-                    serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
+            File Output Operator
+              compressed: true
+              table:
+                  input format: org.apache.hadoop.mapred.SequenceFileInputFormat
+                  output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
+                  serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
 
   Stage: Stage-3
     Map Reduce
       Map Operator Tree:
           TableScan
             Reduce Output Operator
-              sort order: 
-              Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
-              value expressions: _col0 (type: string), _col1 (type: double)
+              key expressions: _col0 (type: string)
+              sort order: +
+              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
+              value expressions: _col1 (type: double)
       Reduce Operator Tree:
         Select Operator
-          expressions: VALUE._col0 (type: string), VALUE._col1 (type: double)
+          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: double)
           outputColumnNames: _col0, _col1
-          Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
+          Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
           Limit
             Number of rows: 10
             Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
@@ -135,14 +130,15 @@ STAGE PLANS:
       Map Operator Tree:
           TableScan
             Reduce Output Operator
-              sort order: 
-              Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
-              value expressions: _col0 (type: string), _col1 (type: double)
+              key expressions: _col0 (type: string)
+              sort order: +
+              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
+              value expressions: _col1 (type: double)
       Reduce Operator Tree:
         Select Operator
-          expressions: VALUE._col0 (type: string), VALUE._col1 (type: double)
+          expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: double)
           outputColumnNames: _col0, _col1
-          Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
+          Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
           Limit
             Number of rows: 10
             Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
diff --git a/ql/src/test/results/clientpositive/groupby_multi_single_reducer3.q.out b/ql/src/test/results/clientpositive/groupby_multi_single_reducer3.q.out
index fb15fef..ca0d524 100644
--- a/ql/src/test/results/clientpositive/groupby_multi_single_reducer3.q.out
+++ b/ql/src/test/results/clientpositive/groupby_multi_single_reducer3.q.out
@@ -1,9 +1,15 @@
 PREHOOK: query: -- HIVE-3849 Aliased column in where clause for multi-groupby single reducer cannot be resolved
+
+-- SORT_QUERY_RESULTS
+
 create table e1 (key string, count int)
 PREHOOK: type: CREATETABLE
 PREHOOK: Output: database:default
 PREHOOK: Output: default@e1
 POSTHOOK: query: -- HIVE-3849 Aliased column in where clause for multi-groupby single reducer cannot be resolved
+
+-- SORT_QUERY_RESULTS
+
 create table e1 (key string, count int)
 POSTHOOK: type: CREATETABLE
 POSTHOOK: Output: database:default
diff --git a/ql/src/test/results/clientpositive/parallel_join0.q.out b/ql/src/test/results/clientpositive/parallel_join0.q.out
index 562127f..0f57a51 100644
--- a/ql/src/test/results/clientpositive/parallel_join0.q.out
+++ b/ql/src/test/results/clientpositive/parallel_join0.q.out
@@ -1,5 +1,5 @@
 Warning: Shuffle Join JOIN[8][tables = [src1, src2]] in Stage 'Stage-1:MAPRED' is a cross product
-PREHOOK: query: -- SORT_BEFORE_DIFF
+PREHOOK: query: -- SORT_QUERY_RESULTS
 
 EXPLAIN
 SELECT src1.key as k1, src1.value as v1, 
@@ -9,7 +9,7 @@ SELECT src1.key as k1, src1.value as v1,
   (SELECT * FROM src WHERE src.key < 10) src2
   SORT BY k1, v1, k2, v2
 PREHOOK: type: QUERY
-POSTHOOK: query: -- SORT_BEFORE_DIFF
+POSTHOOK: query: -- SORT_QUERY_RESULTS
 
 EXPLAIN
 SELECT src1.key as k1, src1.value as v1, 
@@ -138,101 +138,101 @@ POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 0	val_0	0	val_0
 0	val_0	0	val_0
-0	val_0	2	val_2
-0	val_0	4	val_4
-0	val_0	5	val_5
-0	val_0	5	val_5
-0	val_0	8	val_8
-2	val_2	2	val_2
-2	val_2	5	val_5
-4	val_4	0	val_0
-4	val_4	4	val_4
-4	val_4	5	val_5
-4	val_4	9	val_9
-5	val_5	0	val_0
-5	val_5	0	val_0
-5	val_5	4	val_4
-5	val_5	5	val_5
-5	val_5	8	val_8
-5	val_5	8	val_8
-5	val_5	9	val_9
-5	val_5	9	val_9
-8	val_8	0	val_0
-8	val_8	5	val_5
-8	val_8	5	val_5
-8	val_8	5	val_5
-9	val_9	0	val_0
-9	val_9	0	val_0
-9	val_9	0	val_0
-9	val_9	2	val_2
-9	val_9	5	val_5
-9	val_9	5	val_5
 0	val_0	0	val_0
 0	val_0	0	val_0
 0	val_0	0	val_0
-0	val_0	2	val_2
-0	val_0	5	val_5
-0	val_0	5	val_5
-0	val_0	8	val_8
-0	val_0	9	val_9
-2	val_2	0	val_0
-2	val_2	5	val_5
-4	val_4	5	val_5
-5	val_5	0	val_0
-5	val_5	2	val_2
-5	val_5	2	val_2
-5	val_5	4	val_4
-5	val_5	5	val_5
-5	val_5	5	val_5
-5	val_5	8	val_8
-5	val_5	9	val_9
-8	val_8	0	val_0
+0	val_0	0	val_0
+0	val_0	0	val_0
+0	val_0	0	val_0
 0	val_0	0	val_0
 0	val_0	2	val_2
+0	val_0	2	val_2
+0	val_0	2	val_2
 0	val_0	4	val_4
 0	val_0	4	val_4
+0	val_0	4	val_4
+0	val_0	5	val_5
+0	val_0	5	val_5
+0	val_0	5	val_5
+0	val_0	5	val_5
+0	val_0	5	val_5
 0	val_0	5	val_5
 0	val_0	5	val_5
+0	val_0	5	val_5
+0	val_0	5	val_5
+0	val_0	8	val_8
+0	val_0	8	val_8
 0	val_0	8	val_8
 0	val_0	9	val_9
 0	val_0	9	val_9
+0	val_0	9	val_9
+2	val_2	0	val_0
 2	val_2	0	val_0
 2	val_2	0	val_0
+2	val_2	2	val_2
 2	val_2	4	val_4
+2	val_2	5	val_5
+2	val_2	5	val_5
+2	val_2	5	val_5
 2	val_2	8	val_8
 2	val_2	9	val_9
 4	val_4	0	val_0
+4	val_4	0	val_0
+4	val_4	0	val_0
+4	val_4	2	val_2
+4	val_4	4	val_4
+4	val_4	5	val_5
+4	val_4	5	val_5
+4	val_4	5	val_5
 4	val_4	8	val_8
+4	val_4	9	val_9
+5	val_5	0	val_0
+5	val_5	0	val_0
+5	val_5	0	val_0
 5	val_5	0	val_0
 5	val_5	0	val_0
 5	val_5	0	val_0
+5	val_5	0	val_0
+5	val_5	0	val_0
+5	val_5	0	val_0
+5	val_5	2	val_2
 5	val_5	2	val_2
+5	val_5	2	val_2
+5	val_5	4	val_4
+5	val_5	4	val_4
 5	val_5	4	val_4
 5	val_5	5	val_5
 5	val_5	5	val_5
 5	val_5	5	val_5
-8	val_8	0	val_0
-8	val_8	4	val_4
-9	val_9	4	val_4
-9	val_9	5	val_5
-9	val_9	8	val_8
-9	val_9	9	val_9
-0	val_0	0	val_0
-0	val_0	0	val_0
-0	val_0	0	val_0
-0	val_0	5	val_5
-0	val_0	5	val_5
-0	val_0	5	val_5
-2	val_2	5	val_5
-4	val_4	0	val_0
-4	val_4	2	val_2
-4	val_4	5	val_5
-5	val_5	0	val_0
-5	val_5	0	val_0
-5	val_5	0	val_0
 5	val_5	5	val_5
 5	val_5	5	val_5
 5	val_5	5	val_5
+5	val_5	5	val_5
+5	val_5	5	val_5
+5	val_5	5	val_5
+5	val_5	8	val_8
+5	val_5	8	val_8
+5	val_5	8	val_8
+5	val_5	9	val_9
+5	val_5	9	val_9
+5	val_5	9	val_9
+8	val_8	0	val_0
+8	val_8	0	val_0
+8	val_8	0	val_0
 8	val_8	2	val_2
+8	val_8	4	val_4
+8	val_8	5	val_5
+8	val_8	5	val_5
+8	val_8	5	val_5
 8	val_8	8	val_8
 8	val_8	9	val_9
+9	val_9	0	val_0
+9	val_9	0	val_0
+9	val_9	0	val_0
+9	val_9	2	val_2
+9	val_9	4	val_4
+9	val_9	5	val_5
+9	val_9	5	val_5
+9	val_9	5	val_5
+9	val_9	8	val_8
+9	val_9	9	val_9
diff --git a/ql/src/test/results/clientpositive/spark/groupby7_noskew_multi_single_reducer.q.out b/ql/src/test/results/clientpositive/spark/groupby7_noskew_multi_single_reducer.q.out
index 9d68fa7..2cb126d 100644
--- a/ql/src/test/results/clientpositive/spark/groupby7_noskew_multi_single_reducer.q.out
+++ b/ql/src/test/results/clientpositive/spark/groupby7_noskew_multi_single_reducer.q.out
@@ -20,13 +20,13 @@ POSTHOOK: Output: database:default
 POSTHOOK: Output: default@DEST2
 PREHOOK: query: EXPLAIN
 FROM SRC
-INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10
-INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10
+INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10
+INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10
 PREHOOK: type: QUERY
 POSTHOOK: query: EXPLAIN
 FROM SRC
-INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10
-INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key limit 10
+INSERT OVERWRITE TABLE DEST1 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10
+INSERT OVERWRITE TABLE DEST2 SELECT SRC.key, sum(SUBSTR(SRC.value,5)) GROUP BY SRC.key ORDER BY SRC.key limit 10
 POSTHOOK: type: QUERY
 STAGE DEPENDENCIES:
   Stage-2 is a root stage
@@ -41,8 +41,8 @@ STAGE PLANS:
       Edges:
         Reducer 5 <- Map 1 (GROUP PARTITION-LEVEL SORT, 31)
         Reducer 6 <- Map 1 (GROUP PARTITION-LEVEL SORT, 31)
-        Reducer 3 <- Reducer 5 (GROUP, 1)
-        Reducer 4 <- Reducer 6 (GROUP, 1)
+        Reducer 3 <- Reducer 5 (SORT, 1)
+        Reducer 4 <- Reducer 6 (SORT, 1)
 #### A masked pattern was here ####
       Vertices:
         Map 1 
@@ -63,9 +63,9 @@ STAGE PLANS:
         Reducer 3 
             Reduce Operator Tree:
               Select Operator
-                expressions: VALUE._col0 (type: string), VALUE._col1 (type: double)
+                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: double)
                 outputColumnNames: _col0, _col1
-                Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
+                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                 Limit
                   Number of rows: 10
                   Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
@@ -84,9 +84,9 @@ STAGE PLANS:
         Reducer 4 
             Reduce Operator Tree:
               Select Operator
-                expressions: VALUE._col0 (type: string), VALUE._col1 (type: double)
+                expressions: KEY.reducesinkkey0 (type: string), VALUE._col0 (type: double)
                 outputColumnNames: _col0, _col1
-                Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
+                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
                 Limit
                   Number of rows: 10
                   Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
@@ -112,13 +112,11 @@ STAGE PLANS:
                   mode: complete
                   outputColumnNames: _col0, _col1
                   Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
-                  Limit
-                    Number of rows: 10
-                    Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
-                    Reduce Output Operator
-                      sort order: 
-                      Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
-                      value expressions: _col0 (type: string), _col1 (type: double)
+                  Reduce Output Operator
+                    key expressions: _col0 (type: string)
+                    sort order: +
+                    Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
+                    value expressions: _col1 (type: double)
         Reducer 6 
             Reduce Operator Tree:
               Forward
@@ -129,13 +127,11 @@ STAGE PLANS:
                   mode: complete
                   outputColumnNames: _col0, _col1
                   Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
-                  Limit
-                    Number of rows: 10
-                    Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
-                    Reduce Output Operator
-                      sort order: 
-                      Statistics: Num rows: 10 Data size: 100 Basic stats: COMPLETE Column stats: NONE
-                      value expressions: _col0 (type: string), _col1 (type: double)
+                  Reduce Output Operator
+                    key expressions: _col0 (type: string)
+                    sort order: +
+                    Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE
+                    value expressions: _col1 (type: double)
 
   Stage: Stage-0
     Move Operator
diff --git a/ql/src/test/results/clientpositive/spark/groupby_multi_single_reducer3.q.out b/ql/src/test/results/clientpositive/spark/groupby_multi_single_reducer3.q.out
index a2a840e..4ac7009 100644
--- a/ql/src/test/results/clientpositive/spark/groupby_multi_single_reducer3.q.out
+++ b/ql/src/test/results/clientpositive/spark/groupby_multi_single_reducer3.q.out
@@ -1,9 +1,15 @@
 PREHOOK: query: -- HIVE-3849 Aliased column in where clause for multi-groupby single reducer cannot be resolved
+
+-- SORT_QUERY_RESULTS
+
 create table e1 (key string, count int)
 PREHOOK: type: CREATETABLE
 PREHOOK: Output: database:default
 PREHOOK: Output: default@e1
 POSTHOOK: query: -- HIVE-3849 Aliased column in where clause for multi-groupby single reducer cannot be resolved
+
+-- SORT_QUERY_RESULTS
+
 create table e1 (key string, count int)
 POSTHOOK: type: CREATETABLE
 POSTHOOK: Output: database:default
@@ -177,8 +183,8 @@ POSTHOOK: query: select * from e1
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@e1
 #### A masked pattern was here ####
-200	2
 100	2
+200	2
 PREHOOK: query: select * from e2
 PREHOOK: type: QUERY
 PREHOOK: Input: default@e2
@@ -349,8 +355,8 @@ POSTHOOK: query: select * from e1
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@e1
 #### A masked pattern was here ####
-val_200	2
 val_100	2
+val_200	2
 PREHOOK: query: select * from e2
 PREHOOK: type: QUERY
 PREHOOK: Input: default@e2
@@ -521,8 +527,8 @@ POSTHOOK: query: select * from e1
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@e1
 #### A masked pattern was here ####
-200	2
 100	2
+200	2
 PREHOOK: query: select * from e2
 PREHOOK: type: QUERY
 PREHOOK: Input: default@e2
@@ -693,8 +699,8 @@ POSTHOOK: query: select * from e1
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@e1
 #### A masked pattern was here ####
-val_200	2
 val_100	2
+val_200	2
 PREHOOK: query: select * from e2
 PREHOOK: type: QUERY
 PREHOOK: Input: default@e2
diff --git a/ql/src/test/results/clientpositive/spark/parallel_join0.q.out b/ql/src/test/results/clientpositive/spark/parallel_join0.q.out
index 8d367dd..655c435 100644
--- a/ql/src/test/results/clientpositive/spark/parallel_join0.q.out
+++ b/ql/src/test/results/clientpositive/spark/parallel_join0.q.out
@@ -1,5 +1,5 @@
 Warning: Shuffle Join JOIN[8][tables = [src1, src2]] in Work 'Reducer 2' is a cross product
-PREHOOK: query: -- SORT_BEFORE_DIFF
+PREHOOK: query: -- SORT_QUERY_RESULTS
 
 EXPLAIN
 SELECT src1.key as k1, src1.value as v1, 
@@ -9,7 +9,7 @@ SELECT src1.key as k1, src1.value as v1,
   (SELECT * FROM src WHERE src.key < 10) src2
   SORT BY k1, v1, k2, v2
 PREHOOK: type: QUERY
-POSTHOOK: query: -- SORT_BEFORE_DIFF
+POSTHOOK: query: -- SORT_QUERY_RESULTS
 
 EXPLAIN
 SELECT src1.key as k1, src1.value as v1, 
diff --git a/ql/src/test/results/clientpositive/spark/union3.q.out b/ql/src/test/results/clientpositive/spark/union3.q.out
index f327e2e..a7c699e 100644
--- a/ql/src/test/results/clientpositive/spark/union3.q.out
+++ b/ql/src/test/results/clientpositive/spark/union3.q.out
@@ -1,4 +1,4 @@
-PREHOOK: query: -- SORT_BEFORE_DIFF
+PREHOOK: query: -- SORT_QUERY_RESULTS
 
 explain
 SELECT *
@@ -18,7 +18,7 @@ FROM (
   FROM (SELECT * FROM src LIMIT 1) s2
 ) a
 PREHOOK: type: QUERY
-POSTHOOK: query: -- SORT_BEFORE_DIFF
+POSTHOOK: query: -- SORT_QUERY_RESULTS
 
 explain
 SELECT *
@@ -250,7 +250,7 @@ POSTHOOK: query: select * from union_out cluster by id
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@union_out
 #### A masked pattern was here ####
-2
-4
 1
+2
 3
+4
diff --git a/ql/src/test/results/clientpositive/spark/union4.q.out b/ql/src/test/results/clientpositive/spark/union4.q.out
index 5f2e76a..a7308ec 100644
--- a/ql/src/test/results/clientpositive/spark/union4.q.out
+++ b/ql/src/test/results/clientpositive/spark/union4.q.out
@@ -1,11 +1,15 @@
-PREHOOK: query: -- union case: both subqueries are map-reduce jobs on same input, followed by filesink
+PREHOOK: query: -- SORT_QUERY_RESULTS
+
+-- union case: both subqueries are map-reduce jobs on same input, followed by filesink
 
 
 create table tmptable(key string, value int)
 PREHOOK: type: CREATETABLE
 PREHOOK: Output: database:default
 PREHOOK: Output: default@tmptable
-POSTHOOK: query: -- union case: both subqueries are map-reduce jobs on same input, followed by filesink
+POSTHOOK: query: -- SORT_QUERY_RESULTS
+
+-- union case: both subqueries are map-reduce jobs on same input, followed by filesink
 
 
 create table tmptable(key string, value int)
diff --git a/ql/src/test/results/clientpositive/tez/union3.q.out b/ql/src/test/results/clientpositive/tez/union3.q.out
index 3dad621..4828967 100644
--- a/ql/src/test/results/clientpositive/tez/union3.q.out
+++ b/ql/src/test/results/clientpositive/tez/union3.q.out
@@ -1,4 +1,4 @@
-PREHOOK: query: -- SORT_BEFORE_DIFF
+PREHOOK: query: -- SORT_QUERY_RESULTS
 
 explain
 SELECT *
@@ -18,7 +18,7 @@ FROM (
   FROM (SELECT * FROM src LIMIT 1) s2
 ) a
 PREHOOK: type: QUERY
-POSTHOOK: query: -- SORT_BEFORE_DIFF
+POSTHOOK: query: -- SORT_QUERY_RESULTS
 
 explain
 SELECT *
diff --git a/ql/src/test/results/clientpositive/tez/union4.q.out b/ql/src/test/results/clientpositive/tez/union4.q.out
index 6874680..e28af5e 100644
--- a/ql/src/test/results/clientpositive/tez/union4.q.out
+++ b/ql/src/test/results/clientpositive/tez/union4.q.out
@@ -1,11 +1,15 @@
-PREHOOK: query: -- union case: both subqueries are map-reduce jobs on same input, followed by filesink
+PREHOOK: query: -- SORT_QUERY_RESULTS
+
+-- union case: both subqueries are map-reduce jobs on same input, followed by filesink
 
 
 create table tmptable(key string, value int)
 PREHOOK: type: CREATETABLE
 PREHOOK: Output: database:default
 PREHOOK: Output: default@tmptable
-POSTHOOK: query: -- union case: both subqueries are map-reduce jobs on same input, followed by filesink
+POSTHOOK: query: -- SORT_QUERY_RESULTS
+
+-- union case: both subqueries are map-reduce jobs on same input, followed by filesink
 
 
 create table tmptable(key string, value int)
diff --git a/ql/src/test/results/clientpositive/union3.q.out b/ql/src/test/results/clientpositive/union3.q.out
index 810d3af..6cdc1cd 100644
--- a/ql/src/test/results/clientpositive/union3.q.out
+++ b/ql/src/test/results/clientpositive/union3.q.out
@@ -1,4 +1,4 @@
-PREHOOK: query: -- SORT_BEFORE_DIFF
+PREHOOK: query: -- SORT_QUERY_RESULTS
 
 explain
 SELECT *
@@ -18,7 +18,7 @@ FROM (
   FROM (SELECT * FROM src LIMIT 1) s2
 ) a
 PREHOOK: type: QUERY
-POSTHOOK: query: -- SORT_BEFORE_DIFF
+POSTHOOK: query: -- SORT_QUERY_RESULTS
 
 explain
 SELECT *
diff --git a/ql/src/test/results/clientpositive/union4.q.out b/ql/src/test/results/clientpositive/union4.q.out
index 14fe96b..41ca811 100644
--- a/ql/src/test/results/clientpositive/union4.q.out
+++ b/ql/src/test/results/clientpositive/union4.q.out
@@ -1,11 +1,15 @@
-PREHOOK: query: -- union case: both subqueries are map-reduce jobs on same input, followed by filesink
+PREHOOK: query: -- SORT_QUERY_RESULTS
+
+-- union case: both subqueries are map-reduce jobs on same input, followed by filesink
 
 
 create table tmptable(key string, value int)
 PREHOOK: type: CREATETABLE
 PREHOOK: Output: database:default
 PREHOOK: Output: default@tmptable
-POSTHOOK: query: -- union case: both subqueries are map-reduce jobs on same input, followed by filesink
+POSTHOOK: query: -- SORT_QUERY_RESULTS
+
+-- union case: both subqueries are map-reduce jobs on same input, followed by filesink
 
 
 create table tmptable(key string, value int)
-- 
1.7.9.5

