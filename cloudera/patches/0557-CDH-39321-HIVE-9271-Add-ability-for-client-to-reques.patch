From db4bd4c01dcbe8d9961df14a9803e86d9ee66ac7 Mon Sep 17 00:00:00 2001
From: Sushanth Sowmyan <khorgath@apache.org>
Date: Tue, 27 Jan 2015 22:54:03 +0000
Subject: [PATCH 0557/1164] CDH-39321 : HIVE-9271 : Add ability for client to
 request metastore to fire an event (Alan Gates
 via Sushanth Sowmyan)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1655185 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit bd6e401b28527538e9368cf3f3565669c6f44a81)

Change-Id: Ieda53acd39cd7f9ca4125ddb7d7693b1d8c9020c
---
 .../apache/hive/hcatalog/common/HCatConstants.java |    1 +
 .../hcatalog/listener/DbNotificationListener.java  |   11 +
 .../hcatalog/listener/NotificationListener.java    |    1 +
 .../hive/hcatalog/messaging/HCatEventMessage.java  |    3 +-
 .../hive/hcatalog/messaging/InsertMessage.java     |   52 +
 .../hive/hcatalog/messaging/MessageFactory.java    |    2 +
 .../hcatalog/messaging/json/JSONInsertMessage.java |   89 +
 .../messaging/json/JSONMessageFactory.java         |    7 +
 .../listener/TestDbNotificationListener.java       |   45 +
 metastore/if/hive_metastore.thrift                 |   41 +-
 .../src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp | 2041 ++++++++-------
 .../src/gen/thrift/gen-cpp/ThriftHiveMetastore.h   |  106 +
 .../ThriftHiveMetastore_server.skeleton.cpp        |    5 +
 .../gen/thrift/gen-cpp/hive_metastore_types.cpp    |  443 +---
 .../src/gen/thrift/gen-cpp/hive_metastore_types.h  |  280 +--
 .../hive/metastore/api/EventRequestType.java       |   48 +
 .../hive/metastore/api/FireEventRequest.java       |  347 +--
 .../hive/metastore/api/FireEventRequestData.java   |  305 ---
 .../hive/metastore/api/FireEventResponse.java      |  279 ---
 .../metastore/api/GetAllFunctionsResponse.java     |   36 +-
 .../hive/metastore/api/InsertEventRequestData.java |  437 ----
 .../hive/metastore/api/ThriftHiveMetastore.java    | 2622 ++++++++++++--------
 .../gen-php/metastore/ThriftHiveMetastore.php      | 1266 ++++++----
 .../src/gen/thrift/gen-php/metastore/Types.php     |  483 +---
 .../hive_metastore/ThriftHiveMetastore-remote      |    7 +
 .../gen-py/hive_metastore/ThriftHiveMetastore.py   |  884 ++++---
 .../src/gen/thrift/gen-py/hive_metastore/ttypes.py |  377 +--
 .../src/gen/thrift/gen-rb/hive_metastore_types.rb  |  113 +-
 .../src/gen/thrift/gen-rb/thrift_hive_metastore.rb |   52 +
 .../hadoop/hive/metastore/HiveMetaStore.java       |   22 +-
 .../hadoop/hive/metastore/HiveMetaStoreClient.java |    6 +
 .../hadoop/hive/metastore/IMetaStoreClient.java    |    9 +
 .../hive/metastore/MetaStoreEventListener.java     |   12 +
 .../hadoop/hive/metastore/events/InsertEvent.java  |   70 +
 34 files changed, 5288 insertions(+), 5214 deletions(-)
 create mode 100644 hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/InsertMessage.java
 create mode 100644 hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/json/JSONInsertMessage.java
 create mode 100644 metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EventRequestType.java
 delete mode 100644 metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequestData.java
 delete mode 100644 metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventResponse.java
 delete mode 100644 metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InsertEventRequestData.java
 create mode 100644 metastore/src/java/org/apache/hadoop/hive/metastore/events/InsertEvent.java

diff --git a/hcatalog/core/src/main/java/org/apache/hive/hcatalog/common/HCatConstants.java b/hcatalog/core/src/main/java/org/apache/hive/hcatalog/common/HCatConstants.java
index 4fd1231..6b03fcb 100644
--- a/hcatalog/core/src/main/java/org/apache/hive/hcatalog/common/HCatConstants.java
+++ b/hcatalog/core/src/main/java/org/apache/hive/hcatalog/common/HCatConstants.java
@@ -152,6 +152,7 @@ private HCatConstants() { // restrict instantiation
   public static final String HCAT_DROP_TABLE_EVENT = "DROP_TABLE";
   public static final String HCAT_CREATE_DATABASE_EVENT = "CREATE_DATABASE";
   public static final String HCAT_DROP_DATABASE_EVENT = "DROP_DATABASE";
+  public static final String HCAT_INSERT_EVENT = "INSERT";
   public static final String HCAT_MESSAGE_VERSION = "HCAT_MESSAGE_VERSION";
   public static final String HCAT_MESSAGE_FORMAT = "HCAT_MESSAGE_FORMAT";
   public static final String CONF_LABEL_HCAT_MESSAGE_FACTORY_IMPL_PREFIX = "hcatalog.message.factory.impl.";
diff --git a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java
index 9b14851..d48c6c7 100644
--- a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java
+++ b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java
@@ -38,6 +38,7 @@
 import org.apache.hadoop.hive.metastore.events.DropDatabaseEvent;
 import org.apache.hadoop.hive.metastore.events.DropPartitionEvent;
 import org.apache.hadoop.hive.metastore.events.DropTableEvent;
+import org.apache.hadoop.hive.metastore.events.InsertEvent;
 import org.apache.hadoop.hive.metastore.events.LoadPartitionDoneEvent;
 import org.apache.hive.hcatalog.common.HCatConstants;
 import org.apache.hive.hcatalog.messaging.MessageFactory;
@@ -224,6 +225,16 @@ public void onDropDatabase (DropDatabaseEvent dbEvent) throws MetaException {
     enqueue(event);
   }
 
+  @Override
+  public void onInsert(InsertEvent insertEvent) throws MetaException {
+    NotificationEvent event = new NotificationEvent(0, now(), HCatConstants.HCAT_INSERT_EVENT,
+        msgFactory.buildInsertMessage(insertEvent.getDb(), insertEvent.getTable(), insertEvent
+            .getPartitions()).toString());
+    event.setDbName(insertEvent.getDb());
+    event.setTableName(insertEvent.getTable());
+    enqueue(event);
+  }
+
   /**
    * @param partSetDoneEvent
    * @throws MetaException
diff --git a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/NotificationListener.java b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/NotificationListener.java
index c383047..24f2c38 100644
--- a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/NotificationListener.java
+++ b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/NotificationListener.java
@@ -57,6 +57,7 @@
 import org.apache.hadoop.hive.metastore.events.DropDatabaseEvent;
 import org.apache.hadoop.hive.metastore.events.DropPartitionEvent;
 import org.apache.hadoop.hive.metastore.events.DropTableEvent;
+import org.apache.hadoop.hive.metastore.events.InsertEvent;
 import org.apache.hadoop.hive.metastore.events.ListenerEvent;
 import org.apache.hadoop.hive.metastore.events.LoadPartitionDoneEvent;
 import org.apache.hive.hcatalog.common.HCatConstants;
diff --git a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/HCatEventMessage.java b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/HCatEventMessage.java
index 4a8f290..538fa68 100644
--- a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/HCatEventMessage.java
+++ b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/HCatEventMessage.java
@@ -39,7 +39,8 @@
     ADD_PARTITION(HCatConstants.HCAT_ADD_PARTITION_EVENT),
     DROP_PARTITION(HCatConstants.HCAT_DROP_PARTITION_EVENT),
     ALTER_TABLE(HCatConstants.HCAT_ALTER_TABLE_EVENT),
-    ALTER_PARTITION(HCatConstants.HCAT_ALTER_PARTITION_EVENT);
+    ALTER_PARTITION(HCatConstants.HCAT_ALTER_PARTITION_EVENT),
+    INSERT(HCatConstants.HCAT_INSERT_EVENT);
 
     private String typeString;
 
diff --git a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/InsertMessage.java b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/InsertMessage.java
new file mode 100644
index 0000000..4d03670
--- /dev/null
+++ b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/InsertMessage.java
@@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.hive.hcatalog.messaging;
+
+import java.util.List;
+
+/**
+ * HCat message sent when an insert is done to a table or partition.
+ */
+public abstract class InsertMessage extends HCatEventMessage {
+
+  protected InsertMessage() {
+    super(EventType.INSERT);
+  }
+
+  /**
+   * Getter for the name of the table being insert into.
+   * @return Table-name (String).
+   */
+  public abstract String getTable();
+
+  /**
+   * Get the list of partition values.  Will be null if this insert is to a table and not a
+   * partition.
+   * @return List of partition values, or null.
+   */
+  public abstract List<String> getPartitionValues();
+
+  @Override
+  public HCatEventMessage checkValid() {
+    if (getTable() == null)
+      throw new IllegalStateException("Table name unset.");
+    return super.checkValid();
+  }
+}
diff --git a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/MessageFactory.java b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/MessageFactory.java
index fcab469..d9641e7 100644
--- a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/MessageFactory.java
+++ b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/MessageFactory.java
@@ -170,4 +170,6 @@ public abstract AlterPartitionMessage buildAlterPartitionMessage(Partition befor
    * @return DropPartitionMessage instance.
    */
   public abstract DropPartitionMessage buildDropPartitionMessage(Table table, Partition partition);
+
+  public abstract InsertMessage buildInsertMessage(String db, String table, List<String> partVals);
 }
diff --git a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/json/JSONInsertMessage.java b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/json/JSONInsertMessage.java
new file mode 100644
index 0000000..dd3403d
--- /dev/null
+++ b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/json/JSONInsertMessage.java
@@ -0,0 +1,89 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.hive.hcatalog.messaging.json;
+
+import org.apache.hive.hcatalog.messaging.DropTableMessage;
+import org.apache.hive.hcatalog.messaging.InsertMessage;
+import org.codehaus.jackson.annotate.JsonProperty;
+
+import java.util.List;
+
+/**
+ * JSON implementation of DropTableMessage.
+ */
+public class JSONInsertMessage extends InsertMessage {
+
+  @JsonProperty
+  String server, servicePrincipal, db, table;
+
+  @JsonProperty
+  Long timestamp;
+
+  @JsonProperty
+  List<String> partitionValues;
+
+  /**
+   * Default constructor, needed for Jackson.
+   */
+  public JSONInsertMessage() {}
+
+  public JSONInsertMessage(String server, String servicePrincipal, String db, String table,
+                           List<String> partVals, Long timestamp) {
+    this.server = server;
+    this.servicePrincipal = servicePrincipal;
+    this.db = db;
+    this.table = table;
+    this.timestamp = timestamp;
+    partitionValues = partVals;
+    checkValid();
+  }
+
+
+  @Override
+  public String getTable() { return table; }
+
+  @Override
+  public String getServer() { return server; }
+
+  @Override
+  public List<String> getPartitionValues() {
+    return partitionValues;
+  }
+
+  @Override
+  public String getServicePrincipal() { return servicePrincipal; }
+
+  @Override
+  public String getDB() { return db; }
+
+  @Override
+  public Long getTimestamp() { return timestamp; }
+
+  @Override
+  public String toString() {
+    try {
+      return JSONMessageDeserializer.mapper.writeValueAsString(this);
+    }
+    catch (Exception exception) {
+      throw new IllegalArgumentException("Could not serialize: ", exception);
+    }
+  }
+
+}
\ No newline at end of file
diff --git a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/json/JSONMessageFactory.java b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/json/JSONMessageFactory.java
index 19695ed..ad12efc 100644
--- a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/json/JSONMessageFactory.java
+++ b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/messaging/json/JSONMessageFactory.java
@@ -35,6 +35,7 @@
 import org.apache.hive.hcatalog.messaging.DropDatabaseMessage;
 import org.apache.hive.hcatalog.messaging.DropPartitionMessage;
 import org.apache.hive.hcatalog.messaging.DropTableMessage;
+import org.apache.hive.hcatalog.messaging.InsertMessage;
 import org.apache.hive.hcatalog.messaging.MessageDeserializer;
 import org.apache.hive.hcatalog.messaging.MessageFactory;
 
@@ -122,6 +123,12 @@ public DropPartitionMessage buildDropPartitionMessage(Table table, Partition par
         partition.getTableName(), Arrays.asList(getPartitionKeyValues(table, partition)), now());
   }
 
+  @Override
+  public InsertMessage buildInsertMessage(String db, String table, List<String> partVals) {
+    return new JSONInsertMessage(HCAT_SERVER_URL, HCAT_SERVICE_PRINCIPAL, db, table, partVals,
+        now());
+  }
+
   private long now() {
     return System.currentTimeMillis() / 1000;
   }
diff --git a/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java b/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java
index 5bce2b1..9007017 100644
--- a/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java
+++ b/itests/hcatalog-unit/src/test/java/org/apache/hive/hcatalog/listener/TestDbNotificationListener.java
@@ -30,7 +30,9 @@
 import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;
 import org.apache.hadoop.hive.metastore.IMetaStoreClient;
 import org.apache.hadoop.hive.metastore.api.Database;
+import org.apache.hadoop.hive.metastore.api.EventRequestType;
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
+import org.apache.hadoop.hive.metastore.api.FireEventRequest;
 import org.apache.hadoop.hive.metastore.api.NotificationEvent;
 import org.apache.hadoop.hive.metastore.api.NotificationEventResponse;
 import org.apache.hadoop.hive.metastore.api.Partition;
@@ -293,6 +295,49 @@ public void dropPartition() throws Exception {
   }
 
   @Test
+  public void insertTable() throws Exception {
+    FireEventRequest rqst = new FireEventRequest(EventRequestType.INSERT, "mydb", true);
+    rqst.setTableName("mytable");
+    msClient.fireNotificationEvent(rqst);
+
+    NotificationEventResponse rsp = msClient.getNextNotification(firstEventId, 0, null);
+    assertEquals(1, rsp.getEventsSize());
+
+    NotificationEvent event = rsp.getEvents().get(0);
+    assertEquals(firstEventId + 1, event.getEventId());
+    assertTrue(event.getEventTime() >= startTime);
+    assertEquals(HCatConstants.HCAT_INSERT_EVENT, event.getEventType());
+    assertEquals("mydb", event.getDbName());
+    assertEquals("mytable", event.getTableName());
+    System.out.println(event.getMessage());
+    assertTrue(event.getMessage().matches("\\{\"eventType\":\"INSERT\",\"server\":\"\"," +
+        "\"servicePrincipal\":\"\",\"db\":\"mydb\",\"table\":" +
+        "\"mytable\",\"timestamp\":[0-9]+,\"partitionValues\":null}"));
+  }
+
+  @Test
+  public void insertPartition() throws Exception {
+    FireEventRequest rqst = new FireEventRequest(EventRequestType.INSERT, "mydb", true);
+    rqst.setTableName("mytable");
+    rqst.setPartitionVals(Arrays.asList("today"));
+    msClient.fireNotificationEvent(rqst);
+
+    NotificationEventResponse rsp = msClient.getNextNotification(firstEventId, 0, null);
+    assertEquals(1, rsp.getEventsSize());
+
+    NotificationEvent event = rsp.getEvents().get(0);
+    assertEquals(firstEventId + 1, event.getEventId());
+    assertTrue(event.getEventTime() >= startTime);
+    assertEquals(HCatConstants.HCAT_INSERT_EVENT, event.getEventType());
+    assertEquals("mydb", event.getDbName());
+    assertEquals("mytable", event.getTableName());
+    System.out.println(event.getMessage());
+    assertTrue(event.getMessage().matches("\\{\"eventType\":\"INSERT\",\"server\":\"\"," +
+        "\"servicePrincipal\":\"\",\"db\":\"mydb\",\"table\":" +
+        "\"mytable\",\"timestamp\":[0-9]+,\"partitionValues\":\\[\"today\"]}"));
+  }
+
+  @Test
   public void getOnlyMaxEvents() throws Exception {
     Database db = new Database("db1", "no description", "file:/tmp", emptyParameters);
     msClient.createDatabase(db);
diff --git a/metastore/if/hive_metastore.thrift b/metastore/if/hive_metastore.thrift
index 187351d..d55fb1b 100755
--- a/metastore/if/hive_metastore.thrift
+++ b/metastore/if/hive_metastore.thrift
@@ -106,6 +106,15 @@ enum GrantRevokeType {
     REVOKE = 2,
 }
 
+// Types of events the client can request that the metastore fire.  For now just support DML operations, as the metastore knows
+// about DDL operations and there's no reason for the client to request such an event.
+enum EventRequestType {
+    INSERT = 1,
+    UPDATE = 2,
+    DELETE = 3,
+}
+
+
 struct HiveObjectRef{
   1: HiveObjectType objectType,
   2: string dbName,
@@ -664,29 +673,6 @@ struct CurrentNotificationEventId {
     1: required i64 eventId,
 }
 
-struct InsertEventRequestData {
-    1: required list<string> filesAdded
-}
-
-union FireEventRequestData {
-    1: InsertEventRequestData insertData
-}
-
-struct FireEventRequest {
-    1: required bool successful,
-    2: required FireEventRequestData data
-    // dbname, tablename, and partition vals are included as optional in the top level event rather than placed in each type of
-    // subevent as I assume they'll be used across most event types.
-    3: optional string dbName,
-    4: optional string tableName,
-    5: optional list<string> partitionVals,
-}
-
-struct FireEventResponse {
-    // NOP for now, this is just a place holder for future responses
-}
-    
-
 struct GetAllFunctionsResponse {
   1: optional list<Function> functions
 }
@@ -698,6 +684,14 @@ struct TableMeta {
   4: optional string comments;
 }
 
+struct FireEventRequest {
+    1: required EventRequestType eventType,
+    2: required string dbName,
+    3: required bool successful,
+    4: optional string tableName,
+    5: optional list<string> partitionVals
+}
+
 exception MetaException {
   1: string message
 }
@@ -1173,6 +1167,7 @@ service ThriftHiveMetastore extends fb303.FacebookService
   // Notification logging calls
   NotificationEventResponse get_next_notification(1:NotificationEventRequest rqst) 
   CurrentNotificationEventId get_current_notificationEventId()
+  void fire_notification_event(1:FireEventRequest rqst)
 }
 
 // * Note about the DDL_TIME: When creating or altering a table or a partition,
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
index c36ae35..08a3334 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
@@ -1096,14 +1096,14 @@ uint32_t ThriftHiveMetastore_get_databases_result::read(::apache::thrift::protoc
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size425;
-            ::apache::thrift::protocol::TType _etype428;
-            xfer += iprot->readListBegin(_etype428, _size425);
-            this->success.resize(_size425);
-            uint32_t _i429;
-            for (_i429 = 0; _i429 < _size425; ++_i429)
+            uint32_t _size420;
+            ::apache::thrift::protocol::TType _etype423;
+            xfer += iprot->readListBegin(_etype423, _size420);
+            this->success.resize(_size420);
+            uint32_t _i424;
+            for (_i424 = 0; _i424 < _size420; ++_i424)
             {
-              xfer += iprot->readString(this->success[_i429]);
+              xfer += iprot->readString(this->success[_i424]);
             }
             xfer += iprot->readListEnd();
           }
@@ -1142,10 +1142,10 @@ uint32_t ThriftHiveMetastore_get_databases_result::write(::apache::thrift::proto
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter430;
-      for (_iter430 = this->success.begin(); _iter430 != this->success.end(); ++_iter430)
+      std::vector<std::string> ::const_iterator _iter425;
+      for (_iter425 = this->success.begin(); _iter425 != this->success.end(); ++_iter425)
       {
-        xfer += oprot->writeString((*_iter430));
+        xfer += oprot->writeString((*_iter425));
       }
       xfer += oprot->writeListEnd();
     }
@@ -1184,14 +1184,14 @@ uint32_t ThriftHiveMetastore_get_databases_presult::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size431;
-            ::apache::thrift::protocol::TType _etype434;
-            xfer += iprot->readListBegin(_etype434, _size431);
-            (*(this->success)).resize(_size431);
-            uint32_t _i435;
-            for (_i435 = 0; _i435 < _size431; ++_i435)
+            uint32_t _size426;
+            ::apache::thrift::protocol::TType _etype429;
+            xfer += iprot->readListBegin(_etype429, _size426);
+            (*(this->success)).resize(_size426);
+            uint32_t _i430;
+            for (_i430 = 0; _i430 < _size426; ++_i430)
             {
-              xfer += iprot->readString((*(this->success))[_i435]);
+              xfer += iprot->readString((*(this->success))[_i430]);
             }
             xfer += iprot->readListEnd();
           }
@@ -1289,14 +1289,14 @@ uint32_t ThriftHiveMetastore_get_all_databases_result::read(::apache::thrift::pr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size436;
-            ::apache::thrift::protocol::TType _etype439;
-            xfer += iprot->readListBegin(_etype439, _size436);
-            this->success.resize(_size436);
-            uint32_t _i440;
-            for (_i440 = 0; _i440 < _size436; ++_i440)
+            uint32_t _size431;
+            ::apache::thrift::protocol::TType _etype434;
+            xfer += iprot->readListBegin(_etype434, _size431);
+            this->success.resize(_size431);
+            uint32_t _i435;
+            for (_i435 = 0; _i435 < _size431; ++_i435)
             {
-              xfer += iprot->readString(this->success[_i440]);
+              xfer += iprot->readString(this->success[_i435]);
             }
             xfer += iprot->readListEnd();
           }
@@ -1335,10 +1335,10 @@ uint32_t ThriftHiveMetastore_get_all_databases_result::write(::apache::thrift::p
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter441;
-      for (_iter441 = this->success.begin(); _iter441 != this->success.end(); ++_iter441)
+      std::vector<std::string> ::const_iterator _iter436;
+      for (_iter436 = this->success.begin(); _iter436 != this->success.end(); ++_iter436)
       {
-        xfer += oprot->writeString((*_iter441));
+        xfer += oprot->writeString((*_iter436));
       }
       xfer += oprot->writeListEnd();
     }
@@ -1377,14 +1377,14 @@ uint32_t ThriftHiveMetastore_get_all_databases_presult::read(::apache::thrift::p
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size442;
-            ::apache::thrift::protocol::TType _etype445;
-            xfer += iprot->readListBegin(_etype445, _size442);
-            (*(this->success)).resize(_size442);
-            uint32_t _i446;
-            for (_i446 = 0; _i446 < _size442; ++_i446)
+            uint32_t _size437;
+            ::apache::thrift::protocol::TType _etype440;
+            xfer += iprot->readListBegin(_etype440, _size437);
+            (*(this->success)).resize(_size437);
+            uint32_t _i441;
+            for (_i441 = 0; _i441 < _size437; ++_i441)
             {
-              xfer += iprot->readString((*(this->success))[_i446]);
+              xfer += iprot->readString((*(this->success))[_i441]);
             }
             xfer += iprot->readListEnd();
           }
@@ -2327,17 +2327,17 @@ uint32_t ThriftHiveMetastore_get_type_all_result::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->success.clear();
-            uint32_t _size447;
-            ::apache::thrift::protocol::TType _ktype448;
-            ::apache::thrift::protocol::TType _vtype449;
-            xfer += iprot->readMapBegin(_ktype448, _vtype449, _size447);
-            uint32_t _i451;
-            for (_i451 = 0; _i451 < _size447; ++_i451)
+            uint32_t _size442;
+            ::apache::thrift::protocol::TType _ktype443;
+            ::apache::thrift::protocol::TType _vtype444;
+            xfer += iprot->readMapBegin(_ktype443, _vtype444, _size442);
+            uint32_t _i446;
+            for (_i446 = 0; _i446 < _size442; ++_i446)
             {
-              std::string _key452;
-              xfer += iprot->readString(_key452);
-              Type& _val453 = this->success[_key452];
-              xfer += _val453.read(iprot);
+              std::string _key447;
+              xfer += iprot->readString(_key447);
+              Type& _val448 = this->success[_key447];
+              xfer += _val448.read(iprot);
             }
             xfer += iprot->readMapEnd();
           }
@@ -2376,11 +2376,11 @@ uint32_t ThriftHiveMetastore_get_type_all_result::write(::apache::thrift::protoc
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
     {
       xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::map<std::string, Type> ::const_iterator _iter454;
-      for (_iter454 = this->success.begin(); _iter454 != this->success.end(); ++_iter454)
+      std::map<std::string, Type> ::const_iterator _iter449;
+      for (_iter449 = this->success.begin(); _iter449 != this->success.end(); ++_iter449)
       {
-        xfer += oprot->writeString(_iter454->first);
-        xfer += _iter454->second.write(oprot);
+        xfer += oprot->writeString(_iter449->first);
+        xfer += _iter449->second.write(oprot);
       }
       xfer += oprot->writeMapEnd();
     }
@@ -2419,17 +2419,17 @@ uint32_t ThriftHiveMetastore_get_type_all_presult::read(::apache::thrift::protoc
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             (*(this->success)).clear();
-            uint32_t _size455;
-            ::apache::thrift::protocol::TType _ktype456;
-            ::apache::thrift::protocol::TType _vtype457;
-            xfer += iprot->readMapBegin(_ktype456, _vtype457, _size455);
-            uint32_t _i459;
-            for (_i459 = 0; _i459 < _size455; ++_i459)
+            uint32_t _size450;
+            ::apache::thrift::protocol::TType _ktype451;
+            ::apache::thrift::protocol::TType _vtype452;
+            xfer += iprot->readMapBegin(_ktype451, _vtype452, _size450);
+            uint32_t _i454;
+            for (_i454 = 0; _i454 < _size450; ++_i454)
             {
-              std::string _key460;
-              xfer += iprot->readString(_key460);
-              Type& _val461 = (*(this->success))[_key460];
-              xfer += _val461.read(iprot);
+              std::string _key455;
+              xfer += iprot->readString(_key455);
+              Type& _val456 = (*(this->success))[_key455];
+              xfer += _val456.read(iprot);
             }
             xfer += iprot->readMapEnd();
           }
@@ -2564,14 +2564,14 @@ uint32_t ThriftHiveMetastore_get_fields_result::read(::apache::thrift::protocol:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size462;
-            ::apache::thrift::protocol::TType _etype465;
-            xfer += iprot->readListBegin(_etype465, _size462);
-            this->success.resize(_size462);
-            uint32_t _i466;
-            for (_i466 = 0; _i466 < _size462; ++_i466)
+            uint32_t _size457;
+            ::apache::thrift::protocol::TType _etype460;
+            xfer += iprot->readListBegin(_etype460, _size457);
+            this->success.resize(_size457);
+            uint32_t _i461;
+            for (_i461 = 0; _i461 < _size457; ++_i461)
             {
-              xfer += this->success[_i466].read(iprot);
+              xfer += this->success[_i461].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -2626,10 +2626,10 @@ uint32_t ThriftHiveMetastore_get_fields_result::write(::apache::thrift::protocol
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<FieldSchema> ::const_iterator _iter467;
-      for (_iter467 = this->success.begin(); _iter467 != this->success.end(); ++_iter467)
+      std::vector<FieldSchema> ::const_iterator _iter462;
+      for (_iter462 = this->success.begin(); _iter462 != this->success.end(); ++_iter462)
       {
-        xfer += (*_iter467).write(oprot);
+        xfer += (*_iter462).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -2676,14 +2676,14 @@ uint32_t ThriftHiveMetastore_get_fields_presult::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size468;
-            ::apache::thrift::protocol::TType _etype471;
-            xfer += iprot->readListBegin(_etype471, _size468);
-            (*(this->success)).resize(_size468);
-            uint32_t _i472;
-            for (_i472 = 0; _i472 < _size468; ++_i472)
+            uint32_t _size463;
+            ::apache::thrift::protocol::TType _etype466;
+            xfer += iprot->readListBegin(_etype466, _size463);
+            (*(this->success)).resize(_size463);
+            uint32_t _i467;
+            for (_i467 = 0; _i467 < _size463; ++_i467)
             {
-              xfer += (*(this->success))[_i472].read(iprot);
+              xfer += (*(this->success))[_i467].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -2850,14 +2850,14 @@ uint32_t ThriftHiveMetastore_get_fields_with_environment_context_result::read(::
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size473;
-            ::apache::thrift::protocol::TType _etype476;
-            xfer += iprot->readListBegin(_etype476, _size473);
-            this->success.resize(_size473);
-            uint32_t _i477;
-            for (_i477 = 0; _i477 < _size473; ++_i477)
+            uint32_t _size468;
+            ::apache::thrift::protocol::TType _etype471;
+            xfer += iprot->readListBegin(_etype471, _size468);
+            this->success.resize(_size468);
+            uint32_t _i472;
+            for (_i472 = 0; _i472 < _size468; ++_i472)
             {
-              xfer += this->success[_i477].read(iprot);
+              xfer += this->success[_i472].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -2912,10 +2912,10 @@ uint32_t ThriftHiveMetastore_get_fields_with_environment_context_result::write(:
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<FieldSchema> ::const_iterator _iter478;
-      for (_iter478 = this->success.begin(); _iter478 != this->success.end(); ++_iter478)
+      std::vector<FieldSchema> ::const_iterator _iter473;
+      for (_iter473 = this->success.begin(); _iter473 != this->success.end(); ++_iter473)
       {
-        xfer += (*_iter478).write(oprot);
+        xfer += (*_iter473).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -2962,14 +2962,14 @@ uint32_t ThriftHiveMetastore_get_fields_with_environment_context_presult::read(:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size479;
-            ::apache::thrift::protocol::TType _etype482;
-            xfer += iprot->readListBegin(_etype482, _size479);
-            (*(this->success)).resize(_size479);
-            uint32_t _i483;
-            for (_i483 = 0; _i483 < _size479; ++_i483)
+            uint32_t _size474;
+            ::apache::thrift::protocol::TType _etype477;
+            xfer += iprot->readListBegin(_etype477, _size474);
+            (*(this->success)).resize(_size474);
+            uint32_t _i478;
+            for (_i478 = 0; _i478 < _size474; ++_i478)
             {
-              xfer += (*(this->success))[_i483].read(iprot);
+              xfer += (*(this->success))[_i478].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -3120,14 +3120,14 @@ uint32_t ThriftHiveMetastore_get_schema_result::read(::apache::thrift::protocol:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size484;
-            ::apache::thrift::protocol::TType _etype487;
-            xfer += iprot->readListBegin(_etype487, _size484);
-            this->success.resize(_size484);
-            uint32_t _i488;
-            for (_i488 = 0; _i488 < _size484; ++_i488)
+            uint32_t _size479;
+            ::apache::thrift::protocol::TType _etype482;
+            xfer += iprot->readListBegin(_etype482, _size479);
+            this->success.resize(_size479);
+            uint32_t _i483;
+            for (_i483 = 0; _i483 < _size479; ++_i483)
             {
-              xfer += this->success[_i488].read(iprot);
+              xfer += this->success[_i483].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -3182,10 +3182,10 @@ uint32_t ThriftHiveMetastore_get_schema_result::write(::apache::thrift::protocol
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<FieldSchema> ::const_iterator _iter489;
-      for (_iter489 = this->success.begin(); _iter489 != this->success.end(); ++_iter489)
+      std::vector<FieldSchema> ::const_iterator _iter484;
+      for (_iter484 = this->success.begin(); _iter484 != this->success.end(); ++_iter484)
       {
-        xfer += (*_iter489).write(oprot);
+        xfer += (*_iter484).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -3232,14 +3232,14 @@ uint32_t ThriftHiveMetastore_get_schema_presult::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size490;
-            ::apache::thrift::protocol::TType _etype493;
-            xfer += iprot->readListBegin(_etype493, _size490);
-            (*(this->success)).resize(_size490);
-            uint32_t _i494;
-            for (_i494 = 0; _i494 < _size490; ++_i494)
+            uint32_t _size485;
+            ::apache::thrift::protocol::TType _etype488;
+            xfer += iprot->readListBegin(_etype488, _size485);
+            (*(this->success)).resize(_size485);
+            uint32_t _i489;
+            for (_i489 = 0; _i489 < _size485; ++_i489)
             {
-              xfer += (*(this->success))[_i494].read(iprot);
+              xfer += (*(this->success))[_i489].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -3406,14 +3406,14 @@ uint32_t ThriftHiveMetastore_get_schema_with_environment_context_result::read(::
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size495;
-            ::apache::thrift::protocol::TType _etype498;
-            xfer += iprot->readListBegin(_etype498, _size495);
-            this->success.resize(_size495);
-            uint32_t _i499;
-            for (_i499 = 0; _i499 < _size495; ++_i499)
+            uint32_t _size490;
+            ::apache::thrift::protocol::TType _etype493;
+            xfer += iprot->readListBegin(_etype493, _size490);
+            this->success.resize(_size490);
+            uint32_t _i494;
+            for (_i494 = 0; _i494 < _size490; ++_i494)
             {
-              xfer += this->success[_i499].read(iprot);
+              xfer += this->success[_i494].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -3468,10 +3468,10 @@ uint32_t ThriftHiveMetastore_get_schema_with_environment_context_result::write(:
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<FieldSchema> ::const_iterator _iter500;
-      for (_iter500 = this->success.begin(); _iter500 != this->success.end(); ++_iter500)
+      std::vector<FieldSchema> ::const_iterator _iter495;
+      for (_iter495 = this->success.begin(); _iter495 != this->success.end(); ++_iter495)
       {
-        xfer += (*_iter500).write(oprot);
+        xfer += (*_iter495).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -3518,14 +3518,14 @@ uint32_t ThriftHiveMetastore_get_schema_with_environment_context_presult::read(:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size501;
-            ::apache::thrift::protocol::TType _etype504;
-            xfer += iprot->readListBegin(_etype504, _size501);
-            (*(this->success)).resize(_size501);
-            uint32_t _i505;
-            for (_i505 = 0; _i505 < _size501; ++_i505)
+            uint32_t _size496;
+            ::apache::thrift::protocol::TType _etype499;
+            xfer += iprot->readListBegin(_etype499, _size496);
+            (*(this->success)).resize(_size496);
+            uint32_t _i500;
+            for (_i500 = 0; _i500 < _size496; ++_i500)
             {
-              xfer += (*(this->success))[_i505].read(iprot);
+              xfer += (*(this->success))[_i500].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -4580,14 +4580,14 @@ uint32_t ThriftHiveMetastore_get_tables_result::read(::apache::thrift::protocol:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size506;
-            ::apache::thrift::protocol::TType _etype509;
-            xfer += iprot->readListBegin(_etype509, _size506);
-            this->success.resize(_size506);
-            uint32_t _i510;
-            for (_i510 = 0; _i510 < _size506; ++_i510)
+            uint32_t _size501;
+            ::apache::thrift::protocol::TType _etype504;
+            xfer += iprot->readListBegin(_etype504, _size501);
+            this->success.resize(_size501);
+            uint32_t _i505;
+            for (_i505 = 0; _i505 < _size501; ++_i505)
             {
-              xfer += iprot->readString(this->success[_i510]);
+              xfer += iprot->readString(this->success[_i505]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4626,10 +4626,10 @@ uint32_t ThriftHiveMetastore_get_tables_result::write(::apache::thrift::protocol
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter511;
-      for (_iter511 = this->success.begin(); _iter511 != this->success.end(); ++_iter511)
+      std::vector<std::string> ::const_iterator _iter506;
+      for (_iter506 = this->success.begin(); _iter506 != this->success.end(); ++_iter506)
       {
-        xfer += oprot->writeString((*_iter511));
+        xfer += oprot->writeString((*_iter506));
       }
       xfer += oprot->writeListEnd();
     }
@@ -4668,14 +4668,14 @@ uint32_t ThriftHiveMetastore_get_tables_presult::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size512;
-            ::apache::thrift::protocol::TType _etype515;
-            xfer += iprot->readListBegin(_etype515, _size512);
-            (*(this->success)).resize(_size512);
-            uint32_t _i516;
-            for (_i516 = 0; _i516 < _size512; ++_i516)
+            uint32_t _size507;
+            ::apache::thrift::protocol::TType _etype510;
+            xfer += iprot->readListBegin(_etype510, _size507);
+            (*(this->success)).resize(_size507);
+            uint32_t _i511;
+            for (_i511 = 0; _i511 < _size507; ++_i511)
             {
-              xfer += iprot->readString((*(this->success))[_i516]);
+              xfer += iprot->readString((*(this->success))[_i511]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4744,14 +4744,14 @@ uint32_t ThriftHiveMetastore_get_table_meta_args::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->tbl_types.clear();
-            uint32_t _size517;
-            ::apache::thrift::protocol::TType _etype520;
-            xfer += iprot->readListBegin(_etype520, _size517);
-            this->tbl_types.resize(_size517);
-            uint32_t _i521;
-            for (_i521 = 0; _i521 < _size517; ++_i521)
+            uint32_t _size512;
+            ::apache::thrift::protocol::TType _etype515;
+            xfer += iprot->readListBegin(_etype515, _size512);
+            this->tbl_types.resize(_size512);
+            uint32_t _i516;
+            for (_i516 = 0; _i516 < _size512; ++_i516)
             {
-              xfer += iprot->readString(this->tbl_types[_i521]);
+              xfer += iprot->readString(this->tbl_types[_i516]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4787,10 +4787,10 @@ uint32_t ThriftHiveMetastore_get_table_meta_args::write(::apache::thrift::protoc
   xfer += oprot->writeFieldBegin("tbl_types", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tbl_types.size()));
-    std::vector<std::string> ::const_iterator _iter522;
-    for (_iter522 = this->tbl_types.begin(); _iter522 != this->tbl_types.end(); ++_iter522)
+    std::vector<std::string> ::const_iterator _iter517;
+    for (_iter517 = this->tbl_types.begin(); _iter517 != this->tbl_types.end(); ++_iter517)
     {
-      xfer += oprot->writeString((*_iter522));
+      xfer += oprot->writeString((*_iter517));
     }
     xfer += oprot->writeListEnd();
   }
@@ -4816,10 +4816,10 @@ uint32_t ThriftHiveMetastore_get_table_meta_pargs::write(::apache::thrift::proto
   xfer += oprot->writeFieldBegin("tbl_types", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->tbl_types)).size()));
-    std::vector<std::string> ::const_iterator _iter523;
-    for (_iter523 = (*(this->tbl_types)).begin(); _iter523 != (*(this->tbl_types)).end(); ++_iter523)
+    std::vector<std::string> ::const_iterator _iter518;
+    for (_iter518 = (*(this->tbl_types)).begin(); _iter518 != (*(this->tbl_types)).end(); ++_iter518)
     {
-      xfer += oprot->writeString((*_iter523));
+      xfer += oprot->writeString((*_iter518));
     }
     xfer += oprot->writeListEnd();
   }
@@ -4854,14 +4854,14 @@ uint32_t ThriftHiveMetastore_get_table_meta_result::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size524;
-            ::apache::thrift::protocol::TType _etype527;
-            xfer += iprot->readListBegin(_etype527, _size524);
-            this->success.resize(_size524);
-            uint32_t _i528;
-            for (_i528 = 0; _i528 < _size524; ++_i528)
+            uint32_t _size519;
+            ::apache::thrift::protocol::TType _etype522;
+            xfer += iprot->readListBegin(_etype522, _size519);
+            this->success.resize(_size519);
+            uint32_t _i523;
+            for (_i523 = 0; _i523 < _size519; ++_i523)
             {
-              xfer += this->success[_i528].read(iprot);
+              xfer += this->success[_i523].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -4900,10 +4900,10 @@ uint32_t ThriftHiveMetastore_get_table_meta_result::write(::apache::thrift::prot
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<TableMeta> ::const_iterator _iter529;
-      for (_iter529 = this->success.begin(); _iter529 != this->success.end(); ++_iter529)
+      std::vector<TableMeta> ::const_iterator _iter524;
+      for (_iter524 = this->success.begin(); _iter524 != this->success.end(); ++_iter524)
       {
-        xfer += (*_iter529).write(oprot);
+        xfer += (*_iter524).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -4942,14 +4942,14 @@ uint32_t ThriftHiveMetastore_get_table_meta_presult::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size530;
-            ::apache::thrift::protocol::TType _etype533;
-            xfer += iprot->readListBegin(_etype533, _size530);
-            (*(this->success)).resize(_size530);
-            uint32_t _i534;
-            for (_i534 = 0; _i534 < _size530; ++_i534)
+            uint32_t _size525;
+            ::apache::thrift::protocol::TType _etype528;
+            xfer += iprot->readListBegin(_etype528, _size525);
+            (*(this->success)).resize(_size525);
+            uint32_t _i529;
+            for (_i529 = 0; _i529 < _size525; ++_i529)
             {
-              xfer += (*(this->success))[_i534].read(iprot);
+              xfer += (*(this->success))[_i529].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -5068,14 +5068,14 @@ uint32_t ThriftHiveMetastore_get_all_tables_result::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size535;
-            ::apache::thrift::protocol::TType _etype538;
-            xfer += iprot->readListBegin(_etype538, _size535);
-            this->success.resize(_size535);
-            uint32_t _i539;
-            for (_i539 = 0; _i539 < _size535; ++_i539)
+            uint32_t _size530;
+            ::apache::thrift::protocol::TType _etype533;
+            xfer += iprot->readListBegin(_etype533, _size530);
+            this->success.resize(_size530);
+            uint32_t _i534;
+            for (_i534 = 0; _i534 < _size530; ++_i534)
             {
-              xfer += iprot->readString(this->success[_i539]);
+              xfer += iprot->readString(this->success[_i534]);
             }
             xfer += iprot->readListEnd();
           }
@@ -5114,10 +5114,10 @@ uint32_t ThriftHiveMetastore_get_all_tables_result::write(::apache::thrift::prot
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter540;
-      for (_iter540 = this->success.begin(); _iter540 != this->success.end(); ++_iter540)
+      std::vector<std::string> ::const_iterator _iter535;
+      for (_iter535 = this->success.begin(); _iter535 != this->success.end(); ++_iter535)
       {
-        xfer += oprot->writeString((*_iter540));
+        xfer += oprot->writeString((*_iter535));
       }
       xfer += oprot->writeListEnd();
     }
@@ -5156,14 +5156,14 @@ uint32_t ThriftHiveMetastore_get_all_tables_presult::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size541;
-            ::apache::thrift::protocol::TType _etype544;
-            xfer += iprot->readListBegin(_etype544, _size541);
-            (*(this->success)).resize(_size541);
-            uint32_t _i545;
-            for (_i545 = 0; _i545 < _size541; ++_i545)
+            uint32_t _size536;
+            ::apache::thrift::protocol::TType _etype539;
+            xfer += iprot->readListBegin(_etype539, _size536);
+            (*(this->success)).resize(_size536);
+            uint32_t _i540;
+            for (_i540 = 0; _i540 < _size536; ++_i540)
             {
-              xfer += iprot->readString((*(this->success))[_i545]);
+              xfer += iprot->readString((*(this->success))[_i540]);
             }
             xfer += iprot->readListEnd();
           }
@@ -5442,14 +5442,14 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_args::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->tbl_names.clear();
-            uint32_t _size546;
-            ::apache::thrift::protocol::TType _etype549;
-            xfer += iprot->readListBegin(_etype549, _size546);
-            this->tbl_names.resize(_size546);
-            uint32_t _i550;
-            for (_i550 = 0; _i550 < _size546; ++_i550)
+            uint32_t _size541;
+            ::apache::thrift::protocol::TType _etype544;
+            xfer += iprot->readListBegin(_etype544, _size541);
+            this->tbl_names.resize(_size541);
+            uint32_t _i545;
+            for (_i545 = 0; _i545 < _size541; ++_i545)
             {
-              xfer += iprot->readString(this->tbl_names[_i550]);
+              xfer += iprot->readString(this->tbl_names[_i545]);
             }
             xfer += iprot->readListEnd();
           }
@@ -5481,10 +5481,10 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_args::write(::apache::thr
   xfer += oprot->writeFieldBegin("tbl_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tbl_names.size()));
-    std::vector<std::string> ::const_iterator _iter551;
-    for (_iter551 = this->tbl_names.begin(); _iter551 != this->tbl_names.end(); ++_iter551)
+    std::vector<std::string> ::const_iterator _iter546;
+    for (_iter546 = this->tbl_names.begin(); _iter546 != this->tbl_names.end(); ++_iter546)
     {
-      xfer += oprot->writeString((*_iter551));
+      xfer += oprot->writeString((*_iter546));
     }
     xfer += oprot->writeListEnd();
   }
@@ -5506,10 +5506,10 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_pargs::write(::apache::th
   xfer += oprot->writeFieldBegin("tbl_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->tbl_names)).size()));
-    std::vector<std::string> ::const_iterator _iter552;
-    for (_iter552 = (*(this->tbl_names)).begin(); _iter552 != (*(this->tbl_names)).end(); ++_iter552)
+    std::vector<std::string> ::const_iterator _iter547;
+    for (_iter547 = (*(this->tbl_names)).begin(); _iter547 != (*(this->tbl_names)).end(); ++_iter547)
     {
-      xfer += oprot->writeString((*_iter552));
+      xfer += oprot->writeString((*_iter547));
     }
     xfer += oprot->writeListEnd();
   }
@@ -5544,14 +5544,14 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_result::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size553;
-            ::apache::thrift::protocol::TType _etype556;
-            xfer += iprot->readListBegin(_etype556, _size553);
-            this->success.resize(_size553);
-            uint32_t _i557;
-            for (_i557 = 0; _i557 < _size553; ++_i557)
+            uint32_t _size548;
+            ::apache::thrift::protocol::TType _etype551;
+            xfer += iprot->readListBegin(_etype551, _size548);
+            this->success.resize(_size548);
+            uint32_t _i552;
+            for (_i552 = 0; _i552 < _size548; ++_i552)
             {
-              xfer += this->success[_i557].read(iprot);
+              xfer += this->success[_i552].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -5606,10 +5606,10 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_result::write(::apache::t
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Table> ::const_iterator _iter558;
-      for (_iter558 = this->success.begin(); _iter558 != this->success.end(); ++_iter558)
+      std::vector<Table> ::const_iterator _iter553;
+      for (_iter553 = this->success.begin(); _iter553 != this->success.end(); ++_iter553)
       {
-        xfer += (*_iter558).write(oprot);
+        xfer += (*_iter553).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -5656,14 +5656,14 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_presult::read(::apache::t
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size559;
-            ::apache::thrift::protocol::TType _etype562;
-            xfer += iprot->readListBegin(_etype562, _size559);
-            (*(this->success)).resize(_size559);
-            uint32_t _i563;
-            for (_i563 = 0; _i563 < _size559; ++_i563)
+            uint32_t _size554;
+            ::apache::thrift::protocol::TType _etype557;
+            xfer += iprot->readListBegin(_etype557, _size554);
+            (*(this->success)).resize(_size554);
+            uint32_t _i558;
+            for (_i558 = 0; _i558 < _size554; ++_i558)
             {
-              xfer += (*(this->success))[_i563].read(iprot);
+              xfer += (*(this->success))[_i558].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -5830,14 +5830,14 @@ uint32_t ThriftHiveMetastore_get_table_names_by_filter_result::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size564;
-            ::apache::thrift::protocol::TType _etype567;
-            xfer += iprot->readListBegin(_etype567, _size564);
-            this->success.resize(_size564);
-            uint32_t _i568;
-            for (_i568 = 0; _i568 < _size564; ++_i568)
+            uint32_t _size559;
+            ::apache::thrift::protocol::TType _etype562;
+            xfer += iprot->readListBegin(_etype562, _size559);
+            this->success.resize(_size559);
+            uint32_t _i563;
+            for (_i563 = 0; _i563 < _size559; ++_i563)
             {
-              xfer += iprot->readString(this->success[_i568]);
+              xfer += iprot->readString(this->success[_i563]);
             }
             xfer += iprot->readListEnd();
           }
@@ -5892,10 +5892,10 @@ uint32_t ThriftHiveMetastore_get_table_names_by_filter_result::write(::apache::t
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter569;
-      for (_iter569 = this->success.begin(); _iter569 != this->success.end(); ++_iter569)
+      std::vector<std::string> ::const_iterator _iter564;
+      for (_iter564 = this->success.begin(); _iter564 != this->success.end(); ++_iter564)
       {
-        xfer += oprot->writeString((*_iter569));
+        xfer += oprot->writeString((*_iter564));
       }
       xfer += oprot->writeListEnd();
     }
@@ -5942,14 +5942,14 @@ uint32_t ThriftHiveMetastore_get_table_names_by_filter_presult::read(::apache::t
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size570;
-            ::apache::thrift::protocol::TType _etype573;
-            xfer += iprot->readListBegin(_etype573, _size570);
-            (*(this->success)).resize(_size570);
-            uint32_t _i574;
-            for (_i574 = 0; _i574 < _size570; ++_i574)
+            uint32_t _size565;
+            ::apache::thrift::protocol::TType _etype568;
+            xfer += iprot->readListBegin(_etype568, _size565);
+            (*(this->success)).resize(_size565);
+            uint32_t _i569;
+            for (_i569 = 0; _i569 < _size565; ++_i569)
             {
-              xfer += iprot->readString((*(this->success))[_i574]);
+              xfer += iprot->readString((*(this->success))[_i569]);
             }
             xfer += iprot->readListEnd();
           }
@@ -7152,14 +7152,14 @@ uint32_t ThriftHiveMetastore_add_partitions_args::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->new_parts.clear();
-            uint32_t _size575;
-            ::apache::thrift::protocol::TType _etype578;
-            xfer += iprot->readListBegin(_etype578, _size575);
-            this->new_parts.resize(_size575);
-            uint32_t _i579;
-            for (_i579 = 0; _i579 < _size575; ++_i579)
+            uint32_t _size570;
+            ::apache::thrift::protocol::TType _etype573;
+            xfer += iprot->readListBegin(_etype573, _size570);
+            this->new_parts.resize(_size570);
+            uint32_t _i574;
+            for (_i574 = 0; _i574 < _size570; ++_i574)
             {
-              xfer += this->new_parts[_i579].read(iprot);
+              xfer += this->new_parts[_i574].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -7187,10 +7187,10 @@ uint32_t ThriftHiveMetastore_add_partitions_args::write(::apache::thrift::protoc
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->new_parts.size()));
-    std::vector<Partition> ::const_iterator _iter580;
-    for (_iter580 = this->new_parts.begin(); _iter580 != this->new_parts.end(); ++_iter580)
+    std::vector<Partition> ::const_iterator _iter575;
+    for (_iter575 = this->new_parts.begin(); _iter575 != this->new_parts.end(); ++_iter575)
     {
-      xfer += (*_iter580).write(oprot);
+      xfer += (*_iter575).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -7208,10 +7208,10 @@ uint32_t ThriftHiveMetastore_add_partitions_pargs::write(::apache::thrift::proto
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->new_parts)).size()));
-    std::vector<Partition> ::const_iterator _iter581;
-    for (_iter581 = (*(this->new_parts)).begin(); _iter581 != (*(this->new_parts)).end(); ++_iter581)
+    std::vector<Partition> ::const_iterator _iter576;
+    for (_iter576 = (*(this->new_parts)).begin(); _iter576 != (*(this->new_parts)).end(); ++_iter576)
     {
-      xfer += (*_iter581).write(oprot);
+      xfer += (*_iter576).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -7402,14 +7402,14 @@ uint32_t ThriftHiveMetastore_add_partitions_pspec_args::read(::apache::thrift::p
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->new_parts.clear();
-            uint32_t _size582;
-            ::apache::thrift::protocol::TType _etype585;
-            xfer += iprot->readListBegin(_etype585, _size582);
-            this->new_parts.resize(_size582);
-            uint32_t _i586;
-            for (_i586 = 0; _i586 < _size582; ++_i586)
+            uint32_t _size577;
+            ::apache::thrift::protocol::TType _etype580;
+            xfer += iprot->readListBegin(_etype580, _size577);
+            this->new_parts.resize(_size577);
+            uint32_t _i581;
+            for (_i581 = 0; _i581 < _size577; ++_i581)
             {
-              xfer += this->new_parts[_i586].read(iprot);
+              xfer += this->new_parts[_i581].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -7437,10 +7437,10 @@ uint32_t ThriftHiveMetastore_add_partitions_pspec_args::write(::apache::thrift::
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->new_parts.size()));
-    std::vector<PartitionSpec> ::const_iterator _iter587;
-    for (_iter587 = this->new_parts.begin(); _iter587 != this->new_parts.end(); ++_iter587)
+    std::vector<PartitionSpec> ::const_iterator _iter582;
+    for (_iter582 = this->new_parts.begin(); _iter582 != this->new_parts.end(); ++_iter582)
     {
-      xfer += (*_iter587).write(oprot);
+      xfer += (*_iter582).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -7458,10 +7458,10 @@ uint32_t ThriftHiveMetastore_add_partitions_pspec_pargs::write(::apache::thrift:
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->new_parts)).size()));
-    std::vector<PartitionSpec> ::const_iterator _iter588;
-    for (_iter588 = (*(this->new_parts)).begin(); _iter588 != (*(this->new_parts)).end(); ++_iter588)
+    std::vector<PartitionSpec> ::const_iterator _iter583;
+    for (_iter583 = (*(this->new_parts)).begin(); _iter583 != (*(this->new_parts)).end(); ++_iter583)
     {
-      xfer += (*_iter588).write(oprot);
+      xfer += (*_iter583).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -7668,14 +7668,14 @@ uint32_t ThriftHiveMetastore_append_partition_args::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size589;
-            ::apache::thrift::protocol::TType _etype592;
-            xfer += iprot->readListBegin(_etype592, _size589);
-            this->part_vals.resize(_size589);
-            uint32_t _i593;
-            for (_i593 = 0; _i593 < _size589; ++_i593)
+            uint32_t _size584;
+            ::apache::thrift::protocol::TType _etype587;
+            xfer += iprot->readListBegin(_etype587, _size584);
+            this->part_vals.resize(_size584);
+            uint32_t _i588;
+            for (_i588 = 0; _i588 < _size584; ++_i588)
             {
-              xfer += iprot->readString(this->part_vals[_i593]);
+              xfer += iprot->readString(this->part_vals[_i588]);
             }
             xfer += iprot->readListEnd();
           }
@@ -7711,10 +7711,10 @@ uint32_t ThriftHiveMetastore_append_partition_args::write(::apache::thrift::prot
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter594;
-    for (_iter594 = this->part_vals.begin(); _iter594 != this->part_vals.end(); ++_iter594)
+    std::vector<std::string> ::const_iterator _iter589;
+    for (_iter589 = this->part_vals.begin(); _iter589 != this->part_vals.end(); ++_iter589)
     {
-      xfer += oprot->writeString((*_iter594));
+      xfer += oprot->writeString((*_iter589));
     }
     xfer += oprot->writeListEnd();
   }
@@ -7740,10 +7740,10 @@ uint32_t ThriftHiveMetastore_append_partition_pargs::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter595;
-    for (_iter595 = (*(this->part_vals)).begin(); _iter595 != (*(this->part_vals)).end(); ++_iter595)
+    std::vector<std::string> ::const_iterator _iter590;
+    for (_iter590 = (*(this->part_vals)).begin(); _iter590 != (*(this->part_vals)).end(); ++_iter590)
     {
-      xfer += oprot->writeString((*_iter595));
+      xfer += oprot->writeString((*_iter590));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8172,14 +8172,14 @@ uint32_t ThriftHiveMetastore_append_partition_with_environment_context_args::rea
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size596;
-            ::apache::thrift::protocol::TType _etype599;
-            xfer += iprot->readListBegin(_etype599, _size596);
-            this->part_vals.resize(_size596);
-            uint32_t _i600;
-            for (_i600 = 0; _i600 < _size596; ++_i600)
+            uint32_t _size591;
+            ::apache::thrift::protocol::TType _etype594;
+            xfer += iprot->readListBegin(_etype594, _size591);
+            this->part_vals.resize(_size591);
+            uint32_t _i595;
+            for (_i595 = 0; _i595 < _size591; ++_i595)
             {
-              xfer += iprot->readString(this->part_vals[_i600]);
+              xfer += iprot->readString(this->part_vals[_i595]);
             }
             xfer += iprot->readListEnd();
           }
@@ -8223,10 +8223,10 @@ uint32_t ThriftHiveMetastore_append_partition_with_environment_context_args::wri
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter601;
-    for (_iter601 = this->part_vals.begin(); _iter601 != this->part_vals.end(); ++_iter601)
+    std::vector<std::string> ::const_iterator _iter596;
+    for (_iter596 = this->part_vals.begin(); _iter596 != this->part_vals.end(); ++_iter596)
     {
-      xfer += oprot->writeString((*_iter601));
+      xfer += oprot->writeString((*_iter596));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8256,10 +8256,10 @@ uint32_t ThriftHiveMetastore_append_partition_with_environment_context_pargs::wr
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter602;
-    for (_iter602 = (*(this->part_vals)).begin(); _iter602 != (*(this->part_vals)).end(); ++_iter602)
+    std::vector<std::string> ::const_iterator _iter597;
+    for (_iter597 = (*(this->part_vals)).begin(); _iter597 != (*(this->part_vals)).end(); ++_iter597)
     {
-      xfer += oprot->writeString((*_iter602));
+      xfer += oprot->writeString((*_iter597));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8994,14 +8994,14 @@ uint32_t ThriftHiveMetastore_drop_partition_args::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size603;
-            ::apache::thrift::protocol::TType _etype606;
-            xfer += iprot->readListBegin(_etype606, _size603);
-            this->part_vals.resize(_size603);
-            uint32_t _i607;
-            for (_i607 = 0; _i607 < _size603; ++_i607)
+            uint32_t _size598;
+            ::apache::thrift::protocol::TType _etype601;
+            xfer += iprot->readListBegin(_etype601, _size598);
+            this->part_vals.resize(_size598);
+            uint32_t _i602;
+            for (_i602 = 0; _i602 < _size598; ++_i602)
             {
-              xfer += iprot->readString(this->part_vals[_i607]);
+              xfer += iprot->readString(this->part_vals[_i602]);
             }
             xfer += iprot->readListEnd();
           }
@@ -9045,10 +9045,10 @@ uint32_t ThriftHiveMetastore_drop_partition_args::write(::apache::thrift::protoc
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter608;
-    for (_iter608 = this->part_vals.begin(); _iter608 != this->part_vals.end(); ++_iter608)
+    std::vector<std::string> ::const_iterator _iter603;
+    for (_iter603 = this->part_vals.begin(); _iter603 != this->part_vals.end(); ++_iter603)
     {
-      xfer += oprot->writeString((*_iter608));
+      xfer += oprot->writeString((*_iter603));
     }
     xfer += oprot->writeListEnd();
   }
@@ -9078,10 +9078,10 @@ uint32_t ThriftHiveMetastore_drop_partition_pargs::write(::apache::thrift::proto
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter609;
-    for (_iter609 = (*(this->part_vals)).begin(); _iter609 != (*(this->part_vals)).end(); ++_iter609)
+    std::vector<std::string> ::const_iterator _iter604;
+    for (_iter604 = (*(this->part_vals)).begin(); _iter604 != (*(this->part_vals)).end(); ++_iter604)
     {
-      xfer += oprot->writeString((*_iter609));
+      xfer += oprot->writeString((*_iter604));
     }
     xfer += oprot->writeListEnd();
   }
@@ -9272,14 +9272,14 @@ uint32_t ThriftHiveMetastore_drop_partition_with_environment_context_args::read(
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size610;
-            ::apache::thrift::protocol::TType _etype613;
-            xfer += iprot->readListBegin(_etype613, _size610);
-            this->part_vals.resize(_size610);
-            uint32_t _i614;
-            for (_i614 = 0; _i614 < _size610; ++_i614)
+            uint32_t _size605;
+            ::apache::thrift::protocol::TType _etype608;
+            xfer += iprot->readListBegin(_etype608, _size605);
+            this->part_vals.resize(_size605);
+            uint32_t _i609;
+            for (_i609 = 0; _i609 < _size605; ++_i609)
             {
-              xfer += iprot->readString(this->part_vals[_i614]);
+              xfer += iprot->readString(this->part_vals[_i609]);
             }
             xfer += iprot->readListEnd();
           }
@@ -9331,10 +9331,10 @@ uint32_t ThriftHiveMetastore_drop_partition_with_environment_context_args::write
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter615;
-    for (_iter615 = this->part_vals.begin(); _iter615 != this->part_vals.end(); ++_iter615)
+    std::vector<std::string> ::const_iterator _iter610;
+    for (_iter610 = this->part_vals.begin(); _iter610 != this->part_vals.end(); ++_iter610)
     {
-      xfer += oprot->writeString((*_iter615));
+      xfer += oprot->writeString((*_iter610));
     }
     xfer += oprot->writeListEnd();
   }
@@ -9368,10 +9368,10 @@ uint32_t ThriftHiveMetastore_drop_partition_with_environment_context_pargs::writ
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter616;
-    for (_iter616 = (*(this->part_vals)).begin(); _iter616 != (*(this->part_vals)).end(); ++_iter616)
+    std::vector<std::string> ::const_iterator _iter611;
+    for (_iter611 = (*(this->part_vals)).begin(); _iter611 != (*(this->part_vals)).end(); ++_iter611)
     {
-      xfer += oprot->writeString((*_iter616));
+      xfer += oprot->writeString((*_iter611));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10284,14 +10284,14 @@ uint32_t ThriftHiveMetastore_get_partition_args::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size617;
-            ::apache::thrift::protocol::TType _etype620;
-            xfer += iprot->readListBegin(_etype620, _size617);
-            this->part_vals.resize(_size617);
-            uint32_t _i621;
-            for (_i621 = 0; _i621 < _size617; ++_i621)
+            uint32_t _size612;
+            ::apache::thrift::protocol::TType _etype615;
+            xfer += iprot->readListBegin(_etype615, _size612);
+            this->part_vals.resize(_size612);
+            uint32_t _i616;
+            for (_i616 = 0; _i616 < _size612; ++_i616)
             {
-              xfer += iprot->readString(this->part_vals[_i621]);
+              xfer += iprot->readString(this->part_vals[_i616]);
             }
             xfer += iprot->readListEnd();
           }
@@ -10327,10 +10327,10 @@ uint32_t ThriftHiveMetastore_get_partition_args::write(::apache::thrift::protoco
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter622;
-    for (_iter622 = this->part_vals.begin(); _iter622 != this->part_vals.end(); ++_iter622)
+    std::vector<std::string> ::const_iterator _iter617;
+    for (_iter617 = this->part_vals.begin(); _iter617 != this->part_vals.end(); ++_iter617)
     {
-      xfer += oprot->writeString((*_iter622));
+      xfer += oprot->writeString((*_iter617));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10356,10 +10356,10 @@ uint32_t ThriftHiveMetastore_get_partition_pargs::write(::apache::thrift::protoc
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter623;
-    for (_iter623 = (*(this->part_vals)).begin(); _iter623 != (*(this->part_vals)).end(); ++_iter623)
+    std::vector<std::string> ::const_iterator _iter618;
+    for (_iter618 = (*(this->part_vals)).begin(); _iter618 != (*(this->part_vals)).end(); ++_iter618)
     {
-      xfer += oprot->writeString((*_iter623));
+      xfer += oprot->writeString((*_iter618));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10530,17 +10530,17 @@ uint32_t ThriftHiveMetastore_exchange_partition_args::read(::apache::thrift::pro
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->partitionSpecs.clear();
-            uint32_t _size624;
-            ::apache::thrift::protocol::TType _ktype625;
-            ::apache::thrift::protocol::TType _vtype626;
-            xfer += iprot->readMapBegin(_ktype625, _vtype626, _size624);
-            uint32_t _i628;
-            for (_i628 = 0; _i628 < _size624; ++_i628)
+            uint32_t _size619;
+            ::apache::thrift::protocol::TType _ktype620;
+            ::apache::thrift::protocol::TType _vtype621;
+            xfer += iprot->readMapBegin(_ktype620, _vtype621, _size619);
+            uint32_t _i623;
+            for (_i623 = 0; _i623 < _size619; ++_i623)
             {
-              std::string _key629;
-              xfer += iprot->readString(_key629);
-              std::string& _val630 = this->partitionSpecs[_key629];
-              xfer += iprot->readString(_val630);
+              std::string _key624;
+              xfer += iprot->readString(_key624);
+              std::string& _val625 = this->partitionSpecs[_key624];
+              xfer += iprot->readString(_val625);
             }
             xfer += iprot->readMapEnd();
           }
@@ -10600,11 +10600,11 @@ uint32_t ThriftHiveMetastore_exchange_partition_args::write(::apache::thrift::pr
   xfer += oprot->writeFieldBegin("partitionSpecs", ::apache::thrift::protocol::T_MAP, 1);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partitionSpecs.size()));
-    std::map<std::string, std::string> ::const_iterator _iter631;
-    for (_iter631 = this->partitionSpecs.begin(); _iter631 != this->partitionSpecs.end(); ++_iter631)
+    std::map<std::string, std::string> ::const_iterator _iter626;
+    for (_iter626 = this->partitionSpecs.begin(); _iter626 != this->partitionSpecs.end(); ++_iter626)
     {
-      xfer += oprot->writeString(_iter631->first);
-      xfer += oprot->writeString(_iter631->second);
+      xfer += oprot->writeString(_iter626->first);
+      xfer += oprot->writeString(_iter626->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -10638,11 +10638,11 @@ uint32_t ThriftHiveMetastore_exchange_partition_pargs::write(::apache::thrift::p
   xfer += oprot->writeFieldBegin("partitionSpecs", ::apache::thrift::protocol::T_MAP, 1);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->partitionSpecs)).size()));
-    std::map<std::string, std::string> ::const_iterator _iter632;
-    for (_iter632 = (*(this->partitionSpecs)).begin(); _iter632 != (*(this->partitionSpecs)).end(); ++_iter632)
+    std::map<std::string, std::string> ::const_iterator _iter627;
+    for (_iter627 = (*(this->partitionSpecs)).begin(); _iter627 != (*(this->partitionSpecs)).end(); ++_iter627)
     {
-      xfer += oprot->writeString(_iter632->first);
-      xfer += oprot->writeString(_iter632->second);
+      xfer += oprot->writeString(_iter627->first);
+      xfer += oprot->writeString(_iter627->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -10885,14 +10885,14 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size633;
-            ::apache::thrift::protocol::TType _etype636;
-            xfer += iprot->readListBegin(_etype636, _size633);
-            this->part_vals.resize(_size633);
-            uint32_t _i637;
-            for (_i637 = 0; _i637 < _size633; ++_i637)
+            uint32_t _size628;
+            ::apache::thrift::protocol::TType _etype631;
+            xfer += iprot->readListBegin(_etype631, _size628);
+            this->part_vals.resize(_size628);
+            uint32_t _i632;
+            for (_i632 = 0; _i632 < _size628; ++_i632)
             {
-              xfer += iprot->readString(this->part_vals[_i637]);
+              xfer += iprot->readString(this->part_vals[_i632]);
             }
             xfer += iprot->readListEnd();
           }
@@ -10913,14 +10913,14 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size638;
-            ::apache::thrift::protocol::TType _etype641;
-            xfer += iprot->readListBegin(_etype641, _size638);
-            this->group_names.resize(_size638);
-            uint32_t _i642;
-            for (_i642 = 0; _i642 < _size638; ++_i642)
+            uint32_t _size633;
+            ::apache::thrift::protocol::TType _etype636;
+            xfer += iprot->readListBegin(_etype636, _size633);
+            this->group_names.resize(_size633);
+            uint32_t _i637;
+            for (_i637 = 0; _i637 < _size633; ++_i637)
             {
-              xfer += iprot->readString(this->group_names[_i642]);
+              xfer += iprot->readString(this->group_names[_i637]);
             }
             xfer += iprot->readListEnd();
           }
@@ -10956,10 +10956,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::write(::apache::thrif
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter643;
-    for (_iter643 = this->part_vals.begin(); _iter643 != this->part_vals.end(); ++_iter643)
+    std::vector<std::string> ::const_iterator _iter638;
+    for (_iter638 = this->part_vals.begin(); _iter638 != this->part_vals.end(); ++_iter638)
     {
-      xfer += oprot->writeString((*_iter643));
+      xfer += oprot->writeString((*_iter638));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10972,10 +10972,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::write(::apache::thrif
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter644;
-    for (_iter644 = this->group_names.begin(); _iter644 != this->group_names.end(); ++_iter644)
+    std::vector<std::string> ::const_iterator _iter639;
+    for (_iter639 = this->group_names.begin(); _iter639 != this->group_names.end(); ++_iter639)
     {
-      xfer += oprot->writeString((*_iter644));
+      xfer += oprot->writeString((*_iter639));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11001,10 +11001,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_pargs::write(::apache::thri
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter645;
-    for (_iter645 = (*(this->part_vals)).begin(); _iter645 != (*(this->part_vals)).end(); ++_iter645)
+    std::vector<std::string> ::const_iterator _iter640;
+    for (_iter640 = (*(this->part_vals)).begin(); _iter640 != (*(this->part_vals)).end(); ++_iter640)
     {
-      xfer += oprot->writeString((*_iter645));
+      xfer += oprot->writeString((*_iter640));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11017,10 +11017,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_pargs::write(::apache::thri
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter646;
-    for (_iter646 = (*(this->group_names)).begin(); _iter646 != (*(this->group_names)).end(); ++_iter646)
+    std::vector<std::string> ::const_iterator _iter641;
+    for (_iter641 = (*(this->group_names)).begin(); _iter641 != (*(this->group_names)).end(); ++_iter641)
     {
-      xfer += oprot->writeString((*_iter646));
+      xfer += oprot->writeString((*_iter641));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11523,14 +11523,14 @@ uint32_t ThriftHiveMetastore_get_partitions_result::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size647;
-            ::apache::thrift::protocol::TType _etype650;
-            xfer += iprot->readListBegin(_etype650, _size647);
-            this->success.resize(_size647);
-            uint32_t _i651;
-            for (_i651 = 0; _i651 < _size647; ++_i651)
+            uint32_t _size642;
+            ::apache::thrift::protocol::TType _etype645;
+            xfer += iprot->readListBegin(_etype645, _size642);
+            this->success.resize(_size642);
+            uint32_t _i646;
+            for (_i646 = 0; _i646 < _size642; ++_i646)
             {
-              xfer += this->success[_i651].read(iprot);
+              xfer += this->success[_i646].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11577,10 +11577,10 @@ uint32_t ThriftHiveMetastore_get_partitions_result::write(::apache::thrift::prot
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter652;
-      for (_iter652 = this->success.begin(); _iter652 != this->success.end(); ++_iter652)
+      std::vector<Partition> ::const_iterator _iter647;
+      for (_iter647 = this->success.begin(); _iter647 != this->success.end(); ++_iter647)
       {
-        xfer += (*_iter652).write(oprot);
+        xfer += (*_iter647).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -11623,14 +11623,14 @@ uint32_t ThriftHiveMetastore_get_partitions_presult::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size653;
-            ::apache::thrift::protocol::TType _etype656;
-            xfer += iprot->readListBegin(_etype656, _size653);
-            (*(this->success)).resize(_size653);
-            uint32_t _i657;
-            for (_i657 = 0; _i657 < _size653; ++_i657)
+            uint32_t _size648;
+            ::apache::thrift::protocol::TType _etype651;
+            xfer += iprot->readListBegin(_etype651, _size648);
+            (*(this->success)).resize(_size648);
+            uint32_t _i652;
+            for (_i652 = 0; _i652 < _size648; ++_i652)
             {
-              xfer += (*(this->success))[_i657].read(iprot);
+              xfer += (*(this->success))[_i652].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11723,14 +11723,14 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_args::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size658;
-            ::apache::thrift::protocol::TType _etype661;
-            xfer += iprot->readListBegin(_etype661, _size658);
-            this->group_names.resize(_size658);
-            uint32_t _i662;
-            for (_i662 = 0; _i662 < _size658; ++_i662)
+            uint32_t _size653;
+            ::apache::thrift::protocol::TType _etype656;
+            xfer += iprot->readListBegin(_etype656, _size653);
+            this->group_names.resize(_size653);
+            uint32_t _i657;
+            for (_i657 = 0; _i657 < _size653; ++_i657)
             {
-              xfer += iprot->readString(this->group_names[_i662]);
+              xfer += iprot->readString(this->group_names[_i657]);
             }
             xfer += iprot->readListEnd();
           }
@@ -11774,10 +11774,10 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_args::write(::apache::thri
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter663;
-    for (_iter663 = this->group_names.begin(); _iter663 != this->group_names.end(); ++_iter663)
+    std::vector<std::string> ::const_iterator _iter658;
+    for (_iter658 = this->group_names.begin(); _iter658 != this->group_names.end(); ++_iter658)
     {
-      xfer += oprot->writeString((*_iter663));
+      xfer += oprot->writeString((*_iter658));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11811,10 +11811,10 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_pargs::write(::apache::thr
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter664;
-    for (_iter664 = (*(this->group_names)).begin(); _iter664 != (*(this->group_names)).end(); ++_iter664)
+    std::vector<std::string> ::const_iterator _iter659;
+    for (_iter659 = (*(this->group_names)).begin(); _iter659 != (*(this->group_names)).end(); ++_iter659)
     {
-      xfer += oprot->writeString((*_iter664));
+      xfer += oprot->writeString((*_iter659));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11849,14 +11849,14 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_result::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size665;
-            ::apache::thrift::protocol::TType _etype668;
-            xfer += iprot->readListBegin(_etype668, _size665);
-            this->success.resize(_size665);
-            uint32_t _i669;
-            for (_i669 = 0; _i669 < _size665; ++_i669)
+            uint32_t _size660;
+            ::apache::thrift::protocol::TType _etype663;
+            xfer += iprot->readListBegin(_etype663, _size660);
+            this->success.resize(_size660);
+            uint32_t _i664;
+            for (_i664 = 0; _i664 < _size660; ++_i664)
             {
-              xfer += this->success[_i669].read(iprot);
+              xfer += this->success[_i664].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11903,10 +11903,10 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_result::write(::apache::th
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter670;
-      for (_iter670 = this->success.begin(); _iter670 != this->success.end(); ++_iter670)
+      std::vector<Partition> ::const_iterator _iter665;
+      for (_iter665 = this->success.begin(); _iter665 != this->success.end(); ++_iter665)
       {
-        xfer += (*_iter670).write(oprot);
+        xfer += (*_iter665).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -11949,14 +11949,14 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_presult::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size671;
-            ::apache::thrift::protocol::TType _etype674;
-            xfer += iprot->readListBegin(_etype674, _size671);
-            (*(this->success)).resize(_size671);
-            uint32_t _i675;
-            for (_i675 = 0; _i675 < _size671; ++_i675)
+            uint32_t _size666;
+            ::apache::thrift::protocol::TType _etype669;
+            xfer += iprot->readListBegin(_etype669, _size666);
+            (*(this->success)).resize(_size666);
+            uint32_t _i670;
+            for (_i670 = 0; _i670 < _size666; ++_i670)
             {
-              xfer += (*(this->success))[_i675].read(iprot);
+              xfer += (*(this->success))[_i670].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12115,14 +12115,14 @@ uint32_t ThriftHiveMetastore_get_partitions_pspec_result::read(::apache::thrift:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size676;
-            ::apache::thrift::protocol::TType _etype679;
-            xfer += iprot->readListBegin(_etype679, _size676);
-            this->success.resize(_size676);
-            uint32_t _i680;
-            for (_i680 = 0; _i680 < _size676; ++_i680)
+            uint32_t _size671;
+            ::apache::thrift::protocol::TType _etype674;
+            xfer += iprot->readListBegin(_etype674, _size671);
+            this->success.resize(_size671);
+            uint32_t _i675;
+            for (_i675 = 0; _i675 < _size671; ++_i675)
             {
-              xfer += this->success[_i680].read(iprot);
+              xfer += this->success[_i675].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12169,10 +12169,10 @@ uint32_t ThriftHiveMetastore_get_partitions_pspec_result::write(::apache::thrift
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<PartitionSpec> ::const_iterator _iter681;
-      for (_iter681 = this->success.begin(); _iter681 != this->success.end(); ++_iter681)
+      std::vector<PartitionSpec> ::const_iterator _iter676;
+      for (_iter676 = this->success.begin(); _iter676 != this->success.end(); ++_iter676)
       {
-        xfer += (*_iter681).write(oprot);
+        xfer += (*_iter676).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -12215,14 +12215,14 @@ uint32_t ThriftHiveMetastore_get_partitions_pspec_presult::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size682;
-            ::apache::thrift::protocol::TType _etype685;
-            xfer += iprot->readListBegin(_etype685, _size682);
-            (*(this->success)).resize(_size682);
-            uint32_t _i686;
-            for (_i686 = 0; _i686 < _size682; ++_i686)
+            uint32_t _size677;
+            ::apache::thrift::protocol::TType _etype680;
+            xfer += iprot->readListBegin(_etype680, _size677);
+            (*(this->success)).resize(_size677);
+            uint32_t _i681;
+            for (_i681 = 0; _i681 < _size677; ++_i681)
             {
-              xfer += (*(this->success))[_i686].read(iprot);
+              xfer += (*(this->success))[_i681].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12381,14 +12381,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_result::read(::apache::thrift::
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size687;
-            ::apache::thrift::protocol::TType _etype690;
-            xfer += iprot->readListBegin(_etype690, _size687);
-            this->success.resize(_size687);
-            uint32_t _i691;
-            for (_i691 = 0; _i691 < _size687; ++_i691)
+            uint32_t _size682;
+            ::apache::thrift::protocol::TType _etype685;
+            xfer += iprot->readListBegin(_etype685, _size682);
+            this->success.resize(_size682);
+            uint32_t _i686;
+            for (_i686 = 0; _i686 < _size682; ++_i686)
             {
-              xfer += iprot->readString(this->success[_i691]);
+              xfer += iprot->readString(this->success[_i686]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12427,10 +12427,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_result::write(::apache::thrift:
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter692;
-      for (_iter692 = this->success.begin(); _iter692 != this->success.end(); ++_iter692)
+      std::vector<std::string> ::const_iterator _iter687;
+      for (_iter687 = this->success.begin(); _iter687 != this->success.end(); ++_iter687)
       {
-        xfer += oprot->writeString((*_iter692));
+        xfer += oprot->writeString((*_iter687));
       }
       xfer += oprot->writeListEnd();
     }
@@ -12469,14 +12469,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_presult::read(::apache::thrift:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size693;
-            ::apache::thrift::protocol::TType _etype696;
-            xfer += iprot->readListBegin(_etype696, _size693);
-            (*(this->success)).resize(_size693);
-            uint32_t _i697;
-            for (_i697 = 0; _i697 < _size693; ++_i697)
+            uint32_t _size688;
+            ::apache::thrift::protocol::TType _etype691;
+            xfer += iprot->readListBegin(_etype691, _size688);
+            (*(this->success)).resize(_size688);
+            uint32_t _i692;
+            for (_i692 = 0; _i692 < _size688; ++_i692)
             {
-              xfer += iprot->readString((*(this->success))[_i697]);
+              xfer += iprot->readString((*(this->success))[_i692]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12545,14 +12545,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_args::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size698;
-            ::apache::thrift::protocol::TType _etype701;
-            xfer += iprot->readListBegin(_etype701, _size698);
-            this->part_vals.resize(_size698);
-            uint32_t _i702;
-            for (_i702 = 0; _i702 < _size698; ++_i702)
+            uint32_t _size693;
+            ::apache::thrift::protocol::TType _etype696;
+            xfer += iprot->readListBegin(_etype696, _size693);
+            this->part_vals.resize(_size693);
+            uint32_t _i697;
+            for (_i697 = 0; _i697 < _size693; ++_i697)
             {
-              xfer += iprot->readString(this->part_vals[_i702]);
+              xfer += iprot->readString(this->part_vals[_i697]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12596,10 +12596,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_args::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter703;
-    for (_iter703 = this->part_vals.begin(); _iter703 != this->part_vals.end(); ++_iter703)
+    std::vector<std::string> ::const_iterator _iter698;
+    for (_iter698 = this->part_vals.begin(); _iter698 != this->part_vals.end(); ++_iter698)
     {
-      xfer += oprot->writeString((*_iter703));
+      xfer += oprot->writeString((*_iter698));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12629,10 +12629,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_pargs::write(::apache::thrift::pr
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter704;
-    for (_iter704 = (*(this->part_vals)).begin(); _iter704 != (*(this->part_vals)).end(); ++_iter704)
+    std::vector<std::string> ::const_iterator _iter699;
+    for (_iter699 = (*(this->part_vals)).begin(); _iter699 != (*(this->part_vals)).end(); ++_iter699)
     {
-      xfer += oprot->writeString((*_iter704));
+      xfer += oprot->writeString((*_iter699));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12671,14 +12671,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_result::read(::apache::thrift::pr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size705;
-            ::apache::thrift::protocol::TType _etype708;
-            xfer += iprot->readListBegin(_etype708, _size705);
-            this->success.resize(_size705);
-            uint32_t _i709;
-            for (_i709 = 0; _i709 < _size705; ++_i709)
+            uint32_t _size700;
+            ::apache::thrift::protocol::TType _etype703;
+            xfer += iprot->readListBegin(_etype703, _size700);
+            this->success.resize(_size700);
+            uint32_t _i704;
+            for (_i704 = 0; _i704 < _size700; ++_i704)
             {
-              xfer += this->success[_i709].read(iprot);
+              xfer += this->success[_i704].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12725,10 +12725,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_result::write(::apache::thrift::p
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter710;
-      for (_iter710 = this->success.begin(); _iter710 != this->success.end(); ++_iter710)
+      std::vector<Partition> ::const_iterator _iter705;
+      for (_iter705 = this->success.begin(); _iter705 != this->success.end(); ++_iter705)
       {
-        xfer += (*_iter710).write(oprot);
+        xfer += (*_iter705).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -12771,14 +12771,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_presult::read(::apache::thrift::p
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size711;
-            ::apache::thrift::protocol::TType _etype714;
-            xfer += iprot->readListBegin(_etype714, _size711);
-            (*(this->success)).resize(_size711);
-            uint32_t _i715;
-            for (_i715 = 0; _i715 < _size711; ++_i715)
+            uint32_t _size706;
+            ::apache::thrift::protocol::TType _etype709;
+            xfer += iprot->readListBegin(_etype709, _size706);
+            (*(this->success)).resize(_size706);
+            uint32_t _i710;
+            for (_i710 = 0; _i710 < _size706; ++_i710)
             {
-              xfer += (*(this->success))[_i715].read(iprot);
+              xfer += (*(this->success))[_i710].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12855,14 +12855,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size716;
-            ::apache::thrift::protocol::TType _etype719;
-            xfer += iprot->readListBegin(_etype719, _size716);
-            this->part_vals.resize(_size716);
-            uint32_t _i720;
-            for (_i720 = 0; _i720 < _size716; ++_i720)
+            uint32_t _size711;
+            ::apache::thrift::protocol::TType _etype714;
+            xfer += iprot->readListBegin(_etype714, _size711);
+            this->part_vals.resize(_size711);
+            uint32_t _i715;
+            for (_i715 = 0; _i715 < _size711; ++_i715)
             {
-              xfer += iprot->readString(this->part_vals[_i720]);
+              xfer += iprot->readString(this->part_vals[_i715]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12891,14 +12891,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size721;
-            ::apache::thrift::protocol::TType _etype724;
-            xfer += iprot->readListBegin(_etype724, _size721);
-            this->group_names.resize(_size721);
-            uint32_t _i725;
-            for (_i725 = 0; _i725 < _size721; ++_i725)
+            uint32_t _size716;
+            ::apache::thrift::protocol::TType _etype719;
+            xfer += iprot->readListBegin(_etype719, _size716);
+            this->group_names.resize(_size716);
+            uint32_t _i720;
+            for (_i720 = 0; _i720 < _size716; ++_i720)
             {
-              xfer += iprot->readString(this->group_names[_i725]);
+              xfer += iprot->readString(this->group_names[_i720]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12934,10 +12934,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::write(::apache::t
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter726;
-    for (_iter726 = this->part_vals.begin(); _iter726 != this->part_vals.end(); ++_iter726)
+    std::vector<std::string> ::const_iterator _iter721;
+    for (_iter721 = this->part_vals.begin(); _iter721 != this->part_vals.end(); ++_iter721)
     {
-      xfer += oprot->writeString((*_iter726));
+      xfer += oprot->writeString((*_iter721));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12954,10 +12954,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::write(::apache::t
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 6);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter727;
-    for (_iter727 = this->group_names.begin(); _iter727 != this->group_names.end(); ++_iter727)
+    std::vector<std::string> ::const_iterator _iter722;
+    for (_iter722 = this->group_names.begin(); _iter722 != this->group_names.end(); ++_iter722)
     {
-      xfer += oprot->writeString((*_iter727));
+      xfer += oprot->writeString((*_iter722));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12983,10 +12983,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_pargs::write(::apache::
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter728;
-    for (_iter728 = (*(this->part_vals)).begin(); _iter728 != (*(this->part_vals)).end(); ++_iter728)
+    std::vector<std::string> ::const_iterator _iter723;
+    for (_iter723 = (*(this->part_vals)).begin(); _iter723 != (*(this->part_vals)).end(); ++_iter723)
     {
-      xfer += oprot->writeString((*_iter728));
+      xfer += oprot->writeString((*_iter723));
     }
     xfer += oprot->writeListEnd();
   }
@@ -13003,10 +13003,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_pargs::write(::apache::
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 6);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter729;
-    for (_iter729 = (*(this->group_names)).begin(); _iter729 != (*(this->group_names)).end(); ++_iter729)
+    std::vector<std::string> ::const_iterator _iter724;
+    for (_iter724 = (*(this->group_names)).begin(); _iter724 != (*(this->group_names)).end(); ++_iter724)
     {
-      xfer += oprot->writeString((*_iter729));
+      xfer += oprot->writeString((*_iter724));
     }
     xfer += oprot->writeListEnd();
   }
@@ -13041,14 +13041,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_result::read(::apache::
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size730;
-            ::apache::thrift::protocol::TType _etype733;
-            xfer += iprot->readListBegin(_etype733, _size730);
-            this->success.resize(_size730);
-            uint32_t _i734;
-            for (_i734 = 0; _i734 < _size730; ++_i734)
+            uint32_t _size725;
+            ::apache::thrift::protocol::TType _etype728;
+            xfer += iprot->readListBegin(_etype728, _size725);
+            this->success.resize(_size725);
+            uint32_t _i729;
+            for (_i729 = 0; _i729 < _size725; ++_i729)
             {
-              xfer += this->success[_i734].read(iprot);
+              xfer += this->success[_i729].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13095,10 +13095,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_result::write(::apache:
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter735;
-      for (_iter735 = this->success.begin(); _iter735 != this->success.end(); ++_iter735)
+      std::vector<Partition> ::const_iterator _iter730;
+      for (_iter730 = this->success.begin(); _iter730 != this->success.end(); ++_iter730)
       {
-        xfer += (*_iter735).write(oprot);
+        xfer += (*_iter730).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -13141,14 +13141,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_presult::read(::apache:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size736;
-            ::apache::thrift::protocol::TType _etype739;
-            xfer += iprot->readListBegin(_etype739, _size736);
-            (*(this->success)).resize(_size736);
-            uint32_t _i740;
-            for (_i740 = 0; _i740 < _size736; ++_i740)
+            uint32_t _size731;
+            ::apache::thrift::protocol::TType _etype734;
+            xfer += iprot->readListBegin(_etype734, _size731);
+            (*(this->success)).resize(_size731);
+            uint32_t _i735;
+            for (_i735 = 0; _i735 < _size731; ++_i735)
             {
-              xfer += (*(this->success))[_i740].read(iprot);
+              xfer += (*(this->success))[_i735].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13225,14 +13225,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_args::read(::apache::thrift:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size741;
-            ::apache::thrift::protocol::TType _etype744;
-            xfer += iprot->readListBegin(_etype744, _size741);
-            this->part_vals.resize(_size741);
-            uint32_t _i745;
-            for (_i745 = 0; _i745 < _size741; ++_i745)
+            uint32_t _size736;
+            ::apache::thrift::protocol::TType _etype739;
+            xfer += iprot->readListBegin(_etype739, _size736);
+            this->part_vals.resize(_size736);
+            uint32_t _i740;
+            for (_i740 = 0; _i740 < _size736; ++_i740)
             {
-              xfer += iprot->readString(this->part_vals[_i745]);
+              xfer += iprot->readString(this->part_vals[_i740]);
             }
             xfer += iprot->readListEnd();
           }
@@ -13276,10 +13276,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_args::write(::apache::thrift
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter746;
-    for (_iter746 = this->part_vals.begin(); _iter746 != this->part_vals.end(); ++_iter746)
+    std::vector<std::string> ::const_iterator _iter741;
+    for (_iter741 = this->part_vals.begin(); _iter741 != this->part_vals.end(); ++_iter741)
     {
-      xfer += oprot->writeString((*_iter746));
+      xfer += oprot->writeString((*_iter741));
     }
     xfer += oprot->writeListEnd();
   }
@@ -13309,10 +13309,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_pargs::write(::apache::thrif
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter747;
-    for (_iter747 = (*(this->part_vals)).begin(); _iter747 != (*(this->part_vals)).end(); ++_iter747)
+    std::vector<std::string> ::const_iterator _iter742;
+    for (_iter742 = (*(this->part_vals)).begin(); _iter742 != (*(this->part_vals)).end(); ++_iter742)
     {
-      xfer += oprot->writeString((*_iter747));
+      xfer += oprot->writeString((*_iter742));
     }
     xfer += oprot->writeListEnd();
   }
@@ -13351,14 +13351,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_result::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size748;
-            ::apache::thrift::protocol::TType _etype751;
-            xfer += iprot->readListBegin(_etype751, _size748);
-            this->success.resize(_size748);
-            uint32_t _i752;
-            for (_i752 = 0; _i752 < _size748; ++_i752)
+            uint32_t _size743;
+            ::apache::thrift::protocol::TType _etype746;
+            xfer += iprot->readListBegin(_etype746, _size743);
+            this->success.resize(_size743);
+            uint32_t _i747;
+            for (_i747 = 0; _i747 < _size743; ++_i747)
             {
-              xfer += iprot->readString(this->success[_i752]);
+              xfer += iprot->readString(this->success[_i747]);
             }
             xfer += iprot->readListEnd();
           }
@@ -13405,10 +13405,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_result::write(::apache::thri
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter753;
-      for (_iter753 = this->success.begin(); _iter753 != this->success.end(); ++_iter753)
+      std::vector<std::string> ::const_iterator _iter748;
+      for (_iter748 = this->success.begin(); _iter748 != this->success.end(); ++_iter748)
       {
-        xfer += oprot->writeString((*_iter753));
+        xfer += oprot->writeString((*_iter748));
       }
       xfer += oprot->writeListEnd();
     }
@@ -13451,14 +13451,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_presult::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size754;
-            ::apache::thrift::protocol::TType _etype757;
-            xfer += iprot->readListBegin(_etype757, _size754);
-            (*(this->success)).resize(_size754);
-            uint32_t _i758;
-            for (_i758 = 0; _i758 < _size754; ++_i758)
+            uint32_t _size749;
+            ::apache::thrift::protocol::TType _etype752;
+            xfer += iprot->readListBegin(_etype752, _size749);
+            (*(this->success)).resize(_size749);
+            uint32_t _i753;
+            for (_i753 = 0; _i753 < _size749; ++_i753)
             {
-              xfer += iprot->readString((*(this->success))[_i758]);
+              xfer += iprot->readString((*(this->success))[_i753]);
             }
             xfer += iprot->readListEnd();
           }
@@ -13633,14 +13633,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_filter_result::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size759;
-            ::apache::thrift::protocol::TType _etype762;
-            xfer += iprot->readListBegin(_etype762, _size759);
-            this->success.resize(_size759);
-            uint32_t _i763;
-            for (_i763 = 0; _i763 < _size759; ++_i763)
+            uint32_t _size754;
+            ::apache::thrift::protocol::TType _etype757;
+            xfer += iprot->readListBegin(_etype757, _size754);
+            this->success.resize(_size754);
+            uint32_t _i758;
+            for (_i758 = 0; _i758 < _size754; ++_i758)
             {
-              xfer += this->success[_i763].read(iprot);
+              xfer += this->success[_i758].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13687,10 +13687,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_filter_result::write(::apache::th
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter764;
-      for (_iter764 = this->success.begin(); _iter764 != this->success.end(); ++_iter764)
+      std::vector<Partition> ::const_iterator _iter759;
+      for (_iter759 = this->success.begin(); _iter759 != this->success.end(); ++_iter759)
       {
-        xfer += (*_iter764).write(oprot);
+        xfer += (*_iter759).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -13733,14 +13733,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_filter_presult::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size765;
-            ::apache::thrift::protocol::TType _etype768;
-            xfer += iprot->readListBegin(_etype768, _size765);
-            (*(this->success)).resize(_size765);
-            uint32_t _i769;
-            for (_i769 = 0; _i769 < _size765; ++_i769)
+            uint32_t _size760;
+            ::apache::thrift::protocol::TType _etype763;
+            xfer += iprot->readListBegin(_etype763, _size760);
+            (*(this->success)).resize(_size760);
+            uint32_t _i764;
+            for (_i764 = 0; _i764 < _size760; ++_i764)
             {
-              xfer += (*(this->success))[_i769].read(iprot);
+              xfer += (*(this->success))[_i764].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13915,14 +13915,14 @@ uint32_t ThriftHiveMetastore_get_part_specs_by_filter_result::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size770;
-            ::apache::thrift::protocol::TType _etype773;
-            xfer += iprot->readListBegin(_etype773, _size770);
-            this->success.resize(_size770);
-            uint32_t _i774;
-            for (_i774 = 0; _i774 < _size770; ++_i774)
+            uint32_t _size765;
+            ::apache::thrift::protocol::TType _etype768;
+            xfer += iprot->readListBegin(_etype768, _size765);
+            this->success.resize(_size765);
+            uint32_t _i769;
+            for (_i769 = 0; _i769 < _size765; ++_i769)
             {
-              xfer += this->success[_i774].read(iprot);
+              xfer += this->success[_i769].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13969,10 +13969,10 @@ uint32_t ThriftHiveMetastore_get_part_specs_by_filter_result::write(::apache::th
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<PartitionSpec> ::const_iterator _iter775;
-      for (_iter775 = this->success.begin(); _iter775 != this->success.end(); ++_iter775)
+      std::vector<PartitionSpec> ::const_iterator _iter770;
+      for (_iter770 = this->success.begin(); _iter770 != this->success.end(); ++_iter770)
       {
-        xfer += (*_iter775).write(oprot);
+        xfer += (*_iter770).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -14015,14 +14015,14 @@ uint32_t ThriftHiveMetastore_get_part_specs_by_filter_presult::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size776;
-            ::apache::thrift::protocol::TType _etype779;
-            xfer += iprot->readListBegin(_etype779, _size776);
-            (*(this->success)).resize(_size776);
-            uint32_t _i780;
-            for (_i780 = 0; _i780 < _size776; ++_i780)
+            uint32_t _size771;
+            ::apache::thrift::protocol::TType _etype774;
+            xfer += iprot->readListBegin(_etype774, _size771);
+            (*(this->success)).resize(_size771);
+            uint32_t _i775;
+            for (_i775 = 0; _i775 < _size771; ++_i775)
             {
-              xfer += (*(this->success))[_i780].read(iprot);
+              xfer += (*(this->success))[_i775].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -14301,14 +14301,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_args::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->names.clear();
-            uint32_t _size781;
-            ::apache::thrift::protocol::TType _etype784;
-            xfer += iprot->readListBegin(_etype784, _size781);
-            this->names.resize(_size781);
-            uint32_t _i785;
-            for (_i785 = 0; _i785 < _size781; ++_i785)
+            uint32_t _size776;
+            ::apache::thrift::protocol::TType _etype779;
+            xfer += iprot->readListBegin(_etype779, _size776);
+            this->names.resize(_size776);
+            uint32_t _i780;
+            for (_i780 = 0; _i780 < _size776; ++_i780)
             {
-              xfer += iprot->readString(this->names[_i785]);
+              xfer += iprot->readString(this->names[_i780]);
             }
             xfer += iprot->readListEnd();
           }
@@ -14344,10 +14344,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_args::write(::apache::thrif
   xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->names.size()));
-    std::vector<std::string> ::const_iterator _iter786;
-    for (_iter786 = this->names.begin(); _iter786 != this->names.end(); ++_iter786)
+    std::vector<std::string> ::const_iterator _iter781;
+    for (_iter781 = this->names.begin(); _iter781 != this->names.end(); ++_iter781)
     {
-      xfer += oprot->writeString((*_iter786));
+      xfer += oprot->writeString((*_iter781));
     }
     xfer += oprot->writeListEnd();
   }
@@ -14373,10 +14373,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_pargs::write(::apache::thri
   xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->names)).size()));
-    std::vector<std::string> ::const_iterator _iter787;
-    for (_iter787 = (*(this->names)).begin(); _iter787 != (*(this->names)).end(); ++_iter787)
+    std::vector<std::string> ::const_iterator _iter782;
+    for (_iter782 = (*(this->names)).begin(); _iter782 != (*(this->names)).end(); ++_iter782)
     {
-      xfer += oprot->writeString((*_iter787));
+      xfer += oprot->writeString((*_iter782));
     }
     xfer += oprot->writeListEnd();
   }
@@ -14411,14 +14411,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_result::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size788;
-            ::apache::thrift::protocol::TType _etype791;
-            xfer += iprot->readListBegin(_etype791, _size788);
-            this->success.resize(_size788);
-            uint32_t _i792;
-            for (_i792 = 0; _i792 < _size788; ++_i792)
+            uint32_t _size783;
+            ::apache::thrift::protocol::TType _etype786;
+            xfer += iprot->readListBegin(_etype786, _size783);
+            this->success.resize(_size783);
+            uint32_t _i787;
+            for (_i787 = 0; _i787 < _size783; ++_i787)
             {
-              xfer += this->success[_i792].read(iprot);
+              xfer += this->success[_i787].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -14465,10 +14465,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_result::write(::apache::thr
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter793;
-      for (_iter793 = this->success.begin(); _iter793 != this->success.end(); ++_iter793)
+      std::vector<Partition> ::const_iterator _iter788;
+      for (_iter788 = this->success.begin(); _iter788 != this->success.end(); ++_iter788)
       {
-        xfer += (*_iter793).write(oprot);
+        xfer += (*_iter788).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -14511,14 +14511,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_presult::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size794;
-            ::apache::thrift::protocol::TType _etype797;
-            xfer += iprot->readListBegin(_etype797, _size794);
-            (*(this->success)).resize(_size794);
-            uint32_t _i798;
-            for (_i798 = 0; _i798 < _size794; ++_i798)
+            uint32_t _size789;
+            ::apache::thrift::protocol::TType _etype792;
+            xfer += iprot->readListBegin(_etype792, _size789);
+            (*(this->success)).resize(_size789);
+            uint32_t _i793;
+            for (_i793 = 0; _i793 < _size789; ++_i793)
             {
-              xfer += (*(this->success))[_i798].read(iprot);
+              xfer += (*(this->success))[_i793].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -14809,14 +14809,14 @@ uint32_t ThriftHiveMetastore_alter_partitions_args::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->new_parts.clear();
-            uint32_t _size799;
-            ::apache::thrift::protocol::TType _etype802;
-            xfer += iprot->readListBegin(_etype802, _size799);
-            this->new_parts.resize(_size799);
-            uint32_t _i803;
-            for (_i803 = 0; _i803 < _size799; ++_i803)
+            uint32_t _size794;
+            ::apache::thrift::protocol::TType _etype797;
+            xfer += iprot->readListBegin(_etype797, _size794);
+            this->new_parts.resize(_size794);
+            uint32_t _i798;
+            for (_i798 = 0; _i798 < _size794; ++_i798)
             {
-              xfer += this->new_parts[_i803].read(iprot);
+              xfer += this->new_parts[_i798].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -14852,10 +14852,10 @@ uint32_t ThriftHiveMetastore_alter_partitions_args::write(::apache::thrift::prot
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->new_parts.size()));
-    std::vector<Partition> ::const_iterator _iter804;
-    for (_iter804 = this->new_parts.begin(); _iter804 != this->new_parts.end(); ++_iter804)
+    std::vector<Partition> ::const_iterator _iter799;
+    for (_iter799 = this->new_parts.begin(); _iter799 != this->new_parts.end(); ++_iter799)
     {
-      xfer += (*_iter804).write(oprot);
+      xfer += (*_iter799).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -14881,10 +14881,10 @@ uint32_t ThriftHiveMetastore_alter_partitions_pargs::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->new_parts)).size()));
-    std::vector<Partition> ::const_iterator _iter805;
-    for (_iter805 = (*(this->new_parts)).begin(); _iter805 != (*(this->new_parts)).end(); ++_iter805)
+    std::vector<Partition> ::const_iterator _iter800;
+    for (_iter800 = (*(this->new_parts)).begin(); _iter800 != (*(this->new_parts)).end(); ++_iter800)
     {
-      xfer += (*_iter805).write(oprot);
+      xfer += (*_iter800).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -15281,14 +15281,14 @@ uint32_t ThriftHiveMetastore_rename_partition_args::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size806;
-            ::apache::thrift::protocol::TType _etype809;
-            xfer += iprot->readListBegin(_etype809, _size806);
-            this->part_vals.resize(_size806);
-            uint32_t _i810;
-            for (_i810 = 0; _i810 < _size806; ++_i810)
+            uint32_t _size801;
+            ::apache::thrift::protocol::TType _etype804;
+            xfer += iprot->readListBegin(_etype804, _size801);
+            this->part_vals.resize(_size801);
+            uint32_t _i805;
+            for (_i805 = 0; _i805 < _size801; ++_i805)
             {
-              xfer += iprot->readString(this->part_vals[_i810]);
+              xfer += iprot->readString(this->part_vals[_i805]);
             }
             xfer += iprot->readListEnd();
           }
@@ -15332,10 +15332,10 @@ uint32_t ThriftHiveMetastore_rename_partition_args::write(::apache::thrift::prot
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter811;
-    for (_iter811 = this->part_vals.begin(); _iter811 != this->part_vals.end(); ++_iter811)
+    std::vector<std::string> ::const_iterator _iter806;
+    for (_iter806 = this->part_vals.begin(); _iter806 != this->part_vals.end(); ++_iter806)
     {
-      xfer += oprot->writeString((*_iter811));
+      xfer += oprot->writeString((*_iter806));
     }
     xfer += oprot->writeListEnd();
   }
@@ -15365,10 +15365,10 @@ uint32_t ThriftHiveMetastore_rename_partition_pargs::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter812;
-    for (_iter812 = (*(this->part_vals)).begin(); _iter812 != (*(this->part_vals)).end(); ++_iter812)
+    std::vector<std::string> ::const_iterator _iter807;
+    for (_iter807 = (*(this->part_vals)).begin(); _iter807 != (*(this->part_vals)).end(); ++_iter807)
     {
-      xfer += oprot->writeString((*_iter812));
+      xfer += oprot->writeString((*_iter807));
     }
     xfer += oprot->writeListEnd();
   }
@@ -15523,14 +15523,14 @@ uint32_t ThriftHiveMetastore_partition_name_has_valid_characters_args::read(::ap
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size813;
-            ::apache::thrift::protocol::TType _etype816;
-            xfer += iprot->readListBegin(_etype816, _size813);
-            this->part_vals.resize(_size813);
-            uint32_t _i817;
-            for (_i817 = 0; _i817 < _size813; ++_i817)
+            uint32_t _size808;
+            ::apache::thrift::protocol::TType _etype811;
+            xfer += iprot->readListBegin(_etype811, _size808);
+            this->part_vals.resize(_size808);
+            uint32_t _i812;
+            for (_i812 = 0; _i812 < _size808; ++_i812)
             {
-              xfer += iprot->readString(this->part_vals[_i817]);
+              xfer += iprot->readString(this->part_vals[_i812]);
             }
             xfer += iprot->readListEnd();
           }
@@ -15566,10 +15566,10 @@ uint32_t ThriftHiveMetastore_partition_name_has_valid_characters_args::write(::a
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter818;
-    for (_iter818 = this->part_vals.begin(); _iter818 != this->part_vals.end(); ++_iter818)
+    std::vector<std::string> ::const_iterator _iter813;
+    for (_iter813 = this->part_vals.begin(); _iter813 != this->part_vals.end(); ++_iter813)
     {
-      xfer += oprot->writeString((*_iter818));
+      xfer += oprot->writeString((*_iter813));
     }
     xfer += oprot->writeListEnd();
   }
@@ -15591,10 +15591,10 @@ uint32_t ThriftHiveMetastore_partition_name_has_valid_characters_pargs::write(::
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter819;
-    for (_iter819 = (*(this->part_vals)).begin(); _iter819 != (*(this->part_vals)).end(); ++_iter819)
+    std::vector<std::string> ::const_iterator _iter814;
+    for (_iter814 = (*(this->part_vals)).begin(); _iter814 != (*(this->part_vals)).end(); ++_iter814)
     {
-      xfer += oprot->writeString((*_iter819));
+      xfer += oprot->writeString((*_iter814));
     }
     xfer += oprot->writeListEnd();
   }
@@ -16013,14 +16013,14 @@ uint32_t ThriftHiveMetastore_partition_name_to_vals_result::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size820;
-            ::apache::thrift::protocol::TType _etype823;
-            xfer += iprot->readListBegin(_etype823, _size820);
-            this->success.resize(_size820);
-            uint32_t _i824;
-            for (_i824 = 0; _i824 < _size820; ++_i824)
+            uint32_t _size815;
+            ::apache::thrift::protocol::TType _etype818;
+            xfer += iprot->readListBegin(_etype818, _size815);
+            this->success.resize(_size815);
+            uint32_t _i819;
+            for (_i819 = 0; _i819 < _size815; ++_i819)
             {
-              xfer += iprot->readString(this->success[_i824]);
+              xfer += iprot->readString(this->success[_i819]);
             }
             xfer += iprot->readListEnd();
           }
@@ -16059,10 +16059,10 @@ uint32_t ThriftHiveMetastore_partition_name_to_vals_result::write(::apache::thri
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter825;
-      for (_iter825 = this->success.begin(); _iter825 != this->success.end(); ++_iter825)
+      std::vector<std::string> ::const_iterator _iter820;
+      for (_iter820 = this->success.begin(); _iter820 != this->success.end(); ++_iter820)
       {
-        xfer += oprot->writeString((*_iter825));
+        xfer += oprot->writeString((*_iter820));
       }
       xfer += oprot->writeListEnd();
     }
@@ -16101,14 +16101,14 @@ uint32_t ThriftHiveMetastore_partition_name_to_vals_presult::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size826;
-            ::apache::thrift::protocol::TType _etype829;
-            xfer += iprot->readListBegin(_etype829, _size826);
-            (*(this->success)).resize(_size826);
-            uint32_t _i830;
-            for (_i830 = 0; _i830 < _size826; ++_i830)
+            uint32_t _size821;
+            ::apache::thrift::protocol::TType _etype824;
+            xfer += iprot->readListBegin(_etype824, _size821);
+            (*(this->success)).resize(_size821);
+            uint32_t _i825;
+            for (_i825 = 0; _i825 < _size821; ++_i825)
             {
-              xfer += iprot->readString((*(this->success))[_i830]);
+              xfer += iprot->readString((*(this->success))[_i825]);
             }
             xfer += iprot->readListEnd();
           }
@@ -16227,17 +16227,17 @@ uint32_t ThriftHiveMetastore_partition_name_to_spec_result::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->success.clear();
-            uint32_t _size831;
-            ::apache::thrift::protocol::TType _ktype832;
-            ::apache::thrift::protocol::TType _vtype833;
-            xfer += iprot->readMapBegin(_ktype832, _vtype833, _size831);
-            uint32_t _i835;
-            for (_i835 = 0; _i835 < _size831; ++_i835)
+            uint32_t _size826;
+            ::apache::thrift::protocol::TType _ktype827;
+            ::apache::thrift::protocol::TType _vtype828;
+            xfer += iprot->readMapBegin(_ktype827, _vtype828, _size826);
+            uint32_t _i830;
+            for (_i830 = 0; _i830 < _size826; ++_i830)
             {
-              std::string _key836;
-              xfer += iprot->readString(_key836);
-              std::string& _val837 = this->success[_key836];
-              xfer += iprot->readString(_val837);
+              std::string _key831;
+              xfer += iprot->readString(_key831);
+              std::string& _val832 = this->success[_key831];
+              xfer += iprot->readString(_val832);
             }
             xfer += iprot->readMapEnd();
           }
@@ -16276,11 +16276,11 @@ uint32_t ThriftHiveMetastore_partition_name_to_spec_result::write(::apache::thri
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
     {
       xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::map<std::string, std::string> ::const_iterator _iter838;
-      for (_iter838 = this->success.begin(); _iter838 != this->success.end(); ++_iter838)
+      std::map<std::string, std::string> ::const_iterator _iter833;
+      for (_iter833 = this->success.begin(); _iter833 != this->success.end(); ++_iter833)
       {
-        xfer += oprot->writeString(_iter838->first);
-        xfer += oprot->writeString(_iter838->second);
+        xfer += oprot->writeString(_iter833->first);
+        xfer += oprot->writeString(_iter833->second);
       }
       xfer += oprot->writeMapEnd();
     }
@@ -16319,17 +16319,17 @@ uint32_t ThriftHiveMetastore_partition_name_to_spec_presult::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             (*(this->success)).clear();
-            uint32_t _size839;
-            ::apache::thrift::protocol::TType _ktype840;
-            ::apache::thrift::protocol::TType _vtype841;
-            xfer += iprot->readMapBegin(_ktype840, _vtype841, _size839);
-            uint32_t _i843;
-            for (_i843 = 0; _i843 < _size839; ++_i843)
+            uint32_t _size834;
+            ::apache::thrift::protocol::TType _ktype835;
+            ::apache::thrift::protocol::TType _vtype836;
+            xfer += iprot->readMapBegin(_ktype835, _vtype836, _size834);
+            uint32_t _i838;
+            for (_i838 = 0; _i838 < _size834; ++_i838)
             {
-              std::string _key844;
-              xfer += iprot->readString(_key844);
-              std::string& _val845 = (*(this->success))[_key844];
-              xfer += iprot->readString(_val845);
+              std::string _key839;
+              xfer += iprot->readString(_key839);
+              std::string& _val840 = (*(this->success))[_key839];
+              xfer += iprot->readString(_val840);
             }
             xfer += iprot->readMapEnd();
           }
@@ -16398,17 +16398,17 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_args::read(::apache::thrift::
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->part_vals.clear();
-            uint32_t _size846;
-            ::apache::thrift::protocol::TType _ktype847;
-            ::apache::thrift::protocol::TType _vtype848;
-            xfer += iprot->readMapBegin(_ktype847, _vtype848, _size846);
-            uint32_t _i850;
-            for (_i850 = 0; _i850 < _size846; ++_i850)
+            uint32_t _size841;
+            ::apache::thrift::protocol::TType _ktype842;
+            ::apache::thrift::protocol::TType _vtype843;
+            xfer += iprot->readMapBegin(_ktype842, _vtype843, _size841);
+            uint32_t _i845;
+            for (_i845 = 0; _i845 < _size841; ++_i845)
             {
-              std::string _key851;
-              xfer += iprot->readString(_key851);
-              std::string& _val852 = this->part_vals[_key851];
-              xfer += iprot->readString(_val852);
+              std::string _key846;
+              xfer += iprot->readString(_key846);
+              std::string& _val847 = this->part_vals[_key846];
+              xfer += iprot->readString(_val847);
             }
             xfer += iprot->readMapEnd();
           }
@@ -16419,9 +16419,9 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_args::read(::apache::thrift::
         break;
       case 4:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast853;
-          xfer += iprot->readI32(ecast853);
-          this->eventType = (PartitionEventType::type)ecast853;
+          int32_t ecast848;
+          xfer += iprot->readI32(ecast848);
+          this->eventType = (PartitionEventType::type)ecast848;
           this->__isset.eventType = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -16454,11 +16454,11 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_args::write(::apache::thrift:
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::map<std::string, std::string> ::const_iterator _iter854;
-    for (_iter854 = this->part_vals.begin(); _iter854 != this->part_vals.end(); ++_iter854)
+    std::map<std::string, std::string> ::const_iterator _iter849;
+    for (_iter849 = this->part_vals.begin(); _iter849 != this->part_vals.end(); ++_iter849)
     {
-      xfer += oprot->writeString(_iter854->first);
-      xfer += oprot->writeString(_iter854->second);
+      xfer += oprot->writeString(_iter849->first);
+      xfer += oprot->writeString(_iter849->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -16488,11 +16488,11 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_pargs::write(::apache::thrift
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::map<std::string, std::string> ::const_iterator _iter855;
-    for (_iter855 = (*(this->part_vals)).begin(); _iter855 != (*(this->part_vals)).end(); ++_iter855)
+    std::map<std::string, std::string> ::const_iterator _iter850;
+    for (_iter850 = (*(this->part_vals)).begin(); _iter850 != (*(this->part_vals)).end(); ++_iter850)
     {
-      xfer += oprot->writeString(_iter855->first);
-      xfer += oprot->writeString(_iter855->second);
+      xfer += oprot->writeString(_iter850->first);
+      xfer += oprot->writeString(_iter850->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -16743,17 +16743,17 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_args::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->part_vals.clear();
-            uint32_t _size856;
-            ::apache::thrift::protocol::TType _ktype857;
-            ::apache::thrift::protocol::TType _vtype858;
-            xfer += iprot->readMapBegin(_ktype857, _vtype858, _size856);
-            uint32_t _i860;
-            for (_i860 = 0; _i860 < _size856; ++_i860)
+            uint32_t _size851;
+            ::apache::thrift::protocol::TType _ktype852;
+            ::apache::thrift::protocol::TType _vtype853;
+            xfer += iprot->readMapBegin(_ktype852, _vtype853, _size851);
+            uint32_t _i855;
+            for (_i855 = 0; _i855 < _size851; ++_i855)
             {
-              std::string _key861;
-              xfer += iprot->readString(_key861);
-              std::string& _val862 = this->part_vals[_key861];
-              xfer += iprot->readString(_val862);
+              std::string _key856;
+              xfer += iprot->readString(_key856);
+              std::string& _val857 = this->part_vals[_key856];
+              xfer += iprot->readString(_val857);
             }
             xfer += iprot->readMapEnd();
           }
@@ -16764,9 +16764,9 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_args::read(::apache::thri
         break;
       case 4:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast863;
-          xfer += iprot->readI32(ecast863);
-          this->eventType = (PartitionEventType::type)ecast863;
+          int32_t ecast858;
+          xfer += iprot->readI32(ecast858);
+          this->eventType = (PartitionEventType::type)ecast858;
           this->__isset.eventType = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -16799,11 +16799,11 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_args::write(::apache::thr
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::map<std::string, std::string> ::const_iterator _iter864;
-    for (_iter864 = this->part_vals.begin(); _iter864 != this->part_vals.end(); ++_iter864)
+    std::map<std::string, std::string> ::const_iterator _iter859;
+    for (_iter859 = this->part_vals.begin(); _iter859 != this->part_vals.end(); ++_iter859)
     {
-      xfer += oprot->writeString(_iter864->first);
-      xfer += oprot->writeString(_iter864->second);
+      xfer += oprot->writeString(_iter859->first);
+      xfer += oprot->writeString(_iter859->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -16833,11 +16833,11 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_pargs::write(::apache::th
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::map<std::string, std::string> ::const_iterator _iter865;
-    for (_iter865 = (*(this->part_vals)).begin(); _iter865 != (*(this->part_vals)).end(); ++_iter865)
+    std::map<std::string, std::string> ::const_iterator _iter860;
+    for (_iter860 = (*(this->part_vals)).begin(); _iter860 != (*(this->part_vals)).end(); ++_iter860)
     {
-      xfer += oprot->writeString(_iter865->first);
-      xfer += oprot->writeString(_iter865->second);
+      xfer += oprot->writeString(_iter860->first);
+      xfer += oprot->writeString(_iter860->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -18142,14 +18142,14 @@ uint32_t ThriftHiveMetastore_get_indexes_result::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size866;
-            ::apache::thrift::protocol::TType _etype869;
-            xfer += iprot->readListBegin(_etype869, _size866);
-            this->success.resize(_size866);
-            uint32_t _i870;
-            for (_i870 = 0; _i870 < _size866; ++_i870)
+            uint32_t _size861;
+            ::apache::thrift::protocol::TType _etype864;
+            xfer += iprot->readListBegin(_etype864, _size861);
+            this->success.resize(_size861);
+            uint32_t _i865;
+            for (_i865 = 0; _i865 < _size861; ++_i865)
             {
-              xfer += this->success[_i870].read(iprot);
+              xfer += this->success[_i865].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -18196,10 +18196,10 @@ uint32_t ThriftHiveMetastore_get_indexes_result::write(::apache::thrift::protoco
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Index> ::const_iterator _iter871;
-      for (_iter871 = this->success.begin(); _iter871 != this->success.end(); ++_iter871)
+      std::vector<Index> ::const_iterator _iter866;
+      for (_iter866 = this->success.begin(); _iter866 != this->success.end(); ++_iter866)
       {
-        xfer += (*_iter871).write(oprot);
+        xfer += (*_iter866).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -18242,14 +18242,14 @@ uint32_t ThriftHiveMetastore_get_indexes_presult::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size872;
-            ::apache::thrift::protocol::TType _etype875;
-            xfer += iprot->readListBegin(_etype875, _size872);
-            (*(this->success)).resize(_size872);
-            uint32_t _i876;
-            for (_i876 = 0; _i876 < _size872; ++_i876)
+            uint32_t _size867;
+            ::apache::thrift::protocol::TType _etype870;
+            xfer += iprot->readListBegin(_etype870, _size867);
+            (*(this->success)).resize(_size867);
+            uint32_t _i871;
+            for (_i871 = 0; _i871 < _size867; ++_i871)
             {
-              xfer += (*(this->success))[_i876].read(iprot);
+              xfer += (*(this->success))[_i871].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -18408,14 +18408,14 @@ uint32_t ThriftHiveMetastore_get_index_names_result::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size877;
-            ::apache::thrift::protocol::TType _etype880;
-            xfer += iprot->readListBegin(_etype880, _size877);
-            this->success.resize(_size877);
-            uint32_t _i881;
-            for (_i881 = 0; _i881 < _size877; ++_i881)
+            uint32_t _size872;
+            ::apache::thrift::protocol::TType _etype875;
+            xfer += iprot->readListBegin(_etype875, _size872);
+            this->success.resize(_size872);
+            uint32_t _i876;
+            for (_i876 = 0; _i876 < _size872; ++_i876)
             {
-              xfer += iprot->readString(this->success[_i881]);
+              xfer += iprot->readString(this->success[_i876]);
             }
             xfer += iprot->readListEnd();
           }
@@ -18454,10 +18454,10 @@ uint32_t ThriftHiveMetastore_get_index_names_result::write(::apache::thrift::pro
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter882;
-      for (_iter882 = this->success.begin(); _iter882 != this->success.end(); ++_iter882)
+      std::vector<std::string> ::const_iterator _iter877;
+      for (_iter877 = this->success.begin(); _iter877 != this->success.end(); ++_iter877)
       {
-        xfer += oprot->writeString((*_iter882));
+        xfer += oprot->writeString((*_iter877));
       }
       xfer += oprot->writeListEnd();
     }
@@ -18496,14 +18496,14 @@ uint32_t ThriftHiveMetastore_get_index_names_presult::read(::apache::thrift::pro
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size883;
-            ::apache::thrift::protocol::TType _etype886;
-            xfer += iprot->readListBegin(_etype886, _size883);
-            (*(this->success)).resize(_size883);
-            uint32_t _i887;
-            for (_i887 = 0; _i887 < _size883; ++_i887)
+            uint32_t _size878;
+            ::apache::thrift::protocol::TType _etype881;
+            xfer += iprot->readListBegin(_etype881, _size878);
+            (*(this->success)).resize(_size878);
+            uint32_t _i882;
+            for (_i882 = 0; _i882 < _size878; ++_i882)
             {
-              xfer += iprot->readString((*(this->success))[_i887]);
+              xfer += iprot->readString((*(this->success))[_i882]);
             }
             xfer += iprot->readListEnd();
           }
@@ -21732,14 +21732,14 @@ uint32_t ThriftHiveMetastore_get_functions_result::read(::apache::thrift::protoc
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size888;
-            ::apache::thrift::protocol::TType _etype891;
-            xfer += iprot->readListBegin(_etype891, _size888);
-            this->success.resize(_size888);
-            uint32_t _i892;
-            for (_i892 = 0; _i892 < _size888; ++_i892)
+            uint32_t _size883;
+            ::apache::thrift::protocol::TType _etype886;
+            xfer += iprot->readListBegin(_etype886, _size883);
+            this->success.resize(_size883);
+            uint32_t _i887;
+            for (_i887 = 0; _i887 < _size883; ++_i887)
             {
-              xfer += iprot->readString(this->success[_i892]);
+              xfer += iprot->readString(this->success[_i887]);
             }
             xfer += iprot->readListEnd();
           }
@@ -21778,10 +21778,10 @@ uint32_t ThriftHiveMetastore_get_functions_result::write(::apache::thrift::proto
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter893;
-      for (_iter893 = this->success.begin(); _iter893 != this->success.end(); ++_iter893)
+      std::vector<std::string> ::const_iterator _iter888;
+      for (_iter888 = this->success.begin(); _iter888 != this->success.end(); ++_iter888)
       {
-        xfer += oprot->writeString((*_iter893));
+        xfer += oprot->writeString((*_iter888));
       }
       xfer += oprot->writeListEnd();
     }
@@ -21820,14 +21820,14 @@ uint32_t ThriftHiveMetastore_get_functions_presult::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size894;
-            ::apache::thrift::protocol::TType _etype897;
-            xfer += iprot->readListBegin(_etype897, _size894);
-            (*(this->success)).resize(_size894);
-            uint32_t _i898;
-            for (_i898 = 0; _i898 < _size894; ++_i898)
+            uint32_t _size889;
+            ::apache::thrift::protocol::TType _etype892;
+            xfer += iprot->readListBegin(_etype892, _size889);
+            (*(this->success)).resize(_size889);
+            uint32_t _i893;
+            for (_i893 = 0; _i893 < _size889; ++_i893)
             {
-              xfer += iprot->readString((*(this->success))[_i898]);
+              xfer += iprot->readString((*(this->success))[_i893]);
             }
             xfer += iprot->readListEnd();
           }
@@ -22668,14 +22668,14 @@ uint32_t ThriftHiveMetastore_get_role_names_result::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size899;
-            ::apache::thrift::protocol::TType _etype902;
-            xfer += iprot->readListBegin(_etype902, _size899);
-            this->success.resize(_size899);
-            uint32_t _i903;
-            for (_i903 = 0; _i903 < _size899; ++_i903)
+            uint32_t _size894;
+            ::apache::thrift::protocol::TType _etype897;
+            xfer += iprot->readListBegin(_etype897, _size894);
+            this->success.resize(_size894);
+            uint32_t _i898;
+            for (_i898 = 0; _i898 < _size894; ++_i898)
             {
-              xfer += iprot->readString(this->success[_i903]);
+              xfer += iprot->readString(this->success[_i898]);
             }
             xfer += iprot->readListEnd();
           }
@@ -22714,10 +22714,10 @@ uint32_t ThriftHiveMetastore_get_role_names_result::write(::apache::thrift::prot
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter904;
-      for (_iter904 = this->success.begin(); _iter904 != this->success.end(); ++_iter904)
+      std::vector<std::string> ::const_iterator _iter899;
+      for (_iter899 = this->success.begin(); _iter899 != this->success.end(); ++_iter899)
       {
-        xfer += oprot->writeString((*_iter904));
+        xfer += oprot->writeString((*_iter899));
       }
       xfer += oprot->writeListEnd();
     }
@@ -22756,14 +22756,14 @@ uint32_t ThriftHiveMetastore_get_role_names_presult::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size905;
-            ::apache::thrift::protocol::TType _etype908;
-            xfer += iprot->readListBegin(_etype908, _size905);
-            (*(this->success)).resize(_size905);
-            uint32_t _i909;
-            for (_i909 = 0; _i909 < _size905; ++_i909)
+            uint32_t _size900;
+            ::apache::thrift::protocol::TType _etype903;
+            xfer += iprot->readListBegin(_etype903, _size900);
+            (*(this->success)).resize(_size900);
+            uint32_t _i904;
+            for (_i904 = 0; _i904 < _size900; ++_i904)
             {
-              xfer += iprot->readString((*(this->success))[_i909]);
+              xfer += iprot->readString((*(this->success))[_i904]);
             }
             xfer += iprot->readListEnd();
           }
@@ -22830,9 +22830,9 @@ uint32_t ThriftHiveMetastore_grant_role_args::read(::apache::thrift::protocol::T
         break;
       case 3:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast910;
-          xfer += iprot->readI32(ecast910);
-          this->principal_type = (PrincipalType::type)ecast910;
+          int32_t ecast905;
+          xfer += iprot->readI32(ecast905);
+          this->principal_type = (PrincipalType::type)ecast905;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -22848,9 +22848,9 @@ uint32_t ThriftHiveMetastore_grant_role_args::read(::apache::thrift::protocol::T
         break;
       case 5:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast911;
-          xfer += iprot->readI32(ecast911);
-          this->grantorType = (PrincipalType::type)ecast911;
+          int32_t ecast906;
+          xfer += iprot->readI32(ecast906);
+          this->grantorType = (PrincipalType::type)ecast906;
           this->__isset.grantorType = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -23096,9 +23096,9 @@ uint32_t ThriftHiveMetastore_revoke_role_args::read(::apache::thrift::protocol::
         break;
       case 3:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast912;
-          xfer += iprot->readI32(ecast912);
-          this->principal_type = (PrincipalType::type)ecast912;
+          int32_t ecast907;
+          xfer += iprot->readI32(ecast907);
+          this->principal_type = (PrincipalType::type)ecast907;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -23304,9 +23304,9 @@ uint32_t ThriftHiveMetastore_list_roles_args::read(::apache::thrift::protocol::T
         break;
       case 2:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast913;
-          xfer += iprot->readI32(ecast913);
-          this->principal_type = (PrincipalType::type)ecast913;
+          int32_t ecast908;
+          xfer += iprot->readI32(ecast908);
+          this->principal_type = (PrincipalType::type)ecast908;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -23382,14 +23382,14 @@ uint32_t ThriftHiveMetastore_list_roles_result::read(::apache::thrift::protocol:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size914;
-            ::apache::thrift::protocol::TType _etype917;
-            xfer += iprot->readListBegin(_etype917, _size914);
-            this->success.resize(_size914);
-            uint32_t _i918;
-            for (_i918 = 0; _i918 < _size914; ++_i918)
+            uint32_t _size909;
+            ::apache::thrift::protocol::TType _etype912;
+            xfer += iprot->readListBegin(_etype912, _size909);
+            this->success.resize(_size909);
+            uint32_t _i913;
+            for (_i913 = 0; _i913 < _size909; ++_i913)
             {
-              xfer += this->success[_i918].read(iprot);
+              xfer += this->success[_i913].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -23428,10 +23428,10 @@ uint32_t ThriftHiveMetastore_list_roles_result::write(::apache::thrift::protocol
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Role> ::const_iterator _iter919;
-      for (_iter919 = this->success.begin(); _iter919 != this->success.end(); ++_iter919)
+      std::vector<Role> ::const_iterator _iter914;
+      for (_iter914 = this->success.begin(); _iter914 != this->success.end(); ++_iter914)
       {
-        xfer += (*_iter919).write(oprot);
+        xfer += (*_iter914).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -23470,14 +23470,14 @@ uint32_t ThriftHiveMetastore_list_roles_presult::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size920;
-            ::apache::thrift::protocol::TType _etype923;
-            xfer += iprot->readListBegin(_etype923, _size920);
-            (*(this->success)).resize(_size920);
-            uint32_t _i924;
-            for (_i924 = 0; _i924 < _size920; ++_i924)
+            uint32_t _size915;
+            ::apache::thrift::protocol::TType _etype918;
+            xfer += iprot->readListBegin(_etype918, _size915);
+            (*(this->success)).resize(_size915);
+            uint32_t _i919;
+            for (_i919 = 0; _i919 < _size915; ++_i919)
             {
-              xfer += (*(this->success))[_i924].read(iprot);
+              xfer += (*(this->success))[_i919].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -24092,14 +24092,14 @@ uint32_t ThriftHiveMetastore_get_privilege_set_args::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size925;
-            ::apache::thrift::protocol::TType _etype928;
-            xfer += iprot->readListBegin(_etype928, _size925);
-            this->group_names.resize(_size925);
-            uint32_t _i929;
-            for (_i929 = 0; _i929 < _size925; ++_i929)
+            uint32_t _size920;
+            ::apache::thrift::protocol::TType _etype923;
+            xfer += iprot->readListBegin(_etype923, _size920);
+            this->group_names.resize(_size920);
+            uint32_t _i924;
+            for (_i924 = 0; _i924 < _size920; ++_i924)
             {
-              xfer += iprot->readString(this->group_names[_i929]);
+              xfer += iprot->readString(this->group_names[_i924]);
             }
             xfer += iprot->readListEnd();
           }
@@ -24135,10 +24135,10 @@ uint32_t ThriftHiveMetastore_get_privilege_set_args::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter930;
-    for (_iter930 = this->group_names.begin(); _iter930 != this->group_names.end(); ++_iter930)
+    std::vector<std::string> ::const_iterator _iter925;
+    for (_iter925 = this->group_names.begin(); _iter925 != this->group_names.end(); ++_iter925)
     {
-      xfer += oprot->writeString((*_iter930));
+      xfer += oprot->writeString((*_iter925));
     }
     xfer += oprot->writeListEnd();
   }
@@ -24164,10 +24164,10 @@ uint32_t ThriftHiveMetastore_get_privilege_set_pargs::write(::apache::thrift::pr
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter931;
-    for (_iter931 = (*(this->group_names)).begin(); _iter931 != (*(this->group_names)).end(); ++_iter931)
+    std::vector<std::string> ::const_iterator _iter926;
+    for (_iter926 = (*(this->group_names)).begin(); _iter926 != (*(this->group_names)).end(); ++_iter926)
     {
-      xfer += oprot->writeString((*_iter931));
+      xfer += oprot->writeString((*_iter926));
     }
     xfer += oprot->writeListEnd();
   }
@@ -24324,9 +24324,9 @@ uint32_t ThriftHiveMetastore_list_privileges_args::read(::apache::thrift::protoc
         break;
       case 2:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast932;
-          xfer += iprot->readI32(ecast932);
-          this->principal_type = (PrincipalType::type)ecast932;
+          int32_t ecast927;
+          xfer += iprot->readI32(ecast927);
+          this->principal_type = (PrincipalType::type)ecast927;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -24418,14 +24418,14 @@ uint32_t ThriftHiveMetastore_list_privileges_result::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size933;
-            ::apache::thrift::protocol::TType _etype936;
-            xfer += iprot->readListBegin(_etype936, _size933);
-            this->success.resize(_size933);
-            uint32_t _i937;
-            for (_i937 = 0; _i937 < _size933; ++_i937)
+            uint32_t _size928;
+            ::apache::thrift::protocol::TType _etype931;
+            xfer += iprot->readListBegin(_etype931, _size928);
+            this->success.resize(_size928);
+            uint32_t _i932;
+            for (_i932 = 0; _i932 < _size928; ++_i932)
             {
-              xfer += this->success[_i937].read(iprot);
+              xfer += this->success[_i932].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -24464,10 +24464,10 @@ uint32_t ThriftHiveMetastore_list_privileges_result::write(::apache::thrift::pro
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<HiveObjectPrivilege> ::const_iterator _iter938;
-      for (_iter938 = this->success.begin(); _iter938 != this->success.end(); ++_iter938)
+      std::vector<HiveObjectPrivilege> ::const_iterator _iter933;
+      for (_iter933 = this->success.begin(); _iter933 != this->success.end(); ++_iter933)
       {
-        xfer += (*_iter938).write(oprot);
+        xfer += (*_iter933).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -24506,14 +24506,14 @@ uint32_t ThriftHiveMetastore_list_privileges_presult::read(::apache::thrift::pro
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size939;
-            ::apache::thrift::protocol::TType _etype942;
-            xfer += iprot->readListBegin(_etype942, _size939);
-            (*(this->success)).resize(_size939);
-            uint32_t _i943;
-            for (_i943 = 0; _i943 < _size939; ++_i943)
+            uint32_t _size934;
+            ::apache::thrift::protocol::TType _etype937;
+            xfer += iprot->readListBegin(_etype937, _size934);
+            (*(this->success)).resize(_size934);
+            uint32_t _i938;
+            for (_i938 = 0; _i938 < _size934; ++_i938)
             {
-              xfer += (*(this->success))[_i943].read(iprot);
+              xfer += (*(this->success))[_i938].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -25120,14 +25120,14 @@ uint32_t ThriftHiveMetastore_set_ugi_args::read(::apache::thrift::protocol::TPro
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size944;
-            ::apache::thrift::protocol::TType _etype947;
-            xfer += iprot->readListBegin(_etype947, _size944);
-            this->group_names.resize(_size944);
-            uint32_t _i948;
-            for (_i948 = 0; _i948 < _size944; ++_i948)
+            uint32_t _size939;
+            ::apache::thrift::protocol::TType _etype942;
+            xfer += iprot->readListBegin(_etype942, _size939);
+            this->group_names.resize(_size939);
+            uint32_t _i943;
+            for (_i943 = 0; _i943 < _size939; ++_i943)
             {
-              xfer += iprot->readString(this->group_names[_i948]);
+              xfer += iprot->readString(this->group_names[_i943]);
             }
             xfer += iprot->readListEnd();
           }
@@ -25159,10 +25159,10 @@ uint32_t ThriftHiveMetastore_set_ugi_args::write(::apache::thrift::protocol::TPr
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter949;
-    for (_iter949 = this->group_names.begin(); _iter949 != this->group_names.end(); ++_iter949)
+    std::vector<std::string> ::const_iterator _iter944;
+    for (_iter944 = this->group_names.begin(); _iter944 != this->group_names.end(); ++_iter944)
     {
-      xfer += oprot->writeString((*_iter949));
+      xfer += oprot->writeString((*_iter944));
     }
     xfer += oprot->writeListEnd();
   }
@@ -25184,10 +25184,10 @@ uint32_t ThriftHiveMetastore_set_ugi_pargs::write(::apache::thrift::protocol::TP
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter950;
-    for (_iter950 = (*(this->group_names)).begin(); _iter950 != (*(this->group_names)).end(); ++_iter950)
+    std::vector<std::string> ::const_iterator _iter945;
+    for (_iter945 = (*(this->group_names)).begin(); _iter945 != (*(this->group_names)).end(); ++_iter945)
     {
-      xfer += oprot->writeString((*_iter950));
+      xfer += oprot->writeString((*_iter945));
     }
     xfer += oprot->writeListEnd();
   }
@@ -25222,14 +25222,14 @@ uint32_t ThriftHiveMetastore_set_ugi_result::read(::apache::thrift::protocol::TP
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size951;
-            ::apache::thrift::protocol::TType _etype954;
-            xfer += iprot->readListBegin(_etype954, _size951);
-            this->success.resize(_size951);
-            uint32_t _i955;
-            for (_i955 = 0; _i955 < _size951; ++_i955)
+            uint32_t _size946;
+            ::apache::thrift::protocol::TType _etype949;
+            xfer += iprot->readListBegin(_etype949, _size946);
+            this->success.resize(_size946);
+            uint32_t _i950;
+            for (_i950 = 0; _i950 < _size946; ++_i950)
             {
-              xfer += iprot->readString(this->success[_i955]);
+              xfer += iprot->readString(this->success[_i950]);
             }
             xfer += iprot->readListEnd();
           }
@@ -25268,10 +25268,10 @@ uint32_t ThriftHiveMetastore_set_ugi_result::write(::apache::thrift::protocol::T
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter956;
-      for (_iter956 = this->success.begin(); _iter956 != this->success.end(); ++_iter956)
+      std::vector<std::string> ::const_iterator _iter951;
+      for (_iter951 = this->success.begin(); _iter951 != this->success.end(); ++_iter951)
       {
-        xfer += oprot->writeString((*_iter956));
+        xfer += oprot->writeString((*_iter951));
       }
       xfer += oprot->writeListEnd();
     }
@@ -25310,14 +25310,14 @@ uint32_t ThriftHiveMetastore_set_ugi_presult::read(::apache::thrift::protocol::T
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size957;
-            ::apache::thrift::protocol::TType _etype960;
-            xfer += iprot->readListBegin(_etype960, _size957);
-            (*(this->success)).resize(_size957);
-            uint32_t _i961;
-            for (_i961 = 0; _i961 < _size957; ++_i961)
+            uint32_t _size952;
+            ::apache::thrift::protocol::TType _etype955;
+            xfer += iprot->readListBegin(_etype955, _size952);
+            (*(this->success)).resize(_size952);
+            uint32_t _i956;
+            for (_i956 = 0; _i956 < _size952; ++_i956)
             {
-              xfer += iprot->readString((*(this->success))[_i961]);
+              xfer += iprot->readString((*(this->success))[_i956]);
             }
             xfer += iprot->readListEnd();
           }
@@ -28404,6 +28404,137 @@ uint32_t ThriftHiveMetastore_get_current_notificationEventId_presult::read(::apa
   return xfer;
 }
 
+uint32_t ThriftHiveMetastore_fire_notification_event_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->rqst.read(iprot);
+          this->__isset.rqst = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_notification_event_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_fire_notification_event_args");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_notification_event_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_fire_notification_event_pargs");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_notification_event_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    xfer += iprot->skip(ftype);
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_notification_event_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_fire_notification_event_result");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_notification_event_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    xfer += iprot->skip(ftype);
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
 void ThriftHiveMetastoreClient::getMetaConf(std::string& _return, const std::string& key)
 {
   send_getMetaConf(key);
@@ -36291,6 +36422,59 @@ void ThriftHiveMetastoreClient::recv_get_current_notificationEventId(CurrentNoti
   throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_current_notificationEventId failed: unknown result");
 }
 
+void ThriftHiveMetastoreClient::fire_notification_event(const FireEventRequest& rqst)
+{
+  send_fire_notification_event(rqst);
+  recv_fire_notification_event();
+}
+
+void ThriftHiveMetastoreClient::send_fire_notification_event(const FireEventRequest& rqst)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("fire_notification_event", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_fire_notification_event_pargs args;
+  args.rqst = &rqst;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_fire_notification_event()
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("fire_notification_event") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_fire_notification_event_presult result;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  return;
+}
+
 bool ThriftHiveMetastoreProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
   ProcessMap::iterator pfn;
   pfn = processMap_.find(fname);
@@ -43649,6 +43833,59 @@ void ThriftHiveMetastoreProcessor::process_get_current_notificationEventId(int32
   }
 }
 
+void ThriftHiveMetastoreProcessor::process_fire_notification_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+{
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.fire_notification_event", callContext);
+  }
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.fire_notification_event");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.fire_notification_event");
+  }
+
+  ThriftHiveMetastore_fire_notification_event_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.fire_notification_event", bytes);
+  }
+
+  ThriftHiveMetastore_fire_notification_event_result result;
+  try {
+    iface_->fire_notification_event(args.rqst);
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.fire_notification_event");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("fire_notification_event", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
+    return;
+  }
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.fire_notification_event");
+  }
+
+  oprot->writeMessageBegin("fire_notification_event", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.fire_notification_event", bytes);
+  }
+}
+
 ::boost::shared_ptr< ::apache::thrift::TProcessor > ThriftHiveMetastoreProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
   ::apache::thrift::ReleaseHandler< ThriftHiveMetastoreIfFactory > cleanup(handlerFactory_);
   ::boost::shared_ptr< ThriftHiveMetastoreIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
index 2cce648..79305aa 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
@@ -139,6 +139,7 @@ class ThriftHiveMetastoreIf : virtual public  ::facebook::fb303::FacebookService
   virtual void show_compact(ShowCompactResponse& _return, const ShowCompactRequest& rqst) = 0;
   virtual void get_next_notification(NotificationEventResponse& _return, const NotificationEventRequest& rqst) = 0;
   virtual void get_current_notificationEventId(CurrentNotificationEventId& _return) = 0;
+  virtual void fire_notification_event(const FireEventRequest& rqst) = 0;
 };
 
 class ThriftHiveMetastoreIfFactory : virtual public  ::facebook::fb303::FacebookServiceIfFactory {
@@ -560,6 +561,9 @@ class ThriftHiveMetastoreNull : virtual public ThriftHiveMetastoreIf , virtual p
   void get_current_notificationEventId(CurrentNotificationEventId& /* _return */) {
     return;
   }
+  void fire_notification_event(const FireEventRequest& /* rqst */) {
+    return;
+  }
 };
 
 typedef struct _ThriftHiveMetastore_getMetaConf_args__isset {
@@ -17345,6 +17349,94 @@ class ThriftHiveMetastore_get_current_notificationEventId_presult {
 
 };
 
+typedef struct _ThriftHiveMetastore_fire_notification_event_args__isset {
+  _ThriftHiveMetastore_fire_notification_event_args__isset() : rqst(false) {}
+  bool rqst;
+} _ThriftHiveMetastore_fire_notification_event_args__isset;
+
+class ThriftHiveMetastore_fire_notification_event_args {
+ public:
+
+  ThriftHiveMetastore_fire_notification_event_args() {
+  }
+
+  virtual ~ThriftHiveMetastore_fire_notification_event_args() throw() {}
+
+  FireEventRequest rqst;
+
+  _ThriftHiveMetastore_fire_notification_event_args__isset __isset;
+
+  void __set_rqst(const FireEventRequest& val) {
+    rqst = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_fire_notification_event_args & rhs) const
+  {
+    if (!(rqst == rhs.rqst))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_fire_notification_event_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_fire_notification_event_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_fire_notification_event_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_fire_notification_event_pargs() throw() {}
+
+  const FireEventRequest* rqst;
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_fire_notification_event_result {
+ public:
+
+  ThriftHiveMetastore_fire_notification_event_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_fire_notification_event_result() throw() {}
+
+
+  bool operator == (const ThriftHiveMetastore_fire_notification_event_result & /* rhs */) const
+  {
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_fire_notification_event_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_fire_notification_event_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_fire_notification_event_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_fire_notification_event_presult() throw() {}
+
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
 class ThriftHiveMetastoreClient : virtual public ThriftHiveMetastoreIf, public  ::facebook::fb303::FacebookServiceClient {
  public:
   ThriftHiveMetastoreClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
@@ -17726,6 +17818,9 @@ class ThriftHiveMetastoreClient : virtual public ThriftHiveMetastoreIf, public
   void get_current_notificationEventId(CurrentNotificationEventId& _return);
   void send_get_current_notificationEventId();
   void recv_get_current_notificationEventId(CurrentNotificationEventId& _return);
+  void fire_notification_event(const FireEventRequest& rqst);
+  void send_fire_notification_event(const FireEventRequest& rqst);
+  void recv_fire_notification_event();
 };
 
 class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceProcessor {
@@ -17859,6 +17954,7 @@ class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceP
   void process_show_compact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_next_notification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_current_notificationEventId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_fire_notification_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  public:
   ThriftHiveMetastoreProcessor(boost::shared_ptr<ThriftHiveMetastoreIf> iface) :
      ::facebook::fb303::FacebookServiceProcessor(iface),
@@ -17986,6 +18082,7 @@ class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceP
     processMap_["show_compact"] = &ThriftHiveMetastoreProcessor::process_show_compact;
     processMap_["get_next_notification"] = &ThriftHiveMetastoreProcessor::process_get_next_notification;
     processMap_["get_current_notificationEventId"] = &ThriftHiveMetastoreProcessor::process_get_current_notificationEventId;
+    processMap_["fire_notification_event"] = &ThriftHiveMetastoreProcessor::process_fire_notification_event;
   }
 
   virtual ~ThriftHiveMetastoreProcessor() {}
@@ -19200,6 +19297,15 @@ class ThriftHiveMetastoreMultiface : virtual public ThriftHiveMetastoreIf, publi
     return;
   }
 
+  void fire_notification_event(const FireEventRequest& rqst) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->fire_notification_event(rqst);
+    }
+    ifaces_[i]->fire_notification_event(rqst);
+  }
+
 };
 
 }}} // namespace
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
index ec56d4c..b2036a6 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
@@ -637,6 +637,11 @@ class ThriftHiveMetastoreHandler : virtual public ThriftHiveMetastoreIf {
     printf("get_current_notificationEventId\n");
   }
 
+  void fire_notification_event(const FireEventRequest& rqst) {
+    // Your implementation goes here
+    printf("fire_notification_event\n");
+  }
+
 };
 
 int main(int argc, char **argv) {
diff --git a/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.cpp b/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.cpp
index e2b1cea..252695e 100644
--- a/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.cpp
@@ -116,6 +116,18 @@ const char* _kGrantRevokeTypeNames[] = {
 };
 const std::map<int, const char*> _GrantRevokeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGrantRevokeTypeValues, _kGrantRevokeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));
 
+int _kEventRequestTypeValues[] = {
+  EventRequestType::INSERT,
+  EventRequestType::UPDATE,
+  EventRequestType::DELETE
+};
+const char* _kEventRequestTypeNames[] = {
+  "INSERT",
+  "UPDATE",
+  "DELETE"
+};
+const std::map<int, const char*> _EventRequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kEventRequestTypeValues, _kEventRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));
+
 int _kFunctionTypeValues[] = {
   FunctionType::JAVA
 };
@@ -9650,10 +9662,10 @@ void swap(CurrentNotificationEventId &a, CurrentNotificationEventId &b) {
   swap(a.eventId, b.eventId);
 }
 
-const char* InsertEventRequestData::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
-const uint8_t InsertEventRequestData::binary_fingerprint[16] = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};
+const char* GetAllFunctionsResponse::ascii_fingerprint = "CEE0CA1D7402D4135EF7F42C0F0E0A68";
+const uint8_t GetAllFunctionsResponse::binary_fingerprint[16] = {0xCE,0xE0,0xCA,0x1D,0x74,0x02,0xD4,0x13,0x5E,0xF7,0xF4,0x2C,0x0F,0x0E,0x0A,0x68};
 
-uint32_t InsertEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t GetAllFunctionsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -9664,7 +9676,6 @@ uint32_t InsertEventRequestData::read(::apache::thrift::protocol::TProtocol* ipr
 
   using ::apache::thrift::protocol::TProtocolException;
 
-  bool isset_filesAdded = false;
 
   while (true)
   {
@@ -9677,19 +9688,19 @@ uint32_t InsertEventRequestData::read(::apache::thrift::protocol::TProtocol* ipr
       case 1:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
-            this->filesAdded.clear();
+            this->functions.clear();
             uint32_t _size407;
             ::apache::thrift::protocol::TType _etype410;
             xfer += iprot->readListBegin(_etype410, _size407);
-            this->filesAdded.resize(_size407);
+            this->functions.resize(_size407);
             uint32_t _i411;
             for (_i411 = 0; _i411 < _size407; ++_i411)
             {
-              xfer += iprot->readString(this->filesAdded[_i411]);
+              xfer += this->functions[_i411].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
-          isset_filesAdded = true;
+          this->__isset.functions = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -9703,41 +9714,41 @@ uint32_t InsertEventRequestData::read(::apache::thrift::protocol::TProtocol* ipr
 
   xfer += iprot->readStructEnd();
 
-  if (!isset_filesAdded)
-    throw TProtocolException(TProtocolException::INVALID_DATA);
   return xfer;
 }
 
-uint32_t InsertEventRequestData::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t GetAllFunctionsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("InsertEventRequestData");
+  xfer += oprot->writeStructBegin("GetAllFunctionsResponse");
 
-  xfer += oprot->writeFieldBegin("filesAdded", ::apache::thrift::protocol::T_LIST, 1);
-  {
-    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->filesAdded.size()));
-    std::vector<std::string> ::const_iterator _iter412;
-    for (_iter412 = this->filesAdded.begin(); _iter412 != this->filesAdded.end(); ++_iter412)
+  if (this->__isset.functions) {
+    xfer += oprot->writeFieldBegin("functions", ::apache::thrift::protocol::T_LIST, 1);
     {
-      xfer += oprot->writeString((*_iter412));
+      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->functions.size()));
+      std::vector<Function> ::const_iterator _iter412;
+      for (_iter412 = this->functions.begin(); _iter412 != this->functions.end(); ++_iter412)
+      {
+        xfer += (*_iter412).write(oprot);
+      }
+      xfer += oprot->writeListEnd();
     }
-    xfer += oprot->writeListEnd();
+    xfer += oprot->writeFieldEnd();
   }
-  xfer += oprot->writeFieldEnd();
-
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-void swap(InsertEventRequestData &a, InsertEventRequestData &b) {
+void swap(GetAllFunctionsResponse &a, GetAllFunctionsResponse &b) {
   using ::std::swap;
-  swap(a.filesAdded, b.filesAdded);
+  swap(a.functions, b.functions);
+  swap(a.__isset, b.__isset);
 }
 
-const char* FireEventRequestData::ascii_fingerprint = "187E754B26707EE32451E6A27FB672CE";
-const uint8_t FireEventRequestData::binary_fingerprint[16] = {0x18,0x7E,0x75,0x4B,0x26,0x70,0x7E,0xE3,0x24,0x51,0xE6,0xA2,0x7F,0xB6,0x72,0xCE};
+const char* TableMeta::ascii_fingerprint = "2748901DF3E03B56075825ABF0FCFD25";
+const uint8_t TableMeta::binary_fingerprint[16] = {0x27,0x48,0x90,0x1D,0xF3,0xE0,0x3B,0x56,0x07,0x58,0x25,0xAB,0xF0,0xFC,0xFD,0x25};
 
-uint32_t FireEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t TableMeta::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -9748,6 +9759,9 @@ uint32_t FireEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot
 
   using ::apache::thrift::protocol::TProtocolException;
 
+  bool isset_dbName = false;
+  bool isset_tableName = false;
+  bool isset_tableType = false;
 
   while (true)
   {
@@ -9758,9 +9772,33 @@ uint32_t FireEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot
     switch (fid)
     {
       case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->insertData.read(iprot);
-          this->__isset.insertData = true;
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->dbName);
+          isset_dbName = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->tableName);
+          isset_tableName = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->tableType);
+          isset_tableType = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 4:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->comments);
+          this->__isset.comments = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -9774,30 +9812,52 @@ uint32_t FireEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot
 
   xfer += iprot->readStructEnd();
 
+  if (!isset_dbName)
+    throw TProtocolException(TProtocolException::INVALID_DATA);
+  if (!isset_tableName)
+    throw TProtocolException(TProtocolException::INVALID_DATA);
+  if (!isset_tableType)
+    throw TProtocolException(TProtocolException::INVALID_DATA);
   return xfer;
 }
 
-uint32_t FireEventRequestData::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t TableMeta::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("FireEventRequestData");
+  xfer += oprot->writeStructBegin("TableMeta");
+
+  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString(this->dbName);
+  xfer += oprot->writeFieldEnd();
 
-  xfer += oprot->writeFieldBegin("insertData", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->insertData.write(oprot);
+  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 2);
+  xfer += oprot->writeString(this->tableName);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("tableType", ::apache::thrift::protocol::T_STRING, 3);
+  xfer += oprot->writeString(this->tableType);
   xfer += oprot->writeFieldEnd();
 
+  if (this->__isset.comments) {
+    xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 4);
+    xfer += oprot->writeString(this->comments);
+    xfer += oprot->writeFieldEnd();
+  }
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-void swap(FireEventRequestData &a, FireEventRequestData &b) {
+void swap(TableMeta &a, TableMeta &b) {
   using ::std::swap;
-  swap(a.insertData, b.insertData);
+  swap(a.dbName, b.dbName);
+  swap(a.tableName, b.tableName);
+  swap(a.tableType, b.tableType);
+  swap(a.comments, b.comments);
   swap(a.__isset, b.__isset);
 }
 
-const char* FireEventRequest::ascii_fingerprint = "1BA3A7F00159254072C3979B1429B50B";
-const uint8_t FireEventRequest::binary_fingerprint[16] = {0x1B,0xA3,0xA7,0xF0,0x01,0x59,0x25,0x40,0x72,0xC3,0x97,0x9B,0x14,0x29,0xB5,0x0B};
+const char* FireEventRequest::ascii_fingerprint = "252423A2C6348E0FFCA35061FD783C8F";
+const uint8_t FireEventRequest::binary_fingerprint[16] = {0x25,0x24,0x23,0xA2,0xC6,0x34,0x8E,0x0F,0xFC,0xA3,0x50,0x61,0xFD,0x78,0x3C,0x8F};
 
 uint32_t FireEventRequest::read(::apache::thrift::protocol::TProtocol* iprot) {
 
@@ -9810,8 +9870,9 @@ uint32_t FireEventRequest::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   using ::apache::thrift::protocol::TProtocolException;
 
+  bool isset_eventType = false;
+  bool isset_dbName = false;
   bool isset_successful = false;
-  bool isset_data = false;
 
   while (true)
   {
@@ -9822,25 +9883,27 @@ uint32_t FireEventRequest::read(::apache::thrift::protocol::TProtocol* iprot) {
     switch (fid)
     {
       case 1:
-        if (ftype == ::apache::thrift::protocol::T_BOOL) {
-          xfer += iprot->readBool(this->successful);
-          isset_successful = true;
+        if (ftype == ::apache::thrift::protocol::T_I32) {
+          int32_t ecast413;
+          xfer += iprot->readI32(ecast413);
+          this->eventType = (EventRequestType::type)ecast413;
+          isset_eventType = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
       case 2:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->data.read(iprot);
-          isset_data = true;
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->dbName);
+          isset_dbName = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
       case 3:
-        if (ftype == ::apache::thrift::protocol::T_STRING) {
-          xfer += iprot->readString(this->dbName);
-          this->__isset.dbName = true;
+        if (ftype == ::apache::thrift::protocol::T_BOOL) {
+          xfer += iprot->readBool(this->successful);
+          isset_successful = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -9857,14 +9920,14 @@ uint32_t FireEventRequest::read(::apache::thrift::protocol::TProtocol* iprot) {
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->partitionVals.clear();
-            uint32_t _size413;
-            ::apache::thrift::protocol::TType _etype416;
-            xfer += iprot->readListBegin(_etype416, _size413);
-            this->partitionVals.resize(_size413);
-            uint32_t _i417;
-            for (_i417 = 0; _i417 < _size413; ++_i417)
+            uint32_t _size414;
+            ::apache::thrift::protocol::TType _etype417;
+            xfer += iprot->readListBegin(_etype417, _size414);
+            this->partitionVals.resize(_size414);
+            uint32_t _i418;
+            for (_i418 = 0; _i418 < _size414; ++_i418)
             {
-              xfer += iprot->readString(this->partitionVals[_i417]);
+              xfer += iprot->readString(this->partitionVals[_i418]);
             }
             xfer += iprot->readListEnd();
           }
@@ -9882,9 +9945,11 @@ uint32_t FireEventRequest::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   xfer += iprot->readStructEnd();
 
-  if (!isset_successful)
+  if (!isset_eventType)
     throw TProtocolException(TProtocolException::INVALID_DATA);
-  if (!isset_data)
+  if (!isset_dbName)
+    throw TProtocolException(TProtocolException::INVALID_DATA);
+  if (!isset_successful)
     throw TProtocolException(TProtocolException::INVALID_DATA);
   return xfer;
 }
@@ -9893,19 +9958,18 @@ uint32_t FireEventRequest::write(::apache::thrift::protocol::TProtocol* oprot) c
   uint32_t xfer = 0;
   xfer += oprot->writeStructBegin("FireEventRequest");
 
-  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_BOOL, 1);
-  xfer += oprot->writeBool(this->successful);
+  xfer += oprot->writeFieldBegin("eventType", ::apache::thrift::protocol::T_I32, 1);
+  xfer += oprot->writeI32((int32_t)this->eventType);
   xfer += oprot->writeFieldEnd();
 
-  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
-  xfer += this->data.write(oprot);
+  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
+  xfer += oprot->writeString(this->dbName);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_BOOL, 3);
+  xfer += oprot->writeBool(this->successful);
   xfer += oprot->writeFieldEnd();
 
-  if (this->__isset.dbName) {
-    xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 3);
-    xfer += oprot->writeString(this->dbName);
-    xfer += oprot->writeFieldEnd();
-  }
   if (this->__isset.tableName) {
     xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 4);
     xfer += oprot->writeString(this->tableName);
@@ -9915,10 +9979,10 @@ uint32_t FireEventRequest::write(::apache::thrift::protocol::TProtocol* oprot) c
     xfer += oprot->writeFieldBegin("partitionVals", ::apache::thrift::protocol::T_LIST, 5);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partitionVals.size()));
-      std::vector<std::string> ::const_iterator _iter418;
-      for (_iter418 = this->partitionVals.begin(); _iter418 != this->partitionVals.end(); ++_iter418)
+      std::vector<std::string> ::const_iterator _iter419;
+      for (_iter419 = this->partitionVals.begin(); _iter419 != this->partitionVals.end(); ++_iter419)
       {
-        xfer += oprot->writeString((*_iter418));
+        xfer += oprot->writeString((*_iter419));
       }
       xfer += oprot->writeListEnd();
     }
@@ -9931,253 +9995,14 @@ uint32_t FireEventRequest::write(::apache::thrift::protocol::TProtocol* oprot) c
 
 void swap(FireEventRequest &a, FireEventRequest &b) {
   using ::std::swap;
-  swap(a.successful, b.successful);
-  swap(a.data, b.data);
+  swap(a.eventType, b.eventType);
   swap(a.dbName, b.dbName);
+  swap(a.successful, b.successful);
   swap(a.tableName, b.tableName);
   swap(a.partitionVals, b.partitionVals);
   swap(a.__isset, b.__isset);
 }
 
-const char* FireEventResponse::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
-const uint8_t FireEventResponse::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};
-
-uint32_t FireEventResponse::read(::apache::thrift::protocol::TProtocol* iprot) {
-
-  uint32_t xfer = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TType ftype;
-  int16_t fid;
-
-  xfer += iprot->readStructBegin(fname);
-
-  using ::apache::thrift::protocol::TProtocolException;
-
-
-  while (true)
-  {
-    xfer += iprot->readFieldBegin(fname, ftype, fid);
-    if (ftype == ::apache::thrift::protocol::T_STOP) {
-      break;
-    }
-    xfer += iprot->skip(ftype);
-    xfer += iprot->readFieldEnd();
-  }
-
-  xfer += iprot->readStructEnd();
-
-  return xfer;
-}
-
-uint32_t FireEventResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
-  uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("FireEventResponse");
-
-  xfer += oprot->writeFieldStop();
-  xfer += oprot->writeStructEnd();
-  return xfer;
-}
-
-void swap(FireEventResponse &a, FireEventResponse &b) {
-  using ::std::swap;
-  (void) a;
-  (void) b;
-}
-
-const char* GetAllFunctionsResponse::ascii_fingerprint = "CEE0CA1D7402D4135EF7F42C0F0E0A68";
-const uint8_t GetAllFunctionsResponse::binary_fingerprint[16] = {0xCE,0xE0,0xCA,0x1D,0x74,0x02,0xD4,0x13,0x5E,0xF7,0xF4,0x2C,0x0F,0x0E,0x0A,0x68};
-
-uint32_t GetAllFunctionsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {
-
-  uint32_t xfer = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TType ftype;
-  int16_t fid;
-
-  xfer += iprot->readStructBegin(fname);
-
-  using ::apache::thrift::protocol::TProtocolException;
-
-
-  while (true)
-  {
-    xfer += iprot->readFieldBegin(fname, ftype, fid);
-    if (ftype == ::apache::thrift::protocol::T_STOP) {
-      break;
-    }
-    switch (fid)
-    {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_LIST) {
-          {
-            this->functions.clear();
-            uint32_t _size419;
-            ::apache::thrift::protocol::TType _etype422;
-            xfer += iprot->readListBegin(_etype422, _size419);
-            this->functions.resize(_size419);
-            uint32_t _i423;
-            for (_i423 = 0; _i423 < _size419; ++_i423)
-            {
-              xfer += this->functions[_i423].read(iprot);
-            }
-            xfer += iprot->readListEnd();
-          }
-          this->__isset.functions = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      default:
-        xfer += iprot->skip(ftype);
-        break;
-    }
-    xfer += iprot->readFieldEnd();
-  }
-
-  xfer += iprot->readStructEnd();
-
-  return xfer;
-}
-
-uint32_t GetAllFunctionsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
-  uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("GetAllFunctionsResponse");
-
-  if (this->__isset.functions) {
-    xfer += oprot->writeFieldBegin("functions", ::apache::thrift::protocol::T_LIST, 1);
-    {
-      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->functions.size()));
-      std::vector<Function> ::const_iterator _iter424;
-      for (_iter424 = this->functions.begin(); _iter424 != this->functions.end(); ++_iter424)
-      {
-        xfer += (*_iter424).write(oprot);
-      }
-      xfer += oprot->writeListEnd();
-    }
-    xfer += oprot->writeFieldEnd();
-  }
-  xfer += oprot->writeFieldStop();
-  xfer += oprot->writeStructEnd();
-  return xfer;
-}
-
-void swap(GetAllFunctionsResponse &a, GetAllFunctionsResponse &b) {
-  using ::std::swap;
-  swap(a.functions, b.functions);
-  swap(a.__isset, b.__isset);
-}
-
-const char* TableMeta::ascii_fingerprint = "2748901DF3E03B56075825ABF0FCFD25";
-const uint8_t TableMeta::binary_fingerprint[16] = {0x27,0x48,0x90,0x1D,0xF3,0xE0,0x3B,0x56,0x07,0x58,0x25,0xAB,0xF0,0xFC,0xFD,0x25};
-
-uint32_t TableMeta::read(::apache::thrift::protocol::TProtocol* iprot) {
-
-  uint32_t xfer = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TType ftype;
-  int16_t fid;
-
-  xfer += iprot->readStructBegin(fname);
-
-  using ::apache::thrift::protocol::TProtocolException;
-
-  bool isset_dbName = false;
-  bool isset_tableName = false;
-  bool isset_tableType = false;
-
-  while (true)
-  {
-    xfer += iprot->readFieldBegin(fname, ftype, fid);
-    if (ftype == ::apache::thrift::protocol::T_STOP) {
-      break;
-    }
-    switch (fid)
-    {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRING) {
-          xfer += iprot->readString(this->dbName);
-          isset_dbName = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 2:
-        if (ftype == ::apache::thrift::protocol::T_STRING) {
-          xfer += iprot->readString(this->tableName);
-          isset_tableName = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 3:
-        if (ftype == ::apache::thrift::protocol::T_STRING) {
-          xfer += iprot->readString(this->tableType);
-          isset_tableType = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 4:
-        if (ftype == ::apache::thrift::protocol::T_STRING) {
-          xfer += iprot->readString(this->comments);
-          this->__isset.comments = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      default:
-        xfer += iprot->skip(ftype);
-        break;
-    }
-    xfer += iprot->readFieldEnd();
-  }
-
-  xfer += iprot->readStructEnd();
-
-  if (!isset_dbName)
-    throw TProtocolException(TProtocolException::INVALID_DATA);
-  if (!isset_tableName)
-    throw TProtocolException(TProtocolException::INVALID_DATA);
-  if (!isset_tableType)
-    throw TProtocolException(TProtocolException::INVALID_DATA);
-  return xfer;
-}
-
-uint32_t TableMeta::write(::apache::thrift::protocol::TProtocol* oprot) const {
-  uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("TableMeta");
-
-  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
-  xfer += oprot->writeString(this->dbName);
-  xfer += oprot->writeFieldEnd();
-
-  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 2);
-  xfer += oprot->writeString(this->tableName);
-  xfer += oprot->writeFieldEnd();
-
-  xfer += oprot->writeFieldBegin("tableType", ::apache::thrift::protocol::T_STRING, 3);
-  xfer += oprot->writeString(this->tableType);
-  xfer += oprot->writeFieldEnd();
-
-  if (this->__isset.comments) {
-    xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 4);
-    xfer += oprot->writeString(this->comments);
-    xfer += oprot->writeFieldEnd();
-  }
-  xfer += oprot->writeFieldStop();
-  xfer += oprot->writeStructEnd();
-  return xfer;
-}
-
-void swap(TableMeta &a, TableMeta &b) {
-  using ::std::swap;
-  swap(a.dbName, b.dbName);
-  swap(a.tableName, b.tableName);
-  swap(a.tableType, b.tableType);
-  swap(a.comments, b.comments);
-  swap(a.__isset, b.__isset);
-}
-
 const char* MetaException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
 const uint8_t MetaException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};
 
diff --git a/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.h b/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.h
index 30e00c8..2f3983e 100644
--- a/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.h
+++ b/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.h
@@ -106,6 +106,16 @@ struct GrantRevokeType {
 
 extern const std::map<int, const char*> _GrantRevokeType_VALUES_TO_NAMES;
 
+struct EventRequestType {
+  enum type {
+    INSERT = 1,
+    UPDATE = 2,
+    DELETE = 3
+  };
+};
+
+extern const std::map<int, const char*> _EventRequestType_VALUES_TO_NAMES;
+
 struct FunctionType {
   enum type {
     JAVA = 1
@@ -5290,198 +5300,6 @@ class CurrentNotificationEventId {
 
 void swap(CurrentNotificationEventId &a, CurrentNotificationEventId &b);
 
-
-class InsertEventRequestData {
- public:
-
-  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
-  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};
-
-  InsertEventRequestData() {
-  }
-
-  virtual ~InsertEventRequestData() throw() {}
-
-  std::vector<std::string>  filesAdded;
-
-  void __set_filesAdded(const std::vector<std::string> & val) {
-    filesAdded = val;
-  }
-
-  bool operator == (const InsertEventRequestData & rhs) const
-  {
-    if (!(filesAdded == rhs.filesAdded))
-      return false;
-    return true;
-  }
-  bool operator != (const InsertEventRequestData &rhs) const {
-    return !(*this == rhs);
-  }
-
-  bool operator < (const InsertEventRequestData & ) const;
-
-  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
-  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
-
-};
-
-void swap(InsertEventRequestData &a, InsertEventRequestData &b);
-
-typedef struct _FireEventRequestData__isset {
-  _FireEventRequestData__isset() : insertData(false) {}
-  bool insertData;
-} _FireEventRequestData__isset;
-
-class FireEventRequestData {
- public:
-
-  static const char* ascii_fingerprint; // = "187E754B26707EE32451E6A27FB672CE";
-  static const uint8_t binary_fingerprint[16]; // = {0x18,0x7E,0x75,0x4B,0x26,0x70,0x7E,0xE3,0x24,0x51,0xE6,0xA2,0x7F,0xB6,0x72,0xCE};
-
-  FireEventRequestData() {
-  }
-
-  virtual ~FireEventRequestData() throw() {}
-
-  InsertEventRequestData insertData;
-
-  _FireEventRequestData__isset __isset;
-
-  void __set_insertData(const InsertEventRequestData& val) {
-    insertData = val;
-  }
-
-  bool operator == (const FireEventRequestData & rhs) const
-  {
-    if (!(insertData == rhs.insertData))
-      return false;
-    return true;
-  }
-  bool operator != (const FireEventRequestData &rhs) const {
-    return !(*this == rhs);
-  }
-
-  bool operator < (const FireEventRequestData & ) const;
-
-  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
-  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
-
-};
-
-void swap(FireEventRequestData &a, FireEventRequestData &b);
-
-typedef struct _FireEventRequest__isset {
-  _FireEventRequest__isset() : dbName(false), tableName(false), partitionVals(false) {}
-  bool dbName;
-  bool tableName;
-  bool partitionVals;
-} _FireEventRequest__isset;
-
-class FireEventRequest {
- public:
-
-  static const char* ascii_fingerprint; // = "1BA3A7F00159254072C3979B1429B50B";
-  static const uint8_t binary_fingerprint[16]; // = {0x1B,0xA3,0xA7,0xF0,0x01,0x59,0x25,0x40,0x72,0xC3,0x97,0x9B,0x14,0x29,0xB5,0x0B};
-
-  FireEventRequest() : successful(0), dbName(), tableName() {
-  }
-
-  virtual ~FireEventRequest() throw() {}
-
-  bool successful;
-  FireEventRequestData data;
-  std::string dbName;
-  std::string tableName;
-  std::vector<std::string>  partitionVals;
-
-  _FireEventRequest__isset __isset;
-
-  void __set_successful(const bool val) {
-    successful = val;
-  }
-
-  void __set_data(const FireEventRequestData& val) {
-    data = val;
-  }
-
-  void __set_dbName(const std::string& val) {
-    dbName = val;
-    __isset.dbName = true;
-  }
-
-  void __set_tableName(const std::string& val) {
-    tableName = val;
-    __isset.tableName = true;
-  }
-
-  void __set_partitionVals(const std::vector<std::string> & val) {
-    partitionVals = val;
-    __isset.partitionVals = true;
-  }
-
-  bool operator == (const FireEventRequest & rhs) const
-  {
-    if (!(successful == rhs.successful))
-      return false;
-    if (!(data == rhs.data))
-      return false;
-    if (__isset.dbName != rhs.__isset.dbName)
-      return false;
-    else if (__isset.dbName && !(dbName == rhs.dbName))
-      return false;
-    if (__isset.tableName != rhs.__isset.tableName)
-      return false;
-    else if (__isset.tableName && !(tableName == rhs.tableName))
-      return false;
-    if (__isset.partitionVals != rhs.__isset.partitionVals)
-      return false;
-    else if (__isset.partitionVals && !(partitionVals == rhs.partitionVals))
-      return false;
-    return true;
-  }
-  bool operator != (const FireEventRequest &rhs) const {
-    return !(*this == rhs);
-  }
-
-  bool operator < (const FireEventRequest & ) const;
-
-  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
-  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
-
-};
-
-void swap(FireEventRequest &a, FireEventRequest &b);
-
-
-class FireEventResponse {
- public:
-
-  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
-  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};
-
-  FireEventResponse() {
-  }
-
-  virtual ~FireEventResponse() throw() {}
-
-
-  bool operator == (const FireEventResponse & /* rhs */) const
-  {
-    return true;
-  }
-  bool operator != (const FireEventResponse &rhs) const {
-    return !(*this == rhs);
-  }
-
-  bool operator < (const FireEventResponse & ) const;
-
-  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
-  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
-
-};
-
-void swap(FireEventResponse &a, FireEventResponse &b);
-
 typedef struct _GetAllFunctionsResponse__isset {
   _GetAllFunctionsResponse__isset() : functions(false) {}
   bool functions;
@@ -5595,6 +5413,84 @@ class TableMeta {
 
 void swap(TableMeta &a, TableMeta &b);
 
+typedef struct _FireEventRequest__isset {
+  _FireEventRequest__isset() : tableName(false), partitionVals(false) {}
+  bool tableName;
+  bool partitionVals;
+} _FireEventRequest__isset;
+
+class FireEventRequest {
+ public:
+
+  static const char* ascii_fingerprint; // = "252423A2C6348E0FFCA35061FD783C8F";
+  static const uint8_t binary_fingerprint[16]; // = {0x25,0x24,0x23,0xA2,0xC6,0x34,0x8E,0x0F,0xFC,0xA3,0x50,0x61,0xFD,0x78,0x3C,0x8F};
+
+  FireEventRequest() : eventType((EventRequestType::type)0), dbName(), successful(0), tableName() {
+  }
+
+  virtual ~FireEventRequest() throw() {}
+
+  EventRequestType::type eventType;
+  std::string dbName;
+  bool successful;
+  std::string tableName;
+  std::vector<std::string>  partitionVals;
+
+  _FireEventRequest__isset __isset;
+
+  void __set_eventType(const EventRequestType::type val) {
+    eventType = val;
+  }
+
+  void __set_dbName(const std::string& val) {
+    dbName = val;
+  }
+
+  void __set_successful(const bool val) {
+    successful = val;
+  }
+
+  void __set_tableName(const std::string& val) {
+    tableName = val;
+    __isset.tableName = true;
+  }
+
+  void __set_partitionVals(const std::vector<std::string> & val) {
+    partitionVals = val;
+    __isset.partitionVals = true;
+  }
+
+  bool operator == (const FireEventRequest & rhs) const
+  {
+    if (!(eventType == rhs.eventType))
+      return false;
+    if (!(dbName == rhs.dbName))
+      return false;
+    if (!(successful == rhs.successful))
+      return false;
+    if (__isset.tableName != rhs.__isset.tableName)
+      return false;
+    else if (__isset.tableName && !(tableName == rhs.tableName))
+      return false;
+    if (__isset.partitionVals != rhs.__isset.partitionVals)
+      return false;
+    else if (__isset.partitionVals && !(partitionVals == rhs.partitionVals))
+      return false;
+    return true;
+  }
+  bool operator != (const FireEventRequest &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const FireEventRequest & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+void swap(FireEventRequest &a, FireEventRequest &b);
+
 typedef struct _MetaException__isset {
   _MetaException__isset() : message(false) {}
   bool message;
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EventRequestType.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EventRequestType.java
new file mode 100644
index 0000000..084c3ee
--- /dev/null
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EventRequestType.java
@@ -0,0 +1,48 @@
+/**
+ * Autogenerated by Thrift Compiler (0.9.0)
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ *  @generated
+ */
+package org.apache.hadoop.hive.metastore.api;
+
+
+import java.util.Map;
+import java.util.HashMap;
+import org.apache.thrift.TEnum;
+
+public enum EventRequestType implements org.apache.thrift.TEnum {
+  INSERT(1),
+  UPDATE(2),
+  DELETE(3);
+
+  private final int value;
+
+  private EventRequestType(int value) {
+    this.value = value;
+  }
+
+  /**
+   * Get the integer value of this enum value, as defined in the Thrift IDL.
+   */
+  public int getValue() {
+    return value;
+  }
+
+  /**
+   * Find a the enum type by its integer value, as defined in the Thrift IDL.
+   * @return null if the value is not found.
+   */
+  public static EventRequestType findByValue(int value) { 
+    switch (value) {
+      case 1:
+        return INSERT;
+      case 2:
+        return UPDATE;
+      case 3:
+        return DELETE;
+      default:
+        return null;
+    }
+  }
+}
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequest.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequest.java
index e2dc5af..9367034 100644
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequest.java
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequest.java
@@ -34,9 +34,9 @@
 public class FireEventRequest implements org.apache.thrift.TBase<FireEventRequest, FireEventRequest._Fields>, java.io.Serializable, Cloneable {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FireEventRequest");
 
-  private static final org.apache.thrift.protocol.TField SUCCESSFUL_FIELD_DESC = new org.apache.thrift.protocol.TField("successful", org.apache.thrift.protocol.TType.BOOL, (short)1);
-  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)2);
-  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)3);
+  private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventType", org.apache.thrift.protocol.TType.I32, (short)1);
+  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)2);
+  private static final org.apache.thrift.protocol.TField SUCCESSFUL_FIELD_DESC = new org.apache.thrift.protocol.TField("successful", org.apache.thrift.protocol.TType.BOOL, (short)3);
   private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)4);
   private static final org.apache.thrift.protocol.TField PARTITION_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionVals", org.apache.thrift.protocol.TType.LIST, (short)5);
 
@@ -46,17 +46,21 @@
     schemes.put(TupleScheme.class, new FireEventRequestTupleSchemeFactory());
   }
 
+  private EventRequestType eventType; // required
+  private String dbName; // required
   private boolean successful; // required
-  private FireEventRequestData data; // required
-  private String dbName; // optional
   private String tableName; // optional
   private List<String> partitionVals; // optional
 
   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-    SUCCESSFUL((short)1, "successful"),
-    DATA((short)2, "data"),
-    DB_NAME((short)3, "dbName"),
+    /**
+     * 
+     * @see EventRequestType
+     */
+    EVENT_TYPE((short)1, "eventType"),
+    DB_NAME((short)2, "dbName"),
+    SUCCESSFUL((short)3, "successful"),
     TABLE_NAME((short)4, "tableName"),
     PARTITION_VALS((short)5, "partitionVals");
 
@@ -73,12 +77,12 @@
      */
     public static _Fields findByThriftId(int fieldId) {
       switch(fieldId) {
-        case 1: // SUCCESSFUL
-          return SUCCESSFUL;
-        case 2: // DATA
-          return DATA;
-        case 3: // DB_NAME
+        case 1: // EVENT_TYPE
+          return EVENT_TYPE;
+        case 2: // DB_NAME
           return DB_NAME;
+        case 3: // SUCCESSFUL
+          return SUCCESSFUL;
         case 4: // TABLE_NAME
           return TABLE_NAME;
         case 5: // PARTITION_VALS
@@ -125,16 +129,16 @@ public String getFieldName() {
   // isset id assignments
   private static final int __SUCCESSFUL_ISSET_ID = 0;
   private byte __isset_bitfield = 0;
-  private _Fields optionals[] = {_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.PARTITION_VALS};
+  private _Fields optionals[] = {_Fields.TABLE_NAME,_Fields.PARTITION_VALS};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+    tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("eventType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EventRequestType.class)));
+    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
     tmpMap.put(_Fields.SUCCESSFUL, new org.apache.thrift.meta_data.FieldMetaData("successful", org.apache.thrift.TFieldRequirementType.REQUIRED, 
         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
-    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireEventRequestData.class)));
-    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
-        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
     tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
     tmpMap.put(_Fields.PARTITION_VALS, new org.apache.thrift.meta_data.FieldMetaData("partitionVals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
@@ -148,13 +152,15 @@ public FireEventRequest() {
   }
 
   public FireEventRequest(
-    boolean successful,
-    FireEventRequestData data)
+    EventRequestType eventType,
+    String dbName,
+    boolean successful)
   {
     this();
+    this.eventType = eventType;
+    this.dbName = dbName;
     this.successful = successful;
     setSuccessfulIsSet(true);
-    this.data = data;
   }
 
   /**
@@ -162,13 +168,13 @@ public FireEventRequest(
    */
   public FireEventRequest(FireEventRequest other) {
     __isset_bitfield = other.__isset_bitfield;
-    this.successful = other.successful;
-    if (other.isSetData()) {
-      this.data = new FireEventRequestData(other.data);
+    if (other.isSetEventType()) {
+      this.eventType = other.eventType;
     }
     if (other.isSetDbName()) {
       this.dbName = other.dbName;
     }
+    this.successful = other.successful;
     if (other.isSetTableName()) {
       this.tableName = other.tableName;
     }
@@ -187,56 +193,42 @@ public FireEventRequest deepCopy() {
 
   @Override
   public void clear() {
+    this.eventType = null;
+    this.dbName = null;
     setSuccessfulIsSet(false);
     this.successful = false;
-    this.data = null;
-    this.dbName = null;
     this.tableName = null;
     this.partitionVals = null;
   }
 
-  public boolean isSuccessful() {
-    return this.successful;
-  }
-
-  public void setSuccessful(boolean successful) {
-    this.successful = successful;
-    setSuccessfulIsSet(true);
-  }
-
-  public void unsetSuccessful() {
-    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESSFUL_ISSET_ID);
-  }
-
-  /** Returns true if field successful is set (has been assigned a value) and false otherwise */
-  public boolean isSetSuccessful() {
-    return EncodingUtils.testBit(__isset_bitfield, __SUCCESSFUL_ISSET_ID);
-  }
-
-  public void setSuccessfulIsSet(boolean value) {
-    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESSFUL_ISSET_ID, value);
-  }
-
-  public FireEventRequestData getData() {
-    return this.data;
+  /**
+   * 
+   * @see EventRequestType
+   */
+  public EventRequestType getEventType() {
+    return this.eventType;
   }
 
-  public void setData(FireEventRequestData data) {
-    this.data = data;
+  /**
+   * 
+   * @see EventRequestType
+   */
+  public void setEventType(EventRequestType eventType) {
+    this.eventType = eventType;
   }
 
-  public void unsetData() {
-    this.data = null;
+  public void unsetEventType() {
+    this.eventType = null;
   }
 
-  /** Returns true if field data is set (has been assigned a value) and false otherwise */
-  public boolean isSetData() {
-    return this.data != null;
+  /** Returns true if field eventType is set (has been assigned a value) and false otherwise */
+  public boolean isSetEventType() {
+    return this.eventType != null;
   }
 
-  public void setDataIsSet(boolean value) {
+  public void setEventTypeIsSet(boolean value) {
     if (!value) {
-      this.data = null;
+      this.eventType = null;
     }
   }
 
@@ -263,6 +255,28 @@ public void setDbNameIsSet(boolean value) {
     }
   }
 
+  public boolean isSuccessful() {
+    return this.successful;
+  }
+
+  public void setSuccessful(boolean successful) {
+    this.successful = successful;
+    setSuccessfulIsSet(true);
+  }
+
+  public void unsetSuccessful() {
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESSFUL_ISSET_ID);
+  }
+
+  /** Returns true if field successful is set (has been assigned a value) and false otherwise */
+  public boolean isSetSuccessful() {
+    return EncodingUtils.testBit(__isset_bitfield, __SUCCESSFUL_ISSET_ID);
+  }
+
+  public void setSuccessfulIsSet(boolean value) {
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESSFUL_ISSET_ID, value);
+  }
+
   public String getTableName() {
     return this.tableName;
   }
@@ -326,27 +340,27 @@ public void setPartitionValsIsSet(boolean value) {
 
   public void setFieldValue(_Fields field, Object value) {
     switch (field) {
-    case SUCCESSFUL:
+    case EVENT_TYPE:
       if (value == null) {
-        unsetSuccessful();
+        unsetEventType();
       } else {
-        setSuccessful((Boolean)value);
+        setEventType((EventRequestType)value);
       }
       break;
 
-    case DATA:
+    case DB_NAME:
       if (value == null) {
-        unsetData();
+        unsetDbName();
       } else {
-        setData((FireEventRequestData)value);
+        setDbName((String)value);
       }
       break;
 
-    case DB_NAME:
+    case SUCCESSFUL:
       if (value == null) {
-        unsetDbName();
+        unsetSuccessful();
       } else {
-        setDbName((String)value);
+        setSuccessful((Boolean)value);
       }
       break;
 
@@ -371,15 +385,15 @@ public void setFieldValue(_Fields field, Object value) {
 
   public Object getFieldValue(_Fields field) {
     switch (field) {
-    case SUCCESSFUL:
-      return Boolean.valueOf(isSuccessful());
-
-    case DATA:
-      return getData();
+    case EVENT_TYPE:
+      return getEventType();
 
     case DB_NAME:
       return getDbName();
 
+    case SUCCESSFUL:
+      return Boolean.valueOf(isSuccessful());
+
     case TABLE_NAME:
       return getTableName();
 
@@ -397,12 +411,12 @@ public boolean isSet(_Fields field) {
     }
 
     switch (field) {
-    case SUCCESSFUL:
-      return isSetSuccessful();
-    case DATA:
-      return isSetData();
+    case EVENT_TYPE:
+      return isSetEventType();
     case DB_NAME:
       return isSetDbName();
+    case SUCCESSFUL:
+      return isSetSuccessful();
     case TABLE_NAME:
       return isSetTableName();
     case PARTITION_VALS:
@@ -424,21 +438,12 @@ public boolean equals(FireEventRequest that) {
     if (that == null)
       return false;
 
-    boolean this_present_successful = true;
-    boolean that_present_successful = true;
-    if (this_present_successful || that_present_successful) {
-      if (!(this_present_successful && that_present_successful))
+    boolean this_present_eventType = true && this.isSetEventType();
+    boolean that_present_eventType = true && that.isSetEventType();
+    if (this_present_eventType || that_present_eventType) {
+      if (!(this_present_eventType && that_present_eventType))
         return false;
-      if (this.successful != that.successful)
-        return false;
-    }
-
-    boolean this_present_data = true && this.isSetData();
-    boolean that_present_data = true && that.isSetData();
-    if (this_present_data || that_present_data) {
-      if (!(this_present_data && that_present_data))
-        return false;
-      if (!this.data.equals(that.data))
+      if (!this.eventType.equals(that.eventType))
         return false;
     }
 
@@ -451,6 +456,15 @@ public boolean equals(FireEventRequest that) {
         return false;
     }
 
+    boolean this_present_successful = true;
+    boolean that_present_successful = true;
+    if (this_present_successful || that_present_successful) {
+      if (!(this_present_successful && that_present_successful))
+        return false;
+      if (this.successful != that.successful)
+        return false;
+    }
+
     boolean this_present_tableName = true && this.isSetTableName();
     boolean that_present_tableName = true && that.isSetTableName();
     if (this_present_tableName || that_present_tableName) {
@@ -476,21 +490,21 @@ public boolean equals(FireEventRequest that) {
   public int hashCode() {
     HashCodeBuilder builder = new HashCodeBuilder();
 
-    boolean present_successful = true;
-    builder.append(present_successful);
-    if (present_successful)
-      builder.append(successful);
-
-    boolean present_data = true && (isSetData());
-    builder.append(present_data);
-    if (present_data)
-      builder.append(data);
+    boolean present_eventType = true && (isSetEventType());
+    builder.append(present_eventType);
+    if (present_eventType)
+      builder.append(eventType.getValue());
 
     boolean present_dbName = true && (isSetDbName());
     builder.append(present_dbName);
     if (present_dbName)
       builder.append(dbName);
 
+    boolean present_successful = true;
+    builder.append(present_successful);
+    if (present_successful)
+      builder.append(successful);
+
     boolean present_tableName = true && (isSetTableName());
     builder.append(present_tableName);
     if (present_tableName)
@@ -512,32 +526,32 @@ public int compareTo(FireEventRequest other) {
     int lastComparison = 0;
     FireEventRequest typedOther = (FireEventRequest)other;
 
-    lastComparison = Boolean.valueOf(isSetSuccessful()).compareTo(typedOther.isSetSuccessful());
+    lastComparison = Boolean.valueOf(isSetEventType()).compareTo(typedOther.isSetEventType());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    if (isSetSuccessful()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successful, typedOther.successful);
+    if (isSetEventType()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventType, typedOther.eventType);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
+    lastComparison = Boolean.valueOf(isSetDbName()).compareTo(typedOther.isSetDbName());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    if (isSetData()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
+    if (isSetDbName()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, typedOther.dbName);
       if (lastComparison != 0) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetDbName()).compareTo(typedOther.isSetDbName());
+    lastComparison = Boolean.valueOf(isSetSuccessful()).compareTo(typedOther.isSetSuccessful());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    if (isSetDbName()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, typedOther.dbName);
+    if (isSetSuccessful()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successful, typedOther.successful);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -582,27 +596,25 @@ public String toString() {
     StringBuilder sb = new StringBuilder("FireEventRequest(");
     boolean first = true;
 
-    sb.append("successful:");
-    sb.append(this.successful);
+    sb.append("eventType:");
+    if (this.eventType == null) {
+      sb.append("null");
+    } else {
+      sb.append(this.eventType);
+    }
     first = false;
     if (!first) sb.append(", ");
-    sb.append("data:");
-    if (this.data == null) {
+    sb.append("dbName:");
+    if (this.dbName == null) {
       sb.append("null");
     } else {
-      sb.append(this.data);
+      sb.append(this.dbName);
     }
     first = false;
-    if (isSetDbName()) {
-      if (!first) sb.append(", ");
-      sb.append("dbName:");
-      if (this.dbName == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.dbName);
-      }
-      first = false;
-    }
+    if (!first) sb.append(", ");
+    sb.append("successful:");
+    sb.append(this.successful);
+    first = false;
     if (isSetTableName()) {
       if (!first) sb.append(", ");
       sb.append("tableName:");
@@ -629,12 +641,16 @@ public String toString() {
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
-    if (!isSetSuccessful()) {
-      throw new org.apache.thrift.protocol.TProtocolException("Required field 'successful' is unset! Struct:" + toString());
+    if (!isSetEventType()) {
+      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventType' is unset! Struct:" + toString());
+    }
+
+    if (!isSetDbName()) {
+      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbName' is unset! Struct:" + toString());
     }
 
-    if (!isSetData()) {
-      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data' is unset! Struct:" + toString());
+    if (!isSetSuccessful()) {
+      throw new org.apache.thrift.protocol.TProtocolException("Required field 'successful' is unset! Struct:" + toString());
     }
 
     // check for sub-struct validity
@@ -676,27 +692,26 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, FireEventRequest st
           break;
         }
         switch (schemeField.id) {
-          case 1: // SUCCESSFUL
-            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
-              struct.successful = iprot.readBool();
-              struct.setSuccessfulIsSet(true);
+          case 1: // EVENT_TYPE
+            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
+              struct.eventType = EventRequestType.findByValue(iprot.readI32());
+              struct.setEventTypeIsSet(true);
             } else { 
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
             }
             break;
-          case 2: // DATA
-            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-              struct.data = new FireEventRequestData();
-              struct.data.read(iprot);
-              struct.setDataIsSet(true);
+          case 2: // DB_NAME
+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+              struct.dbName = iprot.readString();
+              struct.setDbNameIsSet(true);
             } else { 
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
             }
             break;
-          case 3: // DB_NAME
-            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-              struct.dbName = iprot.readString();
-              struct.setDbNameIsSet(true);
+          case 3: // SUCCESSFUL
+            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
+              struct.successful = iprot.readBool();
+              struct.setSuccessfulIsSet(true);
             } else { 
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
             }
@@ -740,21 +755,19 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, FireEventRequest s
       struct.validate();
 
       oprot.writeStructBegin(STRUCT_DESC);
-      oprot.writeFieldBegin(SUCCESSFUL_FIELD_DESC);
-      oprot.writeBool(struct.successful);
-      oprot.writeFieldEnd();
-      if (struct.data != null) {
-        oprot.writeFieldBegin(DATA_FIELD_DESC);
-        struct.data.write(oprot);
+      if (struct.eventType != null) {
+        oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
+        oprot.writeI32(struct.eventType.getValue());
         oprot.writeFieldEnd();
       }
       if (struct.dbName != null) {
-        if (struct.isSetDbName()) {
-          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
-          oprot.writeString(struct.dbName);
-          oprot.writeFieldEnd();
-        }
+        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
+        oprot.writeString(struct.dbName);
+        oprot.writeFieldEnd();
       }
+      oprot.writeFieldBegin(SUCCESSFUL_FIELD_DESC);
+      oprot.writeBool(struct.successful);
+      oprot.writeFieldEnd();
       if (struct.tableName != null) {
         if (struct.isSetTableName()) {
           oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
@@ -793,22 +806,17 @@ public FireEventRequestTupleScheme getScheme() {
     @Override
     public void write(org.apache.thrift.protocol.TProtocol prot, FireEventRequest struct) throws org.apache.thrift.TException {
       TTupleProtocol oprot = (TTupleProtocol) prot;
+      oprot.writeI32(struct.eventType.getValue());
+      oprot.writeString(struct.dbName);
       oprot.writeBool(struct.successful);
-      struct.data.write(oprot);
       BitSet optionals = new BitSet();
-      if (struct.isSetDbName()) {
-        optionals.set(0);
-      }
       if (struct.isSetTableName()) {
-        optionals.set(1);
+        optionals.set(0);
       }
       if (struct.isSetPartitionVals()) {
-        optionals.set(2);
-      }
-      oprot.writeBitSet(optionals, 3);
-      if (struct.isSetDbName()) {
-        oprot.writeString(struct.dbName);
+        optionals.set(1);
       }
+      oprot.writeBitSet(optionals, 2);
       if (struct.isSetTableName()) {
         oprot.writeString(struct.tableName);
       }
@@ -826,21 +834,18 @@ public void write(org.apache.thrift.protocol.TProtocol prot, FireEventRequest st
     @Override
     public void read(org.apache.thrift.protocol.TProtocol prot, FireEventRequest struct) throws org.apache.thrift.TException {
       TTupleProtocol iprot = (TTupleProtocol) prot;
+      struct.eventType = EventRequestType.findByValue(iprot.readI32());
+      struct.setEventTypeIsSet(true);
+      struct.dbName = iprot.readString();
+      struct.setDbNameIsSet(true);
       struct.successful = iprot.readBool();
       struct.setSuccessfulIsSet(true);
-      struct.data = new FireEventRequestData();
-      struct.data.read(iprot);
-      struct.setDataIsSet(true);
-      BitSet incoming = iprot.readBitSet(3);
+      BitSet incoming = iprot.readBitSet(2);
       if (incoming.get(0)) {
-        struct.dbName = iprot.readString();
-        struct.setDbNameIsSet(true);
-      }
-      if (incoming.get(1)) {
         struct.tableName = iprot.readString();
         struct.setTableNameIsSet(true);
       }
-      if (incoming.get(2)) {
+      if (incoming.get(1)) {
         {
           org.apache.thrift.protocol.TList _list513 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
           struct.partitionVals = new ArrayList<String>(_list513.size);
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequestData.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequestData.java
deleted file mode 100644
index 008682e..0000000
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequestData.java
+++ /dev/null
@@ -1,305 +0,0 @@
-/**
- * Autogenerated by Thrift Compiler (0.9.0)
- *
- * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
- *  @generated
- */
-package org.apache.hadoop.hive.metastore.api;
-
-import org.apache.commons.lang.builder.HashCodeBuilder;
-import org.apache.thrift.scheme.IScheme;
-import org.apache.thrift.scheme.SchemeFactory;
-import org.apache.thrift.scheme.StandardScheme;
-
-import org.apache.thrift.scheme.TupleScheme;
-import org.apache.thrift.protocol.TTupleProtocol;
-import org.apache.thrift.protocol.TProtocolException;
-import org.apache.thrift.EncodingUtils;
-import org.apache.thrift.TException;
-import java.util.List;
-import java.util.ArrayList;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.EnumMap;
-import java.util.Set;
-import java.util.HashSet;
-import java.util.EnumSet;
-import java.util.Collections;
-import java.util.BitSet;
-import java.nio.ByteBuffer;
-import java.util.Arrays;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class FireEventRequestData extends org.apache.thrift.TUnion<FireEventRequestData, FireEventRequestData._Fields> {
-  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FireEventRequestData");
-  private static final org.apache.thrift.protocol.TField INSERT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("insertData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-    INSERT_DATA((short)1, "insertData");
-
-    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-    static {
-      for (_Fields field : EnumSet.allOf(_Fields.class)) {
-        byName.put(field.getFieldName(), field);
-      }
-    }
-
-    /**
-     * Find the _Fields constant that matches fieldId, or null if its not found.
-     */
-    public static _Fields findByThriftId(int fieldId) {
-      switch(fieldId) {
-        case 1: // INSERT_DATA
-          return INSERT_DATA;
-        default:
-          return null;
-      }
-    }
-
-    /**
-     * Find the _Fields constant that matches fieldId, throwing an exception
-     * if it is not found.
-     */
-    public static _Fields findByThriftIdOrThrow(int fieldId) {
-      _Fields fields = findByThriftId(fieldId);
-      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-      return fields;
-    }
-
-    /**
-     * Find the _Fields constant that matches name, or null if its not found.
-     */
-    public static _Fields findByName(String name) {
-      return byName.get(name);
-    }
-
-    private final short _thriftId;
-    private final String _fieldName;
-
-    _Fields(short thriftId, String fieldName) {
-      _thriftId = thriftId;
-      _fieldName = fieldName;
-    }
-
-    public short getThriftFieldId() {
-      return _thriftId;
-    }
-
-    public String getFieldName() {
-      return _fieldName;
-    }
-  }
-
-  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-  static {
-    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-    tmpMap.put(_Fields.INSERT_DATA, new org.apache.thrift.meta_data.FieldMetaData("insertData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InsertEventRequestData.class)));
-    metaDataMap = Collections.unmodifiableMap(tmpMap);
-    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FireEventRequestData.class, metaDataMap);
-  }
-
-  public FireEventRequestData() {
-    super();
-  }
-
-  public FireEventRequestData(_Fields setField, Object value) {
-    super(setField, value);
-  }
-
-  public FireEventRequestData(FireEventRequestData other) {
-    super(other);
-  }
-  public FireEventRequestData deepCopy() {
-    return new FireEventRequestData(this);
-  }
-
-  public static FireEventRequestData insertData(InsertEventRequestData value) {
-    FireEventRequestData x = new FireEventRequestData();
-    x.setInsertData(value);
-    return x;
-  }
-
-
-  @Override
-  protected void checkType(_Fields setField, Object value) throws ClassCastException {
-    switch (setField) {
-      case INSERT_DATA:
-        if (value instanceof InsertEventRequestData) {
-          break;
-        }
-        throw new ClassCastException("Was expecting value of type InsertEventRequestData for field 'insertData', but got " + value.getClass().getSimpleName());
-      default:
-        throw new IllegalArgumentException("Unknown field id " + setField);
-    }
-  }
-
-  @Override
-  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
-    _Fields setField = _Fields.findByThriftId(field.id);
-    if (setField != null) {
-      switch (setField) {
-        case INSERT_DATA:
-          if (field.type == INSERT_DATA_FIELD_DESC.type) {
-            InsertEventRequestData insertData;
-            insertData = new InsertEventRequestData();
-            insertData.read(iprot);
-            return insertData;
-          } else {
-            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
-            return null;
-          }
-        default:
-          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
-      }
-    } else {
-      return null;
-    }
-  }
-
-  @Override
-  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-    switch (setField_) {
-      case INSERT_DATA:
-        InsertEventRequestData insertData = (InsertEventRequestData)value_;
-        insertData.write(oprot);
-        return;
-      default:
-        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
-    }
-  }
-
-  @Override
-  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
-    _Fields setField = _Fields.findByThriftId(fieldID);
-    if (setField != null) {
-      switch (setField) {
-        case INSERT_DATA:
-          InsertEventRequestData insertData;
-          insertData = new InsertEventRequestData();
-          insertData.read(iprot);
-          return insertData;
-        default:
-          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
-      }
-    } else {
-      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
-    }
-  }
-
-  @Override
-  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-    switch (setField_) {
-      case INSERT_DATA:
-        InsertEventRequestData insertData = (InsertEventRequestData)value_;
-        insertData.write(oprot);
-        return;
-      default:
-        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
-    }
-  }
-
-  @Override
-  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
-    switch (setField) {
-      case INSERT_DATA:
-        return INSERT_DATA_FIELD_DESC;
-      default:
-        throw new IllegalArgumentException("Unknown field id " + setField);
-    }
-  }
-
-  @Override
-  protected org.apache.thrift.protocol.TStruct getStructDesc() {
-    return STRUCT_DESC;
-  }
-
-  @Override
-  protected _Fields enumForId(short id) {
-    return _Fields.findByThriftIdOrThrow(id);
-  }
-
-  public _Fields fieldForId(int fieldId) {
-    return _Fields.findByThriftId(fieldId);
-  }
-
-
-  public InsertEventRequestData getInsertData() {
-    if (getSetField() == _Fields.INSERT_DATA) {
-      return (InsertEventRequestData)getFieldValue();
-    } else {
-      throw new RuntimeException("Cannot get field 'insertData' because union is currently set to " + getFieldDesc(getSetField()).name);
-    }
-  }
-
-  public void setInsertData(InsertEventRequestData value) {
-    if (value == null) throw new NullPointerException();
-    setField_ = _Fields.INSERT_DATA;
-    value_ = value;
-  }
-
-  public boolean isSetInsertData() {
-    return setField_ == _Fields.INSERT_DATA;
-  }
-
-
-  public boolean equals(Object other) {
-    if (other instanceof FireEventRequestData) {
-      return equals((FireEventRequestData)other);
-    } else {
-      return false;
-    }
-  }
-
-  public boolean equals(FireEventRequestData other) {
-    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
-  }
-
-  @Override
-  public int compareTo(FireEventRequestData other) {
-    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
-    if (lastComparison == 0) {
-      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
-    }
-    return lastComparison;
-  }
-
-
-  @Override
-  public int hashCode() {
-    HashCodeBuilder hcb = new HashCodeBuilder();
-    hcb.append(this.getClass().getName());
-    org.apache.thrift.TFieldIdEnum setField = getSetField();
-    if (setField != null) {
-      hcb.append(setField.getThriftFieldId());
-      Object value = getFieldValue();
-      if (value instanceof org.apache.thrift.TEnum) {
-        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
-      } else {
-        hcb.append(value);
-      }
-    }
-    return hcb.toHashCode();
-  }
-  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-    try {
-      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-    } catch (org.apache.thrift.TException te) {
-      throw new java.io.IOException(te);
-    }
-  }
-
-
-  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-    try {
-      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-    } catch (org.apache.thrift.TException te) {
-      throw new java.io.IOException(te);
-    }
-  }
-
-
-}
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventResponse.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventResponse.java
deleted file mode 100644
index 051f411..0000000
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventResponse.java
+++ /dev/null
@@ -1,279 +0,0 @@
-/**
- * Autogenerated by Thrift Compiler (0.9.0)
- *
- * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
- *  @generated
- */
-package org.apache.hadoop.hive.metastore.api;
-
-import org.apache.commons.lang.builder.HashCodeBuilder;
-import org.apache.thrift.scheme.IScheme;
-import org.apache.thrift.scheme.SchemeFactory;
-import org.apache.thrift.scheme.StandardScheme;
-
-import org.apache.thrift.scheme.TupleScheme;
-import org.apache.thrift.protocol.TTupleProtocol;
-import org.apache.thrift.protocol.TProtocolException;
-import org.apache.thrift.EncodingUtils;
-import org.apache.thrift.TException;
-import java.util.List;
-import java.util.ArrayList;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.EnumMap;
-import java.util.Set;
-import java.util.HashSet;
-import java.util.EnumSet;
-import java.util.Collections;
-import java.util.BitSet;
-import java.nio.ByteBuffer;
-import java.util.Arrays;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class FireEventResponse implements org.apache.thrift.TBase<FireEventResponse, FireEventResponse._Fields>, java.io.Serializable, Cloneable {
-  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FireEventResponse");
-
-
-  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-  static {
-    schemes.put(StandardScheme.class, new FireEventResponseStandardSchemeFactory());
-    schemes.put(TupleScheme.class, new FireEventResponseTupleSchemeFactory());
-  }
-
-
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-;
-
-    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-    static {
-      for (_Fields field : EnumSet.allOf(_Fields.class)) {
-        byName.put(field.getFieldName(), field);
-      }
-    }
-
-    /**
-     * Find the _Fields constant that matches fieldId, or null if its not found.
-     */
-    public static _Fields findByThriftId(int fieldId) {
-      switch(fieldId) {
-        default:
-          return null;
-      }
-    }
-
-    /**
-     * Find the _Fields constant that matches fieldId, throwing an exception
-     * if it is not found.
-     */
-    public static _Fields findByThriftIdOrThrow(int fieldId) {
-      _Fields fields = findByThriftId(fieldId);
-      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-      return fields;
-    }
-
-    /**
-     * Find the _Fields constant that matches name, or null if its not found.
-     */
-    public static _Fields findByName(String name) {
-      return byName.get(name);
-    }
-
-    private final short _thriftId;
-    private final String _fieldName;
-
-    _Fields(short thriftId, String fieldName) {
-      _thriftId = thriftId;
-      _fieldName = fieldName;
-    }
-
-    public short getThriftFieldId() {
-      return _thriftId;
-    }
-
-    public String getFieldName() {
-      return _fieldName;
-    }
-  }
-  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-  static {
-    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-    metaDataMap = Collections.unmodifiableMap(tmpMap);
-    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FireEventResponse.class, metaDataMap);
-  }
-
-  public FireEventResponse() {
-  }
-
-  /**
-   * Performs a deep copy on <i>other</i>.
-   */
-  public FireEventResponse(FireEventResponse other) {
-  }
-
-  public FireEventResponse deepCopy() {
-    return new FireEventResponse(this);
-  }
-
-  @Override
-  public void clear() {
-  }
-
-  public void setFieldValue(_Fields field, Object value) {
-    switch (field) {
-    }
-  }
-
-  public Object getFieldValue(_Fields field) {
-    switch (field) {
-    }
-    throw new IllegalStateException();
-  }
-
-  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-  public boolean isSet(_Fields field) {
-    if (field == null) {
-      throw new IllegalArgumentException();
-    }
-
-    switch (field) {
-    }
-    throw new IllegalStateException();
-  }
-
-  @Override
-  public boolean equals(Object that) {
-    if (that == null)
-      return false;
-    if (that instanceof FireEventResponse)
-      return this.equals((FireEventResponse)that);
-    return false;
-  }
-
-  public boolean equals(FireEventResponse that) {
-    if (that == null)
-      return false;
-
-    return true;
-  }
-
-  @Override
-  public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
-
-    return builder.toHashCode();
-  }
-
-  public int compareTo(FireEventResponse other) {
-    if (!getClass().equals(other.getClass())) {
-      return getClass().getName().compareTo(other.getClass().getName());
-    }
-
-    int lastComparison = 0;
-    FireEventResponse typedOther = (FireEventResponse)other;
-
-    return 0;
-  }
-
-  public _Fields fieldForId(int fieldId) {
-    return _Fields.findByThriftId(fieldId);
-  }
-
-  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-  }
-
-  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-  }
-
-  @Override
-  public String toString() {
-    StringBuilder sb = new StringBuilder("FireEventResponse(");
-    boolean first = true;
-
-    sb.append(")");
-    return sb.toString();
-  }
-
-  public void validate() throws org.apache.thrift.TException {
-    // check for required fields
-    // check for sub-struct validity
-  }
-
-  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-    try {
-      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-    } catch (org.apache.thrift.TException te) {
-      throw new java.io.IOException(te);
-    }
-  }
-
-  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-    try {
-      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-    } catch (org.apache.thrift.TException te) {
-      throw new java.io.IOException(te);
-    }
-  }
-
-  private static class FireEventResponseStandardSchemeFactory implements SchemeFactory {
-    public FireEventResponseStandardScheme getScheme() {
-      return new FireEventResponseStandardScheme();
-    }
-  }
-
-  private static class FireEventResponseStandardScheme extends StandardScheme<FireEventResponse> {
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot, FireEventResponse struct) throws org.apache.thrift.TException {
-      org.apache.thrift.protocol.TField schemeField;
-      iprot.readStructBegin();
-      while (true)
-      {
-        schemeField = iprot.readFieldBegin();
-        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-          break;
-        }
-        switch (schemeField.id) {
-          default:
-            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-        }
-        iprot.readFieldEnd();
-      }
-      iprot.readStructEnd();
-      struct.validate();
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot, FireEventResponse struct) throws org.apache.thrift.TException {
-      struct.validate();
-
-      oprot.writeStructBegin(STRUCT_DESC);
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-  }
-
-  private static class FireEventResponseTupleSchemeFactory implements SchemeFactory {
-    public FireEventResponseTupleScheme getScheme() {
-      return new FireEventResponseTupleScheme();
-    }
-  }
-
-  private static class FireEventResponseTupleScheme extends TupleScheme<FireEventResponse> {
-
-    @Override
-    public void write(org.apache.thrift.protocol.TProtocol prot, FireEventResponse struct) throws org.apache.thrift.TException {
-      TTupleProtocol oprot = (TTupleProtocol) prot;
-    }
-
-    @Override
-    public void read(org.apache.thrift.protocol.TProtocol prot, FireEventResponse struct) throws org.apache.thrift.TException {
-      TTupleProtocol iprot = (TTupleProtocol) prot;
-    }
-  }
-
-}
-
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetAllFunctionsResponse.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetAllFunctionsResponse.java
index 849bf71..fb1741f 100644
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetAllFunctionsResponse.java
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetAllFunctionsResponse.java
@@ -342,14 +342,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllFunctionsResp
           case 1: // FUNCTIONS
             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
               {
-                org.apache.thrift.protocol.TList _list516 = iprot.readListBegin();
-                struct.functions = new ArrayList<Function>(_list516.size);
-                for (int _i517 = 0; _i517 < _list516.size; ++_i517)
+                org.apache.thrift.protocol.TList _list500 = iprot.readListBegin();
+                struct.functions = new ArrayList<Function>(_list500.size);
+                for (int _i501 = 0; _i501 < _list500.size; ++_i501)
                 {
-                  Function _elem518; // required
-                  _elem518 = new Function();
-                  _elem518.read(iprot);
-                  struct.functions.add(_elem518);
+                  Function _elem502; // required
+                  _elem502 = new Function();
+                  _elem502.read(iprot);
+                  struct.functions.add(_elem502);
                 }
                 iprot.readListEnd();
               }
@@ -376,9 +376,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllFunctionsRes
           oprot.writeFieldBegin(FUNCTIONS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.functions.size()));
-            for (Function _iter519 : struct.functions)
+            for (Function _iter503 : struct.functions)
             {
-              _iter519.write(oprot);
+              _iter503.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -410,9 +410,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, GetAllFunctionsResp
       if (struct.isSetFunctions()) {
         {
           oprot.writeI32(struct.functions.size());
-          for (Function _iter520 : struct.functions)
+          for (Function _iter504 : struct.functions)
           {
-            _iter520.write(oprot);
+            _iter504.write(oprot);
           }
         }
       }
@@ -424,14 +424,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, GetAllFunctionsRespo
       BitSet incoming = iprot.readBitSet(1);
       if (incoming.get(0)) {
         {
-          org.apache.thrift.protocol.TList _list521 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-          struct.functions = new ArrayList<Function>(_list521.size);
-          for (int _i522 = 0; _i522 < _list521.size; ++_i522)
+          org.apache.thrift.protocol.TList _list505 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+          struct.functions = new ArrayList<Function>(_list505.size);
+          for (int _i506 = 0; _i506 < _list505.size; ++_i506)
           {
-            Function _elem523; // required
-            _elem523 = new Function();
-            _elem523.read(iprot);
-            struct.functions.add(_elem523);
+            Function _elem507; // required
+            _elem507 = new Function();
+            _elem507.read(iprot);
+            struct.functions.add(_elem507);
           }
         }
         struct.setFunctionsIsSet(true);
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InsertEventRequestData.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InsertEventRequestData.java
deleted file mode 100644
index 5a9de92..0000000
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InsertEventRequestData.java
+++ /dev/null
@@ -1,437 +0,0 @@
-/**
- * Autogenerated by Thrift Compiler (0.9.0)
- *
- * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
- *  @generated
- */
-package org.apache.hadoop.hive.metastore.api;
-
-import org.apache.commons.lang.builder.HashCodeBuilder;
-import org.apache.thrift.scheme.IScheme;
-import org.apache.thrift.scheme.SchemeFactory;
-import org.apache.thrift.scheme.StandardScheme;
-
-import org.apache.thrift.scheme.TupleScheme;
-import org.apache.thrift.protocol.TTupleProtocol;
-import org.apache.thrift.protocol.TProtocolException;
-import org.apache.thrift.EncodingUtils;
-import org.apache.thrift.TException;
-import java.util.List;
-import java.util.ArrayList;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.EnumMap;
-import java.util.Set;
-import java.util.HashSet;
-import java.util.EnumSet;
-import java.util.Collections;
-import java.util.BitSet;
-import java.nio.ByteBuffer;
-import java.util.Arrays;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class InsertEventRequestData implements org.apache.thrift.TBase<InsertEventRequestData, InsertEventRequestData._Fields>, java.io.Serializable, Cloneable {
-  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InsertEventRequestData");
-
-  private static final org.apache.thrift.protocol.TField FILES_ADDED_FIELD_DESC = new org.apache.thrift.protocol.TField("filesAdded", org.apache.thrift.protocol.TType.LIST, (short)1);
-
-  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-  static {
-    schemes.put(StandardScheme.class, new InsertEventRequestDataStandardSchemeFactory());
-    schemes.put(TupleScheme.class, new InsertEventRequestDataTupleSchemeFactory());
-  }
-
-  private List<String> filesAdded; // required
-
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-    FILES_ADDED((short)1, "filesAdded");
-
-    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-    static {
-      for (_Fields field : EnumSet.allOf(_Fields.class)) {
-        byName.put(field.getFieldName(), field);
-      }
-    }
-
-    /**
-     * Find the _Fields constant that matches fieldId, or null if its not found.
-     */
-    public static _Fields findByThriftId(int fieldId) {
-      switch(fieldId) {
-        case 1: // FILES_ADDED
-          return FILES_ADDED;
-        default:
-          return null;
-      }
-    }
-
-    /**
-     * Find the _Fields constant that matches fieldId, throwing an exception
-     * if it is not found.
-     */
-    public static _Fields findByThriftIdOrThrow(int fieldId) {
-      _Fields fields = findByThriftId(fieldId);
-      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-      return fields;
-    }
-
-    /**
-     * Find the _Fields constant that matches name, or null if its not found.
-     */
-    public static _Fields findByName(String name) {
-      return byName.get(name);
-    }
-
-    private final short _thriftId;
-    private final String _fieldName;
-
-    _Fields(short thriftId, String fieldName) {
-      _thriftId = thriftId;
-      _fieldName = fieldName;
-    }
-
-    public short getThriftFieldId() {
-      return _thriftId;
-    }
-
-    public String getFieldName() {
-      return _fieldName;
-    }
-  }
-
-  // isset id assignments
-  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-  static {
-    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-    tmpMap.put(_Fields.FILES_ADDED, new org.apache.thrift.meta_data.FieldMetaData("filesAdded", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
-            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
-    metaDataMap = Collections.unmodifiableMap(tmpMap);
-    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertEventRequestData.class, metaDataMap);
-  }
-
-  public InsertEventRequestData() {
-  }
-
-  public InsertEventRequestData(
-    List<String> filesAdded)
-  {
-    this();
-    this.filesAdded = filesAdded;
-  }
-
-  /**
-   * Performs a deep copy on <i>other</i>.
-   */
-  public InsertEventRequestData(InsertEventRequestData other) {
-    if (other.isSetFilesAdded()) {
-      List<String> __this__filesAdded = new ArrayList<String>();
-      for (String other_element : other.filesAdded) {
-        __this__filesAdded.add(other_element);
-      }
-      this.filesAdded = __this__filesAdded;
-    }
-  }
-
-  public InsertEventRequestData deepCopy() {
-    return new InsertEventRequestData(this);
-  }
-
-  @Override
-  public void clear() {
-    this.filesAdded = null;
-  }
-
-  public int getFilesAddedSize() {
-    return (this.filesAdded == null) ? 0 : this.filesAdded.size();
-  }
-
-  public java.util.Iterator<String> getFilesAddedIterator() {
-    return (this.filesAdded == null) ? null : this.filesAdded.iterator();
-  }
-
-  public void addToFilesAdded(String elem) {
-    if (this.filesAdded == null) {
-      this.filesAdded = new ArrayList<String>();
-    }
-    this.filesAdded.add(elem);
-  }
-
-  public List<String> getFilesAdded() {
-    return this.filesAdded;
-  }
-
-  public void setFilesAdded(List<String> filesAdded) {
-    this.filesAdded = filesAdded;
-  }
-
-  public void unsetFilesAdded() {
-    this.filesAdded = null;
-  }
-
-  /** Returns true if field filesAdded is set (has been assigned a value) and false otherwise */
-  public boolean isSetFilesAdded() {
-    return this.filesAdded != null;
-  }
-
-  public void setFilesAddedIsSet(boolean value) {
-    if (!value) {
-      this.filesAdded = null;
-    }
-  }
-
-  public void setFieldValue(_Fields field, Object value) {
-    switch (field) {
-    case FILES_ADDED:
-      if (value == null) {
-        unsetFilesAdded();
-      } else {
-        setFilesAdded((List<String>)value);
-      }
-      break;
-
-    }
-  }
-
-  public Object getFieldValue(_Fields field) {
-    switch (field) {
-    case FILES_ADDED:
-      return getFilesAdded();
-
-    }
-    throw new IllegalStateException();
-  }
-
-  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-  public boolean isSet(_Fields field) {
-    if (field == null) {
-      throw new IllegalArgumentException();
-    }
-
-    switch (field) {
-    case FILES_ADDED:
-      return isSetFilesAdded();
-    }
-    throw new IllegalStateException();
-  }
-
-  @Override
-  public boolean equals(Object that) {
-    if (that == null)
-      return false;
-    if (that instanceof InsertEventRequestData)
-      return this.equals((InsertEventRequestData)that);
-    return false;
-  }
-
-  public boolean equals(InsertEventRequestData that) {
-    if (that == null)
-      return false;
-
-    boolean this_present_filesAdded = true && this.isSetFilesAdded();
-    boolean that_present_filesAdded = true && that.isSetFilesAdded();
-    if (this_present_filesAdded || that_present_filesAdded) {
-      if (!(this_present_filesAdded && that_present_filesAdded))
-        return false;
-      if (!this.filesAdded.equals(that.filesAdded))
-        return false;
-    }
-
-    return true;
-  }
-
-  @Override
-  public int hashCode() {
-    HashCodeBuilder builder = new HashCodeBuilder();
-
-    boolean present_filesAdded = true && (isSetFilesAdded());
-    builder.append(present_filesAdded);
-    if (present_filesAdded)
-      builder.append(filesAdded);
-
-    return builder.toHashCode();
-  }
-
-  public int compareTo(InsertEventRequestData other) {
-    if (!getClass().equals(other.getClass())) {
-      return getClass().getName().compareTo(other.getClass().getName());
-    }
-
-    int lastComparison = 0;
-    InsertEventRequestData typedOther = (InsertEventRequestData)other;
-
-    lastComparison = Boolean.valueOf(isSetFilesAdded()).compareTo(typedOther.isSetFilesAdded());
-    if (lastComparison != 0) {
-      return lastComparison;
-    }
-    if (isSetFilesAdded()) {
-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filesAdded, typedOther.filesAdded);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-    }
-    return 0;
-  }
-
-  public _Fields fieldForId(int fieldId) {
-    return _Fields.findByThriftId(fieldId);
-  }
-
-  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-  }
-
-  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-  }
-
-  @Override
-  public String toString() {
-    StringBuilder sb = new StringBuilder("InsertEventRequestData(");
-    boolean first = true;
-
-    sb.append("filesAdded:");
-    if (this.filesAdded == null) {
-      sb.append("null");
-    } else {
-      sb.append(this.filesAdded);
-    }
-    first = false;
-    sb.append(")");
-    return sb.toString();
-  }
-
-  public void validate() throws org.apache.thrift.TException {
-    // check for required fields
-    if (!isSetFilesAdded()) {
-      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filesAdded' is unset! Struct:" + toString());
-    }
-
-    // check for sub-struct validity
-  }
-
-  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-    try {
-      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-    } catch (org.apache.thrift.TException te) {
-      throw new java.io.IOException(te);
-    }
-  }
-
-  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-    try {
-      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-    } catch (org.apache.thrift.TException te) {
-      throw new java.io.IOException(te);
-    }
-  }
-
-  private static class InsertEventRequestDataStandardSchemeFactory implements SchemeFactory {
-    public InsertEventRequestDataStandardScheme getScheme() {
-      return new InsertEventRequestDataStandardScheme();
-    }
-  }
-
-  private static class InsertEventRequestDataStandardScheme extends StandardScheme<InsertEventRequestData> {
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot, InsertEventRequestData struct) throws org.apache.thrift.TException {
-      org.apache.thrift.protocol.TField schemeField;
-      iprot.readStructBegin();
-      while (true)
-      {
-        schemeField = iprot.readFieldBegin();
-        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-          break;
-        }
-        switch (schemeField.id) {
-          case 1: // FILES_ADDED
-            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
-              {
-                org.apache.thrift.protocol.TList _list500 = iprot.readListBegin();
-                struct.filesAdded = new ArrayList<String>(_list500.size);
-                for (int _i501 = 0; _i501 < _list500.size; ++_i501)
-                {
-                  String _elem502; // required
-                  _elem502 = iprot.readString();
-                  struct.filesAdded.add(_elem502);
-                }
-                iprot.readListEnd();
-              }
-              struct.setFilesAddedIsSet(true);
-            } else { 
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-            }
-            break;
-          default:
-            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-        }
-        iprot.readFieldEnd();
-      }
-      iprot.readStructEnd();
-      struct.validate();
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot, InsertEventRequestData struct) throws org.apache.thrift.TException {
-      struct.validate();
-
-      oprot.writeStructBegin(STRUCT_DESC);
-      if (struct.filesAdded != null) {
-        oprot.writeFieldBegin(FILES_ADDED_FIELD_DESC);
-        {
-          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.filesAdded.size()));
-          for (String _iter503 : struct.filesAdded)
-          {
-            oprot.writeString(_iter503);
-          }
-          oprot.writeListEnd();
-        }
-        oprot.writeFieldEnd();
-      }
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-  }
-
-  private static class InsertEventRequestDataTupleSchemeFactory implements SchemeFactory {
-    public InsertEventRequestDataTupleScheme getScheme() {
-      return new InsertEventRequestDataTupleScheme();
-    }
-  }
-
-  private static class InsertEventRequestDataTupleScheme extends TupleScheme<InsertEventRequestData> {
-
-    @Override
-    public void write(org.apache.thrift.protocol.TProtocol prot, InsertEventRequestData struct) throws org.apache.thrift.TException {
-      TTupleProtocol oprot = (TTupleProtocol) prot;
-      {
-        oprot.writeI32(struct.filesAdded.size());
-        for (String _iter504 : struct.filesAdded)
-        {
-          oprot.writeString(_iter504);
-        }
-      }
-    }
-
-    @Override
-    public void read(org.apache.thrift.protocol.TProtocol prot, InsertEventRequestData struct) throws org.apache.thrift.TException {
-      TTupleProtocol iprot = (TTupleProtocol) prot;
-      {
-        org.apache.thrift.protocol.TList _list505 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-        struct.filesAdded = new ArrayList<String>(_list505.size);
-        for (int _i506 = 0; _i506 < _list505.size; ++_i506)
-        {
-          String _elem507; // required
-          _elem507 = iprot.readString();
-          struct.filesAdded.add(_elem507);
-        }
-      }
-      struct.setFilesAddedIsSet(true);
-    }
-  }
-
-}
-
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
index 898933d..81d372e 100644
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
@@ -284,6 +284,8 @@
 
     public CurrentNotificationEventId get_current_notificationEventId() throws org.apache.thrift.TException;
 
+    public void fire_notification_event(FireEventRequest rqst) throws org.apache.thrift.TException;
+
   }
 
   public interface AsyncIface extends com.facebook.fb303.FacebookService .AsyncIface {
@@ -534,6 +536,8 @@
 
     public void get_current_notificationEventId(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_current_notificationEventId_call> resultHandler) throws org.apache.thrift.TException;
 
+    public void fire_notification_event(FireEventRequest rqst, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fire_notification_event_call> resultHandler) throws org.apache.thrift.TException;
+
   }
 
   public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface {
@@ -4190,6 +4194,26 @@ public CurrentNotificationEventId recv_get_current_notificationEventId() throws
       throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_current_notificationEventId failed: unknown result");
     }
 
+    public void fire_notification_event(FireEventRequest rqst) throws org.apache.thrift.TException
+    {
+      send_fire_notification_event(rqst);
+      recv_fire_notification_event();
+    }
+
+    public void send_fire_notification_event(FireEventRequest rqst) throws org.apache.thrift.TException
+    {
+      fire_notification_event_args args = new fire_notification_event_args();
+      args.setRqst(rqst);
+      sendBase("fire_notification_event", args);
+    }
+
+    public void recv_fire_notification_event() throws org.apache.thrift.TException
+    {
+      fire_notification_event_result result = new fire_notification_event_result();
+      receiveBase(result, "fire_notification_event");
+      return;
+    }
+
   }
   public static class AsyncClient extends com.facebook.fb303.FacebookService.AsyncClient implements AsyncIface {
     public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
@@ -8597,6 +8621,38 @@ public CurrentNotificationEventId getResult() throws org.apache.thrift.TExceptio
       }
     }
 
+    public void fire_notification_event(FireEventRequest rqst, org.apache.thrift.async.AsyncMethodCallback<fire_notification_event_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      fire_notification_event_call method_call = new fire_notification_event_call(rqst, resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class fire_notification_event_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private FireEventRequest rqst;
+      public fire_notification_event_call(FireEventRequest rqst, org.apache.thrift.async.AsyncMethodCallback<fire_notification_event_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+        this.rqst = rqst;
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fire_notification_event", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        fire_notification_event_args args = new fire_notification_event_args();
+        args.setRqst(rqst);
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public void getResult() throws org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        (new Client(prot)).recv_fire_notification_event();
+      }
+    }
+
   }
 
   public static class Processor<I extends Iface> extends com.facebook.fb303.FacebookService.Processor<I> implements org.apache.thrift.TProcessor {
@@ -8733,6 +8789,7 @@ protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ?
       processMap.put("show_compact", new show_compact());
       processMap.put("get_next_notification", new get_next_notification());
       processMap.put("get_current_notificationEventId", new get_current_notificationEventId());
+      processMap.put("fire_notification_event", new fire_notification_event());
       return processMap;
     }
 
@@ -11935,6 +11992,26 @@ public get_current_notificationEventId_result getResult(I iface, get_current_not
       }
     }
 
+    public static class fire_notification_event<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fire_notification_event_args> {
+      public fire_notification_event() {
+        super("fire_notification_event");
+      }
+
+      public fire_notification_event_args getEmptyArgsInstance() {
+        return new fire_notification_event_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public fire_notification_event_result getResult(I iface, fire_notification_event_args args) throws org.apache.thrift.TException {
+        fire_notification_event_result result = new fire_notification_event_result();
+        iface.fire_notification_event(args.rqst);
+        return result;
+      }
+    }
+
   }
 
   public static class getMetaConf_args implements org.apache.thrift.TBase<getMetaConf_args, getMetaConf_args._Fields>, java.io.Serializable, Cloneable   {
@@ -17333,13 +17410,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_databases_resul
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list524 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list524.size);
-                  for (int _i525 = 0; _i525 < _list524.size; ++_i525)
+                  org.apache.thrift.protocol.TList _list516 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list516.size);
+                  for (int _i517 = 0; _i517 < _list516.size; ++_i517)
                   {
-                    String _elem526; // required
-                    _elem526 = iprot.readString();
-                    struct.success.add(_elem526);
+                    String _elem518; // required
+                    _elem518 = iprot.readString();
+                    struct.success.add(_elem518);
                   }
                   iprot.readListEnd();
                 }
@@ -17374,9 +17451,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_databases_resu
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter527 : struct.success)
+            for (String _iter519 : struct.success)
             {
-              oprot.writeString(_iter527);
+              oprot.writeString(_iter519);
             }
             oprot.writeListEnd();
           }
@@ -17415,9 +17492,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_databases_resul
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter528 : struct.success)
+            for (String _iter520 : struct.success)
             {
-              oprot.writeString(_iter528);
+              oprot.writeString(_iter520);
             }
           }
         }
@@ -17432,13 +17509,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_databases_result
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list529 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list529.size);
-            for (int _i530 = 0; _i530 < _list529.size; ++_i530)
+            org.apache.thrift.protocol.TList _list521 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list521.size);
+            for (int _i522 = 0; _i522 < _list521.size; ++_i522)
             {
-              String _elem531; // required
-              _elem531 = iprot.readString();
-              struct.success.add(_elem531);
+              String _elem523; // required
+              _elem523 = iprot.readString();
+              struct.success.add(_elem523);
             }
           }
           struct.setSuccessIsSet(true);
@@ -18095,13 +18172,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_databases_r
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list532 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list532.size);
-                  for (int _i533 = 0; _i533 < _list532.size; ++_i533)
+                  org.apache.thrift.protocol.TList _list524 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list524.size);
+                  for (int _i525 = 0; _i525 < _list524.size; ++_i525)
                   {
-                    String _elem534; // required
-                    _elem534 = iprot.readString();
-                    struct.success.add(_elem534);
+                    String _elem526; // required
+                    _elem526 = iprot.readString();
+                    struct.success.add(_elem526);
                   }
                   iprot.readListEnd();
                 }
@@ -18136,9 +18213,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_databases_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter535 : struct.success)
+            for (String _iter527 : struct.success)
             {
-              oprot.writeString(_iter535);
+              oprot.writeString(_iter527);
             }
             oprot.writeListEnd();
           }
@@ -18177,9 +18254,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_all_databases_r
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter536 : struct.success)
+            for (String _iter528 : struct.success)
             {
-              oprot.writeString(_iter536);
+              oprot.writeString(_iter528);
             }
           }
         }
@@ -18194,13 +18271,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_all_databases_re
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list537 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list537.size);
-            for (int _i538 = 0; _i538 < _list537.size; ++_i538)
+            org.apache.thrift.protocol.TList _list529 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list529.size);
+            for (int _i530 = 0; _i530 < _list529.size; ++_i530)
             {
-              String _elem539; // required
-              _elem539 = iprot.readString();
-              struct.success.add(_elem539);
+              String _elem531; // required
+              _elem531 = iprot.readString();
+              struct.success.add(_elem531);
             }
           }
           struct.setSuccessIsSet(true);
@@ -22807,16 +22884,16 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_type_all_result
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map540 = iprot.readMapBegin();
-                  struct.success = new HashMap<String,Type>(2*_map540.size);
-                  for (int _i541 = 0; _i541 < _map540.size; ++_i541)
+                  org.apache.thrift.protocol.TMap _map532 = iprot.readMapBegin();
+                  struct.success = new HashMap<String,Type>(2*_map532.size);
+                  for (int _i533 = 0; _i533 < _map532.size; ++_i533)
                   {
-                    String _key542; // required
-                    Type _val543; // required
-                    _key542 = iprot.readString();
-                    _val543 = new Type();
-                    _val543.read(iprot);
-                    struct.success.put(_key542, _val543);
+                    String _key534; // required
+                    Type _val535; // required
+                    _key534 = iprot.readString();
+                    _val535 = new Type();
+                    _val535.read(iprot);
+                    struct.success.put(_key534, _val535);
                   }
                   iprot.readMapEnd();
                 }
@@ -22851,10 +22928,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_type_all_resul
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Map.Entry<String, Type> _iter544 : struct.success.entrySet())
+            for (Map.Entry<String, Type> _iter536 : struct.success.entrySet())
             {
-              oprot.writeString(_iter544.getKey());
-              _iter544.getValue().write(oprot);
+              oprot.writeString(_iter536.getKey());
+              _iter536.getValue().write(oprot);
             }
             oprot.writeMapEnd();
           }
@@ -22893,10 +22970,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_type_all_result
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Map.Entry<String, Type> _iter545 : struct.success.entrySet())
+            for (Map.Entry<String, Type> _iter537 : struct.success.entrySet())
             {
-              oprot.writeString(_iter545.getKey());
-              _iter545.getValue().write(oprot);
+              oprot.writeString(_iter537.getKey());
+              _iter537.getValue().write(oprot);
             }
           }
         }
@@ -22911,16 +22988,16 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_type_all_result
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TMap _map546 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new HashMap<String,Type>(2*_map546.size);
-            for (int _i547 = 0; _i547 < _map546.size; ++_i547)
+            org.apache.thrift.protocol.TMap _map538 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new HashMap<String,Type>(2*_map538.size);
+            for (int _i539 = 0; _i539 < _map538.size; ++_i539)
             {
-              String _key548; // required
-              Type _val549; // required
-              _key548 = iprot.readString();
-              _val549 = new Type();
-              _val549.read(iprot);
-              struct.success.put(_key548, _val549);
+              String _key540; // required
+              Type _val541; // required
+              _key540 = iprot.readString();
+              _val541 = new Type();
+              _val541.read(iprot);
+              struct.success.put(_key540, _val541);
             }
           }
           struct.setSuccessIsSet(true);
@@ -23955,14 +24032,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_fields_result s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list550 = iprot.readListBegin();
-                  struct.success = new ArrayList<FieldSchema>(_list550.size);
-                  for (int _i551 = 0; _i551 < _list550.size; ++_i551)
+                  org.apache.thrift.protocol.TList _list542 = iprot.readListBegin();
+                  struct.success = new ArrayList<FieldSchema>(_list542.size);
+                  for (int _i543 = 0; _i543 < _list542.size; ++_i543)
                   {
-                    FieldSchema _elem552; // required
-                    _elem552 = new FieldSchema();
-                    _elem552.read(iprot);
-                    struct.success.add(_elem552);
+                    FieldSchema _elem544; // required
+                    _elem544 = new FieldSchema();
+                    _elem544.read(iprot);
+                    struct.success.add(_elem544);
                   }
                   iprot.readListEnd();
                 }
@@ -24015,9 +24092,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_fields_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (FieldSchema _iter553 : struct.success)
+            for (FieldSchema _iter545 : struct.success)
             {
-              _iter553.write(oprot);
+              _iter545.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -24072,9 +24149,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_fields_result s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (FieldSchema _iter554 : struct.success)
+            for (FieldSchema _iter546 : struct.success)
             {
-              _iter554.write(oprot);
+              _iter546.write(oprot);
             }
           }
         }
@@ -24095,14 +24172,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_fields_result st
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list555 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<FieldSchema>(_list555.size);
-            for (int _i556 = 0; _i556 < _list555.size; ++_i556)
+            org.apache.thrift.protocol.TList _list547 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<FieldSchema>(_list547.size);
+            for (int _i548 = 0; _i548 < _list547.size; ++_i548)
             {
-              FieldSchema _elem557; // required
-              _elem557 = new FieldSchema();
-              _elem557.read(iprot);
-              struct.success.add(_elem557);
+              FieldSchema _elem549; // required
+              _elem549 = new FieldSchema();
+              _elem549.read(iprot);
+              struct.success.add(_elem549);
             }
           }
           struct.setSuccessIsSet(true);
@@ -25256,14 +25333,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_fields_with_env
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list558 = iprot.readListBegin();
-                  struct.success = new ArrayList<FieldSchema>(_list558.size);
-                  for (int _i559 = 0; _i559 < _list558.size; ++_i559)
+                  org.apache.thrift.protocol.TList _list550 = iprot.readListBegin();
+                  struct.success = new ArrayList<FieldSchema>(_list550.size);
+                  for (int _i551 = 0; _i551 < _list550.size; ++_i551)
                   {
-                    FieldSchema _elem560; // required
-                    _elem560 = new FieldSchema();
-                    _elem560.read(iprot);
-                    struct.success.add(_elem560);
+                    FieldSchema _elem552; // required
+                    _elem552 = new FieldSchema();
+                    _elem552.read(iprot);
+                    struct.success.add(_elem552);
                   }
                   iprot.readListEnd();
                 }
@@ -25316,9 +25393,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_fields_with_en
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (FieldSchema _iter561 : struct.success)
+            for (FieldSchema _iter553 : struct.success)
             {
-              _iter561.write(oprot);
+              _iter553.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -25373,9 +25450,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_fields_with_env
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (FieldSchema _iter562 : struct.success)
+            for (FieldSchema _iter554 : struct.success)
             {
-              _iter562.write(oprot);
+              _iter554.write(oprot);
             }
           }
         }
@@ -25396,14 +25473,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_fields_with_envi
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list563 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<FieldSchema>(_list563.size);
-            for (int _i564 = 0; _i564 < _list563.size; ++_i564)
+            org.apache.thrift.protocol.TList _list555 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<FieldSchema>(_list555.size);
+            for (int _i556 = 0; _i556 < _list555.size; ++_i556)
             {
-              FieldSchema _elem565; // required
-              _elem565 = new FieldSchema();
-              _elem565.read(iprot);
-              struct.success.add(_elem565);
+              FieldSchema _elem557; // required
+              _elem557 = new FieldSchema();
+              _elem557.read(iprot);
+              struct.success.add(_elem557);
             }
           }
           struct.setSuccessIsSet(true);
@@ -26448,14 +26525,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_result s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list566 = iprot.readListBegin();
-                  struct.success = new ArrayList<FieldSchema>(_list566.size);
-                  for (int _i567 = 0; _i567 < _list566.size; ++_i567)
+                  org.apache.thrift.protocol.TList _list558 = iprot.readListBegin();
+                  struct.success = new ArrayList<FieldSchema>(_list558.size);
+                  for (int _i559 = 0; _i559 < _list558.size; ++_i559)
                   {
-                    FieldSchema _elem568; // required
-                    _elem568 = new FieldSchema();
-                    _elem568.read(iprot);
-                    struct.success.add(_elem568);
+                    FieldSchema _elem560; // required
+                    _elem560 = new FieldSchema();
+                    _elem560.read(iprot);
+                    struct.success.add(_elem560);
                   }
                   iprot.readListEnd();
                 }
@@ -26508,9 +26585,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (FieldSchema _iter569 : struct.success)
+            for (FieldSchema _iter561 : struct.success)
             {
-              _iter569.write(oprot);
+              _iter561.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -26565,9 +26642,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_result s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (FieldSchema _iter570 : struct.success)
+            for (FieldSchema _iter562 : struct.success)
             {
-              _iter570.write(oprot);
+              _iter562.write(oprot);
             }
           }
         }
@@ -26588,14 +26665,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_result st
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list571 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<FieldSchema>(_list571.size);
-            for (int _i572 = 0; _i572 < _list571.size; ++_i572)
+            org.apache.thrift.protocol.TList _list563 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<FieldSchema>(_list563.size);
+            for (int _i564 = 0; _i564 < _list563.size; ++_i564)
             {
-              FieldSchema _elem573; // required
-              _elem573 = new FieldSchema();
-              _elem573.read(iprot);
-              struct.success.add(_elem573);
+              FieldSchema _elem565; // required
+              _elem565 = new FieldSchema();
+              _elem565.read(iprot);
+              struct.success.add(_elem565);
             }
           }
           struct.setSuccessIsSet(true);
@@ -27749,14 +27826,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_with_env
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
-                  struct.success = new ArrayList<FieldSchema>(_list574.size);
-                  for (int _i575 = 0; _i575 < _list574.size; ++_i575)
+                  org.apache.thrift.protocol.TList _list566 = iprot.readListBegin();
+                  struct.success = new ArrayList<FieldSchema>(_list566.size);
+                  for (int _i567 = 0; _i567 < _list566.size; ++_i567)
                   {
-                    FieldSchema _elem576; // required
-                    _elem576 = new FieldSchema();
-                    _elem576.read(iprot);
-                    struct.success.add(_elem576);
+                    FieldSchema _elem568; // required
+                    _elem568 = new FieldSchema();
+                    _elem568.read(iprot);
+                    struct.success.add(_elem568);
                   }
                   iprot.readListEnd();
                 }
@@ -27809,9 +27886,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_with_en
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (FieldSchema _iter577 : struct.success)
+            for (FieldSchema _iter569 : struct.success)
             {
-              _iter577.write(oprot);
+              _iter569.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -27866,9 +27943,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_with_env
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (FieldSchema _iter578 : struct.success)
+            for (FieldSchema _iter570 : struct.success)
             {
-              _iter578.write(oprot);
+              _iter570.write(oprot);
             }
           }
         }
@@ -27889,14 +27966,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_with_envi
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list579 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<FieldSchema>(_list579.size);
-            for (int _i580 = 0; _i580 < _list579.size; ++_i580)
+            org.apache.thrift.protocol.TList _list571 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<FieldSchema>(_list571.size);
+            for (int _i572 = 0; _i572 < _list571.size; ++_i572)
             {
-              FieldSchema _elem581; // required
-              _elem581 = new FieldSchema();
-              _elem581.read(iprot);
-              struct.success.add(_elem581);
+              FieldSchema _elem573; // required
+              _elem573 = new FieldSchema();
+              _elem573.read(iprot);
+              struct.success.add(_elem573);
             }
           }
           struct.setSuccessIsSet(true);
@@ -33139,13 +33216,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_tables_result s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list582 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list582.size);
-                  for (int _i583 = 0; _i583 < _list582.size; ++_i583)
+                  org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list574.size);
+                  for (int _i575 = 0; _i575 < _list574.size; ++_i575)
                   {
-                    String _elem584; // required
-                    _elem584 = iprot.readString();
-                    struct.success.add(_elem584);
+                    String _elem576; // required
+                    _elem576 = iprot.readString();
+                    struct.success.add(_elem576);
                   }
                   iprot.readListEnd();
                 }
@@ -33180,9 +33257,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_tables_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter585 : struct.success)
+            for (String _iter577 : struct.success)
             {
-              oprot.writeString(_iter585);
+              oprot.writeString(_iter577);
             }
             oprot.writeListEnd();
           }
@@ -33221,9 +33298,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_tables_result s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter586 : struct.success)
+            for (String _iter578 : struct.success)
             {
-              oprot.writeString(_iter586);
+              oprot.writeString(_iter578);
             }
           }
         }
@@ -33238,13 +33315,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_tables_result st
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list587 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list587.size);
-            for (int _i588 = 0; _i588 < _list587.size; ++_i588)
+            org.apache.thrift.protocol.TList _list579 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list579.size);
+            for (int _i580 = 0; _i580 < _list579.size; ++_i580)
             {
-              String _elem589; // required
-              _elem589 = iprot.readString();
-              struct.success.add(_elem589);
+              String _elem581; // required
+              _elem581 = iprot.readString();
+              struct.success.add(_elem581);
             }
           }
           struct.setSuccessIsSet(true);
@@ -33752,13 +33829,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_meta_args
             case 3: // TBL_TYPES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list590 = iprot.readListBegin();
-                  struct.tbl_types = new ArrayList<String>(_list590.size);
-                  for (int _i591 = 0; _i591 < _list590.size; ++_i591)
+                  org.apache.thrift.protocol.TList _list582 = iprot.readListBegin();
+                  struct.tbl_types = new ArrayList<String>(_list582.size);
+                  for (int _i583 = 0; _i583 < _list582.size; ++_i583)
                   {
-                    String _elem592; // required
-                    _elem592 = iprot.readString();
-                    struct.tbl_types.add(_elem592);
+                    String _elem584; // required
+                    _elem584 = iprot.readString();
+                    struct.tbl_types.add(_elem584);
                   }
                   iprot.readListEnd();
                 }
@@ -33794,9 +33871,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_meta_arg
           oprot.writeFieldBegin(TBL_TYPES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tbl_types.size()));
-            for (String _iter593 : struct.tbl_types)
+            for (String _iter585 : struct.tbl_types)
             {
-              oprot.writeString(_iter593);
+              oprot.writeString(_iter585);
             }
             oprot.writeListEnd();
           }
@@ -33839,9 +33916,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_meta_args
         if (struct.isSetTbl_types()) {
           {
             oprot.writeI32(struct.tbl_types.size());
-            for (String _iter594 : struct.tbl_types)
+            for (String _iter586 : struct.tbl_types)
             {
-              oprot.writeString(_iter594);
+              oprot.writeString(_iter586);
             }
           }
         }
@@ -33861,13 +33938,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_meta_args
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list595 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.tbl_types = new ArrayList<String>(_list595.size);
-            for (int _i596 = 0; _i596 < _list595.size; ++_i596)
+            org.apache.thrift.protocol.TList _list587 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.tbl_types = new ArrayList<String>(_list587.size);
+            for (int _i588 = 0; _i588 < _list587.size; ++_i588)
             {
-              String _elem597; // required
-              _elem597 = iprot.readString();
-              struct.tbl_types.add(_elem597);
+              String _elem589; // required
+              _elem589 = iprot.readString();
+              struct.tbl_types.add(_elem589);
             }
           }
           struct.setTbl_typesIsSet(true);
@@ -34273,14 +34350,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_meta_resu
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list598 = iprot.readListBegin();
-                  struct.success = new ArrayList<TableMeta>(_list598.size);
-                  for (int _i599 = 0; _i599 < _list598.size; ++_i599)
+                  org.apache.thrift.protocol.TList _list590 = iprot.readListBegin();
+                  struct.success = new ArrayList<TableMeta>(_list590.size);
+                  for (int _i591 = 0; _i591 < _list590.size; ++_i591)
                   {
-                    TableMeta _elem600; // required
-                    _elem600 = new TableMeta();
-                    _elem600.read(iprot);
-                    struct.success.add(_elem600);
+                    TableMeta _elem592; // required
+                    _elem592 = new TableMeta();
+                    _elem592.read(iprot);
+                    struct.success.add(_elem592);
                   }
                   iprot.readListEnd();
                 }
@@ -34315,9 +34392,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_meta_res
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (TableMeta _iter601 : struct.success)
+            for (TableMeta _iter593 : struct.success)
             {
-              _iter601.write(oprot);
+              _iter593.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -34356,9 +34433,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_meta_resu
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (TableMeta _iter602 : struct.success)
+            for (TableMeta _iter594 : struct.success)
             {
-              _iter602.write(oprot);
+              _iter594.write(oprot);
             }
           }
         }
@@ -34373,14 +34450,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_meta_resul
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list603 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<TableMeta>(_list603.size);
-            for (int _i604 = 0; _i604 < _list603.size; ++_i604)
+            org.apache.thrift.protocol.TList _list595 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<TableMeta>(_list595.size);
+            for (int _i596 = 0; _i596 < _list595.size; ++_i596)
             {
-              TableMeta _elem605; // required
-              _elem605 = new TableMeta();
-              _elem605.read(iprot);
-              struct.success.add(_elem605);
+              TableMeta _elem597; // required
+              _elem597 = new TableMeta();
+              _elem597.read(iprot);
+              struct.success.add(_elem597);
             }
           }
           struct.setSuccessIsSet(true);
@@ -35149,13 +35226,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_tables_resu
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list606 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list606.size);
-                  for (int _i607 = 0; _i607 < _list606.size; ++_i607)
+                  org.apache.thrift.protocol.TList _list598 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list598.size);
+                  for (int _i599 = 0; _i599 < _list598.size; ++_i599)
                   {
-                    String _elem608; // required
-                    _elem608 = iprot.readString();
-                    struct.success.add(_elem608);
+                    String _elem600; // required
+                    _elem600 = iprot.readString();
+                    struct.success.add(_elem600);
                   }
                   iprot.readListEnd();
                 }
@@ -35190,9 +35267,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_tables_res
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter609 : struct.success)
+            for (String _iter601 : struct.success)
             {
-              oprot.writeString(_iter609);
+              oprot.writeString(_iter601);
             }
             oprot.writeListEnd();
           }
@@ -35231,9 +35308,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_all_tables_resu
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter610 : struct.success)
+            for (String _iter602 : struct.success)
             {
-              oprot.writeString(_iter610);
+              oprot.writeString(_iter602);
             }
           }
         }
@@ -35248,13 +35325,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_all_tables_resul
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list611 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list611.size);
-            for (int _i612 = 0; _i612 < _list611.size; ++_i612)
+            org.apache.thrift.protocol.TList _list603 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list603.size);
+            for (int _i604 = 0; _i604 < _list603.size; ++_i604)
             {
-              String _elem613; // required
-              _elem613 = iprot.readString();
-              struct.success.add(_elem613);
+              String _elem605; // required
+              _elem605 = iprot.readString();
+              struct.success.add(_elem605);
             }
           }
           struct.setSuccessIsSet(true);
@@ -36710,13 +36787,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_objects_b
             case 2: // TBL_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list614 = iprot.readListBegin();
-                  struct.tbl_names = new ArrayList<String>(_list614.size);
-                  for (int _i615 = 0; _i615 < _list614.size; ++_i615)
+                  org.apache.thrift.protocol.TList _list606 = iprot.readListBegin();
+                  struct.tbl_names = new ArrayList<String>(_list606.size);
+                  for (int _i607 = 0; _i607 < _list606.size; ++_i607)
                   {
-                    String _elem616; // required
-                    _elem616 = iprot.readString();
-                    struct.tbl_names.add(_elem616);
+                    String _elem608; // required
+                    _elem608 = iprot.readString();
+                    struct.tbl_names.add(_elem608);
                   }
                   iprot.readListEnd();
                 }
@@ -36747,9 +36824,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_objects_
           oprot.writeFieldBegin(TBL_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tbl_names.size()));
-            for (String _iter617 : struct.tbl_names)
+            for (String _iter609 : struct.tbl_names)
             {
-              oprot.writeString(_iter617);
+              oprot.writeString(_iter609);
             }
             oprot.writeListEnd();
           }
@@ -36786,9 +36863,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_objects_b
         if (struct.isSetTbl_names()) {
           {
             oprot.writeI32(struct.tbl_names.size());
-            for (String _iter618 : struct.tbl_names)
+            for (String _iter610 : struct.tbl_names)
             {
-              oprot.writeString(_iter618);
+              oprot.writeString(_iter610);
             }
           }
         }
@@ -36804,13 +36881,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_objects_by
         }
         if (incoming.get(1)) {
           {
-            org.apache.thrift.protocol.TList _list619 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.tbl_names = new ArrayList<String>(_list619.size);
-            for (int _i620 = 0; _i620 < _list619.size; ++_i620)
+            org.apache.thrift.protocol.TList _list611 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.tbl_names = new ArrayList<String>(_list611.size);
+            for (int _i612 = 0; _i612 < _list611.size; ++_i612)
             {
-              String _elem621; // required
-              _elem621 = iprot.readString();
-              struct.tbl_names.add(_elem621);
+              String _elem613; // required
+              _elem613 = iprot.readString();
+              struct.tbl_names.add(_elem613);
             }
           }
           struct.setTbl_namesIsSet(true);
@@ -37378,14 +37455,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_objects_b
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list622 = iprot.readListBegin();
-                  struct.success = new ArrayList<Table>(_list622.size);
-                  for (int _i623 = 0; _i623 < _list622.size; ++_i623)
+                  org.apache.thrift.protocol.TList _list614 = iprot.readListBegin();
+                  struct.success = new ArrayList<Table>(_list614.size);
+                  for (int _i615 = 0; _i615 < _list614.size; ++_i615)
                   {
-                    Table _elem624; // required
-                    _elem624 = new Table();
-                    _elem624.read(iprot);
-                    struct.success.add(_elem624);
+                    Table _elem616; // required
+                    _elem616 = new Table();
+                    _elem616.read(iprot);
+                    struct.success.add(_elem616);
                   }
                   iprot.readListEnd();
                 }
@@ -37438,9 +37515,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_objects_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Table _iter625 : struct.success)
+            for (Table _iter617 : struct.success)
             {
-              _iter625.write(oprot);
+              _iter617.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -37495,9 +37572,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_objects_b
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Table _iter626 : struct.success)
+            for (Table _iter618 : struct.success)
             {
-              _iter626.write(oprot);
+              _iter618.write(oprot);
             }
           }
         }
@@ -37518,14 +37595,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_objects_by
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list627 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Table>(_list627.size);
-            for (int _i628 = 0; _i628 < _list627.size; ++_i628)
+            org.apache.thrift.protocol.TList _list619 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Table>(_list619.size);
+            for (int _i620 = 0; _i620 < _list619.size; ++_i620)
             {
-              Table _elem629; // required
-              _elem629 = new Table();
-              _elem629.read(iprot);
-              struct.success.add(_elem629);
+              Table _elem621; // required
+              _elem621 = new Table();
+              _elem621.read(iprot);
+              struct.success.add(_elem621);
             }
           }
           struct.setSuccessIsSet(true);
@@ -38674,13 +38751,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_names_by_
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list630 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list630.size);
-                  for (int _i631 = 0; _i631 < _list630.size; ++_i631)
+                  org.apache.thrift.protocol.TList _list622 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list622.size);
+                  for (int _i623 = 0; _i623 < _list622.size; ++_i623)
                   {
-                    String _elem632; // required
-                    _elem632 = iprot.readString();
-                    struct.success.add(_elem632);
+                    String _elem624; // required
+                    _elem624 = iprot.readString();
+                    struct.success.add(_elem624);
                   }
                   iprot.readListEnd();
                 }
@@ -38733,9 +38810,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_names_by
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter633 : struct.success)
+            for (String _iter625 : struct.success)
             {
-              oprot.writeString(_iter633);
+              oprot.writeString(_iter625);
             }
             oprot.writeListEnd();
           }
@@ -38790,9 +38867,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_names_by_
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter634 : struct.success)
+            for (String _iter626 : struct.success)
             {
-              oprot.writeString(_iter634);
+              oprot.writeString(_iter626);
             }
           }
         }
@@ -38813,13 +38890,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_names_by_f
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list635 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list635.size);
-            for (int _i636 = 0; _i636 < _list635.size; ++_i636)
+            org.apache.thrift.protocol.TList _list627 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list627.size);
+            for (int _i628 = 0; _i628 < _list627.size; ++_i628)
             {
-              String _elem637; // required
-              _elem637 = iprot.readString();
-              struct.success.add(_elem637);
+              String _elem629; // required
+              _elem629 = iprot.readString();
+              struct.success.add(_elem629);
             }
           }
           struct.setSuccessIsSet(true);
@@ -44678,14 +44755,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, add_partitions_args
             case 1: // NEW_PARTS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list638 = iprot.readListBegin();
-                  struct.new_parts = new ArrayList<Partition>(_list638.size);
-                  for (int _i639 = 0; _i639 < _list638.size; ++_i639)
+                  org.apache.thrift.protocol.TList _list630 = iprot.readListBegin();
+                  struct.new_parts = new ArrayList<Partition>(_list630.size);
+                  for (int _i631 = 0; _i631 < _list630.size; ++_i631)
                   {
-                    Partition _elem640; // required
-                    _elem640 = new Partition();
-                    _elem640.read(iprot);
-                    struct.new_parts.add(_elem640);
+                    Partition _elem632; // required
+                    _elem632 = new Partition();
+                    _elem632.read(iprot);
+                    struct.new_parts.add(_elem632);
                   }
                   iprot.readListEnd();
                 }
@@ -44711,9 +44788,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, add_partitions_arg
           oprot.writeFieldBegin(NEW_PARTS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.new_parts.size()));
-            for (Partition _iter641 : struct.new_parts)
+            for (Partition _iter633 : struct.new_parts)
             {
-              _iter641.write(oprot);
+              _iter633.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -44744,9 +44821,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, add_partitions_args
         if (struct.isSetNew_parts()) {
           {
             oprot.writeI32(struct.new_parts.size());
-            for (Partition _iter642 : struct.new_parts)
+            for (Partition _iter634 : struct.new_parts)
             {
-              _iter642.write(oprot);
+              _iter634.write(oprot);
             }
           }
         }
@@ -44758,14 +44835,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, add_partitions_args
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list643 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.new_parts = new ArrayList<Partition>(_list643.size);
-            for (int _i644 = 0; _i644 < _list643.size; ++_i644)
+            org.apache.thrift.protocol.TList _list635 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.new_parts = new ArrayList<Partition>(_list635.size);
+            for (int _i636 = 0; _i636 < _list635.size; ++_i636)
             {
-              Partition _elem645; // required
-              _elem645 = new Partition();
-              _elem645.read(iprot);
-              struct.new_parts.add(_elem645);
+              Partition _elem637; // required
+              _elem637 = new Partition();
+              _elem637.read(iprot);
+              struct.new_parts.add(_elem637);
             }
           }
           struct.setNew_partsIsSet(true);
@@ -45766,14 +45843,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, add_partitions_pspe
             case 1: // NEW_PARTS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list646 = iprot.readListBegin();
-                  struct.new_parts = new ArrayList<PartitionSpec>(_list646.size);
-                  for (int _i647 = 0; _i647 < _list646.size; ++_i647)
+                  org.apache.thrift.protocol.TList _list638 = iprot.readListBegin();
+                  struct.new_parts = new ArrayList<PartitionSpec>(_list638.size);
+                  for (int _i639 = 0; _i639 < _list638.size; ++_i639)
                   {
-                    PartitionSpec _elem648; // required
-                    _elem648 = new PartitionSpec();
-                    _elem648.read(iprot);
-                    struct.new_parts.add(_elem648);
+                    PartitionSpec _elem640; // required
+                    _elem640 = new PartitionSpec();
+                    _elem640.read(iprot);
+                    struct.new_parts.add(_elem640);
                   }
                   iprot.readListEnd();
                 }
@@ -45799,9 +45876,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, add_partitions_psp
           oprot.writeFieldBegin(NEW_PARTS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.new_parts.size()));
-            for (PartitionSpec _iter649 : struct.new_parts)
+            for (PartitionSpec _iter641 : struct.new_parts)
             {
-              _iter649.write(oprot);
+              _iter641.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -45832,9 +45909,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, add_partitions_pspe
         if (struct.isSetNew_parts()) {
           {
             oprot.writeI32(struct.new_parts.size());
-            for (PartitionSpec _iter650 : struct.new_parts)
+            for (PartitionSpec _iter642 : struct.new_parts)
             {
-              _iter650.write(oprot);
+              _iter642.write(oprot);
             }
           }
         }
@@ -45846,14 +45923,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, add_partitions_pspec
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list651 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.new_parts = new ArrayList<PartitionSpec>(_list651.size);
-            for (int _i652 = 0; _i652 < _list651.size; ++_i652)
+            org.apache.thrift.protocol.TList _list643 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.new_parts = new ArrayList<PartitionSpec>(_list643.size);
+            for (int _i644 = 0; _i644 < _list643.size; ++_i644)
             {
-              PartitionSpec _elem653; // required
-              _elem653 = new PartitionSpec();
-              _elem653.read(iprot);
-              struct.new_parts.add(_elem653);
+              PartitionSpec _elem645; // required
+              _elem645 = new PartitionSpec();
+              _elem645.read(iprot);
+              struct.new_parts.add(_elem645);
             }
           }
           struct.setNew_partsIsSet(true);
@@ -47032,13 +47109,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, append_partition_ar
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list654 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list654.size);
-                  for (int _i655 = 0; _i655 < _list654.size; ++_i655)
+                  org.apache.thrift.protocol.TList _list646 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list646.size);
+                  for (int _i647 = 0; _i647 < _list646.size; ++_i647)
                   {
-                    String _elem656; // required
-                    _elem656 = iprot.readString();
-                    struct.part_vals.add(_elem656);
+                    String _elem648; // required
+                    _elem648 = iprot.readString();
+                    struct.part_vals.add(_elem648);
                   }
                   iprot.readListEnd();
                 }
@@ -47074,9 +47151,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, append_partition_a
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter657 : struct.part_vals)
+            for (String _iter649 : struct.part_vals)
             {
-              oprot.writeString(_iter657);
+              oprot.writeString(_iter649);
             }
             oprot.writeListEnd();
           }
@@ -47119,9 +47196,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, append_partition_ar
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter658 : struct.part_vals)
+            for (String _iter650 : struct.part_vals)
             {
-              oprot.writeString(_iter658);
+              oprot.writeString(_iter650);
             }
           }
         }
@@ -47141,13 +47218,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, append_partition_arg
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list659 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list659.size);
-            for (int _i660 = 0; _i660 < _list659.size; ++_i660)
+            org.apache.thrift.protocol.TList _list651 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list651.size);
+            for (int _i652 = 0; _i652 < _list651.size; ++_i652)
             {
-              String _elem661; // required
-              _elem661 = iprot.readString();
-              struct.part_vals.add(_elem661);
+              String _elem653; // required
+              _elem653 = iprot.readString();
+              struct.part_vals.add(_elem653);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -49459,13 +49536,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, append_partition_wi
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list662 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list662.size);
-                  for (int _i663 = 0; _i663 < _list662.size; ++_i663)
+                  org.apache.thrift.protocol.TList _list654 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list654.size);
+                  for (int _i655 = 0; _i655 < _list654.size; ++_i655)
                   {
-                    String _elem664; // required
-                    _elem664 = iprot.readString();
-                    struct.part_vals.add(_elem664);
+                    String _elem656; // required
+                    _elem656 = iprot.readString();
+                    struct.part_vals.add(_elem656);
                   }
                   iprot.readListEnd();
                 }
@@ -49510,9 +49587,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, append_partition_w
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter665 : struct.part_vals)
+            for (String _iter657 : struct.part_vals)
             {
-              oprot.writeString(_iter665);
+              oprot.writeString(_iter657);
             }
             oprot.writeListEnd();
           }
@@ -49563,9 +49640,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, append_partition_wi
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter666 : struct.part_vals)
+            for (String _iter658 : struct.part_vals)
             {
-              oprot.writeString(_iter666);
+              oprot.writeString(_iter658);
             }
           }
         }
@@ -49588,13 +49665,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, append_partition_wit
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list667 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list667.size);
-            for (int _i668 = 0; _i668 < _list667.size; ++_i668)
+            org.apache.thrift.protocol.TList _list659 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list659.size);
+            for (int _i660 = 0; _i660 < _list659.size; ++_i660)
             {
-              String _elem669; // required
-              _elem669 = iprot.readString();
-              struct.part_vals.add(_elem669);
+              String _elem661; // required
+              _elem661 = iprot.readString();
+              struct.part_vals.add(_elem661);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -53467,13 +53544,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, drop_partition_args
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list670 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list670.size);
-                  for (int _i671 = 0; _i671 < _list670.size; ++_i671)
+                  org.apache.thrift.protocol.TList _list662 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list662.size);
+                  for (int _i663 = 0; _i663 < _list662.size; ++_i663)
                   {
-                    String _elem672; // required
-                    _elem672 = iprot.readString();
-                    struct.part_vals.add(_elem672);
+                    String _elem664; // required
+                    _elem664 = iprot.readString();
+                    struct.part_vals.add(_elem664);
                   }
                   iprot.readListEnd();
                 }
@@ -53517,9 +53594,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, drop_partition_arg
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter673 : struct.part_vals)
+            for (String _iter665 : struct.part_vals)
             {
-              oprot.writeString(_iter673);
+              oprot.writeString(_iter665);
             }
             oprot.writeListEnd();
           }
@@ -53568,9 +53645,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, drop_partition_args
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter674 : struct.part_vals)
+            for (String _iter666 : struct.part_vals)
             {
-              oprot.writeString(_iter674);
+              oprot.writeString(_iter666);
             }
           }
         }
@@ -53593,13 +53670,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, drop_partition_args
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list675 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list675.size);
-            for (int _i676 = 0; _i676 < _list675.size; ++_i676)
+            org.apache.thrift.protocol.TList _list667 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list667.size);
+            for (int _i668 = 0; _i668 < _list667.size; ++_i668)
             {
-              String _elem677; // required
-              _elem677 = iprot.readString();
-              struct.part_vals.add(_elem677);
+              String _elem669; // required
+              _elem669 = iprot.readString();
+              struct.part_vals.add(_elem669);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -54841,13 +54918,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, drop_partition_with
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list678 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list678.size);
-                  for (int _i679 = 0; _i679 < _list678.size; ++_i679)
+                  org.apache.thrift.protocol.TList _list670 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list670.size);
+                  for (int _i671 = 0; _i671 < _list670.size; ++_i671)
                   {
-                    String _elem680; // required
-                    _elem680 = iprot.readString();
-                    struct.part_vals.add(_elem680);
+                    String _elem672; // required
+                    _elem672 = iprot.readString();
+                    struct.part_vals.add(_elem672);
                   }
                   iprot.readListEnd();
                 }
@@ -54900,9 +54977,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, drop_partition_wit
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter681 : struct.part_vals)
+            for (String _iter673 : struct.part_vals)
             {
-              oprot.writeString(_iter681);
+              oprot.writeString(_iter673);
             }
             oprot.writeListEnd();
           }
@@ -54959,9 +55036,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, drop_partition_with
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter682 : struct.part_vals)
+            for (String _iter674 : struct.part_vals)
             {
-              oprot.writeString(_iter682);
+              oprot.writeString(_iter674);
             }
           }
         }
@@ -54987,13 +55064,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, drop_partition_with_
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list683 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list683.size);
-            for (int _i684 = 0; _i684 < _list683.size; ++_i684)
+            org.apache.thrift.protocol.TList _list675 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list675.size);
+            for (int _i676 = 0; _i676 < _list675.size; ++_i676)
             {
-              String _elem685; // required
-              _elem685 = iprot.readString();
-              struct.part_vals.add(_elem685);
+              String _elem677; // required
+              _elem677 = iprot.readString();
+              struct.part_vals.add(_elem677);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -59598,13 +59675,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_args
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list686 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list686.size);
-                  for (int _i687 = 0; _i687 < _list686.size; ++_i687)
+                  org.apache.thrift.protocol.TList _list678 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list678.size);
+                  for (int _i679 = 0; _i679 < _list678.size; ++_i679)
                   {
-                    String _elem688; // required
-                    _elem688 = iprot.readString();
-                    struct.part_vals.add(_elem688);
+                    String _elem680; // required
+                    _elem680 = iprot.readString();
+                    struct.part_vals.add(_elem680);
                   }
                   iprot.readListEnd();
                 }
@@ -59640,9 +59717,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_args
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter689 : struct.part_vals)
+            for (String _iter681 : struct.part_vals)
             {
-              oprot.writeString(_iter689);
+              oprot.writeString(_iter681);
             }
             oprot.writeListEnd();
           }
@@ -59685,9 +59762,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_args
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter690 : struct.part_vals)
+            for (String _iter682 : struct.part_vals)
             {
-              oprot.writeString(_iter690);
+              oprot.writeString(_iter682);
             }
           }
         }
@@ -59707,13 +59784,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_args s
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list691 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list691.size);
-            for (int _i692 = 0; _i692 < _list691.size; ++_i692)
+            org.apache.thrift.protocol.TList _list683 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list683.size);
+            for (int _i684 = 0; _i684 < _list683.size; ++_i684)
             {
-              String _elem693; // required
-              _elem693 = iprot.readString();
-              struct.part_vals.add(_elem693);
+              String _elem685; // required
+              _elem685 = iprot.readString();
+              struct.part_vals.add(_elem685);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -60942,15 +61019,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, exchange_partition_
             case 1: // PARTITION_SPECS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map694 = iprot.readMapBegin();
-                  struct.partitionSpecs = new HashMap<String,String>(2*_map694.size);
-                  for (int _i695 = 0; _i695 < _map694.size; ++_i695)
+                  org.apache.thrift.protocol.TMap _map686 = iprot.readMapBegin();
+                  struct.partitionSpecs = new HashMap<String,String>(2*_map686.size);
+                  for (int _i687 = 0; _i687 < _map686.size; ++_i687)
                   {
-                    String _key696; // required
-                    String _val697; // required
-                    _key696 = iprot.readString();
-                    _val697 = iprot.readString();
-                    struct.partitionSpecs.put(_key696, _val697);
+                    String _key688; // required
+                    String _val689; // required
+                    _key688 = iprot.readString();
+                    _val689 = iprot.readString();
+                    struct.partitionSpecs.put(_key688, _val689);
                   }
                   iprot.readMapEnd();
                 }
@@ -61008,10 +61085,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, exchange_partition
           oprot.writeFieldBegin(PARTITION_SPECS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.partitionSpecs.size()));
-            for (Map.Entry<String, String> _iter698 : struct.partitionSpecs.entrySet())
+            for (Map.Entry<String, String> _iter690 : struct.partitionSpecs.entrySet())
             {
-              oprot.writeString(_iter698.getKey());
-              oprot.writeString(_iter698.getValue());
+              oprot.writeString(_iter690.getKey());
+              oprot.writeString(_iter690.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -61074,10 +61151,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, exchange_partition_
         if (struct.isSetPartitionSpecs()) {
           {
             oprot.writeI32(struct.partitionSpecs.size());
-            for (Map.Entry<String, String> _iter699 : struct.partitionSpecs.entrySet())
+            for (Map.Entry<String, String> _iter691 : struct.partitionSpecs.entrySet())
             {
-              oprot.writeString(_iter699.getKey());
-              oprot.writeString(_iter699.getValue());
+              oprot.writeString(_iter691.getKey());
+              oprot.writeString(_iter691.getValue());
             }
           }
         }
@@ -61101,15 +61178,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, exchange_partition_a
         BitSet incoming = iprot.readBitSet(5);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TMap _map700 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.partitionSpecs = new HashMap<String,String>(2*_map700.size);
-            for (int _i701 = 0; _i701 < _map700.size; ++_i701)
+            org.apache.thrift.protocol.TMap _map692 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.partitionSpecs = new HashMap<String,String>(2*_map692.size);
+            for (int _i693 = 0; _i693 < _map692.size; ++_i693)
             {
-              String _key702; // required
-              String _val703; // required
-              _key702 = iprot.readString();
-              _val703 = iprot.readString();
-              struct.partitionSpecs.put(_key702, _val703);
+              String _key694; // required
+              String _val695; // required
+              _key694 = iprot.readString();
+              _val695 = iprot.readString();
+              struct.partitionSpecs.put(_key694, _val695);
             }
           }
           struct.setPartitionSpecsIsSet(true);
@@ -62597,13 +62674,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_with_
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list704 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list704.size);
-                  for (int _i705 = 0; _i705 < _list704.size; ++_i705)
+                  org.apache.thrift.protocol.TList _list696 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list696.size);
+                  for (int _i697 = 0; _i697 < _list696.size; ++_i697)
                   {
-                    String _elem706; // required
-                    _elem706 = iprot.readString();
-                    struct.part_vals.add(_elem706);
+                    String _elem698; // required
+                    _elem698 = iprot.readString();
+                    struct.part_vals.add(_elem698);
                   }
                   iprot.readListEnd();
                 }
@@ -62623,13 +62700,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_with_
             case 5: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list707 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list707.size);
-                  for (int _i708 = 0; _i708 < _list707.size; ++_i708)
+                  org.apache.thrift.protocol.TList _list699 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list699.size);
+                  for (int _i700 = 0; _i700 < _list699.size; ++_i700)
                   {
-                    String _elem709; // required
-                    _elem709 = iprot.readString();
-                    struct.group_names.add(_elem709);
+                    String _elem701; // required
+                    _elem701 = iprot.readString();
+                    struct.group_names.add(_elem701);
                   }
                   iprot.readListEnd();
                 }
@@ -62665,9 +62742,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_with
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter710 : struct.part_vals)
+            for (String _iter702 : struct.part_vals)
             {
-              oprot.writeString(_iter710);
+              oprot.writeString(_iter702);
             }
             oprot.writeListEnd();
           }
@@ -62682,9 +62759,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_with
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter711 : struct.group_names)
+            for (String _iter703 : struct.group_names)
             {
-              oprot.writeString(_iter711);
+              oprot.writeString(_iter703);
             }
             oprot.writeListEnd();
           }
@@ -62733,9 +62810,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_with_
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter712 : struct.part_vals)
+            for (String _iter704 : struct.part_vals)
             {
-              oprot.writeString(_iter712);
+              oprot.writeString(_iter704);
             }
           }
         }
@@ -62745,9 +62822,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_with_
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter713 : struct.group_names)
+            for (String _iter705 : struct.group_names)
             {
-              oprot.writeString(_iter713);
+              oprot.writeString(_iter705);
             }
           }
         }
@@ -62767,13 +62844,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_with_a
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list714 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list714.size);
-            for (int _i715 = 0; _i715 < _list714.size; ++_i715)
+            org.apache.thrift.protocol.TList _list706 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list706.size);
+            for (int _i707 = 0; _i707 < _list706.size; ++_i707)
             {
-              String _elem716; // required
-              _elem716 = iprot.readString();
-              struct.part_vals.add(_elem716);
+              String _elem708; // required
+              _elem708 = iprot.readString();
+              struct.part_vals.add(_elem708);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -62784,13 +62861,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_with_a
         }
         if (incoming.get(4)) {
           {
-            org.apache.thrift.protocol.TList _list717 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list717.size);
-            for (int _i718 = 0; _i718 < _list717.size; ++_i718)
+            org.apache.thrift.protocol.TList _list709 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list709.size);
+            for (int _i710 = 0; _i710 < _list709.size; ++_i710)
             {
-              String _elem719; // required
-              _elem719 = iprot.readString();
-              struct.group_names.add(_elem719);
+              String _elem711; // required
+              _elem711 = iprot.readString();
+              struct.group_names.add(_elem711);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -65559,14 +65636,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_resu
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list720 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list720.size);
-                  for (int _i721 = 0; _i721 < _list720.size; ++_i721)
+                  org.apache.thrift.protocol.TList _list712 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list712.size);
+                  for (int _i713 = 0; _i713 < _list712.size; ++_i713)
                   {
-                    Partition _elem722; // required
-                    _elem722 = new Partition();
-                    _elem722.read(iprot);
-                    struct.success.add(_elem722);
+                    Partition _elem714; // required
+                    _elem714 = new Partition();
+                    _elem714.read(iprot);
+                    struct.success.add(_elem714);
                   }
                   iprot.readListEnd();
                 }
@@ -65610,9 +65687,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_res
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter723 : struct.success)
+            for (Partition _iter715 : struct.success)
             {
-              _iter723.write(oprot);
+              _iter715.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -65659,9 +65736,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_resu
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter724 : struct.success)
+            for (Partition _iter716 : struct.success)
             {
-              _iter724.write(oprot);
+              _iter716.write(oprot);
             }
           }
         }
@@ -65679,14 +65756,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_resul
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list725 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list725.size);
-            for (int _i726 = 0; _i726 < _list725.size; ++_i726)
+            org.apache.thrift.protocol.TList _list717 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list717.size);
+            for (int _i718 = 0; _i718 < _list717.size; ++_i718)
             {
-              Partition _elem727; // required
-              _elem727 = new Partition();
-              _elem727.read(iprot);
-              struct.success.add(_elem727);
+              Partition _elem719; // required
+              _elem719 = new Partition();
+              _elem719.read(iprot);
+              struct.success.add(_elem719);
             }
           }
           struct.setSuccessIsSet(true);
@@ -66379,13 +66456,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_with
             case 5: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list728 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list728.size);
-                  for (int _i729 = 0; _i729 < _list728.size; ++_i729)
+                  org.apache.thrift.protocol.TList _list720 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list720.size);
+                  for (int _i721 = 0; _i721 < _list720.size; ++_i721)
                   {
-                    String _elem730; // required
-                    _elem730 = iprot.readString();
-                    struct.group_names.add(_elem730);
+                    String _elem722; // required
+                    _elem722 = iprot.readString();
+                    struct.group_names.add(_elem722);
                   }
                   iprot.readListEnd();
                 }
@@ -66429,9 +66506,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_wit
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter731 : struct.group_names)
+            for (String _iter723 : struct.group_names)
             {
-              oprot.writeString(_iter731);
+              oprot.writeString(_iter723);
             }
             oprot.writeListEnd();
           }
@@ -66486,9 +66563,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_with
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter732 : struct.group_names)
+            for (String _iter724 : struct.group_names)
             {
-              oprot.writeString(_iter732);
+              oprot.writeString(_iter724);
             }
           }
         }
@@ -66516,13 +66593,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_with_
         }
         if (incoming.get(4)) {
           {
-            org.apache.thrift.protocol.TList _list733 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list733.size);
-            for (int _i734 = 0; _i734 < _list733.size; ++_i734)
+            org.apache.thrift.protocol.TList _list725 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list725.size);
+            for (int _i726 = 0; _i726 < _list725.size; ++_i726)
             {
-              String _elem735; // required
-              _elem735 = iprot.readString();
-              struct.group_names.add(_elem735);
+              String _elem727; // required
+              _elem727 = iprot.readString();
+              struct.group_names.add(_elem727);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -67009,14 +67086,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_with
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list736 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list736.size);
-                  for (int _i737 = 0; _i737 < _list736.size; ++_i737)
+                  org.apache.thrift.protocol.TList _list728 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list728.size);
+                  for (int _i729 = 0; _i729 < _list728.size; ++_i729)
                   {
-                    Partition _elem738; // required
-                    _elem738 = new Partition();
-                    _elem738.read(iprot);
-                    struct.success.add(_elem738);
+                    Partition _elem730; // required
+                    _elem730 = new Partition();
+                    _elem730.read(iprot);
+                    struct.success.add(_elem730);
                   }
                   iprot.readListEnd();
                 }
@@ -67060,9 +67137,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_wit
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter739 : struct.success)
+            for (Partition _iter731 : struct.success)
             {
-              _iter739.write(oprot);
+              _iter731.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -67109,9 +67186,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_with
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter740 : struct.success)
+            for (Partition _iter732 : struct.success)
             {
-              _iter740.write(oprot);
+              _iter732.write(oprot);
             }
           }
         }
@@ -67129,14 +67206,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_with_
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list741 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list741.size);
-            for (int _i742 = 0; _i742 < _list741.size; ++_i742)
+            org.apache.thrift.protocol.TList _list733 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list733.size);
+            for (int _i734 = 0; _i734 < _list733.size; ++_i734)
             {
-              Partition _elem743; // required
-              _elem743 = new Partition();
-              _elem743.read(iprot);
-              struct.success.add(_elem743);
+              Partition _elem735; // required
+              _elem735 = new Partition();
+              _elem735.read(iprot);
+              struct.success.add(_elem735);
             }
           }
           struct.setSuccessIsSet(true);
@@ -68199,14 +68276,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_pspe
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list744 = iprot.readListBegin();
-                  struct.success = new ArrayList<PartitionSpec>(_list744.size);
-                  for (int _i745 = 0; _i745 < _list744.size; ++_i745)
+                  org.apache.thrift.protocol.TList _list736 = iprot.readListBegin();
+                  struct.success = new ArrayList<PartitionSpec>(_list736.size);
+                  for (int _i737 = 0; _i737 < _list736.size; ++_i737)
                   {
-                    PartitionSpec _elem746; // required
-                    _elem746 = new PartitionSpec();
-                    _elem746.read(iprot);
-                    struct.success.add(_elem746);
+                    PartitionSpec _elem738; // required
+                    _elem738 = new PartitionSpec();
+                    _elem738.read(iprot);
+                    struct.success.add(_elem738);
                   }
                   iprot.readListEnd();
                 }
@@ -68250,9 +68327,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_psp
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (PartitionSpec _iter747 : struct.success)
+            for (PartitionSpec _iter739 : struct.success)
             {
-              _iter747.write(oprot);
+              _iter739.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -68299,9 +68376,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_pspe
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (PartitionSpec _iter748 : struct.success)
+            for (PartitionSpec _iter740 : struct.success)
             {
-              _iter748.write(oprot);
+              _iter740.write(oprot);
             }
           }
         }
@@ -68319,14 +68396,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_pspec
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list749 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<PartitionSpec>(_list749.size);
-            for (int _i750 = 0; _i750 < _list749.size; ++_i750)
+            org.apache.thrift.protocol.TList _list741 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<PartitionSpec>(_list741.size);
+            for (int _i742 = 0; _i742 < _list741.size; ++_i742)
             {
-              PartitionSpec _elem751; // required
-              _elem751 = new PartitionSpec();
-              _elem751.read(iprot);
-              struct.success.add(_elem751);
+              PartitionSpec _elem743; // required
+              _elem743 = new PartitionSpec();
+              _elem743.read(iprot);
+              struct.success.add(_elem743);
             }
           }
           struct.setSuccessIsSet(true);
@@ -69308,13 +69385,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_names
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list752 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list752.size);
-                  for (int _i753 = 0; _i753 < _list752.size; ++_i753)
+                  org.apache.thrift.protocol.TList _list744 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list744.size);
+                  for (int _i745 = 0; _i745 < _list744.size; ++_i745)
                   {
-                    String _elem754; // required
-                    _elem754 = iprot.readString();
-                    struct.success.add(_elem754);
+                    String _elem746; // required
+                    _elem746 = iprot.readString();
+                    struct.success.add(_elem746);
                   }
                   iprot.readListEnd();
                 }
@@ -69349,9 +69426,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_name
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter755 : struct.success)
+            for (String _iter747 : struct.success)
             {
-              oprot.writeString(_iter755);
+              oprot.writeString(_iter747);
             }
             oprot.writeListEnd();
           }
@@ -69390,9 +69467,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_names
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter756 : struct.success)
+            for (String _iter748 : struct.success)
             {
-              oprot.writeString(_iter756);
+              oprot.writeString(_iter748);
             }
           }
         }
@@ -69407,13 +69484,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_names_
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list757 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list757.size);
-            for (int _i758 = 0; _i758 < _list757.size; ++_i758)
+            org.apache.thrift.protocol.TList _list749 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list749.size);
+            for (int _i750 = 0; _i750 < _list749.size; ++_i750)
             {
-              String _elem759; // required
-              _elem759 = iprot.readString();
-              struct.success.add(_elem759);
+              String _elem751; // required
+              _elem751 = iprot.readString();
+              struct.success.add(_elem751);
             }
           }
           struct.setSuccessIsSet(true);
@@ -70004,13 +70081,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_a
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list760 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list760.size);
-                  for (int _i761 = 0; _i761 < _list760.size; ++_i761)
+                  org.apache.thrift.protocol.TList _list752 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list752.size);
+                  for (int _i753 = 0; _i753 < _list752.size; ++_i753)
                   {
-                    String _elem762; // required
-                    _elem762 = iprot.readString();
-                    struct.part_vals.add(_elem762);
+                    String _elem754; // required
+                    _elem754 = iprot.readString();
+                    struct.part_vals.add(_elem754);
                   }
                   iprot.readListEnd();
                 }
@@ -70054,9 +70131,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter763 : struct.part_vals)
+            for (String _iter755 : struct.part_vals)
             {
-              oprot.writeString(_iter763);
+              oprot.writeString(_iter755);
             }
             oprot.writeListEnd();
           }
@@ -70105,9 +70182,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_a
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter764 : struct.part_vals)
+            for (String _iter756 : struct.part_vals)
             {
-              oprot.writeString(_iter764);
+              oprot.writeString(_iter756);
             }
           }
         }
@@ -70130,13 +70207,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_ar
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list765 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list765.size);
-            for (int _i766 = 0; _i766 < _list765.size; ++_i766)
+            org.apache.thrift.protocol.TList _list757 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list757.size);
+            for (int _i758 = 0; _i758 < _list757.size; ++_i758)
             {
-              String _elem767; // required
-              _elem767 = iprot.readString();
-              struct.part_vals.add(_elem767);
+              String _elem759; // required
+              _elem759 = iprot.readString();
+              struct.part_vals.add(_elem759);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -70627,14 +70704,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_r
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list768 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list768.size);
-                  for (int _i769 = 0; _i769 < _list768.size; ++_i769)
+                  org.apache.thrift.protocol.TList _list760 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list760.size);
+                  for (int _i761 = 0; _i761 < _list760.size; ++_i761)
                   {
-                    Partition _elem770; // required
-                    _elem770 = new Partition();
-                    _elem770.read(iprot);
-                    struct.success.add(_elem770);
+                    Partition _elem762; // required
+                    _elem762 = new Partition();
+                    _elem762.read(iprot);
+                    struct.success.add(_elem762);
                   }
                   iprot.readListEnd();
                 }
@@ -70678,9 +70755,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter771 : struct.success)
+            for (Partition _iter763 : struct.success)
             {
-              _iter771.write(oprot);
+              _iter763.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -70727,9 +70804,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_r
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter772 : struct.success)
+            for (Partition _iter764 : struct.success)
             {
-              _iter772.write(oprot);
+              _iter764.write(oprot);
             }
           }
         }
@@ -70747,14 +70824,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_re
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list773 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list773.size);
-            for (int _i774 = 0; _i774 < _list773.size; ++_i774)
+            org.apache.thrift.protocol.TList _list765 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list765.size);
+            for (int _i766 = 0; _i766 < _list765.size; ++_i766)
             {
-              Partition _elem775; // required
-              _elem775 = new Partition();
-              _elem775.read(iprot);
-              struct.success.add(_elem775);
+              Partition _elem767; // required
+              _elem767 = new Partition();
+              _elem767.read(iprot);
+              struct.success.add(_elem767);
             }
           }
           struct.setSuccessIsSet(true);
@@ -71532,13 +71609,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_w
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list776 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list776.size);
-                  for (int _i777 = 0; _i777 < _list776.size; ++_i777)
+                  org.apache.thrift.protocol.TList _list768 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list768.size);
+                  for (int _i769 = 0; _i769 < _list768.size; ++_i769)
                   {
-                    String _elem778; // required
-                    _elem778 = iprot.readString();
-                    struct.part_vals.add(_elem778);
+                    String _elem770; // required
+                    _elem770 = iprot.readString();
+                    struct.part_vals.add(_elem770);
                   }
                   iprot.readListEnd();
                 }
@@ -71566,13 +71643,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_w
             case 6: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list779 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list779.size);
-                  for (int _i780 = 0; _i780 < _list779.size; ++_i780)
+                  org.apache.thrift.protocol.TList _list771 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list771.size);
+                  for (int _i772 = 0; _i772 < _list771.size; ++_i772)
                   {
-                    String _elem781; // required
-                    _elem781 = iprot.readString();
-                    struct.group_names.add(_elem781);
+                    String _elem773; // required
+                    _elem773 = iprot.readString();
+                    struct.group_names.add(_elem773);
                   }
                   iprot.readListEnd();
                 }
@@ -71608,9 +71685,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter782 : struct.part_vals)
+            for (String _iter774 : struct.part_vals)
             {
-              oprot.writeString(_iter782);
+              oprot.writeString(_iter774);
             }
             oprot.writeListEnd();
           }
@@ -71628,9 +71705,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter783 : struct.group_names)
+            for (String _iter775 : struct.group_names)
             {
-              oprot.writeString(_iter783);
+              oprot.writeString(_iter775);
             }
             oprot.writeListEnd();
           }
@@ -71682,9 +71759,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_w
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter784 : struct.part_vals)
+            for (String _iter776 : struct.part_vals)
             {
-              oprot.writeString(_iter784);
+              oprot.writeString(_iter776);
             }
           }
         }
@@ -71697,9 +71774,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_w
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter785 : struct.group_names)
+            for (String _iter777 : struct.group_names)
             {
-              oprot.writeString(_iter785);
+              oprot.writeString(_iter777);
             }
           }
         }
@@ -71719,13 +71796,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_wi
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list786 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list786.size);
-            for (int _i787 = 0; _i787 < _list786.size; ++_i787)
+            org.apache.thrift.protocol.TList _list778 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list778.size);
+            for (int _i779 = 0; _i779 < _list778.size; ++_i779)
             {
-              String _elem788; // required
-              _elem788 = iprot.readString();
-              struct.part_vals.add(_elem788);
+              String _elem780; // required
+              _elem780 = iprot.readString();
+              struct.part_vals.add(_elem780);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -71740,13 +71817,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_wi
         }
         if (incoming.get(5)) {
           {
-            org.apache.thrift.protocol.TList _list789 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list789.size);
-            for (int _i790 = 0; _i790 < _list789.size; ++_i790)
+            org.apache.thrift.protocol.TList _list781 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list781.size);
+            for (int _i782 = 0; _i782 < _list781.size; ++_i782)
             {
-              String _elem791; // required
-              _elem791 = iprot.readString();
-              struct.group_names.add(_elem791);
+              String _elem783; // required
+              _elem783 = iprot.readString();
+              struct.group_names.add(_elem783);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -72233,14 +72310,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_w
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list792 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list792.size);
-                  for (int _i793 = 0; _i793 < _list792.size; ++_i793)
+                  org.apache.thrift.protocol.TList _list784 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list784.size);
+                  for (int _i785 = 0; _i785 < _list784.size; ++_i785)
                   {
-                    Partition _elem794; // required
-                    _elem794 = new Partition();
-                    _elem794.read(iprot);
-                    struct.success.add(_elem794);
+                    Partition _elem786; // required
+                    _elem786 = new Partition();
+                    _elem786.read(iprot);
+                    struct.success.add(_elem786);
                   }
                   iprot.readListEnd();
                 }
@@ -72284,9 +72361,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter795 : struct.success)
+            for (Partition _iter787 : struct.success)
             {
-              _iter795.write(oprot);
+              _iter787.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -72333,9 +72410,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_w
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter796 : struct.success)
+            for (Partition _iter788 : struct.success)
             {
-              _iter796.write(oprot);
+              _iter788.write(oprot);
             }
           }
         }
@@ -72353,14 +72430,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_wi
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list797 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list797.size);
-            for (int _i798 = 0; _i798 < _list797.size; ++_i798)
+            org.apache.thrift.protocol.TList _list789 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list789.size);
+            for (int _i790 = 0; _i790 < _list789.size; ++_i790)
             {
-              Partition _elem799; // required
-              _elem799 = new Partition();
-              _elem799.read(iprot);
-              struct.success.add(_elem799);
+              Partition _elem791; // required
+              _elem791 = new Partition();
+              _elem791.read(iprot);
+              struct.success.add(_elem791);
             }
           }
           struct.setSuccessIsSet(true);
@@ -72956,13 +73033,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_names
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list800 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list800.size);
-                  for (int _i801 = 0; _i801 < _list800.size; ++_i801)
+                  org.apache.thrift.protocol.TList _list792 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list792.size);
+                  for (int _i793 = 0; _i793 < _list792.size; ++_i793)
                   {
-                    String _elem802; // required
-                    _elem802 = iprot.readString();
-                    struct.part_vals.add(_elem802);
+                    String _elem794; // required
+                    _elem794 = iprot.readString();
+                    struct.part_vals.add(_elem794);
                   }
                   iprot.readListEnd();
                 }
@@ -73006,9 +73083,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_name
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter803 : struct.part_vals)
+            for (String _iter795 : struct.part_vals)
             {
-              oprot.writeString(_iter803);
+              oprot.writeString(_iter795);
             }
             oprot.writeListEnd();
           }
@@ -73057,9 +73134,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_names
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter804 : struct.part_vals)
+            for (String _iter796 : struct.part_vals)
             {
-              oprot.writeString(_iter804);
+              oprot.writeString(_iter796);
             }
           }
         }
@@ -73082,13 +73159,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_names_
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list805 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list805.size);
-            for (int _i806 = 0; _i806 < _list805.size; ++_i806)
+            org.apache.thrift.protocol.TList _list797 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list797.size);
+            for (int _i798 = 0; _i798 < _list797.size; ++_i798)
             {
-              String _elem807; // required
-              _elem807 = iprot.readString();
-              struct.part_vals.add(_elem807);
+              String _elem799; // required
+              _elem799 = iprot.readString();
+              struct.part_vals.add(_elem799);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -73579,13 +73656,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_names
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list808 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list808.size);
-                  for (int _i809 = 0; _i809 < _list808.size; ++_i809)
+                  org.apache.thrift.protocol.TList _list800 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list800.size);
+                  for (int _i801 = 0; _i801 < _list800.size; ++_i801)
                   {
-                    String _elem810; // required
-                    _elem810 = iprot.readString();
-                    struct.success.add(_elem810);
+                    String _elem802; // required
+                    _elem802 = iprot.readString();
+                    struct.success.add(_elem802);
                   }
                   iprot.readListEnd();
                 }
@@ -73629,9 +73706,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_name
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter811 : struct.success)
+            for (String _iter803 : struct.success)
             {
-              oprot.writeString(_iter811);
+              oprot.writeString(_iter803);
             }
             oprot.writeListEnd();
           }
@@ -73678,9 +73755,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_names
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter812 : struct.success)
+            for (String _iter804 : struct.success)
             {
-              oprot.writeString(_iter812);
+              oprot.writeString(_iter804);
             }
           }
         }
@@ -73698,13 +73775,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_names_
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list813 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list813.size);
-            for (int _i814 = 0; _i814 < _list813.size; ++_i814)
+            org.apache.thrift.protocol.TList _list805 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list805.size);
+            for (int _i806 = 0; _i806 < _list805.size; ++_i806)
             {
-              String _elem815; // required
-              _elem815 = iprot.readString();
-              struct.success.add(_elem815);
+              String _elem807; // required
+              _elem807 = iprot.readString();
+              struct.success.add(_elem807);
             }
           }
           struct.setSuccessIsSet(true);
@@ -74871,14 +74948,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_by_f
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list816 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list816.size);
-                  for (int _i817 = 0; _i817 < _list816.size; ++_i817)
+                  org.apache.thrift.protocol.TList _list808 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list808.size);
+                  for (int _i809 = 0; _i809 < _list808.size; ++_i809)
                   {
-                    Partition _elem818; // required
-                    _elem818 = new Partition();
-                    _elem818.read(iprot);
-                    struct.success.add(_elem818);
+                    Partition _elem810; // required
+                    _elem810 = new Partition();
+                    _elem810.read(iprot);
+                    struct.success.add(_elem810);
                   }
                   iprot.readListEnd();
                 }
@@ -74922,9 +74999,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_by_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter819 : struct.success)
+            for (Partition _iter811 : struct.success)
             {
-              _iter819.write(oprot);
+              _iter811.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -74971,9 +75048,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_f
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter820 : struct.success)
+            for (Partition _iter812 : struct.success)
             {
-              _iter820.write(oprot);
+              _iter812.write(oprot);
             }
           }
         }
@@ -74991,14 +75068,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_fi
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list821 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list821.size);
-            for (int _i822 = 0; _i822 < _list821.size; ++_i822)
+            org.apache.thrift.protocol.TList _list813 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list813.size);
+            for (int _i814 = 0; _i814 < _list813.size; ++_i814)
             {
-              Partition _elem823; // required
-              _elem823 = new Partition();
-              _elem823.read(iprot);
-              struct.success.add(_elem823);
+              Partition _elem815; // required
+              _elem815 = new Partition();
+              _elem815.read(iprot);
+              struct.success.add(_elem815);
             }
           }
           struct.setSuccessIsSet(true);
@@ -76165,14 +76242,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_part_specs_by_f
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list824 = iprot.readListBegin();
-                  struct.success = new ArrayList<PartitionSpec>(_list824.size);
-                  for (int _i825 = 0; _i825 < _list824.size; ++_i825)
+                  org.apache.thrift.protocol.TList _list816 = iprot.readListBegin();
+                  struct.success = new ArrayList<PartitionSpec>(_list816.size);
+                  for (int _i817 = 0; _i817 < _list816.size; ++_i817)
                   {
-                    PartitionSpec _elem826; // required
-                    _elem826 = new PartitionSpec();
-                    _elem826.read(iprot);
-                    struct.success.add(_elem826);
+                    PartitionSpec _elem818; // required
+                    _elem818 = new PartitionSpec();
+                    _elem818.read(iprot);
+                    struct.success.add(_elem818);
                   }
                   iprot.readListEnd();
                 }
@@ -76216,9 +76293,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_part_specs_by_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (PartitionSpec _iter827 : struct.success)
+            for (PartitionSpec _iter819 : struct.success)
             {
-              _iter827.write(oprot);
+              _iter819.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -76265,9 +76342,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_part_specs_by_f
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (PartitionSpec _iter828 : struct.success)
+            for (PartitionSpec _iter820 : struct.success)
             {
-              _iter828.write(oprot);
+              _iter820.write(oprot);
             }
           }
         }
@@ -76285,14 +76362,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_part_specs_by_fi
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list829 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<PartitionSpec>(_list829.size);
-            for (int _i830 = 0; _i830 < _list829.size; ++_i830)
+            org.apache.thrift.protocol.TList _list821 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<PartitionSpec>(_list821.size);
+            for (int _i822 = 0; _i822 < _list821.size; ++_i822)
             {
-              PartitionSpec _elem831; // required
-              _elem831 = new PartitionSpec();
-              _elem831.read(iprot);
-              struct.success.add(_elem831);
+              PartitionSpec _elem823; // required
+              _elem823 = new PartitionSpec();
+              _elem823.read(iprot);
+              struct.success.add(_elem823);
             }
           }
           struct.setSuccessIsSet(true);
@@ -77743,13 +77820,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_by_n
             case 3: // NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list832 = iprot.readListBegin();
-                  struct.names = new ArrayList<String>(_list832.size);
-                  for (int _i833 = 0; _i833 < _list832.size; ++_i833)
+                  org.apache.thrift.protocol.TList _list824 = iprot.readListBegin();
+                  struct.names = new ArrayList<String>(_list824.size);
+                  for (int _i825 = 0; _i825 < _list824.size; ++_i825)
                   {
-                    String _elem834; // required
-                    _elem834 = iprot.readString();
-                    struct.names.add(_elem834);
+                    String _elem826; // required
+                    _elem826 = iprot.readString();
+                    struct.names.add(_elem826);
                   }
                   iprot.readListEnd();
                 }
@@ -77785,9 +77862,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_by_
           oprot.writeFieldBegin(NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.names.size()));
-            for (String _iter835 : struct.names)
+            for (String _iter827 : struct.names)
             {
-              oprot.writeString(_iter835);
+              oprot.writeString(_iter827);
             }
             oprot.writeListEnd();
           }
@@ -77830,9 +77907,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_n
         if (struct.isSetNames()) {
           {
             oprot.writeI32(struct.names.size());
-            for (String _iter836 : struct.names)
+            for (String _iter828 : struct.names)
             {
-              oprot.writeString(_iter836);
+              oprot.writeString(_iter828);
             }
           }
         }
@@ -77852,13 +77929,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_na
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list837 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.names = new ArrayList<String>(_list837.size);
-            for (int _i838 = 0; _i838 < _list837.size; ++_i838)
+            org.apache.thrift.protocol.TList _list829 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.names = new ArrayList<String>(_list829.size);
+            for (int _i830 = 0; _i830 < _list829.size; ++_i830)
             {
-              String _elem839; // required
-              _elem839 = iprot.readString();
-              struct.names.add(_elem839);
+              String _elem831; // required
+              _elem831 = iprot.readString();
+              struct.names.add(_elem831);
             }
           }
           struct.setNamesIsSet(true);
@@ -78345,14 +78422,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_by_n
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list840 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list840.size);
-                  for (int _i841 = 0; _i841 < _list840.size; ++_i841)
+                  org.apache.thrift.protocol.TList _list832 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list832.size);
+                  for (int _i833 = 0; _i833 < _list832.size; ++_i833)
                   {
-                    Partition _elem842; // required
-                    _elem842 = new Partition();
-                    _elem842.read(iprot);
-                    struct.success.add(_elem842);
+                    Partition _elem834; // required
+                    _elem834 = new Partition();
+                    _elem834.read(iprot);
+                    struct.success.add(_elem834);
                   }
                   iprot.readListEnd();
                 }
@@ -78396,9 +78473,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_by_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter843 : struct.success)
+            for (Partition _iter835 : struct.success)
             {
-              _iter843.write(oprot);
+              _iter835.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -78445,9 +78522,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_n
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter844 : struct.success)
+            for (Partition _iter836 : struct.success)
             {
-              _iter844.write(oprot);
+              _iter836.write(oprot);
             }
           }
         }
@@ -78465,14 +78542,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_na
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list845 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list845.size);
-            for (int _i846 = 0; _i846 < _list845.size; ++_i846)
+            org.apache.thrift.protocol.TList _list837 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list837.size);
+            for (int _i838 = 0; _i838 < _list837.size; ++_i838)
             {
-              Partition _elem847; // required
-              _elem847 = new Partition();
-              _elem847.read(iprot);
-              struct.success.add(_elem847);
+              Partition _elem839; // required
+              _elem839 = new Partition();
+              _elem839.read(iprot);
+              struct.success.add(_elem839);
             }
           }
           struct.setSuccessIsSet(true);
@@ -80022,14 +80099,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, alter_partitions_ar
             case 3: // NEW_PARTS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list848 = iprot.readListBegin();
-                  struct.new_parts = new ArrayList<Partition>(_list848.size);
-                  for (int _i849 = 0; _i849 < _list848.size; ++_i849)
+                  org.apache.thrift.protocol.TList _list840 = iprot.readListBegin();
+                  struct.new_parts = new ArrayList<Partition>(_list840.size);
+                  for (int _i841 = 0; _i841 < _list840.size; ++_i841)
                   {
-                    Partition _elem850; // required
-                    _elem850 = new Partition();
-                    _elem850.read(iprot);
-                    struct.new_parts.add(_elem850);
+                    Partition _elem842; // required
+                    _elem842 = new Partition();
+                    _elem842.read(iprot);
+                    struct.new_parts.add(_elem842);
                   }
                   iprot.readListEnd();
                 }
@@ -80065,9 +80142,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, alter_partitions_a
           oprot.writeFieldBegin(NEW_PARTS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.new_parts.size()));
-            for (Partition _iter851 : struct.new_parts)
+            for (Partition _iter843 : struct.new_parts)
             {
-              _iter851.write(oprot);
+              _iter843.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -80110,9 +80187,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, alter_partitions_ar
         if (struct.isSetNew_parts()) {
           {
             oprot.writeI32(struct.new_parts.size());
-            for (Partition _iter852 : struct.new_parts)
+            for (Partition _iter844 : struct.new_parts)
             {
-              _iter852.write(oprot);
+              _iter844.write(oprot);
             }
           }
         }
@@ -80132,14 +80209,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, alter_partitions_arg
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list853 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.new_parts = new ArrayList<Partition>(_list853.size);
-            for (int _i854 = 0; _i854 < _list853.size; ++_i854)
+            org.apache.thrift.protocol.TList _list845 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.new_parts = new ArrayList<Partition>(_list845.size);
+            for (int _i846 = 0; _i846 < _list845.size; ++_i846)
             {
-              Partition _elem855; // required
-              _elem855 = new Partition();
-              _elem855.read(iprot);
-              struct.new_parts.add(_elem855);
+              Partition _elem847; // required
+              _elem847 = new Partition();
+              _elem847.read(iprot);
+              struct.new_parts.add(_elem847);
             }
           }
           struct.setNew_partsIsSet(true);
@@ -82338,13 +82415,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, rename_partition_ar
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list856 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list856.size);
-                  for (int _i857 = 0; _i857 < _list856.size; ++_i857)
+                  org.apache.thrift.protocol.TList _list848 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list848.size);
+                  for (int _i849 = 0; _i849 < _list848.size; ++_i849)
                   {
-                    String _elem858; // required
-                    _elem858 = iprot.readString();
-                    struct.part_vals.add(_elem858);
+                    String _elem850; // required
+                    _elem850 = iprot.readString();
+                    struct.part_vals.add(_elem850);
                   }
                   iprot.readListEnd();
                 }
@@ -82389,9 +82466,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, rename_partition_a
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter859 : struct.part_vals)
+            for (String _iter851 : struct.part_vals)
             {
-              oprot.writeString(_iter859);
+              oprot.writeString(_iter851);
             }
             oprot.writeListEnd();
           }
@@ -82442,9 +82519,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, rename_partition_ar
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter860 : struct.part_vals)
+            for (String _iter852 : struct.part_vals)
             {
-              oprot.writeString(_iter860);
+              oprot.writeString(_iter852);
             }
           }
         }
@@ -82467,13 +82544,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, rename_partition_arg
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list861 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list861.size);
-            for (int _i862 = 0; _i862 < _list861.size; ++_i862)
+            org.apache.thrift.protocol.TList _list853 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list853.size);
+            for (int _i854 = 0; _i854 < _list853.size; ++_i854)
             {
-              String _elem863; // required
-              _elem863 = iprot.readString();
-              struct.part_vals.add(_elem863);
+              String _elem855; // required
+              _elem855 = iprot.readString();
+              struct.part_vals.add(_elem855);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -83350,13 +83427,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, partition_name_has_
             case 1: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list864 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list864.size);
-                  for (int _i865 = 0; _i865 < _list864.size; ++_i865)
+                  org.apache.thrift.protocol.TList _list856 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list856.size);
+                  for (int _i857 = 0; _i857 < _list856.size; ++_i857)
                   {
-                    String _elem866; // required
-                    _elem866 = iprot.readString();
-                    struct.part_vals.add(_elem866);
+                    String _elem858; // required
+                    _elem858 = iprot.readString();
+                    struct.part_vals.add(_elem858);
                   }
                   iprot.readListEnd();
                 }
@@ -83390,9 +83467,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, partition_name_has
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter867 : struct.part_vals)
+            for (String _iter859 : struct.part_vals)
             {
-              oprot.writeString(_iter867);
+              oprot.writeString(_iter859);
             }
             oprot.writeListEnd();
           }
@@ -83429,9 +83506,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, partition_name_has_
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter868 : struct.part_vals)
+            for (String _iter860 : struct.part_vals)
             {
-              oprot.writeString(_iter868);
+              oprot.writeString(_iter860);
             }
           }
         }
@@ -83446,13 +83523,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, partition_name_has_v
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list869 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list869.size);
-            for (int _i870 = 0; _i870 < _list869.size; ++_i870)
+            org.apache.thrift.protocol.TList _list861 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list861.size);
+            for (int _i862 = 0; _i862 < _list861.size; ++_i862)
             {
-              String _elem871; // required
-              _elem871 = iprot.readString();
-              struct.part_vals.add(_elem871);
+              String _elem863; // required
+              _elem863 = iprot.readString();
+              struct.part_vals.add(_elem863);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -85610,13 +85687,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, partition_name_to_v
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list872 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list872.size);
-                  for (int _i873 = 0; _i873 < _list872.size; ++_i873)
+                  org.apache.thrift.protocol.TList _list864 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list864.size);
+                  for (int _i865 = 0; _i865 < _list864.size; ++_i865)
                   {
-                    String _elem874; // required
-                    _elem874 = iprot.readString();
-                    struct.success.add(_elem874);
+                    String _elem866; // required
+                    _elem866 = iprot.readString();
+                    struct.success.add(_elem866);
                   }
                   iprot.readListEnd();
                 }
@@ -85651,9 +85728,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, partition_name_to_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter875 : struct.success)
+            for (String _iter867 : struct.success)
             {
-              oprot.writeString(_iter875);
+              oprot.writeString(_iter867);
             }
             oprot.writeListEnd();
           }
@@ -85692,9 +85769,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, partition_name_to_v
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter876 : struct.success)
+            for (String _iter868 : struct.success)
             {
-              oprot.writeString(_iter876);
+              oprot.writeString(_iter868);
             }
           }
         }
@@ -85709,13 +85786,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, partition_name_to_va
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list877 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list877.size);
-            for (int _i878 = 0; _i878 < _list877.size; ++_i878)
+            org.apache.thrift.protocol.TList _list869 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list869.size);
+            for (int _i870 = 0; _i870 < _list869.size; ++_i870)
             {
-              String _elem879; // required
-              _elem879 = iprot.readString();
-              struct.success.add(_elem879);
+              String _elem871; // required
+              _elem871 = iprot.readString();
+              struct.success.add(_elem871);
             }
           }
           struct.setSuccessIsSet(true);
@@ -86489,15 +86566,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, partition_name_to_s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map880 = iprot.readMapBegin();
-                  struct.success = new HashMap<String,String>(2*_map880.size);
-                  for (int _i881 = 0; _i881 < _map880.size; ++_i881)
+                  org.apache.thrift.protocol.TMap _map872 = iprot.readMapBegin();
+                  struct.success = new HashMap<String,String>(2*_map872.size);
+                  for (int _i873 = 0; _i873 < _map872.size; ++_i873)
                   {
-                    String _key882; // required
-                    String _val883; // required
-                    _key882 = iprot.readString();
-                    _val883 = iprot.readString();
-                    struct.success.put(_key882, _val883);
+                    String _key874; // required
+                    String _val875; // required
+                    _key874 = iprot.readString();
+                    _val875 = iprot.readString();
+                    struct.success.put(_key874, _val875);
                   }
                   iprot.readMapEnd();
                 }
@@ -86532,10 +86609,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, partition_name_to_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (Map.Entry<String, String> _iter884 : struct.success.entrySet())
+            for (Map.Entry<String, String> _iter876 : struct.success.entrySet())
             {
-              oprot.writeString(_iter884.getKey());
-              oprot.writeString(_iter884.getValue());
+              oprot.writeString(_iter876.getKey());
+              oprot.writeString(_iter876.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -86574,10 +86651,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, partition_name_to_s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Map.Entry<String, String> _iter885 : struct.success.entrySet())
+            for (Map.Entry<String, String> _iter877 : struct.success.entrySet())
             {
-              oprot.writeString(_iter885.getKey());
-              oprot.writeString(_iter885.getValue());
+              oprot.writeString(_iter877.getKey());
+              oprot.writeString(_iter877.getValue());
             }
           }
         }
@@ -86592,15 +86669,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, partition_name_to_sp
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TMap _map886 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new HashMap<String,String>(2*_map886.size);
-            for (int _i887 = 0; _i887 < _map886.size; ++_i887)
+            org.apache.thrift.protocol.TMap _map878 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new HashMap<String,String>(2*_map878.size);
+            for (int _i879 = 0; _i879 < _map878.size; ++_i879)
             {
-              String _key888; // required
-              String _val889; // required
-              _key888 = iprot.readString();
-              _val889 = iprot.readString();
-              struct.success.put(_key888, _val889);
+              String _key880; // required
+              String _val881; // required
+              _key880 = iprot.readString();
+              _val881 = iprot.readString();
+              struct.success.put(_key880, _val881);
             }
           }
           struct.setSuccessIsSet(true);
@@ -87206,15 +87283,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, markPartitionForEve
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map890 = iprot.readMapBegin();
-                  struct.part_vals = new HashMap<String,String>(2*_map890.size);
-                  for (int _i891 = 0; _i891 < _map890.size; ++_i891)
+                  org.apache.thrift.protocol.TMap _map882 = iprot.readMapBegin();
+                  struct.part_vals = new HashMap<String,String>(2*_map882.size);
+                  for (int _i883 = 0; _i883 < _map882.size; ++_i883)
                   {
-                    String _key892; // required
-                    String _val893; // required
-                    _key892 = iprot.readString();
-                    _val893 = iprot.readString();
-                    struct.part_vals.put(_key892, _val893);
+                    String _key884; // required
+                    String _val885; // required
+                    _key884 = iprot.readString();
+                    _val885 = iprot.readString();
+                    struct.part_vals.put(_key884, _val885);
                   }
                   iprot.readMapEnd();
                 }
@@ -87258,10 +87335,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, markPartitionForEv
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (Map.Entry<String, String> _iter894 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter886 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter894.getKey());
-              oprot.writeString(_iter894.getValue());
+              oprot.writeString(_iter886.getKey());
+              oprot.writeString(_iter886.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -87312,10 +87389,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, markPartitionForEve
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (Map.Entry<String, String> _iter895 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter887 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter895.getKey());
-              oprot.writeString(_iter895.getValue());
+              oprot.writeString(_iter887.getKey());
+              oprot.writeString(_iter887.getValue());
             }
           }
         }
@@ -87338,15 +87415,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, markPartitionForEven
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TMap _map896 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new HashMap<String,String>(2*_map896.size);
-            for (int _i897 = 0; _i897 < _map896.size; ++_i897)
+            org.apache.thrift.protocol.TMap _map888 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new HashMap<String,String>(2*_map888.size);
+            for (int _i889 = 0; _i889 < _map888.size; ++_i889)
             {
-              String _key898; // required
-              String _val899; // required
-              _key898 = iprot.readString();
-              _val899 = iprot.readString();
-              struct.part_vals.put(_key898, _val899);
+              String _key890; // required
+              String _val891; // required
+              _key890 = iprot.readString();
+              _val891 = iprot.readString();
+              struct.part_vals.put(_key890, _val891);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -88841,15 +88918,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, isPartitionMarkedFo
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map900 = iprot.readMapBegin();
-                  struct.part_vals = new HashMap<String,String>(2*_map900.size);
-                  for (int _i901 = 0; _i901 < _map900.size; ++_i901)
+                  org.apache.thrift.protocol.TMap _map892 = iprot.readMapBegin();
+                  struct.part_vals = new HashMap<String,String>(2*_map892.size);
+                  for (int _i893 = 0; _i893 < _map892.size; ++_i893)
                   {
-                    String _key902; // required
-                    String _val903; // required
-                    _key902 = iprot.readString();
-                    _val903 = iprot.readString();
-                    struct.part_vals.put(_key902, _val903);
+                    String _key894; // required
+                    String _val895; // required
+                    _key894 = iprot.readString();
+                    _val895 = iprot.readString();
+                    struct.part_vals.put(_key894, _val895);
                   }
                   iprot.readMapEnd();
                 }
@@ -88893,10 +88970,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, isPartitionMarkedF
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (Map.Entry<String, String> _iter904 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter896 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter904.getKey());
-              oprot.writeString(_iter904.getValue());
+              oprot.writeString(_iter896.getKey());
+              oprot.writeString(_iter896.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -88947,10 +89024,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, isPartitionMarkedFo
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (Map.Entry<String, String> _iter905 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter897 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter905.getKey());
-              oprot.writeString(_iter905.getValue());
+              oprot.writeString(_iter897.getKey());
+              oprot.writeString(_iter897.getValue());
             }
           }
         }
@@ -88973,15 +89050,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, isPartitionMarkedFor
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TMap _map906 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new HashMap<String,String>(2*_map906.size);
-            for (int _i907 = 0; _i907 < _map906.size; ++_i907)
+            org.apache.thrift.protocol.TMap _map898 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new HashMap<String,String>(2*_map898.size);
+            for (int _i899 = 0; _i899 < _map898.size; ++_i899)
             {
-              String _key908; // required
-              String _val909; // required
-              _key908 = iprot.readString();
-              _val909 = iprot.readString();
-              struct.part_vals.put(_key908, _val909);
+              String _key900; // required
+              String _val901; // required
+              _key900 = iprot.readString();
+              _val901 = iprot.readString();
+              struct.part_vals.put(_key900, _val901);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -95705,14 +95782,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_indexes_result
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list910 = iprot.readListBegin();
-                  struct.success = new ArrayList<Index>(_list910.size);
-                  for (int _i911 = 0; _i911 < _list910.size; ++_i911)
+                  org.apache.thrift.protocol.TList _list902 = iprot.readListBegin();
+                  struct.success = new ArrayList<Index>(_list902.size);
+                  for (int _i903 = 0; _i903 < _list902.size; ++_i903)
                   {
-                    Index _elem912; // required
-                    _elem912 = new Index();
-                    _elem912.read(iprot);
-                    struct.success.add(_elem912);
+                    Index _elem904; // required
+                    _elem904 = new Index();
+                    _elem904.read(iprot);
+                    struct.success.add(_elem904);
                   }
                   iprot.readListEnd();
                 }
@@ -95756,9 +95833,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_indexes_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Index _iter913 : struct.success)
+            for (Index _iter905 : struct.success)
             {
-              _iter913.write(oprot);
+              _iter905.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -95805,9 +95882,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_indexes_result
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Index _iter914 : struct.success)
+            for (Index _iter906 : struct.success)
             {
-              _iter914.write(oprot);
+              _iter906.write(oprot);
             }
           }
         }
@@ -95825,14 +95902,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_indexes_result s
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list915 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Index>(_list915.size);
-            for (int _i916 = 0; _i916 < _list915.size; ++_i916)
+            org.apache.thrift.protocol.TList _list907 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Index>(_list907.size);
+            for (int _i908 = 0; _i908 < _list907.size; ++_i908)
             {
-              Index _elem917; // required
-              _elem917 = new Index();
-              _elem917.read(iprot);
-              struct.success.add(_elem917);
+              Index _elem909; // required
+              _elem909 = new Index();
+              _elem909.read(iprot);
+              struct.success.add(_elem909);
             }
           }
           struct.setSuccessIsSet(true);
@@ -96814,13 +96891,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_index_names_res
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list918 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list918.size);
-                  for (int _i919 = 0; _i919 < _list918.size; ++_i919)
+                  org.apache.thrift.protocol.TList _list910 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list910.size);
+                  for (int _i911 = 0; _i911 < _list910.size; ++_i911)
                   {
-                    String _elem920; // required
-                    _elem920 = iprot.readString();
-                    struct.success.add(_elem920);
+                    String _elem912; // required
+                    _elem912 = iprot.readString();
+                    struct.success.add(_elem912);
                   }
                   iprot.readListEnd();
                 }
@@ -96855,9 +96932,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_index_names_re
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter921 : struct.success)
+            for (String _iter913 : struct.success)
             {
-              oprot.writeString(_iter921);
+              oprot.writeString(_iter913);
             }
             oprot.writeListEnd();
           }
@@ -96896,9 +96973,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_index_names_res
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter922 : struct.success)
+            for (String _iter914 : struct.success)
             {
-              oprot.writeString(_iter922);
+              oprot.writeString(_iter914);
             }
           }
         }
@@ -96913,13 +96990,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_index_names_resu
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list923 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list923.size);
-            for (int _i924 = 0; _i924 < _list923.size; ++_i924)
+            org.apache.thrift.protocol.TList _list915 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list915.size);
+            for (int _i916 = 0; _i916 < _list915.size; ++_i916)
             {
-              String _elem925; // required
-              _elem925 = iprot.readString();
-              struct.success.add(_elem925);
+              String _elem917; // required
+              _elem917 = iprot.readString();
+              struct.success.add(_elem917);
             }
           }
           struct.setSuccessIsSet(true);
@@ -112657,13 +112734,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_functions_resul
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list926 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list926.size);
-                  for (int _i927 = 0; _i927 < _list926.size; ++_i927)
+                  org.apache.thrift.protocol.TList _list918 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list918.size);
+                  for (int _i919 = 0; _i919 < _list918.size; ++_i919)
                   {
-                    String _elem928; // required
-                    _elem928 = iprot.readString();
-                    struct.success.add(_elem928);
+                    String _elem920; // required
+                    _elem920 = iprot.readString();
+                    struct.success.add(_elem920);
                   }
                   iprot.readListEnd();
                 }
@@ -112698,9 +112775,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_functions_resu
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter929 : struct.success)
+            for (String _iter921 : struct.success)
             {
-              oprot.writeString(_iter929);
+              oprot.writeString(_iter921);
             }
             oprot.writeListEnd();
           }
@@ -112739,9 +112816,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_functions_resul
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter930 : struct.success)
+            for (String _iter922 : struct.success)
             {
-              oprot.writeString(_iter930);
+              oprot.writeString(_iter922);
             }
           }
         }
@@ -112756,13 +112833,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_functions_result
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list931 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list931.size);
-            for (int _i932 = 0; _i932 < _list931.size; ++_i932)
+            org.apache.thrift.protocol.TList _list923 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list923.size);
+            for (int _i924 = 0; _i924 < _list923.size; ++_i924)
             {
-              String _elem933; // required
-              _elem933 = iprot.readString();
-              struct.success.add(_elem933);
+              String _elem925; // required
+              _elem925 = iprot.readString();
+              struct.success.add(_elem925);
             }
           }
           struct.setSuccessIsSet(true);
@@ -116820,13 +116897,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_role_names_resu
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list934 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list934.size);
-                  for (int _i935 = 0; _i935 < _list934.size; ++_i935)
+                  org.apache.thrift.protocol.TList _list926 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list926.size);
+                  for (int _i927 = 0; _i927 < _list926.size; ++_i927)
                   {
-                    String _elem936; // required
-                    _elem936 = iprot.readString();
-                    struct.success.add(_elem936);
+                    String _elem928; // required
+                    _elem928 = iprot.readString();
+                    struct.success.add(_elem928);
                   }
                   iprot.readListEnd();
                 }
@@ -116861,9 +116938,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_role_names_res
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter937 : struct.success)
+            for (String _iter929 : struct.success)
             {
-              oprot.writeString(_iter937);
+              oprot.writeString(_iter929);
             }
             oprot.writeListEnd();
           }
@@ -116902,9 +116979,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_role_names_resu
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter938 : struct.success)
+            for (String _iter930 : struct.success)
             {
-              oprot.writeString(_iter938);
+              oprot.writeString(_iter930);
             }
           }
         }
@@ -116919,13 +116996,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_role_names_resul
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list939 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list939.size);
-            for (int _i940 = 0; _i940 < _list939.size; ++_i940)
+            org.apache.thrift.protocol.TList _list931 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list931.size);
+            for (int _i932 = 0; _i932 < _list931.size; ++_i932)
             {
-              String _elem941; // required
-              _elem941 = iprot.readString();
-              struct.success.add(_elem941);
+              String _elem933; // required
+              _elem933 = iprot.readString();
+              struct.success.add(_elem933);
             }
           }
           struct.setSuccessIsSet(true);
@@ -120216,14 +120293,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, list_roles_result s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list942 = iprot.readListBegin();
-                  struct.success = new ArrayList<Role>(_list942.size);
-                  for (int _i943 = 0; _i943 < _list942.size; ++_i943)
+                  org.apache.thrift.protocol.TList _list934 = iprot.readListBegin();
+                  struct.success = new ArrayList<Role>(_list934.size);
+                  for (int _i935 = 0; _i935 < _list934.size; ++_i935)
                   {
-                    Role _elem944; // required
-                    _elem944 = new Role();
-                    _elem944.read(iprot);
-                    struct.success.add(_elem944);
+                    Role _elem936; // required
+                    _elem936 = new Role();
+                    _elem936.read(iprot);
+                    struct.success.add(_elem936);
                   }
                   iprot.readListEnd();
                 }
@@ -120258,9 +120335,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, list_roles_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Role _iter945 : struct.success)
+            for (Role _iter937 : struct.success)
             {
-              _iter945.write(oprot);
+              _iter937.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -120299,9 +120376,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, list_roles_result s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Role _iter946 : struct.success)
+            for (Role _iter938 : struct.success)
             {
-              _iter946.write(oprot);
+              _iter938.write(oprot);
             }
           }
         }
@@ -120316,14 +120393,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, list_roles_result st
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list947 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Role>(_list947.size);
-            for (int _i948 = 0; _i948 < _list947.size; ++_i948)
+            org.apache.thrift.protocol.TList _list939 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Role>(_list939.size);
+            for (int _i940 = 0; _i940 < _list939.size; ++_i940)
             {
-              Role _elem949; // required
-              _elem949 = new Role();
-              _elem949.read(iprot);
-              struct.success.add(_elem949);
+              Role _elem941; // required
+              _elem941 = new Role();
+              _elem941.read(iprot);
+              struct.success.add(_elem941);
             }
           }
           struct.setSuccessIsSet(true);
@@ -123331,13 +123408,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_privilege_set_a
             case 3: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list950 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list950.size);
-                  for (int _i951 = 0; _i951 < _list950.size; ++_i951)
+                  org.apache.thrift.protocol.TList _list942 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list942.size);
+                  for (int _i943 = 0; _i943 < _list942.size; ++_i943)
                   {
-                    String _elem952; // required
-                    _elem952 = iprot.readString();
-                    struct.group_names.add(_elem952);
+                    String _elem944; // required
+                    _elem944 = iprot.readString();
+                    struct.group_names.add(_elem944);
                   }
                   iprot.readListEnd();
                 }
@@ -123373,9 +123450,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_privilege_set_
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter953 : struct.group_names)
+            for (String _iter945 : struct.group_names)
             {
-              oprot.writeString(_iter953);
+              oprot.writeString(_iter945);
             }
             oprot.writeListEnd();
           }
@@ -123418,9 +123495,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_privilege_set_a
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter954 : struct.group_names)
+            for (String _iter946 : struct.group_names)
             {
-              oprot.writeString(_iter954);
+              oprot.writeString(_iter946);
             }
           }
         }
@@ -123441,13 +123518,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_privilege_set_ar
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list955 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list955.size);
-            for (int _i956 = 0; _i956 < _list955.size; ++_i956)
+            org.apache.thrift.protocol.TList _list947 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list947.size);
+            for (int _i948 = 0; _i948 < _list947.size; ++_i948)
             {
-              String _elem957; // required
-              _elem957 = iprot.readString();
-              struct.group_names.add(_elem957);
+              String _elem949; // required
+              _elem949 = iprot.readString();
+              struct.group_names.add(_elem949);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -124905,14 +124982,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, list_privileges_res
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list958 = iprot.readListBegin();
-                  struct.success = new ArrayList<HiveObjectPrivilege>(_list958.size);
-                  for (int _i959 = 0; _i959 < _list958.size; ++_i959)
+                  org.apache.thrift.protocol.TList _list950 = iprot.readListBegin();
+                  struct.success = new ArrayList<HiveObjectPrivilege>(_list950.size);
+                  for (int _i951 = 0; _i951 < _list950.size; ++_i951)
                   {
-                    HiveObjectPrivilege _elem960; // required
-                    _elem960 = new HiveObjectPrivilege();
-                    _elem960.read(iprot);
-                    struct.success.add(_elem960);
+                    HiveObjectPrivilege _elem952; // required
+                    _elem952 = new HiveObjectPrivilege();
+                    _elem952.read(iprot);
+                    struct.success.add(_elem952);
                   }
                   iprot.readListEnd();
                 }
@@ -124947,9 +125024,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, list_privileges_re
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (HiveObjectPrivilege _iter961 : struct.success)
+            for (HiveObjectPrivilege _iter953 : struct.success)
             {
-              _iter961.write(oprot);
+              _iter953.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -124988,9 +125065,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, list_privileges_res
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (HiveObjectPrivilege _iter962 : struct.success)
+            for (HiveObjectPrivilege _iter954 : struct.success)
             {
-              _iter962.write(oprot);
+              _iter954.write(oprot);
             }
           }
         }
@@ -125005,14 +125082,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, list_privileges_resu
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list963 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<HiveObjectPrivilege>(_list963.size);
-            for (int _i964 = 0; _i964 < _list963.size; ++_i964)
+            org.apache.thrift.protocol.TList _list955 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<HiveObjectPrivilege>(_list955.size);
+            for (int _i956 = 0; _i956 < _list955.size; ++_i956)
             {
-              HiveObjectPrivilege _elem965; // required
-              _elem965 = new HiveObjectPrivilege();
-              _elem965.read(iprot);
-              struct.success.add(_elem965);
+              HiveObjectPrivilege _elem957; // required
+              _elem957 = new HiveObjectPrivilege();
+              _elem957.read(iprot);
+              struct.success.add(_elem957);
             }
           }
           struct.setSuccessIsSet(true);
@@ -127917,13 +127994,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, set_ugi_args struct
             case 2: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list966 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list966.size);
-                  for (int _i967 = 0; _i967 < _list966.size; ++_i967)
+                  org.apache.thrift.protocol.TList _list958 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list958.size);
+                  for (int _i959 = 0; _i959 < _list958.size; ++_i959)
                   {
-                    String _elem968; // required
-                    _elem968 = iprot.readString();
-                    struct.group_names.add(_elem968);
+                    String _elem960; // required
+                    _elem960 = iprot.readString();
+                    struct.group_names.add(_elem960);
                   }
                   iprot.readListEnd();
                 }
@@ -127954,9 +128031,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, set_ugi_args struc
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter969 : struct.group_names)
+            for (String _iter961 : struct.group_names)
             {
-              oprot.writeString(_iter969);
+              oprot.writeString(_iter961);
             }
             oprot.writeListEnd();
           }
@@ -127993,9 +128070,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, set_ugi_args struct
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter970 : struct.group_names)
+            for (String _iter962 : struct.group_names)
             {
-              oprot.writeString(_iter970);
+              oprot.writeString(_iter962);
             }
           }
         }
@@ -128011,13 +128088,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, set_ugi_args struct)
         }
         if (incoming.get(1)) {
           {
-            org.apache.thrift.protocol.TList _list971 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list971.size);
-            for (int _i972 = 0; _i972 < _list971.size; ++_i972)
+            org.apache.thrift.protocol.TList _list963 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list963.size);
+            for (int _i964 = 0; _i964 < _list963.size; ++_i964)
             {
-              String _elem973; // required
-              _elem973 = iprot.readString();
-              struct.group_names.add(_elem973);
+              String _elem965; // required
+              _elem965 = iprot.readString();
+              struct.group_names.add(_elem965);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -128423,13 +128500,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, set_ugi_result stru
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list974 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list974.size);
-                  for (int _i975 = 0; _i975 < _list974.size; ++_i975)
+                  org.apache.thrift.protocol.TList _list966 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list966.size);
+                  for (int _i967 = 0; _i967 < _list966.size; ++_i967)
                   {
-                    String _elem976; // required
-                    _elem976 = iprot.readString();
-                    struct.success.add(_elem976);
+                    String _elem968; // required
+                    _elem968 = iprot.readString();
+                    struct.success.add(_elem968);
                   }
                   iprot.readListEnd();
                 }
@@ -128464,9 +128541,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, set_ugi_result str
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter977 : struct.success)
+            for (String _iter969 : struct.success)
             {
-              oprot.writeString(_iter977);
+              oprot.writeString(_iter969);
             }
             oprot.writeListEnd();
           }
@@ -128505,9 +128582,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, set_ugi_result stru
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter978 : struct.success)
+            for (String _iter970 : struct.success)
             {
-              oprot.writeString(_iter978);
+              oprot.writeString(_iter970);
             }
           }
         }
@@ -128522,13 +128599,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, set_ugi_result struc
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list979 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list979.size);
-            for (int _i980 = 0; _i980 < _list979.size; ++_i980)
+            org.apache.thrift.protocol.TList _list971 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list971.size);
+            for (int _i972 = 0; _i972 < _list971.size; ++_i972)
             {
-              String _elem981; // required
-              _elem981 = iprot.readString();
-              struct.success.add(_elem981);
+              String _elem973; // required
+              _elem973 = iprot.readString();
+              struct.success.add(_elem973);
             }
           }
           struct.setSuccessIsSet(true);
@@ -142373,4 +142450,613 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_current_notifica
 
   }
 
+  public static class fire_notification_event_args implements org.apache.thrift.TBase<fire_notification_event_args, fire_notification_event_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fire_notification_event_args");
+
+    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField("rqst", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new fire_notification_event_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new fire_notification_event_argsTupleSchemeFactory());
+    }
+
+    private FireEventRequest rqst; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      RQST((short)1, "rqst");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // RQST
+            return RQST;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.RQST, new org.apache.thrift.meta_data.FieldMetaData("rqst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireEventRequest.class)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fire_notification_event_args.class, metaDataMap);
+    }
+
+    public fire_notification_event_args() {
+    }
+
+    public fire_notification_event_args(
+      FireEventRequest rqst)
+    {
+      this();
+      this.rqst = rqst;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public fire_notification_event_args(fire_notification_event_args other) {
+      if (other.isSetRqst()) {
+        this.rqst = new FireEventRequest(other.rqst);
+      }
+    }
+
+    public fire_notification_event_args deepCopy() {
+      return new fire_notification_event_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.rqst = null;
+    }
+
+    public FireEventRequest getRqst() {
+      return this.rqst;
+    }
+
+    public void setRqst(FireEventRequest rqst) {
+      this.rqst = rqst;
+    }
+
+    public void unsetRqst() {
+      this.rqst = null;
+    }
+
+    /** Returns true if field rqst is set (has been assigned a value) and false otherwise */
+    public boolean isSetRqst() {
+      return this.rqst != null;
+    }
+
+    public void setRqstIsSet(boolean value) {
+      if (!value) {
+        this.rqst = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case RQST:
+        if (value == null) {
+          unsetRqst();
+        } else {
+          setRqst((FireEventRequest)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case RQST:
+        return getRqst();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case RQST:
+        return isSetRqst();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof fire_notification_event_args)
+        return this.equals((fire_notification_event_args)that);
+      return false;
+    }
+
+    public boolean equals(fire_notification_event_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_rqst = true && this.isSetRqst();
+      boolean that_present_rqst = true && that.isSetRqst();
+      if (this_present_rqst || that_present_rqst) {
+        if (!(this_present_rqst && that_present_rqst))
+          return false;
+        if (!this.rqst.equals(that.rqst))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_rqst = true && (isSetRqst());
+      builder.append(present_rqst);
+      if (present_rqst)
+        builder.append(rqst);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(fire_notification_event_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      fire_notification_event_args typedOther = (fire_notification_event_args)other;
+
+      lastComparison = Boolean.valueOf(isSetRqst()).compareTo(typedOther.isSetRqst());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetRqst()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rqst, typedOther.rqst);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("fire_notification_event_args(");
+      boolean first = true;
+
+      sb.append("rqst:");
+      if (this.rqst == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.rqst);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+      if (rqst != null) {
+        rqst.validate();
+      }
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class fire_notification_event_argsStandardSchemeFactory implements SchemeFactory {
+      public fire_notification_event_argsStandardScheme getScheme() {
+        return new fire_notification_event_argsStandardScheme();
+      }
+    }
+
+    private static class fire_notification_event_argsStandardScheme extends StandardScheme<fire_notification_event_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, fire_notification_event_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // RQST
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.rqst = new FireEventRequest();
+                struct.rqst.read(iprot);
+                struct.setRqstIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, fire_notification_event_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.rqst != null) {
+          oprot.writeFieldBegin(RQST_FIELD_DESC);
+          struct.rqst.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class fire_notification_event_argsTupleSchemeFactory implements SchemeFactory {
+      public fire_notification_event_argsTupleScheme getScheme() {
+        return new fire_notification_event_argsTupleScheme();
+      }
+    }
+
+    private static class fire_notification_event_argsTupleScheme extends TupleScheme<fire_notification_event_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, fire_notification_event_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetRqst()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetRqst()) {
+          struct.rqst.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, fire_notification_event_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.rqst = new FireEventRequest();
+          struct.rqst.read(iprot);
+          struct.setRqstIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class fire_notification_event_result implements org.apache.thrift.TBase<fire_notification_event_result, fire_notification_event_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fire_notification_event_result");
+
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new fire_notification_event_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new fire_notification_event_resultTupleSchemeFactory());
+    }
+
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+;
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fire_notification_event_result.class, metaDataMap);
+    }
+
+    public fire_notification_event_result() {
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public fire_notification_event_result(fire_notification_event_result other) {
+    }
+
+    public fire_notification_event_result deepCopy() {
+      return new fire_notification_event_result(this);
+    }
+
+    @Override
+    public void clear() {
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof fire_notification_event_result)
+        return this.equals((fire_notification_event_result)that);
+      return false;
+    }
+
+    public boolean equals(fire_notification_event_result that) {
+      if (that == null)
+        return false;
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(fire_notification_event_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      fire_notification_event_result typedOther = (fire_notification_event_result)other;
+
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("fire_notification_event_result(");
+      boolean first = true;
+
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class fire_notification_event_resultStandardSchemeFactory implements SchemeFactory {
+      public fire_notification_event_resultStandardScheme getScheme() {
+        return new fire_notification_event_resultStandardScheme();
+      }
+    }
+
+    private static class fire_notification_event_resultStandardScheme extends StandardScheme<fire_notification_event_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, fire_notification_event_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, fire_notification_event_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class fire_notification_event_resultTupleSchemeFactory implements SchemeFactory {
+      public fire_notification_event_resultTupleScheme getScheme() {
+        return new fire_notification_event_resultTupleScheme();
+      }
+    }
+
+    private static class fire_notification_event_resultTupleScheme extends TupleScheme<fire_notification_event_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, fire_notification_event_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, fire_notification_event_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+      }
+    }
+
+  }
+
 }
diff --git a/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php b/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
index 0e3fda0..261c659 100644
--- a/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
+++ b/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
@@ -139,6 +139,7 @@ interface ThriftHiveMetastoreIf extends \FacebookServiceIf {
   public function show_compact(\metastore\ShowCompactRequest $rqst);
   public function get_next_notification(\metastore\NotificationEventRequest $rqst);
   public function get_current_notificationEventId();
+  public function fire_notification_event(\metastore\FireEventRequest $rqst);
 }
 
 class ThriftHiveMetastoreClient extends \FacebookServiceClient implements \metastore\ThriftHiveMetastoreIf {
@@ -7224,6 +7225,54 @@ class ThriftHiveMetastoreClient extends \FacebookServiceClient implements \metas
     throw new \Exception("get_current_notificationEventId failed: unknown result");
   }
 
+  public function fire_notification_event(\metastore\FireEventRequest $rqst)
+  {
+    $this->send_fire_notification_event($rqst);
+    $this->recv_fire_notification_event();
+  }
+
+  public function send_fire_notification_event(\metastore\FireEventRequest $rqst)
+  {
+    $args = new \metastore\ThriftHiveMetastore_fire_notification_event_args();
+    $args->rqst = $rqst;
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'fire_notification_event', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('fire_notification_event', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_fire_notification_event()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_fire_notification_event_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_fire_notification_event_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    return;
+  }
+
 }
 
 // HELPER FUNCTIONS AND STRUCTURES
@@ -8306,14 +8355,14 @@ class ThriftHiveMetastore_get_databases_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size465 = 0;
-            $_etype468 = 0;
-            $xfer += $input->readListBegin($_etype468, $_size465);
-            for ($_i469 = 0; $_i469 < $_size465; ++$_i469)
+            $_size458 = 0;
+            $_etype461 = 0;
+            $xfer += $input->readListBegin($_etype461, $_size458);
+            for ($_i462 = 0; $_i462 < $_size458; ++$_i462)
             {
-              $elem470 = null;
-              $xfer += $input->readString($elem470);
-              $this->success []= $elem470;
+              $elem463 = null;
+              $xfer += $input->readString($elem463);
+              $this->success []= $elem463;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -8349,9 +8398,9 @@ class ThriftHiveMetastore_get_databases_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter471)
+          foreach ($this->success as $iter464)
           {
-            $xfer += $output->writeString($iter471);
+            $xfer += $output->writeString($iter464);
           }
         }
         $output->writeListEnd();
@@ -8476,14 +8525,14 @@ class ThriftHiveMetastore_get_all_databases_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size472 = 0;
-            $_etype475 = 0;
-            $xfer += $input->readListBegin($_etype475, $_size472);
-            for ($_i476 = 0; $_i476 < $_size472; ++$_i476)
+            $_size465 = 0;
+            $_etype468 = 0;
+            $xfer += $input->readListBegin($_etype468, $_size465);
+            for ($_i469 = 0; $_i469 < $_size465; ++$_i469)
             {
-              $elem477 = null;
-              $xfer += $input->readString($elem477);
-              $this->success []= $elem477;
+              $elem470 = null;
+              $xfer += $input->readString($elem470);
+              $this->success []= $elem470;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -8519,9 +8568,9 @@ class ThriftHiveMetastore_get_all_databases_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter478)
+          foreach ($this->success as $iter471)
           {
-            $xfer += $output->writeString($iter478);
+            $xfer += $output->writeString($iter471);
           }
         }
         $output->writeListEnd();
@@ -9462,18 +9511,18 @@ class ThriftHiveMetastore_get_type_all_result {
         case 0:
           if ($ftype == TType::MAP) {
             $this->success = array();
-            $_size479 = 0;
-            $_ktype480 = 0;
-            $_vtype481 = 0;
-            $xfer += $input->readMapBegin($_ktype480, $_vtype481, $_size479);
-            for ($_i483 = 0; $_i483 < $_size479; ++$_i483)
+            $_size472 = 0;
+            $_ktype473 = 0;
+            $_vtype474 = 0;
+            $xfer += $input->readMapBegin($_ktype473, $_vtype474, $_size472);
+            for ($_i476 = 0; $_i476 < $_size472; ++$_i476)
             {
-              $key484 = '';
-              $val485 = new \metastore\Type();
-              $xfer += $input->readString($key484);
-              $val485 = new \metastore\Type();
-              $xfer += $val485->read($input);
-              $this->success[$key484] = $val485;
+              $key477 = '';
+              $val478 = new \metastore\Type();
+              $xfer += $input->readString($key477);
+              $val478 = new \metastore\Type();
+              $xfer += $val478->read($input);
+              $this->success[$key477] = $val478;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -9509,10 +9558,10 @@ class ThriftHiveMetastore_get_type_all_result {
       {
         $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $kiter486 => $viter487)
+          foreach ($this->success as $kiter479 => $viter480)
           {
-            $xfer += $output->writeString($kiter486);
-            $xfer += $viter487->write($output);
+            $xfer += $output->writeString($kiter479);
+            $xfer += $viter480->write($output);
           }
         }
         $output->writeMapEnd();
@@ -9698,15 +9747,15 @@ class ThriftHiveMetastore_get_fields_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size488 = 0;
-            $_etype491 = 0;
-            $xfer += $input->readListBegin($_etype491, $_size488);
-            for ($_i492 = 0; $_i492 < $_size488; ++$_i492)
+            $_size481 = 0;
+            $_etype484 = 0;
+            $xfer += $input->readListBegin($_etype484, $_size481);
+            for ($_i485 = 0; $_i485 < $_size481; ++$_i485)
             {
-              $elem493 = null;
-              $elem493 = new \metastore\FieldSchema();
-              $xfer += $elem493->read($input);
-              $this->success []= $elem493;
+              $elem486 = null;
+              $elem486 = new \metastore\FieldSchema();
+              $xfer += $elem486->read($input);
+              $this->success []= $elem486;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -9758,9 +9807,9 @@ class ThriftHiveMetastore_get_fields_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter494)
+          foreach ($this->success as $iter487)
           {
-            $xfer += $iter494->write($output);
+            $xfer += $iter487->write($output);
           }
         }
         $output->writeListEnd();
@@ -9981,15 +10030,15 @@ class ThriftHiveMetastore_get_fields_with_environment_context_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size495 = 0;
-            $_etype498 = 0;
-            $xfer += $input->readListBegin($_etype498, $_size495);
-            for ($_i499 = 0; $_i499 < $_size495; ++$_i499)
+            $_size488 = 0;
+            $_etype491 = 0;
+            $xfer += $input->readListBegin($_etype491, $_size488);
+            for ($_i492 = 0; $_i492 < $_size488; ++$_i492)
             {
-              $elem500 = null;
-              $elem500 = new \metastore\FieldSchema();
-              $xfer += $elem500->read($input);
-              $this->success []= $elem500;
+              $elem493 = null;
+              $elem493 = new \metastore\FieldSchema();
+              $xfer += $elem493->read($input);
+              $this->success []= $elem493;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -10041,9 +10090,9 @@ class ThriftHiveMetastore_get_fields_with_environment_context_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter501)
+          foreach ($this->success as $iter494)
           {
-            $xfer += $iter501->write($output);
+            $xfer += $iter494->write($output);
           }
         }
         $output->writeListEnd();
@@ -10239,15 +10288,15 @@ class ThriftHiveMetastore_get_schema_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size502 = 0;
-            $_etype505 = 0;
-            $xfer += $input->readListBegin($_etype505, $_size502);
-            for ($_i506 = 0; $_i506 < $_size502; ++$_i506)
+            $_size495 = 0;
+            $_etype498 = 0;
+            $xfer += $input->readListBegin($_etype498, $_size495);
+            for ($_i499 = 0; $_i499 < $_size495; ++$_i499)
             {
-              $elem507 = null;
-              $elem507 = new \metastore\FieldSchema();
-              $xfer += $elem507->read($input);
-              $this->success []= $elem507;
+              $elem500 = null;
+              $elem500 = new \metastore\FieldSchema();
+              $xfer += $elem500->read($input);
+              $this->success []= $elem500;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -10299,9 +10348,9 @@ class ThriftHiveMetastore_get_schema_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter508)
+          foreach ($this->success as $iter501)
           {
-            $xfer += $iter508->write($output);
+            $xfer += $iter501->write($output);
           }
         }
         $output->writeListEnd();
@@ -10522,15 +10571,15 @@ class ThriftHiveMetastore_get_schema_with_environment_context_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size509 = 0;
-            $_etype512 = 0;
-            $xfer += $input->readListBegin($_etype512, $_size509);
-            for ($_i513 = 0; $_i513 < $_size509; ++$_i513)
+            $_size502 = 0;
+            $_etype505 = 0;
+            $xfer += $input->readListBegin($_etype505, $_size502);
+            for ($_i506 = 0; $_i506 < $_size502; ++$_i506)
             {
-              $elem514 = null;
-              $elem514 = new \metastore\FieldSchema();
-              $xfer += $elem514->read($input);
-              $this->success []= $elem514;
+              $elem507 = null;
+              $elem507 = new \metastore\FieldSchema();
+              $xfer += $elem507->read($input);
+              $this->success []= $elem507;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -10582,9 +10631,9 @@ class ThriftHiveMetastore_get_schema_with_environment_context_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter515)
+          foreach ($this->success as $iter508)
           {
-            $xfer += $iter515->write($output);
+            $xfer += $iter508->write($output);
           }
         }
         $output->writeListEnd();
@@ -11661,14 +11710,14 @@ class ThriftHiveMetastore_get_tables_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size516 = 0;
-            $_etype519 = 0;
-            $xfer += $input->readListBegin($_etype519, $_size516);
-            for ($_i520 = 0; $_i520 < $_size516; ++$_i520)
+            $_size509 = 0;
+            $_etype512 = 0;
+            $xfer += $input->readListBegin($_etype512, $_size509);
+            for ($_i513 = 0; $_i513 < $_size509; ++$_i513)
             {
-              $elem521 = null;
-              $xfer += $input->readString($elem521);
-              $this->success []= $elem521;
+              $elem514 = null;
+              $xfer += $input->readString($elem514);
+              $this->success []= $elem514;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11704,9 +11753,9 @@ class ThriftHiveMetastore_get_tables_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter522)
+          foreach ($this->success as $iter515)
           {
-            $xfer += $output->writeString($iter522);
+            $xfer += $output->writeString($iter515);
           }
         }
         $output->writeListEnd();
@@ -11802,14 +11851,14 @@ class ThriftHiveMetastore_get_table_meta_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->tbl_types = array();
-            $_size523 = 0;
-            $_etype526 = 0;
-            $xfer += $input->readListBegin($_etype526, $_size523);
-            for ($_i527 = 0; $_i527 < $_size523; ++$_i527)
+            $_size516 = 0;
+            $_etype519 = 0;
+            $xfer += $input->readListBegin($_etype519, $_size516);
+            for ($_i520 = 0; $_i520 < $_size516; ++$_i520)
             {
-              $elem528 = null;
-              $xfer += $input->readString($elem528);
-              $this->tbl_types []= $elem528;
+              $elem521 = null;
+              $xfer += $input->readString($elem521);
+              $this->tbl_types []= $elem521;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11847,9 +11896,9 @@ class ThriftHiveMetastore_get_table_meta_args {
       {
         $output->writeListBegin(TType::STRING, count($this->tbl_types));
         {
-          foreach ($this->tbl_types as $iter529)
+          foreach ($this->tbl_types as $iter522)
           {
-            $xfer += $output->writeString($iter529);
+            $xfer += $output->writeString($iter522);
           }
         }
         $output->writeListEnd();
@@ -11920,15 +11969,15 @@ class ThriftHiveMetastore_get_table_meta_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size530 = 0;
-            $_etype533 = 0;
-            $xfer += $input->readListBegin($_etype533, $_size530);
-            for ($_i534 = 0; $_i534 < $_size530; ++$_i534)
+            $_size523 = 0;
+            $_etype526 = 0;
+            $xfer += $input->readListBegin($_etype526, $_size523);
+            for ($_i527 = 0; $_i527 < $_size523; ++$_i527)
             {
-              $elem535 = null;
-              $elem535 = new \metastore\TableMeta();
-              $xfer += $elem535->read($input);
-              $this->success []= $elem535;
+              $elem528 = null;
+              $elem528 = new \metastore\TableMeta();
+              $xfer += $elem528->read($input);
+              $this->success []= $elem528;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11964,9 +12013,9 @@ class ThriftHiveMetastore_get_table_meta_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter536)
+          foreach ($this->success as $iter529)
           {
-            $xfer += $iter536->write($output);
+            $xfer += $iter529->write($output);
           }
         }
         $output->writeListEnd();
@@ -12113,14 +12162,14 @@ class ThriftHiveMetastore_get_all_tables_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size537 = 0;
-            $_etype540 = 0;
-            $xfer += $input->readListBegin($_etype540, $_size537);
-            for ($_i541 = 0; $_i541 < $_size537; ++$_i541)
+            $_size530 = 0;
+            $_etype533 = 0;
+            $xfer += $input->readListBegin($_etype533, $_size530);
+            for ($_i534 = 0; $_i534 < $_size530; ++$_i534)
             {
-              $elem542 = null;
-              $xfer += $input->readString($elem542);
-              $this->success []= $elem542;
+              $elem535 = null;
+              $xfer += $input->readString($elem535);
+              $this->success []= $elem535;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -12156,9 +12205,9 @@ class ThriftHiveMetastore_get_all_tables_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter543)
+          foreach ($this->success as $iter536)
           {
-            $xfer += $output->writeString($iter543);
+            $xfer += $output->writeString($iter536);
           }
         }
         $output->writeListEnd();
@@ -12452,14 +12501,14 @@ class ThriftHiveMetastore_get_table_objects_by_name_args {
         case 2:
           if ($ftype == TType::LST) {
             $this->tbl_names = array();
-            $_size544 = 0;
-            $_etype547 = 0;
-            $xfer += $input->readListBegin($_etype547, $_size544);
-            for ($_i548 = 0; $_i548 < $_size544; ++$_i548)
+            $_size537 = 0;
+            $_etype540 = 0;
+            $xfer += $input->readListBegin($_etype540, $_size537);
+            for ($_i541 = 0; $_i541 < $_size537; ++$_i541)
             {
-              $elem549 = null;
-              $xfer += $input->readString($elem549);
-              $this->tbl_names []= $elem549;
+              $elem542 = null;
+              $xfer += $input->readString($elem542);
+              $this->tbl_names []= $elem542;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -12492,9 +12541,9 @@ class ThriftHiveMetastore_get_table_objects_by_name_args {
       {
         $output->writeListBegin(TType::STRING, count($this->tbl_names));
         {
-          foreach ($this->tbl_names as $iter550)
+          foreach ($this->tbl_names as $iter543)
           {
-            $xfer += $output->writeString($iter550);
+            $xfer += $output->writeString($iter543);
           }
         }
         $output->writeListEnd();
@@ -12583,15 +12632,15 @@ class ThriftHiveMetastore_get_table_objects_by_name_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size551 = 0;
-            $_etype554 = 0;
-            $xfer += $input->readListBegin($_etype554, $_size551);
-            for ($_i555 = 0; $_i555 < $_size551; ++$_i555)
+            $_size544 = 0;
+            $_etype547 = 0;
+            $xfer += $input->readListBegin($_etype547, $_size544);
+            for ($_i548 = 0; $_i548 < $_size544; ++$_i548)
             {
-              $elem556 = null;
-              $elem556 = new \metastore\Table();
-              $xfer += $elem556->read($input);
-              $this->success []= $elem556;
+              $elem549 = null;
+              $elem549 = new \metastore\Table();
+              $xfer += $elem549->read($input);
+              $this->success []= $elem549;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -12643,9 +12692,9 @@ class ThriftHiveMetastore_get_table_objects_by_name_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter557)
+          foreach ($this->success as $iter550)
           {
-            $xfer += $iter557->write($output);
+            $xfer += $iter550->write($output);
           }
         }
         $output->writeListEnd();
@@ -12860,14 +12909,14 @@ class ThriftHiveMetastore_get_table_names_by_filter_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size558 = 0;
-            $_etype561 = 0;
-            $xfer += $input->readListBegin($_etype561, $_size558);
-            for ($_i562 = 0; $_i562 < $_size558; ++$_i562)
+            $_size551 = 0;
+            $_etype554 = 0;
+            $xfer += $input->readListBegin($_etype554, $_size551);
+            for ($_i555 = 0; $_i555 < $_size551; ++$_i555)
             {
-              $elem563 = null;
-              $xfer += $input->readString($elem563);
-              $this->success []= $elem563;
+              $elem556 = null;
+              $xfer += $input->readString($elem556);
+              $this->success []= $elem556;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -12919,9 +12968,9 @@ class ThriftHiveMetastore_get_table_names_by_filter_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter564)
+          foreach ($this->success as $iter557)
           {
-            $xfer += $output->writeString($iter564);
+            $xfer += $output->writeString($iter557);
           }
         }
         $output->writeListEnd();
@@ -14147,15 +14196,15 @@ class ThriftHiveMetastore_add_partitions_args {
         case 1:
           if ($ftype == TType::LST) {
             $this->new_parts = array();
-            $_size565 = 0;
-            $_etype568 = 0;
-            $xfer += $input->readListBegin($_etype568, $_size565);
-            for ($_i569 = 0; $_i569 < $_size565; ++$_i569)
+            $_size558 = 0;
+            $_etype561 = 0;
+            $xfer += $input->readListBegin($_etype561, $_size558);
+            for ($_i562 = 0; $_i562 < $_size558; ++$_i562)
             {
-              $elem570 = null;
-              $elem570 = new \metastore\Partition();
-              $xfer += $elem570->read($input);
-              $this->new_parts []= $elem570;
+              $elem563 = null;
+              $elem563 = new \metastore\Partition();
+              $xfer += $elem563->read($input);
+              $this->new_parts []= $elem563;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -14183,9 +14232,9 @@ class ThriftHiveMetastore_add_partitions_args {
       {
         $output->writeListBegin(TType::STRUCT, count($this->new_parts));
         {
-          foreach ($this->new_parts as $iter571)
+          foreach ($this->new_parts as $iter564)
           {
-            $xfer += $iter571->write($output);
+            $xfer += $iter564->write($output);
           }
         }
         $output->writeListEnd();
@@ -14385,15 +14434,15 @@ class ThriftHiveMetastore_add_partitions_pspec_args {
         case 1:
           if ($ftype == TType::LST) {
             $this->new_parts = array();
-            $_size572 = 0;
-            $_etype575 = 0;
-            $xfer += $input->readListBegin($_etype575, $_size572);
-            for ($_i576 = 0; $_i576 < $_size572; ++$_i576)
+            $_size565 = 0;
+            $_etype568 = 0;
+            $xfer += $input->readListBegin($_etype568, $_size565);
+            for ($_i569 = 0; $_i569 < $_size565; ++$_i569)
             {
-              $elem577 = null;
-              $elem577 = new \metastore\PartitionSpec();
-              $xfer += $elem577->read($input);
-              $this->new_parts []= $elem577;
+              $elem570 = null;
+              $elem570 = new \metastore\PartitionSpec();
+              $xfer += $elem570->read($input);
+              $this->new_parts []= $elem570;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -14421,9 +14470,9 @@ class ThriftHiveMetastore_add_partitions_pspec_args {
       {
         $output->writeListBegin(TType::STRUCT, count($this->new_parts));
         {
-          foreach ($this->new_parts as $iter578)
+          foreach ($this->new_parts as $iter571)
           {
-            $xfer += $iter578->write($output);
+            $xfer += $iter571->write($output);
           }
         }
         $output->writeListEnd();
@@ -14652,14 +14701,14 @@ class ThriftHiveMetastore_append_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size579 = 0;
-            $_etype582 = 0;
-            $xfer += $input->readListBegin($_etype582, $_size579);
-            for ($_i583 = 0; $_i583 < $_size579; ++$_i583)
+            $_size572 = 0;
+            $_etype575 = 0;
+            $xfer += $input->readListBegin($_etype575, $_size572);
+            for ($_i576 = 0; $_i576 < $_size572; ++$_i576)
             {
-              $elem584 = null;
-              $xfer += $input->readString($elem584);
-              $this->part_vals []= $elem584;
+              $elem577 = null;
+              $xfer += $input->readString($elem577);
+              $this->part_vals []= $elem577;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -14697,9 +14746,9 @@ class ThriftHiveMetastore_append_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter585)
+          foreach ($this->part_vals as $iter578)
           {
-            $xfer += $output->writeString($iter585);
+            $xfer += $output->writeString($iter578);
           }
         }
         $output->writeListEnd();
@@ -15162,14 +15211,14 @@ class ThriftHiveMetastore_append_partition_with_environment_context_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size586 = 0;
-            $_etype589 = 0;
-            $xfer += $input->readListBegin($_etype589, $_size586);
-            for ($_i590 = 0; $_i590 < $_size586; ++$_i590)
+            $_size579 = 0;
+            $_etype582 = 0;
+            $xfer += $input->readListBegin($_etype582, $_size579);
+            for ($_i583 = 0; $_i583 < $_size579; ++$_i583)
             {
-              $elem591 = null;
-              $xfer += $input->readString($elem591);
-              $this->part_vals []= $elem591;
+              $elem584 = null;
+              $xfer += $input->readString($elem584);
+              $this->part_vals []= $elem584;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -15215,9 +15264,9 @@ class ThriftHiveMetastore_append_partition_with_environment_context_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter592)
+          foreach ($this->part_vals as $iter585)
           {
-            $xfer += $output->writeString($iter592);
+            $xfer += $output->writeString($iter585);
           }
         }
         $output->writeListEnd();
@@ -16002,14 +16051,14 @@ class ThriftHiveMetastore_drop_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size593 = 0;
-            $_etype596 = 0;
-            $xfer += $input->readListBegin($_etype596, $_size593);
-            for ($_i597 = 0; $_i597 < $_size593; ++$_i597)
+            $_size586 = 0;
+            $_etype589 = 0;
+            $xfer += $input->readListBegin($_etype589, $_size586);
+            for ($_i590 = 0; $_i590 < $_size586; ++$_i590)
             {
-              $elem598 = null;
-              $xfer += $input->readString($elem598);
-              $this->part_vals []= $elem598;
+              $elem591 = null;
+              $xfer += $input->readString($elem591);
+              $this->part_vals []= $elem591;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -16054,9 +16103,9 @@ class ThriftHiveMetastore_drop_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter599)
+          foreach ($this->part_vals as $iter592)
           {
-            $xfer += $output->writeString($iter599);
+            $xfer += $output->writeString($iter592);
           }
         }
         $output->writeListEnd();
@@ -16285,14 +16334,14 @@ class ThriftHiveMetastore_drop_partition_with_environment_context_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size600 = 0;
-            $_etype603 = 0;
-            $xfer += $input->readListBegin($_etype603, $_size600);
-            for ($_i604 = 0; $_i604 < $_size600; ++$_i604)
+            $_size593 = 0;
+            $_etype596 = 0;
+            $xfer += $input->readListBegin($_etype596, $_size593);
+            for ($_i597 = 0; $_i597 < $_size593; ++$_i597)
             {
-              $elem605 = null;
-              $xfer += $input->readString($elem605);
-              $this->part_vals []= $elem605;
+              $elem598 = null;
+              $xfer += $input->readString($elem598);
+              $this->part_vals []= $elem598;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -16345,9 +16394,9 @@ class ThriftHiveMetastore_drop_partition_with_environment_context_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter606)
+          foreach ($this->part_vals as $iter599)
           {
-            $xfer += $output->writeString($iter606);
+            $xfer += $output->writeString($iter599);
           }
         }
         $output->writeListEnd();
@@ -17286,14 +17335,14 @@ class ThriftHiveMetastore_get_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size607 = 0;
-            $_etype610 = 0;
-            $xfer += $input->readListBegin($_etype610, $_size607);
-            for ($_i611 = 0; $_i611 < $_size607; ++$_i611)
+            $_size600 = 0;
+            $_etype603 = 0;
+            $xfer += $input->readListBegin($_etype603, $_size600);
+            for ($_i604 = 0; $_i604 < $_size600; ++$_i604)
             {
-              $elem612 = null;
-              $xfer += $input->readString($elem612);
-              $this->part_vals []= $elem612;
+              $elem605 = null;
+              $xfer += $input->readString($elem605);
+              $this->part_vals []= $elem605;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -17331,9 +17380,9 @@ class ThriftHiveMetastore_get_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter613)
+          foreach ($this->part_vals as $iter606)
           {
-            $xfer += $output->writeString($iter613);
+            $xfer += $output->writeString($iter606);
           }
         }
         $output->writeListEnd();
@@ -17551,17 +17600,17 @@ class ThriftHiveMetastore_exchange_partition_args {
         case 1:
           if ($ftype == TType::MAP) {
             $this->partitionSpecs = array();
-            $_size614 = 0;
-            $_ktype615 = 0;
-            $_vtype616 = 0;
-            $xfer += $input->readMapBegin($_ktype615, $_vtype616, $_size614);
-            for ($_i618 = 0; $_i618 < $_size614; ++$_i618)
+            $_size607 = 0;
+            $_ktype608 = 0;
+            $_vtype609 = 0;
+            $xfer += $input->readMapBegin($_ktype608, $_vtype609, $_size607);
+            for ($_i611 = 0; $_i611 < $_size607; ++$_i611)
             {
-              $key619 = '';
-              $val620 = '';
-              $xfer += $input->readString($key619);
-              $xfer += $input->readString($val620);
-              $this->partitionSpecs[$key619] = $val620;
+              $key612 = '';
+              $val613 = '';
+              $xfer += $input->readString($key612);
+              $xfer += $input->readString($val613);
+              $this->partitionSpecs[$key612] = $val613;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -17617,10 +17666,10 @@ class ThriftHiveMetastore_exchange_partition_args {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->partitionSpecs));
         {
-          foreach ($this->partitionSpecs as $kiter621 => $viter622)
+          foreach ($this->partitionSpecs as $kiter614 => $viter615)
           {
-            $xfer += $output->writeString($kiter621);
-            $xfer += $output->writeString($viter622);
+            $xfer += $output->writeString($kiter614);
+            $xfer += $output->writeString($viter615);
           }
         }
         $output->writeMapEnd();
@@ -17916,14 +17965,14 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size623 = 0;
-            $_etype626 = 0;
-            $xfer += $input->readListBegin($_etype626, $_size623);
-            for ($_i627 = 0; $_i627 < $_size623; ++$_i627)
+            $_size616 = 0;
+            $_etype619 = 0;
+            $xfer += $input->readListBegin($_etype619, $_size616);
+            for ($_i620 = 0; $_i620 < $_size616; ++$_i620)
             {
-              $elem628 = null;
-              $xfer += $input->readString($elem628);
-              $this->part_vals []= $elem628;
+              $elem621 = null;
+              $xfer += $input->readString($elem621);
+              $this->part_vals []= $elem621;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -17940,14 +17989,14 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
         case 5:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size629 = 0;
-            $_etype632 = 0;
-            $xfer += $input->readListBegin($_etype632, $_size629);
-            for ($_i633 = 0; $_i633 < $_size629; ++$_i633)
+            $_size622 = 0;
+            $_etype625 = 0;
+            $xfer += $input->readListBegin($_etype625, $_size622);
+            for ($_i626 = 0; $_i626 < $_size622; ++$_i626)
             {
-              $elem634 = null;
-              $xfer += $input->readString($elem634);
-              $this->group_names []= $elem634;
+              $elem627 = null;
+              $xfer += $input->readString($elem627);
+              $this->group_names []= $elem627;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -17985,9 +18034,9 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter635)
+          foreach ($this->part_vals as $iter628)
           {
-            $xfer += $output->writeString($iter635);
+            $xfer += $output->writeString($iter628);
           }
         }
         $output->writeListEnd();
@@ -18007,9 +18056,9 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter636)
+          foreach ($this->group_names as $iter629)
           {
-            $xfer += $output->writeString($iter636);
+            $xfer += $output->writeString($iter629);
           }
         }
         $output->writeListEnd();
@@ -18555,15 +18604,15 @@ class ThriftHiveMetastore_get_partitions_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size637 = 0;
-            $_etype640 = 0;
-            $xfer += $input->readListBegin($_etype640, $_size637);
-            for ($_i641 = 0; $_i641 < $_size637; ++$_i641)
+            $_size630 = 0;
+            $_etype633 = 0;
+            $xfer += $input->readListBegin($_etype633, $_size630);
+            for ($_i634 = 0; $_i634 < $_size630; ++$_i634)
             {
-              $elem642 = null;
-              $elem642 = new \metastore\Partition();
-              $xfer += $elem642->read($input);
-              $this->success []= $elem642;
+              $elem635 = null;
+              $elem635 = new \metastore\Partition();
+              $xfer += $elem635->read($input);
+              $this->success []= $elem635;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18607,9 +18656,9 @@ class ThriftHiveMetastore_get_partitions_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter643)
+          foreach ($this->success as $iter636)
           {
-            $xfer += $iter643->write($output);
+            $xfer += $iter636->write($output);
           }
         }
         $output->writeListEnd();
@@ -18740,14 +18789,14 @@ class ThriftHiveMetastore_get_partitions_with_auth_args {
         case 5:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size644 = 0;
-            $_etype647 = 0;
-            $xfer += $input->readListBegin($_etype647, $_size644);
-            for ($_i648 = 0; $_i648 < $_size644; ++$_i648)
+            $_size637 = 0;
+            $_etype640 = 0;
+            $xfer += $input->readListBegin($_etype640, $_size637);
+            for ($_i641 = 0; $_i641 < $_size637; ++$_i641)
             {
-              $elem649 = null;
-              $xfer += $input->readString($elem649);
-              $this->group_names []= $elem649;
+              $elem642 = null;
+              $xfer += $input->readString($elem642);
+              $this->group_names []= $elem642;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18795,9 +18844,9 @@ class ThriftHiveMetastore_get_partitions_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter650)
+          foreach ($this->group_names as $iter643)
           {
-            $xfer += $output->writeString($iter650);
+            $xfer += $output->writeString($iter643);
           }
         }
         $output->writeListEnd();
@@ -18877,15 +18926,15 @@ class ThriftHiveMetastore_get_partitions_with_auth_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size651 = 0;
-            $_etype654 = 0;
-            $xfer += $input->readListBegin($_etype654, $_size651);
-            for ($_i655 = 0; $_i655 < $_size651; ++$_i655)
+            $_size644 = 0;
+            $_etype647 = 0;
+            $xfer += $input->readListBegin($_etype647, $_size644);
+            for ($_i648 = 0; $_i648 < $_size644; ++$_i648)
             {
-              $elem656 = null;
-              $elem656 = new \metastore\Partition();
-              $xfer += $elem656->read($input);
-              $this->success []= $elem656;
+              $elem649 = null;
+              $elem649 = new \metastore\Partition();
+              $xfer += $elem649->read($input);
+              $this->success []= $elem649;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18929,9 +18978,9 @@ class ThriftHiveMetastore_get_partitions_with_auth_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter657)
+          foreach ($this->success as $iter650)
           {
-            $xfer += $iter657->write($output);
+            $xfer += $iter650->write($output);
           }
         }
         $output->writeListEnd();
@@ -19133,15 +19182,15 @@ class ThriftHiveMetastore_get_partitions_pspec_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size658 = 0;
-            $_etype661 = 0;
-            $xfer += $input->readListBegin($_etype661, $_size658);
-            for ($_i662 = 0; $_i662 < $_size658; ++$_i662)
+            $_size651 = 0;
+            $_etype654 = 0;
+            $xfer += $input->readListBegin($_etype654, $_size651);
+            for ($_i655 = 0; $_i655 < $_size651; ++$_i655)
             {
-              $elem663 = null;
-              $elem663 = new \metastore\PartitionSpec();
-              $xfer += $elem663->read($input);
-              $this->success []= $elem663;
+              $elem656 = null;
+              $elem656 = new \metastore\PartitionSpec();
+              $xfer += $elem656->read($input);
+              $this->success []= $elem656;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19185,9 +19234,9 @@ class ThriftHiveMetastore_get_partitions_pspec_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter664)
+          foreach ($this->success as $iter657)
           {
-            $xfer += $iter664->write($output);
+            $xfer += $iter657->write($output);
           }
         }
         $output->writeListEnd();
@@ -19379,14 +19428,14 @@ class ThriftHiveMetastore_get_partition_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size665 = 0;
-            $_etype668 = 0;
-            $xfer += $input->readListBegin($_etype668, $_size665);
-            for ($_i669 = 0; $_i669 < $_size665; ++$_i669)
+            $_size658 = 0;
+            $_etype661 = 0;
+            $xfer += $input->readListBegin($_etype661, $_size658);
+            for ($_i662 = 0; $_i662 < $_size658; ++$_i662)
             {
-              $elem670 = null;
-              $xfer += $input->readString($elem670);
-              $this->success []= $elem670;
+              $elem663 = null;
+              $xfer += $input->readString($elem663);
+              $this->success []= $elem663;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19422,9 +19471,9 @@ class ThriftHiveMetastore_get_partition_names_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter671)
+          foreach ($this->success as $iter664)
           {
-            $xfer += $output->writeString($iter671);
+            $xfer += $output->writeString($iter664);
           }
         }
         $output->writeListEnd();
@@ -19528,14 +19577,14 @@ class ThriftHiveMetastore_get_partitions_ps_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size672 = 0;
-            $_etype675 = 0;
-            $xfer += $input->readListBegin($_etype675, $_size672);
-            for ($_i676 = 0; $_i676 < $_size672; ++$_i676)
+            $_size665 = 0;
+            $_etype668 = 0;
+            $xfer += $input->readListBegin($_etype668, $_size665);
+            for ($_i669 = 0; $_i669 < $_size665; ++$_i669)
             {
-              $elem677 = null;
-              $xfer += $input->readString($elem677);
-              $this->part_vals []= $elem677;
+              $elem670 = null;
+              $xfer += $input->readString($elem670);
+              $this->part_vals []= $elem670;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19580,9 +19629,9 @@ class ThriftHiveMetastore_get_partitions_ps_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter678)
+          foreach ($this->part_vals as $iter671)
           {
-            $xfer += $output->writeString($iter678);
+            $xfer += $output->writeString($iter671);
           }
         }
         $output->writeListEnd();
@@ -19667,15 +19716,15 @@ class ThriftHiveMetastore_get_partitions_ps_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size679 = 0;
-            $_etype682 = 0;
-            $xfer += $input->readListBegin($_etype682, $_size679);
-            for ($_i683 = 0; $_i683 < $_size679; ++$_i683)
+            $_size672 = 0;
+            $_etype675 = 0;
+            $xfer += $input->readListBegin($_etype675, $_size672);
+            for ($_i676 = 0; $_i676 < $_size672; ++$_i676)
             {
-              $elem684 = null;
-              $elem684 = new \metastore\Partition();
-              $xfer += $elem684->read($input);
-              $this->success []= $elem684;
+              $elem677 = null;
+              $elem677 = new \metastore\Partition();
+              $xfer += $elem677->read($input);
+              $this->success []= $elem677;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19719,9 +19768,9 @@ class ThriftHiveMetastore_get_partitions_ps_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter685)
+          foreach ($this->success as $iter678)
           {
-            $xfer += $iter685->write($output);
+            $xfer += $iter678->write($output);
           }
         }
         $output->writeListEnd();
@@ -19850,14 +19899,14 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size686 = 0;
-            $_etype689 = 0;
-            $xfer += $input->readListBegin($_etype689, $_size686);
-            for ($_i690 = 0; $_i690 < $_size686; ++$_i690)
+            $_size679 = 0;
+            $_etype682 = 0;
+            $xfer += $input->readListBegin($_etype682, $_size679);
+            for ($_i683 = 0; $_i683 < $_size679; ++$_i683)
             {
-              $elem691 = null;
-              $xfer += $input->readString($elem691);
-              $this->part_vals []= $elem691;
+              $elem684 = null;
+              $xfer += $input->readString($elem684);
+              $this->part_vals []= $elem684;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19881,14 +19930,14 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
         case 6:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size692 = 0;
-            $_etype695 = 0;
-            $xfer += $input->readListBegin($_etype695, $_size692);
-            for ($_i696 = 0; $_i696 < $_size692; ++$_i696)
+            $_size685 = 0;
+            $_etype688 = 0;
+            $xfer += $input->readListBegin($_etype688, $_size685);
+            for ($_i689 = 0; $_i689 < $_size685; ++$_i689)
             {
-              $elem697 = null;
-              $xfer += $input->readString($elem697);
-              $this->group_names []= $elem697;
+              $elem690 = null;
+              $xfer += $input->readString($elem690);
+              $this->group_names []= $elem690;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19926,9 +19975,9 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter698)
+          foreach ($this->part_vals as $iter691)
           {
-            $xfer += $output->writeString($iter698);
+            $xfer += $output->writeString($iter691);
           }
         }
         $output->writeListEnd();
@@ -19953,9 +20002,9 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter699)
+          foreach ($this->group_names as $iter692)
           {
-            $xfer += $output->writeString($iter699);
+            $xfer += $output->writeString($iter692);
           }
         }
         $output->writeListEnd();
@@ -20035,15 +20084,15 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size700 = 0;
-            $_etype703 = 0;
-            $xfer += $input->readListBegin($_etype703, $_size700);
-            for ($_i704 = 0; $_i704 < $_size700; ++$_i704)
+            $_size693 = 0;
+            $_etype696 = 0;
+            $xfer += $input->readListBegin($_etype696, $_size693);
+            for ($_i697 = 0; $_i697 < $_size693; ++$_i697)
             {
-              $elem705 = null;
-              $elem705 = new \metastore\Partition();
-              $xfer += $elem705->read($input);
-              $this->success []= $elem705;
+              $elem698 = null;
+              $elem698 = new \metastore\Partition();
+              $xfer += $elem698->read($input);
+              $this->success []= $elem698;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20087,9 +20136,9 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter706)
+          foreach ($this->success as $iter699)
           {
-            $xfer += $iter706->write($output);
+            $xfer += $iter699->write($output);
           }
         }
         $output->writeListEnd();
@@ -20198,14 +20247,14 @@ class ThriftHiveMetastore_get_partition_names_ps_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size707 = 0;
-            $_etype710 = 0;
-            $xfer += $input->readListBegin($_etype710, $_size707);
-            for ($_i711 = 0; $_i711 < $_size707; ++$_i711)
+            $_size700 = 0;
+            $_etype703 = 0;
+            $xfer += $input->readListBegin($_etype703, $_size700);
+            for ($_i704 = 0; $_i704 < $_size700; ++$_i704)
             {
-              $elem712 = null;
-              $xfer += $input->readString($elem712);
-              $this->part_vals []= $elem712;
+              $elem705 = null;
+              $xfer += $input->readString($elem705);
+              $this->part_vals []= $elem705;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20250,9 +20299,9 @@ class ThriftHiveMetastore_get_partition_names_ps_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter713)
+          foreach ($this->part_vals as $iter706)
           {
-            $xfer += $output->writeString($iter713);
+            $xfer += $output->writeString($iter706);
           }
         }
         $output->writeListEnd();
@@ -20336,14 +20385,14 @@ class ThriftHiveMetastore_get_partition_names_ps_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size714 = 0;
-            $_etype717 = 0;
-            $xfer += $input->readListBegin($_etype717, $_size714);
-            for ($_i718 = 0; $_i718 < $_size714; ++$_i718)
+            $_size707 = 0;
+            $_etype710 = 0;
+            $xfer += $input->readListBegin($_etype710, $_size707);
+            for ($_i711 = 0; $_i711 < $_size707; ++$_i711)
             {
-              $elem719 = null;
-              $xfer += $input->readString($elem719);
-              $this->success []= $elem719;
+              $elem712 = null;
+              $xfer += $input->readString($elem712);
+              $this->success []= $elem712;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20387,9 +20436,9 @@ class ThriftHiveMetastore_get_partition_names_ps_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter720)
+          foreach ($this->success as $iter713)
           {
-            $xfer += $output->writeString($iter720);
+            $xfer += $output->writeString($iter713);
           }
         }
         $output->writeListEnd();
@@ -20611,15 +20660,15 @@ class ThriftHiveMetastore_get_partitions_by_filter_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size721 = 0;
-            $_etype724 = 0;
-            $xfer += $input->readListBegin($_etype724, $_size721);
-            for ($_i725 = 0; $_i725 < $_size721; ++$_i725)
+            $_size714 = 0;
+            $_etype717 = 0;
+            $xfer += $input->readListBegin($_etype717, $_size714);
+            for ($_i718 = 0; $_i718 < $_size714; ++$_i718)
             {
-              $elem726 = null;
-              $elem726 = new \metastore\Partition();
-              $xfer += $elem726->read($input);
-              $this->success []= $elem726;
+              $elem719 = null;
+              $elem719 = new \metastore\Partition();
+              $xfer += $elem719->read($input);
+              $this->success []= $elem719;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20663,9 +20712,9 @@ class ThriftHiveMetastore_get_partitions_by_filter_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter727)
+          foreach ($this->success as $iter720)
           {
-            $xfer += $iter727->write($output);
+            $xfer += $iter720->write($output);
           }
         }
         $output->writeListEnd();
@@ -20887,15 +20936,15 @@ class ThriftHiveMetastore_get_part_specs_by_filter_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size728 = 0;
-            $_etype731 = 0;
-            $xfer += $input->readListBegin($_etype731, $_size728);
-            for ($_i732 = 0; $_i732 < $_size728; ++$_i732)
+            $_size721 = 0;
+            $_etype724 = 0;
+            $xfer += $input->readListBegin($_etype724, $_size721);
+            for ($_i725 = 0; $_i725 < $_size721; ++$_i725)
             {
-              $elem733 = null;
-              $elem733 = new \metastore\PartitionSpec();
-              $xfer += $elem733->read($input);
-              $this->success []= $elem733;
+              $elem726 = null;
+              $elem726 = new \metastore\PartitionSpec();
+              $xfer += $elem726->read($input);
+              $this->success []= $elem726;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20939,9 +20988,9 @@ class ThriftHiveMetastore_get_part_specs_by_filter_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter734)
+          foreach ($this->success as $iter727)
           {
-            $xfer += $iter734->write($output);
+            $xfer += $iter727->write($output);
           }
         }
         $output->writeListEnd();
@@ -21240,14 +21289,14 @@ class ThriftHiveMetastore_get_partitions_by_names_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->names = array();
-            $_size735 = 0;
-            $_etype738 = 0;
-            $xfer += $input->readListBegin($_etype738, $_size735);
-            for ($_i739 = 0; $_i739 < $_size735; ++$_i739)
+            $_size728 = 0;
+            $_etype731 = 0;
+            $xfer += $input->readListBegin($_etype731, $_size728);
+            for ($_i732 = 0; $_i732 < $_size728; ++$_i732)
             {
-              $elem740 = null;
-              $xfer += $input->readString($elem740);
-              $this->names []= $elem740;
+              $elem733 = null;
+              $xfer += $input->readString($elem733);
+              $this->names []= $elem733;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -21285,9 +21334,9 @@ class ThriftHiveMetastore_get_partitions_by_names_args {
       {
         $output->writeListBegin(TType::STRING, count($this->names));
         {
-          foreach ($this->names as $iter741)
+          foreach ($this->names as $iter734)
           {
-            $xfer += $output->writeString($iter741);
+            $xfer += $output->writeString($iter734);
           }
         }
         $output->writeListEnd();
@@ -21367,15 +21416,15 @@ class ThriftHiveMetastore_get_partitions_by_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size742 = 0;
-            $_etype745 = 0;
-            $xfer += $input->readListBegin($_etype745, $_size742);
-            for ($_i746 = 0; $_i746 < $_size742; ++$_i746)
+            $_size735 = 0;
+            $_etype738 = 0;
+            $xfer += $input->readListBegin($_etype738, $_size735);
+            for ($_i739 = 0; $_i739 < $_size735; ++$_i739)
             {
-              $elem747 = null;
-              $elem747 = new \metastore\Partition();
-              $xfer += $elem747->read($input);
-              $this->success []= $elem747;
+              $elem740 = null;
+              $elem740 = new \metastore\Partition();
+              $xfer += $elem740->read($input);
+              $this->success []= $elem740;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -21419,9 +21468,9 @@ class ThriftHiveMetastore_get_partitions_by_names_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter748)
+          foreach ($this->success as $iter741)
           {
-            $xfer += $iter748->write($output);
+            $xfer += $iter741->write($output);
           }
         }
         $output->writeListEnd();
@@ -21736,15 +21785,15 @@ class ThriftHiveMetastore_alter_partitions_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->new_parts = array();
-            $_size749 = 0;
-            $_etype752 = 0;
-            $xfer += $input->readListBegin($_etype752, $_size749);
-            for ($_i753 = 0; $_i753 < $_size749; ++$_i753)
+            $_size742 = 0;
+            $_etype745 = 0;
+            $xfer += $input->readListBegin($_etype745, $_size742);
+            for ($_i746 = 0; $_i746 < $_size742; ++$_i746)
             {
-              $elem754 = null;
-              $elem754 = new \metastore\Partition();
-              $xfer += $elem754->read($input);
-              $this->new_parts []= $elem754;
+              $elem747 = null;
+              $elem747 = new \metastore\Partition();
+              $xfer += $elem747->read($input);
+              $this->new_parts []= $elem747;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -21782,9 +21831,9 @@ class ThriftHiveMetastore_alter_partitions_args {
       {
         $output->writeListBegin(TType::STRUCT, count($this->new_parts));
         {
-          foreach ($this->new_parts as $iter755)
+          foreach ($this->new_parts as $iter748)
           {
-            $xfer += $iter755->write($output);
+            $xfer += $iter748->write($output);
           }
         }
         $output->writeListEnd();
@@ -22218,14 +22267,14 @@ class ThriftHiveMetastore_rename_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size756 = 0;
-            $_etype759 = 0;
-            $xfer += $input->readListBegin($_etype759, $_size756);
-            for ($_i760 = 0; $_i760 < $_size756; ++$_i760)
+            $_size749 = 0;
+            $_etype752 = 0;
+            $xfer += $input->readListBegin($_etype752, $_size749);
+            for ($_i753 = 0; $_i753 < $_size749; ++$_i753)
             {
-              $elem761 = null;
-              $xfer += $input->readString($elem761);
-              $this->part_vals []= $elem761;
+              $elem754 = null;
+              $xfer += $input->readString($elem754);
+              $this->part_vals []= $elem754;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -22271,9 +22320,9 @@ class ThriftHiveMetastore_rename_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter762)
+          foreach ($this->part_vals as $iter755)
           {
-            $xfer += $output->writeString($iter762);
+            $xfer += $output->writeString($iter755);
           }
         }
         $output->writeListEnd();
@@ -22446,14 +22495,14 @@ class ThriftHiveMetastore_partition_name_has_valid_characters_args {
         case 1:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size763 = 0;
-            $_etype766 = 0;
-            $xfer += $input->readListBegin($_etype766, $_size763);
-            for ($_i767 = 0; $_i767 < $_size763; ++$_i767)
+            $_size756 = 0;
+            $_etype759 = 0;
+            $xfer += $input->readListBegin($_etype759, $_size756);
+            for ($_i760 = 0; $_i760 < $_size756; ++$_i760)
             {
-              $elem768 = null;
-              $xfer += $input->readString($elem768);
-              $this->part_vals []= $elem768;
+              $elem761 = null;
+              $xfer += $input->readString($elem761);
+              $this->part_vals []= $elem761;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -22488,9 +22537,9 @@ class ThriftHiveMetastore_partition_name_has_valid_characters_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter769)
+          foreach ($this->part_vals as $iter762)
           {
-            $xfer += $output->writeString($iter769);
+            $xfer += $output->writeString($iter762);
           }
         }
         $output->writeListEnd();
@@ -22917,14 +22966,14 @@ class ThriftHiveMetastore_partition_name_to_vals_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size770 = 0;
-            $_etype773 = 0;
-            $xfer += $input->readListBegin($_etype773, $_size770);
-            for ($_i774 = 0; $_i774 < $_size770; ++$_i774)
+            $_size763 = 0;
+            $_etype766 = 0;
+            $xfer += $input->readListBegin($_etype766, $_size763);
+            for ($_i767 = 0; $_i767 < $_size763; ++$_i767)
             {
-              $elem775 = null;
-              $xfer += $input->readString($elem775);
-              $this->success []= $elem775;
+              $elem768 = null;
+              $xfer += $input->readString($elem768);
+              $this->success []= $elem768;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -22960,9 +23009,9 @@ class ThriftHiveMetastore_partition_name_to_vals_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter776)
+          foreach ($this->success as $iter769)
           {
-            $xfer += $output->writeString($iter776);
+            $xfer += $output->writeString($iter769);
           }
         }
         $output->writeListEnd();
@@ -23113,17 +23162,17 @@ class ThriftHiveMetastore_partition_name_to_spec_result {
         case 0:
           if ($ftype == TType::MAP) {
             $this->success = array();
-            $_size777 = 0;
-            $_ktype778 = 0;
-            $_vtype779 = 0;
-            $xfer += $input->readMapBegin($_ktype778, $_vtype779, $_size777);
-            for ($_i781 = 0; $_i781 < $_size777; ++$_i781)
+            $_size770 = 0;
+            $_ktype771 = 0;
+            $_vtype772 = 0;
+            $xfer += $input->readMapBegin($_ktype771, $_vtype772, $_size770);
+            for ($_i774 = 0; $_i774 < $_size770; ++$_i774)
             {
-              $key782 = '';
-              $val783 = '';
-              $xfer += $input->readString($key782);
-              $xfer += $input->readString($val783);
-              $this->success[$key782] = $val783;
+              $key775 = '';
+              $val776 = '';
+              $xfer += $input->readString($key775);
+              $xfer += $input->readString($val776);
+              $this->success[$key775] = $val776;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -23159,10 +23208,10 @@ class ThriftHiveMetastore_partition_name_to_spec_result {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
         {
-          foreach ($this->success as $kiter784 => $viter785)
+          foreach ($this->success as $kiter777 => $viter778)
           {
-            $xfer += $output->writeString($kiter784);
-            $xfer += $output->writeString($viter785);
+            $xfer += $output->writeString($kiter777);
+            $xfer += $output->writeString($viter778);
           }
         }
         $output->writeMapEnd();
@@ -23270,17 +23319,17 @@ class ThriftHiveMetastore_markPartitionForEvent_args {
         case 3:
           if ($ftype == TType::MAP) {
             $this->part_vals = array();
-            $_size786 = 0;
-            $_ktype787 = 0;
-            $_vtype788 = 0;
-            $xfer += $input->readMapBegin($_ktype787, $_vtype788, $_size786);
-            for ($_i790 = 0; $_i790 < $_size786; ++$_i790)
+            $_size779 = 0;
+            $_ktype780 = 0;
+            $_vtype781 = 0;
+            $xfer += $input->readMapBegin($_ktype780, $_vtype781, $_size779);
+            for ($_i783 = 0; $_i783 < $_size779; ++$_i783)
             {
-              $key791 = '';
-              $val792 = '';
-              $xfer += $input->readString($key791);
-              $xfer += $input->readString($val792);
-              $this->part_vals[$key791] = $val792;
+              $key784 = '';
+              $val785 = '';
+              $xfer += $input->readString($key784);
+              $xfer += $input->readString($val785);
+              $this->part_vals[$key784] = $val785;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -23325,10 +23374,10 @@ class ThriftHiveMetastore_markPartitionForEvent_args {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $kiter793 => $viter794)
+          foreach ($this->part_vals as $kiter786 => $viter787)
           {
-            $xfer += $output->writeString($kiter793);
-            $xfer += $output->writeString($viter794);
+            $xfer += $output->writeString($kiter786);
+            $xfer += $output->writeString($viter787);
           }
         }
         $output->writeMapEnd();
@@ -23620,17 +23669,17 @@ class ThriftHiveMetastore_isPartitionMarkedForEvent_args {
         case 3:
           if ($ftype == TType::MAP) {
             $this->part_vals = array();
-            $_size795 = 0;
-            $_ktype796 = 0;
-            $_vtype797 = 0;
-            $xfer += $input->readMapBegin($_ktype796, $_vtype797, $_size795);
-            for ($_i799 = 0; $_i799 < $_size795; ++$_i799)
+            $_size788 = 0;
+            $_ktype789 = 0;
+            $_vtype790 = 0;
+            $xfer += $input->readMapBegin($_ktype789, $_vtype790, $_size788);
+            for ($_i792 = 0; $_i792 < $_size788; ++$_i792)
             {
-              $key800 = '';
-              $val801 = '';
-              $xfer += $input->readString($key800);
-              $xfer += $input->readString($val801);
-              $this->part_vals[$key800] = $val801;
+              $key793 = '';
+              $val794 = '';
+              $xfer += $input->readString($key793);
+              $xfer += $input->readString($val794);
+              $this->part_vals[$key793] = $val794;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -23675,10 +23724,10 @@ class ThriftHiveMetastore_isPartitionMarkedForEvent_args {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $kiter802 => $viter803)
+          foreach ($this->part_vals as $kiter795 => $viter796)
           {
-            $xfer += $output->writeString($kiter802);
-            $xfer += $output->writeString($viter803);
+            $xfer += $output->writeString($kiter795);
+            $xfer += $output->writeString($viter796);
           }
         }
         $output->writeMapEnd();
@@ -25038,15 +25087,15 @@ class ThriftHiveMetastore_get_indexes_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size804 = 0;
-            $_etype807 = 0;
-            $xfer += $input->readListBegin($_etype807, $_size804);
-            for ($_i808 = 0; $_i808 < $_size804; ++$_i808)
+            $_size797 = 0;
+            $_etype800 = 0;
+            $xfer += $input->readListBegin($_etype800, $_size797);
+            for ($_i801 = 0; $_i801 < $_size797; ++$_i801)
             {
-              $elem809 = null;
-              $elem809 = new \metastore\Index();
-              $xfer += $elem809->read($input);
-              $this->success []= $elem809;
+              $elem802 = null;
+              $elem802 = new \metastore\Index();
+              $xfer += $elem802->read($input);
+              $this->success []= $elem802;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -25090,9 +25139,9 @@ class ThriftHiveMetastore_get_indexes_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter810)
+          foreach ($this->success as $iter803)
           {
-            $xfer += $iter810->write($output);
+            $xfer += $iter803->write($output);
           }
         }
         $output->writeListEnd();
@@ -25284,14 +25333,14 @@ class ThriftHiveMetastore_get_index_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size811 = 0;
-            $_etype814 = 0;
-            $xfer += $input->readListBegin($_etype814, $_size811);
-            for ($_i815 = 0; $_i815 < $_size811; ++$_i815)
+            $_size804 = 0;
+            $_etype807 = 0;
+            $xfer += $input->readListBegin($_etype807, $_size804);
+            for ($_i808 = 0; $_i808 < $_size804; ++$_i808)
             {
-              $elem816 = null;
-              $xfer += $input->readString($elem816);
-              $this->success []= $elem816;
+              $elem809 = null;
+              $xfer += $input->readString($elem809);
+              $this->success []= $elem809;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -25327,9 +25376,9 @@ class ThriftHiveMetastore_get_index_names_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter817)
+          foreach ($this->success as $iter810)
           {
-            $xfer += $output->writeString($iter817);
+            $xfer += $output->writeString($iter810);
           }
         }
         $output->writeListEnd();
@@ -28557,14 +28606,14 @@ class ThriftHiveMetastore_get_functions_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size818 = 0;
-            $_etype821 = 0;
-            $xfer += $input->readListBegin($_etype821, $_size818);
-            for ($_i822 = 0; $_i822 < $_size818; ++$_i822)
+            $_size811 = 0;
+            $_etype814 = 0;
+            $xfer += $input->readListBegin($_etype814, $_size811);
+            for ($_i815 = 0; $_i815 < $_size811; ++$_i815)
             {
-              $elem823 = null;
-              $xfer += $input->readString($elem823);
-              $this->success []= $elem823;
+              $elem816 = null;
+              $xfer += $input->readString($elem816);
+              $this->success []= $elem816;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -28600,9 +28649,9 @@ class ThriftHiveMetastore_get_functions_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter824)
+          foreach ($this->success as $iter817)
           {
-            $xfer += $output->writeString($iter824);
+            $xfer += $output->writeString($iter817);
           }
         }
         $output->writeListEnd();
@@ -29426,14 +29475,14 @@ class ThriftHiveMetastore_get_role_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size825 = 0;
-            $_etype828 = 0;
-            $xfer += $input->readListBegin($_etype828, $_size825);
-            for ($_i829 = 0; $_i829 < $_size825; ++$_i829)
+            $_size818 = 0;
+            $_etype821 = 0;
+            $xfer += $input->readListBegin($_etype821, $_size818);
+            for ($_i822 = 0; $_i822 < $_size818; ++$_i822)
             {
-              $elem830 = null;
-              $xfer += $input->readString($elem830);
-              $this->success []= $elem830;
+              $elem823 = null;
+              $xfer += $input->readString($elem823);
+              $this->success []= $elem823;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -29469,9 +29518,9 @@ class ThriftHiveMetastore_get_role_names_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter831)
+          foreach ($this->success as $iter824)
           {
-            $xfer += $output->writeString($iter831);
+            $xfer += $output->writeString($iter824);
           }
         }
         $output->writeListEnd();
@@ -30111,15 +30160,15 @@ class ThriftHiveMetastore_list_roles_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size832 = 0;
-            $_etype835 = 0;
-            $xfer += $input->readListBegin($_etype835, $_size832);
-            for ($_i836 = 0; $_i836 < $_size832; ++$_i836)
+            $_size825 = 0;
+            $_etype828 = 0;
+            $xfer += $input->readListBegin($_etype828, $_size825);
+            for ($_i829 = 0; $_i829 < $_size825; ++$_i829)
             {
-              $elem837 = null;
-              $elem837 = new \metastore\Role();
-              $xfer += $elem837->read($input);
-              $this->success []= $elem837;
+              $elem830 = null;
+              $elem830 = new \metastore\Role();
+              $xfer += $elem830->read($input);
+              $this->success []= $elem830;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -30155,9 +30204,9 @@ class ThriftHiveMetastore_list_roles_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter838)
+          foreach ($this->success as $iter831)
           {
-            $xfer += $iter838->write($output);
+            $xfer += $iter831->write($output);
           }
         }
         $output->writeListEnd();
@@ -30783,14 +30832,14 @@ class ThriftHiveMetastore_get_privilege_set_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size839 = 0;
-            $_etype842 = 0;
-            $xfer += $input->readListBegin($_etype842, $_size839);
-            for ($_i843 = 0; $_i843 < $_size839; ++$_i843)
+            $_size832 = 0;
+            $_etype835 = 0;
+            $xfer += $input->readListBegin($_etype835, $_size832);
+            for ($_i836 = 0; $_i836 < $_size832; ++$_i836)
             {
-              $elem844 = null;
-              $xfer += $input->readString($elem844);
-              $this->group_names []= $elem844;
+              $elem837 = null;
+              $xfer += $input->readString($elem837);
+              $this->group_names []= $elem837;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -30831,9 +30880,9 @@ class ThriftHiveMetastore_get_privilege_set_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter845)
+          foreach ($this->group_names as $iter838)
           {
-            $xfer += $output->writeString($iter845);
+            $xfer += $output->writeString($iter838);
           }
         }
         $output->writeListEnd();
@@ -31120,15 +31169,15 @@ class ThriftHiveMetastore_list_privileges_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size846 = 0;
-            $_etype849 = 0;
-            $xfer += $input->readListBegin($_etype849, $_size846);
-            for ($_i850 = 0; $_i850 < $_size846; ++$_i850)
+            $_size839 = 0;
+            $_etype842 = 0;
+            $xfer += $input->readListBegin($_etype842, $_size839);
+            for ($_i843 = 0; $_i843 < $_size839; ++$_i843)
             {
-              $elem851 = null;
-              $elem851 = new \metastore\HiveObjectPrivilege();
-              $xfer += $elem851->read($input);
-              $this->success []= $elem851;
+              $elem844 = null;
+              $elem844 = new \metastore\HiveObjectPrivilege();
+              $xfer += $elem844->read($input);
+              $this->success []= $elem844;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -31164,9 +31213,9 @@ class ThriftHiveMetastore_list_privileges_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter852)
+          foreach ($this->success as $iter845)
           {
-            $xfer += $iter852->write($output);
+            $xfer += $iter845->write($output);
           }
         }
         $output->writeListEnd();
@@ -31765,14 +31814,14 @@ class ThriftHiveMetastore_set_ugi_args {
         case 2:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size853 = 0;
-            $_etype856 = 0;
-            $xfer += $input->readListBegin($_etype856, $_size853);
-            for ($_i857 = 0; $_i857 < $_size853; ++$_i857)
+            $_size846 = 0;
+            $_etype849 = 0;
+            $xfer += $input->readListBegin($_etype849, $_size846);
+            for ($_i850 = 0; $_i850 < $_size846; ++$_i850)
             {
-              $elem858 = null;
-              $xfer += $input->readString($elem858);
-              $this->group_names []= $elem858;
+              $elem851 = null;
+              $xfer += $input->readString($elem851);
+              $this->group_names []= $elem851;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -31805,9 +31854,9 @@ class ThriftHiveMetastore_set_ugi_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter859)
+          foreach ($this->group_names as $iter852)
           {
-            $xfer += $output->writeString($iter859);
+            $xfer += $output->writeString($iter852);
           }
         }
         $output->writeListEnd();
@@ -31877,14 +31926,14 @@ class ThriftHiveMetastore_set_ugi_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size860 = 0;
-            $_etype863 = 0;
-            $xfer += $input->readListBegin($_etype863, $_size860);
-            for ($_i864 = 0; $_i864 < $_size860; ++$_i864)
+            $_size853 = 0;
+            $_etype856 = 0;
+            $xfer += $input->readListBegin($_etype856, $_size853);
+            for ($_i857 = 0; $_i857 < $_size853; ++$_i857)
             {
-              $elem865 = null;
-              $xfer += $input->readString($elem865);
-              $this->success []= $elem865;
+              $elem858 = null;
+              $xfer += $input->readString($elem858);
+              $this->success []= $elem858;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -31920,9 +31969,9 @@ class ThriftHiveMetastore_set_ugi_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter866)
+          foreach ($this->success as $iter859)
           {
-            $xfer += $output->writeString($iter866);
+            $xfer += $output->writeString($iter859);
           }
         }
         $output->writeListEnd();
@@ -34827,4 +34876,131 @@ class ThriftHiveMetastore_get_current_notificationEventId_result {
 
 }
 
+class ThriftHiveMetastore_fire_notification_event_args {
+  static $_TSPEC;
+
+  public $rqst = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'rqst',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\FireEventRequest',
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['rqst'])) {
+        $this->rqst = $vals['rqst'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_fire_notification_event_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::STRUCT) {
+            $this->rqst = new \metastore\FireEventRequest();
+            $xfer += $this->rqst->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_fire_notification_event_args');
+    if ($this->rqst !== null) {
+      if (!is_object($this->rqst)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('rqst', TType::STRUCT, 1);
+      $xfer += $this->rqst->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_fire_notification_event_result {
+  static $_TSPEC;
+
+
+  public function __construct() {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        );
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_fire_notification_event_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_fire_notification_event_result');
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
 
diff --git a/metastore/src/gen/thrift/gen-php/metastore/Types.php b/metastore/src/gen/thrift/gen-php/metastore/Types.php
index 4dd08c1..a63fcbf 100644
--- a/metastore/src/gen/thrift/gen-php/metastore/Types.php
+++ b/metastore/src/gen/thrift/gen-php/metastore/Types.php
@@ -113,6 +113,17 @@ final class GrantRevokeType {
   );
 }
 
+final class EventRequestType {
+  const INSERT = 1;
+  const UPDATE = 2;
+  const DELETE = 3;
+  static public $__names = array(
+    1 => 'INSERT',
+    2 => 'UPDATE',
+    3 => 'DELETE',
+  );
+}
+
 final class FunctionType {
   const JAVA = 1;
   static public $__names = array(
@@ -12132,33 +12143,34 @@ class CurrentNotificationEventId {
 
 }
 
-class InsertEventRequestData {
+class GetAllFunctionsResponse {
   static $_TSPEC;
 
-  public $filesAdded = null;
+  public $functions = null;
 
   public function __construct($vals=null) {
     if (!isset(self::$_TSPEC)) {
       self::$_TSPEC = array(
         1 => array(
-          'var' => 'filesAdded',
+          'var' => 'functions',
           'type' => TType::LST,
-          'etype' => TType::STRING,
+          'etype' => TType::STRUCT,
           'elem' => array(
-            'type' => TType::STRING,
+            'type' => TType::STRUCT,
+            'class' => '\metastore\Function',
             ),
           ),
         );
     }
     if (is_array($vals)) {
-      if (isset($vals['filesAdded'])) {
-        $this->filesAdded = $vals['filesAdded'];
+      if (isset($vals['functions'])) {
+        $this->functions = $vals['functions'];
       }
     }
   }
 
   public function getName() {
-    return 'InsertEventRequestData';
+    return 'GetAllFunctionsResponse';
   }
 
   public function read($input)
@@ -12178,15 +12190,16 @@ class InsertEventRequestData {
       {
         case 1:
           if ($ftype == TType::LST) {
-            $this->filesAdded = array();
+            $this->functions = array();
             $_size444 = 0;
             $_etype447 = 0;
             $xfer += $input->readListBegin($_etype447, $_size444);
             for ($_i448 = 0; $_i448 < $_size444; ++$_i448)
             {
               $elem449 = null;
-              $xfer += $input->readString($elem449);
-              $this->filesAdded []= $elem449;
+              $elem449 = new \metastore\Function();
+              $xfer += $elem449->read($input);
+              $this->functions []= $elem449;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -12205,18 +12218,18 @@ class InsertEventRequestData {
 
   public function write($output) {
     $xfer = 0;
-    $xfer += $output->writeStructBegin('InsertEventRequestData');
-    if ($this->filesAdded !== null) {
-      if (!is_array($this->filesAdded)) {
+    $xfer += $output->writeStructBegin('GetAllFunctionsResponse');
+    if ($this->functions !== null) {
+      if (!is_array($this->functions)) {
         throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
       }
-      $xfer += $output->writeFieldBegin('filesAdded', TType::LST, 1);
+      $xfer += $output->writeFieldBegin('functions', TType::LST, 1);
       {
-        $output->writeListBegin(TType::STRING, count($this->filesAdded));
+        $output->writeListBegin(TType::STRUCT, count($this->functions));
         {
-          foreach ($this->filesAdded as $iter450)
+          foreach ($this->functions as $iter450)
           {
-            $xfer += $output->writeString($iter450);
+            $xfer += $iter450->write($output);
           }
         }
         $output->writeListEnd();
@@ -12230,30 +12243,53 @@ class InsertEventRequestData {
 
 }
 
-class FireEventRequestData {
+class TableMeta {
   static $_TSPEC;
 
-  public $insertData = null;
+  public $dbName = null;
+  public $tableName = null;
+  public $tableType = null;
+  public $comments = null;
 
   public function __construct($vals=null) {
     if (!isset(self::$_TSPEC)) {
       self::$_TSPEC = array(
         1 => array(
-          'var' => 'insertData',
-          'type' => TType::STRUCT,
-          'class' => '\metastore\InsertEventRequestData',
+          'var' => 'dbName',
+          'type' => TType::STRING,
+          ),
+        2 => array(
+          'var' => 'tableName',
+          'type' => TType::STRING,
+          ),
+        3 => array(
+          'var' => 'tableType',
+          'type' => TType::STRING,
+          ),
+        4 => array(
+          'var' => 'comments',
+          'type' => TType::STRING,
           ),
         );
     }
     if (is_array($vals)) {
-      if (isset($vals['insertData'])) {
-        $this->insertData = $vals['insertData'];
+      if (isset($vals['dbName'])) {
+        $this->dbName = $vals['dbName'];
+      }
+      if (isset($vals['tableName'])) {
+        $this->tableName = $vals['tableName'];
+      }
+      if (isset($vals['tableType'])) {
+        $this->tableType = $vals['tableType'];
+      }
+      if (isset($vals['comments'])) {
+        $this->comments = $vals['comments'];
       }
     }
   }
 
   public function getName() {
-    return 'FireEventRequestData';
+    return 'TableMeta';
   }
 
   public function read($input)
@@ -12272,9 +12308,29 @@ class FireEventRequestData {
       switch ($fid)
       {
         case 1:
-          if ($ftype == TType::STRUCT) {
-            $this->insertData = new \metastore\InsertEventRequestData();
-            $xfer += $this->insertData->read($input);
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->dbName);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 2:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->tableName);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 3:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->tableType);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 4:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->comments);
           } else {
             $xfer += $input->skip($ftype);
           }
@@ -12291,13 +12347,25 @@ class FireEventRequestData {
 
   public function write($output) {
     $xfer = 0;
-    $xfer += $output->writeStructBegin('FireEventRequestData');
-    if ($this->insertData !== null) {
-      if (!is_object($this->insertData)) {
-        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
-      }
-      $xfer += $output->writeFieldBegin('insertData', TType::STRUCT, 1);
-      $xfer += $this->insertData->write($output);
+    $xfer += $output->writeStructBegin('TableMeta');
+    if ($this->dbName !== null) {
+      $xfer += $output->writeFieldBegin('dbName', TType::STRING, 1);
+      $xfer += $output->writeString($this->dbName);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->tableName !== null) {
+      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 2);
+      $xfer += $output->writeString($this->tableName);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->tableType !== null) {
+      $xfer += $output->writeFieldBegin('tableType', TType::STRING, 3);
+      $xfer += $output->writeString($this->tableType);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->comments !== null) {
+      $xfer += $output->writeFieldBegin('comments', TType::STRING, 4);
+      $xfer += $output->writeString($this->comments);
       $xfer += $output->writeFieldEnd();
     }
     $xfer += $output->writeFieldStop();
@@ -12310,9 +12378,9 @@ class FireEventRequestData {
 class FireEventRequest {
   static $_TSPEC;
 
-  public $successful = null;
-  public $data = null;
+  public $eventType = null;
   public $dbName = null;
+  public $successful = null;
   public $tableName = null;
   public $partitionVals = null;
 
@@ -12320,18 +12388,17 @@ class FireEventRequest {
     if (!isset(self::$_TSPEC)) {
       self::$_TSPEC = array(
         1 => array(
-          'var' => 'successful',
-          'type' => TType::BOOL,
+          'var' => 'eventType',
+          'type' => TType::I32,
           ),
         2 => array(
-          'var' => 'data',
-          'type' => TType::STRUCT,
-          'class' => '\metastore\FireEventRequestData',
-          ),
-        3 => array(
           'var' => 'dbName',
           'type' => TType::STRING,
           ),
+        3 => array(
+          'var' => 'successful',
+          'type' => TType::BOOL,
+          ),
         4 => array(
           'var' => 'tableName',
           'type' => TType::STRING,
@@ -12347,15 +12414,15 @@ class FireEventRequest {
         );
     }
     if (is_array($vals)) {
-      if (isset($vals['successful'])) {
-        $this->successful = $vals['successful'];
-      }
-      if (isset($vals['data'])) {
-        $this->data = $vals['data'];
+      if (isset($vals['eventType'])) {
+        $this->eventType = $vals['eventType'];
       }
       if (isset($vals['dbName'])) {
         $this->dbName = $vals['dbName'];
       }
+      if (isset($vals['successful'])) {
+        $this->successful = $vals['successful'];
+      }
       if (isset($vals['tableName'])) {
         $this->tableName = $vals['tableName'];
       }
@@ -12385,23 +12452,22 @@ class FireEventRequest {
       switch ($fid)
       {
         case 1:
-          if ($ftype == TType::BOOL) {
-            $xfer += $input->readBool($this->successful);
+          if ($ftype == TType::I32) {
+            $xfer += $input->readI32($this->eventType);
           } else {
             $xfer += $input->skip($ftype);
           }
           break;
         case 2:
-          if ($ftype == TType::STRUCT) {
-            $this->data = new \metastore\FireEventRequestData();
-            $xfer += $this->data->read($input);
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->dbName);
           } else {
             $xfer += $input->skip($ftype);
           }
           break;
         case 3:
-          if ($ftype == TType::STRING) {
-            $xfer += $input->readString($this->dbName);
+          if ($ftype == TType::BOOL) {
+            $xfer += $input->readBool($this->successful);
           } else {
             $xfer += $input->skip($ftype);
           }
@@ -12443,24 +12509,21 @@ class FireEventRequest {
   public function write($output) {
     $xfer = 0;
     $xfer += $output->writeStructBegin('FireEventRequest');
-    if ($this->successful !== null) {
-      $xfer += $output->writeFieldBegin('successful', TType::BOOL, 1);
-      $xfer += $output->writeBool($this->successful);
-      $xfer += $output->writeFieldEnd();
-    }
-    if ($this->data !== null) {
-      if (!is_object($this->data)) {
-        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
-      }
-      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 2);
-      $xfer += $this->data->write($output);
+    if ($this->eventType !== null) {
+      $xfer += $output->writeFieldBegin('eventType', TType::I32, 1);
+      $xfer += $output->writeI32($this->eventType);
       $xfer += $output->writeFieldEnd();
     }
     if ($this->dbName !== null) {
-      $xfer += $output->writeFieldBegin('dbName', TType::STRING, 3);
+      $xfer += $output->writeFieldBegin('dbName', TType::STRING, 2);
       $xfer += $output->writeString($this->dbName);
       $xfer += $output->writeFieldEnd();
     }
+    if ($this->successful !== null) {
+      $xfer += $output->writeFieldBegin('successful', TType::BOOL, 3);
+      $xfer += $output->writeBool($this->successful);
+      $xfer += $output->writeFieldEnd();
+    }
     if ($this->tableName !== null) {
       $xfer += $output->writeFieldBegin('tableName', TType::STRING, 4);
       $xfer += $output->writeString($this->tableName);
@@ -12490,288 +12553,6 @@ class FireEventRequest {
 
 }
 
-class FireEventResponse {
-  static $_TSPEC;
-
-
-  public function __construct() {
-    if (!isset(self::$_TSPEC)) {
-      self::$_TSPEC = array(
-        );
-    }
-  }
-
-  public function getName() {
-    return 'FireEventResponse';
-  }
-
-  public function read($input)
-  {
-    $xfer = 0;
-    $fname = null;
-    $ftype = 0;
-    $fid = 0;
-    $xfer += $input->readStructBegin($fname);
-    while (true)
-    {
-      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
-      if ($ftype == TType::STOP) {
-        break;
-      }
-      switch ($fid)
-      {
-        default:
-          $xfer += $input->skip($ftype);
-          break;
-      }
-      $xfer += $input->readFieldEnd();
-    }
-    $xfer += $input->readStructEnd();
-    return $xfer;
-  }
-
-  public function write($output) {
-    $xfer = 0;
-    $xfer += $output->writeStructBegin('FireEventResponse');
-    $xfer += $output->writeFieldStop();
-    $xfer += $output->writeStructEnd();
-    return $xfer;
-  }
-
-}
-
-class GetAllFunctionsResponse {
-  static $_TSPEC;
-
-  public $functions = null;
-
-  public function __construct($vals=null) {
-    if (!isset(self::$_TSPEC)) {
-      self::$_TSPEC = array(
-        1 => array(
-          'var' => 'functions',
-          'type' => TType::LST,
-          'etype' => TType::STRUCT,
-          'elem' => array(
-            'type' => TType::STRUCT,
-            'class' => '\metastore\Function',
-            ),
-          ),
-        );
-    }
-    if (is_array($vals)) {
-      if (isset($vals['functions'])) {
-        $this->functions = $vals['functions'];
-      }
-    }
-  }
-
-  public function getName() {
-    return 'GetAllFunctionsResponse';
-  }
-
-  public function read($input)
-  {
-    $xfer = 0;
-    $fname = null;
-    $ftype = 0;
-    $fid = 0;
-    $xfer += $input->readStructBegin($fname);
-    while (true)
-    {
-      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
-      if ($ftype == TType::STOP) {
-        break;
-      }
-      switch ($fid)
-      {
-        case 1:
-          if ($ftype == TType::LST) {
-            $this->functions = array();
-            $_size458 = 0;
-            $_etype461 = 0;
-            $xfer += $input->readListBegin($_etype461, $_size458);
-            for ($_i462 = 0; $_i462 < $_size458; ++$_i462)
-            {
-              $elem463 = null;
-              $elem463 = new \metastore\Function();
-              $xfer += $elem463->read($input);
-              $this->functions []= $elem463;
-            }
-            $xfer += $input->readListEnd();
-          } else {
-            $xfer += $input->skip($ftype);
-          }
-          break;
-        default:
-          $xfer += $input->skip($ftype);
-          break;
-      }
-      $xfer += $input->readFieldEnd();
-    }
-    $xfer += $input->readStructEnd();
-    return $xfer;
-  }
-
-  public function write($output) {
-    $xfer = 0;
-    $xfer += $output->writeStructBegin('GetAllFunctionsResponse');
-    if ($this->functions !== null) {
-      if (!is_array($this->functions)) {
-        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
-      }
-      $xfer += $output->writeFieldBegin('functions', TType::LST, 1);
-      {
-        $output->writeListBegin(TType::STRUCT, count($this->functions));
-        {
-          foreach ($this->functions as $iter464)
-          {
-            $xfer += $iter464->write($output);
-          }
-        }
-        $output->writeListEnd();
-      }
-      $xfer += $output->writeFieldEnd();
-    }
-    $xfer += $output->writeFieldStop();
-    $xfer += $output->writeStructEnd();
-    return $xfer;
-  }
-
-}
-
-class TableMeta {
-  static $_TSPEC;
-
-  public $dbName = null;
-  public $tableName = null;
-  public $tableType = null;
-  public $comments = null;
-
-  public function __construct($vals=null) {
-    if (!isset(self::$_TSPEC)) {
-      self::$_TSPEC = array(
-        1 => array(
-          'var' => 'dbName',
-          'type' => TType::STRING,
-          ),
-        2 => array(
-          'var' => 'tableName',
-          'type' => TType::STRING,
-          ),
-        3 => array(
-          'var' => 'tableType',
-          'type' => TType::STRING,
-          ),
-        4 => array(
-          'var' => 'comments',
-          'type' => TType::STRING,
-          ),
-        );
-    }
-    if (is_array($vals)) {
-      if (isset($vals['dbName'])) {
-        $this->dbName = $vals['dbName'];
-      }
-      if (isset($vals['tableName'])) {
-        $this->tableName = $vals['tableName'];
-      }
-      if (isset($vals['tableType'])) {
-        $this->tableType = $vals['tableType'];
-      }
-      if (isset($vals['comments'])) {
-        $this->comments = $vals['comments'];
-      }
-    }
-  }
-
-  public function getName() {
-    return 'TableMeta';
-  }
-
-  public function read($input)
-  {
-    $xfer = 0;
-    $fname = null;
-    $ftype = 0;
-    $fid = 0;
-    $xfer += $input->readStructBegin($fname);
-    while (true)
-    {
-      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
-      if ($ftype == TType::STOP) {
-        break;
-      }
-      switch ($fid)
-      {
-        case 1:
-          if ($ftype == TType::STRING) {
-            $xfer += $input->readString($this->dbName);
-          } else {
-            $xfer += $input->skip($ftype);
-          }
-          break;
-        case 2:
-          if ($ftype == TType::STRING) {
-            $xfer += $input->readString($this->tableName);
-          } else {
-            $xfer += $input->skip($ftype);
-          }
-          break;
-        case 3:
-          if ($ftype == TType::STRING) {
-            $xfer += $input->readString($this->tableType);
-          } else {
-            $xfer += $input->skip($ftype);
-          }
-          break;
-        case 4:
-          if ($ftype == TType::STRING) {
-            $xfer += $input->readString($this->comments);
-          } else {
-            $xfer += $input->skip($ftype);
-          }
-          break;
-        default:
-          $xfer += $input->skip($ftype);
-          break;
-      }
-      $xfer += $input->readFieldEnd();
-    }
-    $xfer += $input->readStructEnd();
-    return $xfer;
-  }
-
-  public function write($output) {
-    $xfer = 0;
-    $xfer += $output->writeStructBegin('TableMeta');
-    if ($this->dbName !== null) {
-      $xfer += $output->writeFieldBegin('dbName', TType::STRING, 1);
-      $xfer += $output->writeString($this->dbName);
-      $xfer += $output->writeFieldEnd();
-    }
-    if ($this->tableName !== null) {
-      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 2);
-      $xfer += $output->writeString($this->tableName);
-      $xfer += $output->writeFieldEnd();
-    }
-    if ($this->tableType !== null) {
-      $xfer += $output->writeFieldBegin('tableType', TType::STRING, 3);
-      $xfer += $output->writeString($this->tableType);
-      $xfer += $output->writeFieldEnd();
-    }
-    if ($this->comments !== null) {
-      $xfer += $output->writeFieldBegin('comments', TType::STRING, 4);
-      $xfer += $output->writeString($this->comments);
-      $xfer += $output->writeFieldEnd();
-    }
-    $xfer += $output->writeFieldStop();
-    $xfer += $output->writeStructEnd();
-    return $xfer;
-  }
-
-}
-
 class MetaException extends TException {
   static $_TSPEC;
 
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
index a9c70f5..972d234 100755
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
@@ -146,6 +146,7 @@ if len(sys.argv) <= 1 or sys.argv[1] == '--help':
   print '  ShowCompactResponse show_compact(ShowCompactRequest rqst)'
   print '  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)'
   print '  CurrentNotificationEventId get_current_notificationEventId()'
+  print '  void fire_notification_event(FireEventRequest rqst)'
   print ''
   sys.exit(0)
 
@@ -935,6 +936,12 @@ elif cmd == 'get_current_notificationEventId':
     sys.exit(1)
   pp.pprint(client.get_current_notificationEventId())
 
+elif cmd == 'fire_notification_event':
+  if len(args) != 1:
+    print 'fire_notification_event requires 1 args'
+    sys.exit(1)
+  pp.pprint(client.fire_notification_event(eval(args[0]),))
+
 else:
   print 'Unrecognized method %s' % cmd
   sys.exit(1)
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
index b19bf71..f9306c2 100644
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
@@ -1016,6 +1016,13 @@ def get_next_notification(self, rqst):
   def get_current_notificationEventId(self, ):
     pass
 
+  def fire_notification_event(self, rqst):
+    """
+    Parameters:
+     - rqst
+    """
+    pass
+
 
 class Client(fb303.FacebookService.Client, Iface):
   """
@@ -5434,6 +5441,34 @@ def recv_get_current_notificationEventId(self, ):
       return result.success
     raise TApplicationException(TApplicationException.MISSING_RESULT, "get_current_notificationEventId failed: unknown result");
 
+  def fire_notification_event(self, rqst):
+    """
+    Parameters:
+     - rqst
+    """
+    self.send_fire_notification_event(rqst)
+    self.recv_fire_notification_event()
+
+  def send_fire_notification_event(self, rqst):
+    self._oprot.writeMessageBegin('fire_notification_event', TMessageType.CALL, self._seqid)
+    args = fire_notification_event_args()
+    args.rqst = rqst
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_fire_notification_event(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = fire_notification_event_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    return
+
 
 class Processor(fb303.FacebookService.Processor, Iface, TProcessor):
   def __init__(self, handler):
@@ -5561,6 +5596,7 @@ def __init__(self, handler):
     self._processMap["show_compact"] = Processor.process_show_compact
     self._processMap["get_next_notification"] = Processor.process_get_next_notification
     self._processMap["get_current_notificationEventId"] = Processor.process_get_current_notificationEventId
+    self._processMap["fire_notification_event"] = Processor.process_fire_notification_event
 
   def process(self, iprot, oprot):
     (name, type, seqid) = iprot.readMessageBegin()
@@ -7532,6 +7568,17 @@ def process_get_current_notificationEventId(self, seqid, iprot, oprot):
     oprot.writeMessageEnd()
     oprot.trans.flush()
 
+  def process_fire_notification_event(self, seqid, iprot, oprot):
+    args = fire_notification_event_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = fire_notification_event_result()
+    self._handler.fire_notification_event(args.rqst)
+    oprot.writeMessageBegin("fire_notification_event", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
 
 # HELPER FUNCTIONS AND STRUCTURES
 
@@ -8353,10 +8400,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype465, _size462) = iprot.readListBegin()
-          for _i466 in xrange(_size462):
-            _elem467 = iprot.readString();
-            self.success.append(_elem467)
+          (_etype458, _size455) = iprot.readListBegin()
+          for _i459 in xrange(_size455):
+            _elem460 = iprot.readString();
+            self.success.append(_elem460)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -8379,8 +8426,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter468 in self.success:
-        oprot.writeString(iter468)
+      for iter461 in self.success:
+        oprot.writeString(iter461)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -8475,10 +8522,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype472, _size469) = iprot.readListBegin()
-          for _i473 in xrange(_size469):
-            _elem474 = iprot.readString();
-            self.success.append(_elem474)
+          (_etype465, _size462) = iprot.readListBegin()
+          for _i466 in xrange(_size462):
+            _elem467 = iprot.readString();
+            self.success.append(_elem467)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -8501,8 +8548,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter475 in self.success:
-        oprot.writeString(iter475)
+      for iter468 in self.success:
+        oprot.writeString(iter468)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -9212,12 +9259,12 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.MAP:
           self.success = {}
-          (_ktype477, _vtype478, _size476 ) = iprot.readMapBegin() 
-          for _i480 in xrange(_size476):
-            _key481 = iprot.readString();
-            _val482 = Type()
-            _val482.read(iprot)
-            self.success[_key481] = _val482
+          (_ktype470, _vtype471, _size469 ) = iprot.readMapBegin() 
+          for _i473 in xrange(_size469):
+            _key474 = iprot.readString();
+            _val475 = Type()
+            _val475.read(iprot)
+            self.success[_key474] = _val475
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -9240,9 +9287,9 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.MAP, 0)
       oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
-      for kiter483,viter484 in self.success.items():
-        oprot.writeString(kiter483)
-        viter484.write(oprot)
+      for kiter476,viter477 in self.success.items():
+        oprot.writeString(kiter476)
+        viter477.write(oprot)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.o2 is not None:
@@ -9373,11 +9420,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype488, _size485) = iprot.readListBegin()
-          for _i489 in xrange(_size485):
-            _elem490 = FieldSchema()
-            _elem490.read(iprot)
-            self.success.append(_elem490)
+          (_etype481, _size478) = iprot.readListBegin()
+          for _i482 in xrange(_size478):
+            _elem483 = FieldSchema()
+            _elem483.read(iprot)
+            self.success.append(_elem483)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -9412,8 +9459,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter491 in self.success:
-        iter491.write(oprot)
+      for iter484 in self.success:
+        iter484.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -9565,11 +9612,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype495, _size492) = iprot.readListBegin()
-          for _i496 in xrange(_size492):
-            _elem497 = FieldSchema()
-            _elem497.read(iprot)
-            self.success.append(_elem497)
+          (_etype488, _size485) = iprot.readListBegin()
+          for _i489 in xrange(_size485):
+            _elem490 = FieldSchema()
+            _elem490.read(iprot)
+            self.success.append(_elem490)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -9604,8 +9651,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter498 in self.success:
-        iter498.write(oprot)
+      for iter491 in self.success:
+        iter491.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -9744,11 +9791,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype502, _size499) = iprot.readListBegin()
-          for _i503 in xrange(_size499):
-            _elem504 = FieldSchema()
-            _elem504.read(iprot)
-            self.success.append(_elem504)
+          (_etype495, _size492) = iprot.readListBegin()
+          for _i496 in xrange(_size492):
+            _elem497 = FieldSchema()
+            _elem497.read(iprot)
+            self.success.append(_elem497)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -9783,8 +9830,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter505 in self.success:
-        iter505.write(oprot)
+      for iter498 in self.success:
+        iter498.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -9936,11 +9983,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype509, _size506) = iprot.readListBegin()
-          for _i510 in xrange(_size506):
-            _elem511 = FieldSchema()
-            _elem511.read(iprot)
-            self.success.append(_elem511)
+          (_etype502, _size499) = iprot.readListBegin()
+          for _i503 in xrange(_size499):
+            _elem504 = FieldSchema()
+            _elem504.read(iprot)
+            self.success.append(_elem504)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -9975,8 +10022,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter512 in self.success:
-        iter512.write(oprot)
+      for iter505 in self.success:
+        iter505.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -10773,10 +10820,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype516, _size513) = iprot.readListBegin()
-          for _i517 in xrange(_size513):
-            _elem518 = iprot.readString();
-            self.success.append(_elem518)
+          (_etype509, _size506) = iprot.readListBegin()
+          for _i510 in xrange(_size506):
+            _elem511 = iprot.readString();
+            self.success.append(_elem511)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10799,8 +10846,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter519 in self.success:
-        oprot.writeString(iter519)
+      for iter512 in self.success:
+        oprot.writeString(iter512)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -10867,10 +10914,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.tbl_types = []
-          (_etype523, _size520) = iprot.readListBegin()
-          for _i524 in xrange(_size520):
-            _elem525 = iprot.readString();
-            self.tbl_types.append(_elem525)
+          (_etype516, _size513) = iprot.readListBegin()
+          for _i517 in xrange(_size513):
+            _elem518 = iprot.readString();
+            self.tbl_types.append(_elem518)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10895,8 +10942,8 @@ def write(self, oprot):
     if self.tbl_types is not None:
       oprot.writeFieldBegin('tbl_types', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.tbl_types))
-      for iter526 in self.tbl_types:
-        oprot.writeString(iter526)
+      for iter519 in self.tbl_types:
+        oprot.writeString(iter519)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -10945,11 +10992,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype530, _size527) = iprot.readListBegin()
-          for _i531 in xrange(_size527):
-            _elem532 = TableMeta()
-            _elem532.read(iprot)
-            self.success.append(_elem532)
+          (_etype523, _size520) = iprot.readListBegin()
+          for _i524 in xrange(_size520):
+            _elem525 = TableMeta()
+            _elem525.read(iprot)
+            self.success.append(_elem525)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10972,8 +11019,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter533 in self.success:
-        iter533.write(oprot)
+      for iter526 in self.success:
+        iter526.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -11086,10 +11133,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype537, _size534) = iprot.readListBegin()
-          for _i538 in xrange(_size534):
-            _elem539 = iprot.readString();
-            self.success.append(_elem539)
+          (_etype530, _size527) = iprot.readListBegin()
+          for _i531 in xrange(_size527):
+            _elem532 = iprot.readString();
+            self.success.append(_elem532)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -11112,8 +11159,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter540 in self.success:
-        oprot.writeString(iter540)
+      for iter533 in self.success:
+        oprot.writeString(iter533)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -11330,10 +11377,10 @@ def read(self, iprot):
       elif fid == 2:
         if ftype == TType.LIST:
           self.tbl_names = []
-          (_etype544, _size541) = iprot.readListBegin()
-          for _i545 in xrange(_size541):
-            _elem546 = iprot.readString();
-            self.tbl_names.append(_elem546)
+          (_etype537, _size534) = iprot.readListBegin()
+          for _i538 in xrange(_size534):
+            _elem539 = iprot.readString();
+            self.tbl_names.append(_elem539)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -11354,8 +11401,8 @@ def write(self, oprot):
     if self.tbl_names is not None:
       oprot.writeFieldBegin('tbl_names', TType.LIST, 2)
       oprot.writeListBegin(TType.STRING, len(self.tbl_names))
-      for iter547 in self.tbl_names:
-        oprot.writeString(iter547)
+      for iter540 in self.tbl_names:
+        oprot.writeString(iter540)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -11410,11 +11457,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype551, _size548) = iprot.readListBegin()
-          for _i552 in xrange(_size548):
-            _elem553 = Table()
-            _elem553.read(iprot)
-            self.success.append(_elem553)
+          (_etype544, _size541) = iprot.readListBegin()
+          for _i545 in xrange(_size541):
+            _elem546 = Table()
+            _elem546.read(iprot)
+            self.success.append(_elem546)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -11449,8 +11496,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter554 in self.success:
-        iter554.write(oprot)
+      for iter547 in self.success:
+        iter547.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -11601,10 +11648,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype558, _size555) = iprot.readListBegin()
-          for _i559 in xrange(_size555):
-            _elem560 = iprot.readString();
-            self.success.append(_elem560)
+          (_etype551, _size548) = iprot.readListBegin()
+          for _i552 in xrange(_size548):
+            _elem553 = iprot.readString();
+            self.success.append(_elem553)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -11639,8 +11686,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter561 in self.success:
-        oprot.writeString(iter561)
+      for iter554 in self.success:
+        oprot.writeString(iter554)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -12534,11 +12581,11 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.LIST:
           self.new_parts = []
-          (_etype565, _size562) = iprot.readListBegin()
-          for _i566 in xrange(_size562):
-            _elem567 = Partition()
-            _elem567.read(iprot)
-            self.new_parts.append(_elem567)
+          (_etype558, _size555) = iprot.readListBegin()
+          for _i559 in xrange(_size555):
+            _elem560 = Partition()
+            _elem560.read(iprot)
+            self.new_parts.append(_elem560)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -12555,8 +12602,8 @@ def write(self, oprot):
     if self.new_parts is not None:
       oprot.writeFieldBegin('new_parts', TType.LIST, 1)
       oprot.writeListBegin(TType.STRUCT, len(self.new_parts))
-      for iter568 in self.new_parts:
-        iter568.write(oprot)
+      for iter561 in self.new_parts:
+        iter561.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -12701,11 +12748,11 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.LIST:
           self.new_parts = []
-          (_etype572, _size569) = iprot.readListBegin()
-          for _i573 in xrange(_size569):
-            _elem574 = PartitionSpec()
-            _elem574.read(iprot)
-            self.new_parts.append(_elem574)
+          (_etype565, _size562) = iprot.readListBegin()
+          for _i566 in xrange(_size562):
+            _elem567 = PartitionSpec()
+            _elem567.read(iprot)
+            self.new_parts.append(_elem567)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -12722,8 +12769,8 @@ def write(self, oprot):
     if self.new_parts is not None:
       oprot.writeFieldBegin('new_parts', TType.LIST, 1)
       oprot.writeListBegin(TType.STRUCT, len(self.new_parts))
-      for iter575 in self.new_parts:
-        iter575.write(oprot)
+      for iter568 in self.new_parts:
+        iter568.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -12884,10 +12931,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype579, _size576) = iprot.readListBegin()
-          for _i580 in xrange(_size576):
-            _elem581 = iprot.readString();
-            self.part_vals.append(_elem581)
+          (_etype572, _size569) = iprot.readListBegin()
+          for _i573 in xrange(_size569):
+            _elem574 = iprot.readString();
+            self.part_vals.append(_elem574)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -12912,8 +12959,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter582 in self.part_vals:
-        oprot.writeString(iter582)
+      for iter575 in self.part_vals:
+        oprot.writeString(iter575)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -13238,10 +13285,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype586, _size583) = iprot.readListBegin()
-          for _i587 in xrange(_size583):
-            _elem588 = iprot.readString();
-            self.part_vals.append(_elem588)
+          (_etype579, _size576) = iprot.readListBegin()
+          for _i580 in xrange(_size576):
+            _elem581 = iprot.readString();
+            self.part_vals.append(_elem581)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -13272,8 +13319,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter589 in self.part_vals:
-        oprot.writeString(iter589)
+      for iter582 in self.part_vals:
+        oprot.writeString(iter582)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.environment_context is not None:
@@ -13821,10 +13868,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype593, _size590) = iprot.readListBegin()
-          for _i594 in xrange(_size590):
-            _elem595 = iprot.readString();
-            self.part_vals.append(_elem595)
+          (_etype586, _size583) = iprot.readListBegin()
+          for _i587 in xrange(_size583):
+            _elem588 = iprot.readString();
+            self.part_vals.append(_elem588)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -13854,8 +13901,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter596 in self.part_vals:
-        oprot.writeString(iter596)
+      for iter589 in self.part_vals:
+        oprot.writeString(iter589)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.deleteData is not None:
@@ -14013,10 +14060,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype600, _size597) = iprot.readListBegin()
-          for _i601 in xrange(_size597):
-            _elem602 = iprot.readString();
-            self.part_vals.append(_elem602)
+          (_etype593, _size590) = iprot.readListBegin()
+          for _i594 in xrange(_size590):
+            _elem595 = iprot.readString();
+            self.part_vals.append(_elem595)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -14052,8 +14099,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter603 in self.part_vals:
-        oprot.writeString(iter603)
+      for iter596 in self.part_vals:
+        oprot.writeString(iter596)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.deleteData is not None:
@@ -14731,10 +14778,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype607, _size604) = iprot.readListBegin()
-          for _i608 in xrange(_size604):
-            _elem609 = iprot.readString();
-            self.part_vals.append(_elem609)
+          (_etype600, _size597) = iprot.readListBegin()
+          for _i601 in xrange(_size597):
+            _elem602 = iprot.readString();
+            self.part_vals.append(_elem602)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -14759,8 +14806,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter610 in self.part_vals:
-        oprot.writeString(iter610)
+      for iter603 in self.part_vals:
+        oprot.writeString(iter603)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -14905,11 +14952,11 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.MAP:
           self.partitionSpecs = {}
-          (_ktype612, _vtype613, _size611 ) = iprot.readMapBegin() 
-          for _i615 in xrange(_size611):
-            _key616 = iprot.readString();
-            _val617 = iprot.readString();
-            self.partitionSpecs[_key616] = _val617
+          (_ktype605, _vtype606, _size604 ) = iprot.readMapBegin() 
+          for _i608 in xrange(_size604):
+            _key609 = iprot.readString();
+            _val610 = iprot.readString();
+            self.partitionSpecs[_key609] = _val610
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -14946,9 +14993,9 @@ def write(self, oprot):
     if self.partitionSpecs is not None:
       oprot.writeFieldBegin('partitionSpecs', TType.MAP, 1)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.partitionSpecs))
-      for kiter618,viter619 in self.partitionSpecs.items():
-        oprot.writeString(kiter618)
-        oprot.writeString(viter619)
+      for kiter611,viter612 in self.partitionSpecs.items():
+        oprot.writeString(kiter611)
+        oprot.writeString(viter612)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.source_db is not None:
@@ -15145,10 +15192,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype623, _size620) = iprot.readListBegin()
-          for _i624 in xrange(_size620):
-            _elem625 = iprot.readString();
-            self.part_vals.append(_elem625)
+          (_etype616, _size613) = iprot.readListBegin()
+          for _i617 in xrange(_size613):
+            _elem618 = iprot.readString();
+            self.part_vals.append(_elem618)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15160,10 +15207,10 @@ def read(self, iprot):
       elif fid == 5:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype629, _size626) = iprot.readListBegin()
-          for _i630 in xrange(_size626):
-            _elem631 = iprot.readString();
-            self.group_names.append(_elem631)
+          (_etype622, _size619) = iprot.readListBegin()
+          for _i623 in xrange(_size619):
+            _elem624 = iprot.readString();
+            self.group_names.append(_elem624)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15188,8 +15235,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter632 in self.part_vals:
-        oprot.writeString(iter632)
+      for iter625 in self.part_vals:
+        oprot.writeString(iter625)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.user_name is not None:
@@ -15199,8 +15246,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 5)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter633 in self.group_names:
-        oprot.writeString(iter633)
+      for iter626 in self.group_names:
+        oprot.writeString(iter626)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -15592,11 +15639,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype637, _size634) = iprot.readListBegin()
-          for _i638 in xrange(_size634):
-            _elem639 = Partition()
-            _elem639.read(iprot)
-            self.success.append(_elem639)
+          (_etype630, _size627) = iprot.readListBegin()
+          for _i631 in xrange(_size627):
+            _elem632 = Partition()
+            _elem632.read(iprot)
+            self.success.append(_elem632)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15625,8 +15672,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter640 in self.success:
-        iter640.write(oprot)
+      for iter633 in self.success:
+        iter633.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -15713,10 +15760,10 @@ def read(self, iprot):
       elif fid == 5:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype644, _size641) = iprot.readListBegin()
-          for _i645 in xrange(_size641):
-            _elem646 = iprot.readString();
-            self.group_names.append(_elem646)
+          (_etype637, _size634) = iprot.readListBegin()
+          for _i638 in xrange(_size634):
+            _elem639 = iprot.readString();
+            self.group_names.append(_elem639)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15749,8 +15796,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 5)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter647 in self.group_names:
-        oprot.writeString(iter647)
+      for iter640 in self.group_names:
+        oprot.writeString(iter640)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -15802,11 +15849,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype651, _size648) = iprot.readListBegin()
-          for _i652 in xrange(_size648):
-            _elem653 = Partition()
-            _elem653.read(iprot)
-            self.success.append(_elem653)
+          (_etype644, _size641) = iprot.readListBegin()
+          for _i645 in xrange(_size641):
+            _elem646 = Partition()
+            _elem646.read(iprot)
+            self.success.append(_elem646)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15835,8 +15882,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter654 in self.success:
-        iter654.write(oprot)
+      for iter647 in self.success:
+        iter647.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -15980,11 +16027,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype658, _size655) = iprot.readListBegin()
-          for _i659 in xrange(_size655):
-            _elem660 = PartitionSpec()
-            _elem660.read(iprot)
-            self.success.append(_elem660)
+          (_etype651, _size648) = iprot.readListBegin()
+          for _i652 in xrange(_size648):
+            _elem653 = PartitionSpec()
+            _elem653.read(iprot)
+            self.success.append(_elem653)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16013,8 +16060,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter661 in self.success:
-        iter661.write(oprot)
+      for iter654 in self.success:
+        iter654.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16155,10 +16202,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype665, _size662) = iprot.readListBegin()
-          for _i666 in xrange(_size662):
-            _elem667 = iprot.readString();
-            self.success.append(_elem667)
+          (_etype658, _size655) = iprot.readListBegin()
+          for _i659 in xrange(_size655):
+            _elem660 = iprot.readString();
+            self.success.append(_elem660)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16181,8 +16228,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter668 in self.success:
-        oprot.writeString(iter668)
+      for iter661 in self.success:
+        oprot.writeString(iter661)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o2 is not None:
@@ -16252,10 +16299,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype672, _size669) = iprot.readListBegin()
-          for _i673 in xrange(_size669):
-            _elem674 = iprot.readString();
-            self.part_vals.append(_elem674)
+          (_etype665, _size662) = iprot.readListBegin()
+          for _i666 in xrange(_size662):
+            _elem667 = iprot.readString();
+            self.part_vals.append(_elem667)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16285,8 +16332,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter675 in self.part_vals:
-        oprot.writeString(iter675)
+      for iter668 in self.part_vals:
+        oprot.writeString(iter668)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.max_parts is not None:
@@ -16342,11 +16389,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype679, _size676) = iprot.readListBegin()
-          for _i680 in xrange(_size676):
-            _elem681 = Partition()
-            _elem681.read(iprot)
-            self.success.append(_elem681)
+          (_etype672, _size669) = iprot.readListBegin()
+          for _i673 in xrange(_size669):
+            _elem674 = Partition()
+            _elem674.read(iprot)
+            self.success.append(_elem674)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16375,8 +16422,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter682 in self.success:
-        iter682.write(oprot)
+      for iter675 in self.success:
+        iter675.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16456,10 +16503,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype686, _size683) = iprot.readListBegin()
-          for _i687 in xrange(_size683):
-            _elem688 = iprot.readString();
-            self.part_vals.append(_elem688)
+          (_etype679, _size676) = iprot.readListBegin()
+          for _i680 in xrange(_size676):
+            _elem681 = iprot.readString();
+            self.part_vals.append(_elem681)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16476,10 +16523,10 @@ def read(self, iprot):
       elif fid == 6:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype692, _size689) = iprot.readListBegin()
-          for _i693 in xrange(_size689):
-            _elem694 = iprot.readString();
-            self.group_names.append(_elem694)
+          (_etype685, _size682) = iprot.readListBegin()
+          for _i686 in xrange(_size682):
+            _elem687 = iprot.readString();
+            self.group_names.append(_elem687)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16504,8 +16551,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter695 in self.part_vals:
-        oprot.writeString(iter695)
+      for iter688 in self.part_vals:
+        oprot.writeString(iter688)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.max_parts is not None:
@@ -16519,8 +16566,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 6)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter696 in self.group_names:
-        oprot.writeString(iter696)
+      for iter689 in self.group_names:
+        oprot.writeString(iter689)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -16572,11 +16619,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype700, _size697) = iprot.readListBegin()
-          for _i701 in xrange(_size697):
-            _elem702 = Partition()
-            _elem702.read(iprot)
-            self.success.append(_elem702)
+          (_etype693, _size690) = iprot.readListBegin()
+          for _i694 in xrange(_size690):
+            _elem695 = Partition()
+            _elem695.read(iprot)
+            self.success.append(_elem695)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16605,8 +16652,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter703 in self.success:
-        iter703.write(oprot)
+      for iter696 in self.success:
+        iter696.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16680,10 +16727,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype707, _size704) = iprot.readListBegin()
-          for _i708 in xrange(_size704):
-            _elem709 = iprot.readString();
-            self.part_vals.append(_elem709)
+          (_etype700, _size697) = iprot.readListBegin()
+          for _i701 in xrange(_size697):
+            _elem702 = iprot.readString();
+            self.part_vals.append(_elem702)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16713,8 +16760,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter710 in self.part_vals:
-        oprot.writeString(iter710)
+      for iter703 in self.part_vals:
+        oprot.writeString(iter703)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.max_parts is not None:
@@ -16770,10 +16817,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype714, _size711) = iprot.readListBegin()
-          for _i715 in xrange(_size711):
-            _elem716 = iprot.readString();
-            self.success.append(_elem716)
+          (_etype707, _size704) = iprot.readListBegin()
+          for _i708 in xrange(_size704):
+            _elem709 = iprot.readString();
+            self.success.append(_elem709)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16802,8 +16849,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter717 in self.success:
-        oprot.writeString(iter717)
+      for iter710 in self.success:
+        oprot.writeString(iter710)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16959,11 +17006,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype721, _size718) = iprot.readListBegin()
-          for _i722 in xrange(_size718):
-            _elem723 = Partition()
-            _elem723.read(iprot)
-            self.success.append(_elem723)
+          (_etype714, _size711) = iprot.readListBegin()
+          for _i715 in xrange(_size711):
+            _elem716 = Partition()
+            _elem716.read(iprot)
+            self.success.append(_elem716)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16992,8 +17039,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter724 in self.success:
-        iter724.write(oprot)
+      for iter717 in self.success:
+        iter717.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -17149,11 +17196,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype728, _size725) = iprot.readListBegin()
-          for _i729 in xrange(_size725):
-            _elem730 = PartitionSpec()
-            _elem730.read(iprot)
-            self.success.append(_elem730)
+          (_etype721, _size718) = iprot.readListBegin()
+          for _i722 in xrange(_size718):
+            _elem723 = PartitionSpec()
+            _elem723.read(iprot)
+            self.success.append(_elem723)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -17182,8 +17229,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter731 in self.success:
-        iter731.write(oprot)
+      for iter724 in self.success:
+        iter724.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -17401,10 +17448,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.names = []
-          (_etype735, _size732) = iprot.readListBegin()
-          for _i736 in xrange(_size732):
-            _elem737 = iprot.readString();
-            self.names.append(_elem737)
+          (_etype728, _size725) = iprot.readListBegin()
+          for _i729 in xrange(_size725):
+            _elem730 = iprot.readString();
+            self.names.append(_elem730)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -17429,8 +17476,8 @@ def write(self, oprot):
     if self.names is not None:
       oprot.writeFieldBegin('names', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.names))
-      for iter738 in self.names:
-        oprot.writeString(iter738)
+      for iter731 in self.names:
+        oprot.writeString(iter731)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -17482,11 +17529,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype742, _size739) = iprot.readListBegin()
-          for _i743 in xrange(_size739):
-            _elem744 = Partition()
-            _elem744.read(iprot)
-            self.success.append(_elem744)
+          (_etype735, _size732) = iprot.readListBegin()
+          for _i736 in xrange(_size732):
+            _elem737 = Partition()
+            _elem737.read(iprot)
+            self.success.append(_elem737)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -17515,8 +17562,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter745 in self.success:
-        iter745.write(oprot)
+      for iter738 in self.success:
+        iter738.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -17746,11 +17793,11 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.new_parts = []
-          (_etype749, _size746) = iprot.readListBegin()
-          for _i750 in xrange(_size746):
-            _elem751 = Partition()
-            _elem751.read(iprot)
-            self.new_parts.append(_elem751)
+          (_etype742, _size739) = iprot.readListBegin()
+          for _i743 in xrange(_size739):
+            _elem744 = Partition()
+            _elem744.read(iprot)
+            self.new_parts.append(_elem744)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -17775,8 +17822,8 @@ def write(self, oprot):
     if self.new_parts is not None:
       oprot.writeFieldBegin('new_parts', TType.LIST, 3)
       oprot.writeListBegin(TType.STRUCT, len(self.new_parts))
-      for iter752 in self.new_parts:
-        iter752.write(oprot)
+      for iter745 in self.new_parts:
+        iter745.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -18088,10 +18135,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype756, _size753) = iprot.readListBegin()
-          for _i757 in xrange(_size753):
-            _elem758 = iprot.readString();
-            self.part_vals.append(_elem758)
+          (_etype749, _size746) = iprot.readListBegin()
+          for _i750 in xrange(_size746):
+            _elem751 = iprot.readString();
+            self.part_vals.append(_elem751)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -18122,8 +18169,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter759 in self.part_vals:
-        oprot.writeString(iter759)
+      for iter752 in self.part_vals:
+        oprot.writeString(iter752)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.new_part is not None:
@@ -18251,10 +18298,10 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype763, _size760) = iprot.readListBegin()
-          for _i764 in xrange(_size760):
-            _elem765 = iprot.readString();
-            self.part_vals.append(_elem765)
+          (_etype756, _size753) = iprot.readListBegin()
+          for _i757 in xrange(_size753):
+            _elem758 = iprot.readString();
+            self.part_vals.append(_elem758)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -18276,8 +18323,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 1)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter766 in self.part_vals:
-        oprot.writeString(iter766)
+      for iter759 in self.part_vals:
+        oprot.writeString(iter759)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.throw_exception is not None:
@@ -18606,10 +18653,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype770, _size767) = iprot.readListBegin()
-          for _i771 in xrange(_size767):
-            _elem772 = iprot.readString();
-            self.success.append(_elem772)
+          (_etype763, _size760) = iprot.readListBegin()
+          for _i764 in xrange(_size760):
+            _elem765 = iprot.readString();
+            self.success.append(_elem765)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -18632,8 +18679,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter773 in self.success:
-        oprot.writeString(iter773)
+      for iter766 in self.success:
+        oprot.writeString(iter766)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -18746,11 +18793,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.MAP:
           self.success = {}
-          (_ktype775, _vtype776, _size774 ) = iprot.readMapBegin() 
-          for _i778 in xrange(_size774):
-            _key779 = iprot.readString();
-            _val780 = iprot.readString();
-            self.success[_key779] = _val780
+          (_ktype768, _vtype769, _size767 ) = iprot.readMapBegin() 
+          for _i771 in xrange(_size767):
+            _key772 = iprot.readString();
+            _val773 = iprot.readString();
+            self.success[_key772] = _val773
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -18773,9 +18820,9 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.MAP, 0)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
-      for kiter781,viter782 in self.success.items():
-        oprot.writeString(kiter781)
-        oprot.writeString(viter782)
+      for kiter774,viter775 in self.success.items():
+        oprot.writeString(kiter774)
+        oprot.writeString(viter775)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -18845,11 +18892,11 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.MAP:
           self.part_vals = {}
-          (_ktype784, _vtype785, _size783 ) = iprot.readMapBegin() 
-          for _i787 in xrange(_size783):
-            _key788 = iprot.readString();
-            _val789 = iprot.readString();
-            self.part_vals[_key788] = _val789
+          (_ktype777, _vtype778, _size776 ) = iprot.readMapBegin() 
+          for _i780 in xrange(_size776):
+            _key781 = iprot.readString();
+            _val782 = iprot.readString();
+            self.part_vals[_key781] = _val782
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -18879,9 +18926,9 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.MAP, 3)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.part_vals))
-      for kiter790,viter791 in self.part_vals.items():
-        oprot.writeString(kiter790)
-        oprot.writeString(viter791)
+      for kiter783,viter784 in self.part_vals.items():
+        oprot.writeString(kiter783)
+        oprot.writeString(viter784)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.eventType is not None:
@@ -19077,11 +19124,11 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.MAP:
           self.part_vals = {}
-          (_ktype793, _vtype794, _size792 ) = iprot.readMapBegin() 
-          for _i796 in xrange(_size792):
-            _key797 = iprot.readString();
-            _val798 = iprot.readString();
-            self.part_vals[_key797] = _val798
+          (_ktype786, _vtype787, _size785 ) = iprot.readMapBegin() 
+          for _i789 in xrange(_size785):
+            _key790 = iprot.readString();
+            _val791 = iprot.readString();
+            self.part_vals[_key790] = _val791
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -19111,9 +19158,9 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.MAP, 3)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.part_vals))
-      for kiter799,viter800 in self.part_vals.items():
-        oprot.writeString(kiter799)
-        oprot.writeString(viter800)
+      for kiter792,viter793 in self.part_vals.items():
+        oprot.writeString(kiter792)
+        oprot.writeString(viter793)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.eventType is not None:
@@ -20085,11 +20132,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype804, _size801) = iprot.readListBegin()
-          for _i805 in xrange(_size801):
-            _elem806 = Index()
-            _elem806.read(iprot)
-            self.success.append(_elem806)
+          (_etype797, _size794) = iprot.readListBegin()
+          for _i798 in xrange(_size794):
+            _elem799 = Index()
+            _elem799.read(iprot)
+            self.success.append(_elem799)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -20118,8 +20165,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter807 in self.success:
-        iter807.write(oprot)
+      for iter800 in self.success:
+        iter800.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -20260,10 +20307,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype811, _size808) = iprot.readListBegin()
-          for _i812 in xrange(_size808):
-            _elem813 = iprot.readString();
-            self.success.append(_elem813)
+          (_etype804, _size801) = iprot.readListBegin()
+          for _i805 in xrange(_size801):
+            _elem806 = iprot.readString();
+            self.success.append(_elem806)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -20286,8 +20333,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter814 in self.success:
-        oprot.writeString(iter814)
+      for iter807 in self.success:
+        oprot.writeString(iter807)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o2 is not None:
@@ -22641,10 +22688,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype818, _size815) = iprot.readListBegin()
-          for _i819 in xrange(_size815):
-            _elem820 = iprot.readString();
-            self.success.append(_elem820)
+          (_etype811, _size808) = iprot.readListBegin()
+          for _i812 in xrange(_size808):
+            _elem813 = iprot.readString();
+            self.success.append(_elem813)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -22667,8 +22714,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter821 in self.success:
-        oprot.writeString(iter821)
+      for iter814 in self.success:
+        oprot.writeString(iter814)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -23301,10 +23348,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype825, _size822) = iprot.readListBegin()
-          for _i826 in xrange(_size822):
-            _elem827 = iprot.readString();
-            self.success.append(_elem827)
+          (_etype818, _size815) = iprot.readListBegin()
+          for _i819 in xrange(_size815):
+            _elem820 = iprot.readString();
+            self.success.append(_elem820)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -23327,8 +23374,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter828 in self.success:
-        oprot.writeString(iter828)
+      for iter821 in self.success:
+        oprot.writeString(iter821)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -23801,11 +23848,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype832, _size829) = iprot.readListBegin()
-          for _i833 in xrange(_size829):
-            _elem834 = Role()
-            _elem834.read(iprot)
-            self.success.append(_elem834)
+          (_etype825, _size822) = iprot.readListBegin()
+          for _i826 in xrange(_size822):
+            _elem827 = Role()
+            _elem827.read(iprot)
+            self.success.append(_elem827)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -23828,8 +23875,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter835 in self.success:
-        iter835.write(oprot)
+      for iter828 in self.success:
+        iter828.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -24299,10 +24346,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype839, _size836) = iprot.readListBegin()
-          for _i840 in xrange(_size836):
-            _elem841 = iprot.readString();
-            self.group_names.append(_elem841)
+          (_etype832, _size829) = iprot.readListBegin()
+          for _i833 in xrange(_size829):
+            _elem834 = iprot.readString();
+            self.group_names.append(_elem834)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -24327,8 +24374,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter842 in self.group_names:
-        oprot.writeString(iter842)
+      for iter835 in self.group_names:
+        oprot.writeString(iter835)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -24535,11 +24582,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype846, _size843) = iprot.readListBegin()
-          for _i847 in xrange(_size843):
-            _elem848 = HiveObjectPrivilege()
-            _elem848.read(iprot)
-            self.success.append(_elem848)
+          (_etype839, _size836) = iprot.readListBegin()
+          for _i840 in xrange(_size836):
+            _elem841 = HiveObjectPrivilege()
+            _elem841.read(iprot)
+            self.success.append(_elem841)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -24562,8 +24609,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter849 in self.success:
-        iter849.write(oprot)
+      for iter842 in self.success:
+        iter842.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -25022,10 +25069,10 @@ def read(self, iprot):
       elif fid == 2:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype853, _size850) = iprot.readListBegin()
-          for _i854 in xrange(_size850):
-            _elem855 = iprot.readString();
-            self.group_names.append(_elem855)
+          (_etype846, _size843) = iprot.readListBegin()
+          for _i847 in xrange(_size843):
+            _elem848 = iprot.readString();
+            self.group_names.append(_elem848)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -25046,8 +25093,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 2)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter856 in self.group_names:
-        oprot.writeString(iter856)
+      for iter849 in self.group_names:
+        oprot.writeString(iter849)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -25096,10 +25143,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype860, _size857) = iprot.readListBegin()
-          for _i861 in xrange(_size857):
-            _elem862 = iprot.readString();
-            self.success.append(_elem862)
+          (_etype853, _size850) = iprot.readListBegin()
+          for _i854 in xrange(_size850):
+            _elem855 = iprot.readString();
+            self.success.append(_elem855)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -25122,8 +25169,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter863 in self.success:
-        oprot.writeString(iter863)
+      for iter856 in self.success:
+        oprot.writeString(iter856)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -27405,3 +27452,106 @@ def __eq__(self, other):
 
   def __ne__(self, other):
     return not (self == other)
+
+class fire_notification_event_args:
+  """
+  Attributes:
+   - rqst
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.STRUCT, 'rqst', (FireEventRequest, FireEventRequest.thrift_spec), None, ), # 1
+  )
+
+  def __init__(self, rqst=None,):
+    self.rqst = rqst
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.STRUCT:
+          self.rqst = FireEventRequest()
+          self.rqst.read(iprot)
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('fire_notification_event_args')
+    if self.rqst is not None:
+      oprot.writeFieldBegin('rqst', TType.STRUCT, 1)
+      self.rqst.write(oprot)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class fire_notification_event_result:
+
+  thrift_spec = (
+  )
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('fire_notification_event_result')
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ttypes.py b/metastore/src/gen/thrift/gen-py/hive_metastore/ttypes.py
index 7b045c8..43756e7 100644
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ttypes.py
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ttypes.py
@@ -168,6 +168,23 @@ class GrantRevokeType:
     "REVOKE": 2,
   }
 
+class EventRequestType:
+  INSERT = 1
+  UPDATE = 2
+  DELETE = 3
+
+  _VALUES_TO_NAMES = {
+    1: "INSERT",
+    2: "UPDATE",
+    3: "DELETE",
+  }
+
+  _NAMES_TO_VALUES = {
+    "INSERT": 1,
+    "UPDATE": 2,
+    "DELETE": 3,
+  }
+
 class FunctionType:
   JAVA = 1
 
@@ -8478,19 +8495,19 @@ def __eq__(self, other):
   def __ne__(self, other):
     return not (self == other)
 
-class InsertEventRequestData:
+class GetAllFunctionsResponse:
   """
   Attributes:
-   - filesAdded
+   - functions
   """
 
   thrift_spec = (
     None, # 0
-    (1, TType.LIST, 'filesAdded', (TType.STRING,None), None, ), # 1
+    (1, TType.LIST, 'functions', (TType.STRUCT,(Function, Function.thrift_spec)), None, ), # 1
   )
 
-  def __init__(self, filesAdded=None,):
-    self.filesAdded = filesAdded
+  def __init__(self, functions=None,):
+    self.functions = functions
 
   def read(self, iprot):
     if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
@@ -8503,11 +8520,12 @@ def read(self, iprot):
         break
       if fid == 1:
         if ftype == TType.LIST:
-          self.filesAdded = []
+          self.functions = []
           (_etype444, _size441) = iprot.readListBegin()
           for _i445 in xrange(_size441):
-            _elem446 = iprot.readString();
-            self.filesAdded.append(_elem446)
+            _elem446 = Function()
+            _elem446.read(iprot)
+            self.functions.append(_elem446)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -8520,20 +8538,18 @@ def write(self, oprot):
     if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
       oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
       return
-    oprot.writeStructBegin('InsertEventRequestData')
-    if self.filesAdded is not None:
-      oprot.writeFieldBegin('filesAdded', TType.LIST, 1)
-      oprot.writeListBegin(TType.STRING, len(self.filesAdded))
-      for iter447 in self.filesAdded:
-        oprot.writeString(iter447)
+    oprot.writeStructBegin('GetAllFunctionsResponse')
+    if self.functions is not None:
+      oprot.writeFieldBegin('functions', TType.LIST, 1)
+      oprot.writeListBegin(TType.STRUCT, len(self.functions))
+      for iter447 in self.functions:
+        iter447.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
     oprot.writeStructEnd()
 
   def validate(self):
-    if self.filesAdded is None:
-      raise TProtocol.TProtocolException(message='Required field filesAdded is unset!')
     return
 
 
@@ -8548,19 +8564,28 @@ def __eq__(self, other):
   def __ne__(self, other):
     return not (self == other)
 
-class FireEventRequestData:
+class TableMeta:
   """
   Attributes:
-   - insertData
+   - dbName
+   - tableName
+   - tableType
+   - comments
   """
 
   thrift_spec = (
     None, # 0
-    (1, TType.STRUCT, 'insertData', (InsertEventRequestData, InsertEventRequestData.thrift_spec), None, ), # 1
+    (1, TType.STRING, 'dbName', None, None, ), # 1
+    (2, TType.STRING, 'tableName', None, None, ), # 2
+    (3, TType.STRING, 'tableType', None, None, ), # 3
+    (4, TType.STRING, 'comments', None, None, ), # 4
   )
 
-  def __init__(self, insertData=None,):
-    self.insertData = insertData
+  def __init__(self, dbName=None, tableName=None, tableType=None, comments=None,):
+    self.dbName = dbName
+    self.tableName = tableName
+    self.tableType = tableType
+    self.comments = comments
 
   def read(self, iprot):
     if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
@@ -8572,9 +8597,23 @@ def read(self, iprot):
       if ftype == TType.STOP:
         break
       if fid == 1:
-        if ftype == TType.STRUCT:
-          self.insertData = InsertEventRequestData()
-          self.insertData.read(iprot)
+        if ftype == TType.STRING:
+          self.dbName = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      elif fid == 2:
+        if ftype == TType.STRING:
+          self.tableName = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      elif fid == 3:
+        if ftype == TType.STRING:
+          self.tableType = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      elif fid == 4:
+        if ftype == TType.STRING:
+          self.comments = iprot.readString();
         else:
           iprot.skip(ftype)
       else:
@@ -8586,15 +8625,33 @@ def write(self, oprot):
     if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
       oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
       return
-    oprot.writeStructBegin('FireEventRequestData')
-    if self.insertData is not None:
-      oprot.writeFieldBegin('insertData', TType.STRUCT, 1)
-      self.insertData.write(oprot)
+    oprot.writeStructBegin('TableMeta')
+    if self.dbName is not None:
+      oprot.writeFieldBegin('dbName', TType.STRING, 1)
+      oprot.writeString(self.dbName)
+      oprot.writeFieldEnd()
+    if self.tableName is not None:
+      oprot.writeFieldBegin('tableName', TType.STRING, 2)
+      oprot.writeString(self.tableName)
+      oprot.writeFieldEnd()
+    if self.tableType is not None:
+      oprot.writeFieldBegin('tableType', TType.STRING, 3)
+      oprot.writeString(self.tableType)
+      oprot.writeFieldEnd()
+    if self.comments is not None:
+      oprot.writeFieldBegin('comments', TType.STRING, 4)
+      oprot.writeString(self.comments)
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
     oprot.writeStructEnd()
 
   def validate(self):
+    if self.dbName is None:
+      raise TProtocol.TProtocolException(message='Required field dbName is unset!')
+    if self.tableName is None:
+      raise TProtocol.TProtocolException(message='Required field tableName is unset!')
+    if self.tableType is None:
+      raise TProtocol.TProtocolException(message='Required field tableType is unset!')
     return
 
 
@@ -8612,26 +8669,26 @@ def __ne__(self, other):
 class FireEventRequest:
   """
   Attributes:
-   - successful
-   - data
+   - eventType
    - dbName
+   - successful
    - tableName
    - partitionVals
   """
 
   thrift_spec = (
     None, # 0
-    (1, TType.BOOL, 'successful', None, None, ), # 1
-    (2, TType.STRUCT, 'data', (FireEventRequestData, FireEventRequestData.thrift_spec), None, ), # 2
-    (3, TType.STRING, 'dbName', None, None, ), # 3
+    (1, TType.I32, 'eventType', None, None, ), # 1
+    (2, TType.STRING, 'dbName', None, None, ), # 2
+    (3, TType.BOOL, 'successful', None, None, ), # 3
     (4, TType.STRING, 'tableName', None, None, ), # 4
     (5, TType.LIST, 'partitionVals', (TType.STRING,None), None, ), # 5
   )
 
-  def __init__(self, successful=None, data=None, dbName=None, tableName=None, partitionVals=None,):
-    self.successful = successful
-    self.data = data
+  def __init__(self, eventType=None, dbName=None, successful=None, tableName=None, partitionVals=None,):
+    self.eventType = eventType
     self.dbName = dbName
+    self.successful = successful
     self.tableName = tableName
     self.partitionVals = partitionVals
 
@@ -8645,19 +8702,18 @@ def read(self, iprot):
       if ftype == TType.STOP:
         break
       if fid == 1:
-        if ftype == TType.BOOL:
-          self.successful = iprot.readBool();
+        if ftype == TType.I32:
+          self.eventType = iprot.readI32();
         else:
           iprot.skip(ftype)
       elif fid == 2:
-        if ftype == TType.STRUCT:
-          self.data = FireEventRequestData()
-          self.data.read(iprot)
+        if ftype == TType.STRING:
+          self.dbName = iprot.readString();
         else:
           iprot.skip(ftype)
       elif fid == 3:
-        if ftype == TType.STRING:
-          self.dbName = iprot.readString();
+        if ftype == TType.BOOL:
+          self.successful = iprot.readBool();
         else:
           iprot.skip(ftype)
       elif fid == 4:
@@ -8685,18 +8741,18 @@ def write(self, oprot):
       oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
       return
     oprot.writeStructBegin('FireEventRequest')
-    if self.successful is not None:
-      oprot.writeFieldBegin('successful', TType.BOOL, 1)
-      oprot.writeBool(self.successful)
-      oprot.writeFieldEnd()
-    if self.data is not None:
-      oprot.writeFieldBegin('data', TType.STRUCT, 2)
-      self.data.write(oprot)
+    if self.eventType is not None:
+      oprot.writeFieldBegin('eventType', TType.I32, 1)
+      oprot.writeI32(self.eventType)
       oprot.writeFieldEnd()
     if self.dbName is not None:
-      oprot.writeFieldBegin('dbName', TType.STRING, 3)
+      oprot.writeFieldBegin('dbName', TType.STRING, 2)
       oprot.writeString(self.dbName)
       oprot.writeFieldEnd()
+    if self.successful is not None:
+      oprot.writeFieldBegin('successful', TType.BOOL, 3)
+      oprot.writeBool(self.successful)
+      oprot.writeFieldEnd()
     if self.tableName is not None:
       oprot.writeFieldBegin('tableName', TType.STRING, 4)
       oprot.writeString(self.tableName)
@@ -8712,223 +8768,12 @@ def write(self, oprot):
     oprot.writeStructEnd()
 
   def validate(self):
-    if self.successful is None:
-      raise TProtocol.TProtocolException(message='Required field successful is unset!')
-    if self.data is None:
-      raise TProtocol.TProtocolException(message='Required field data is unset!')
-    return
-
-
-  def __repr__(self):
-    L = ['%s=%r' % (key, value)
-      for key, value in self.__dict__.iteritems()]
-    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
-
-  def __eq__(self, other):
-    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
-
-  def __ne__(self, other):
-    return not (self == other)
-
-class FireEventResponse:
-
-  thrift_spec = (
-  )
-
-  def read(self, iprot):
-    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
-      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
-      return
-    iprot.readStructBegin()
-    while True:
-      (fname, ftype, fid) = iprot.readFieldBegin()
-      if ftype == TType.STOP:
-        break
-      else:
-        iprot.skip(ftype)
-      iprot.readFieldEnd()
-    iprot.readStructEnd()
-
-  def write(self, oprot):
-    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
-      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
-      return
-    oprot.writeStructBegin('FireEventResponse')
-    oprot.writeFieldStop()
-    oprot.writeStructEnd()
-
-  def validate(self):
-    return
-
-
-  def __repr__(self):
-    L = ['%s=%r' % (key, value)
-      for key, value in self.__dict__.iteritems()]
-    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
-
-  def __eq__(self, other):
-    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
-
-  def __ne__(self, other):
-    return not (self == other)
-
-class GetAllFunctionsResponse:
-  """
-  Attributes:
-   - functions
-  """
-
-  thrift_spec = (
-    None, # 0
-    (1, TType.LIST, 'functions', (TType.STRUCT,(Function, Function.thrift_spec)), None, ), # 1
-  )
-
-  def __init__(self, functions=None,):
-    self.functions = functions
-
-  def read(self, iprot):
-    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
-      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
-      return
-    iprot.readStructBegin()
-    while True:
-      (fname, ftype, fid) = iprot.readFieldBegin()
-      if ftype == TType.STOP:
-        break
-      if fid == 1:
-        if ftype == TType.LIST:
-          self.functions = []
-          (_etype458, _size455) = iprot.readListBegin()
-          for _i459 in xrange(_size455):
-            _elem460 = Function()
-            _elem460.read(iprot)
-            self.functions.append(_elem460)
-          iprot.readListEnd()
-        else:
-          iprot.skip(ftype)
-      else:
-        iprot.skip(ftype)
-      iprot.readFieldEnd()
-    iprot.readStructEnd()
-
-  def write(self, oprot):
-    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
-      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
-      return
-    oprot.writeStructBegin('GetAllFunctionsResponse')
-    if self.functions is not None:
-      oprot.writeFieldBegin('functions', TType.LIST, 1)
-      oprot.writeListBegin(TType.STRUCT, len(self.functions))
-      for iter461 in self.functions:
-        iter461.write(oprot)
-      oprot.writeListEnd()
-      oprot.writeFieldEnd()
-    oprot.writeFieldStop()
-    oprot.writeStructEnd()
-
-  def validate(self):
-    return
-
-
-  def __repr__(self):
-    L = ['%s=%r' % (key, value)
-      for key, value in self.__dict__.iteritems()]
-    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
-
-  def __eq__(self, other):
-    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
-
-  def __ne__(self, other):
-    return not (self == other)
-
-class TableMeta:
-  """
-  Attributes:
-   - dbName
-   - tableName
-   - tableType
-   - comments
-  """
-
-  thrift_spec = (
-    None, # 0
-    (1, TType.STRING, 'dbName', None, None, ), # 1
-    (2, TType.STRING, 'tableName', None, None, ), # 2
-    (3, TType.STRING, 'tableType', None, None, ), # 3
-    (4, TType.STRING, 'comments', None, None, ), # 4
-  )
-
-  def __init__(self, dbName=None, tableName=None, tableType=None, comments=None,):
-    self.dbName = dbName
-    self.tableName = tableName
-    self.tableType = tableType
-    self.comments = comments
-
-  def read(self, iprot):
-    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
-      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
-      return
-    iprot.readStructBegin()
-    while True:
-      (fname, ftype, fid) = iprot.readFieldBegin()
-      if ftype == TType.STOP:
-        break
-      if fid == 1:
-        if ftype == TType.STRING:
-          self.dbName = iprot.readString();
-        else:
-          iprot.skip(ftype)
-      elif fid == 2:
-        if ftype == TType.STRING:
-          self.tableName = iprot.readString();
-        else:
-          iprot.skip(ftype)
-      elif fid == 3:
-        if ftype == TType.STRING:
-          self.tableType = iprot.readString();
-        else:
-          iprot.skip(ftype)
-      elif fid == 4:
-        if ftype == TType.STRING:
-          self.comments = iprot.readString();
-        else:
-          iprot.skip(ftype)
-      else:
-        iprot.skip(ftype)
-      iprot.readFieldEnd()
-    iprot.readStructEnd()
-
-  def write(self, oprot):
-    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
-      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
-      return
-    oprot.writeStructBegin('TableMeta')
-    if self.dbName is not None:
-      oprot.writeFieldBegin('dbName', TType.STRING, 1)
-      oprot.writeString(self.dbName)
-      oprot.writeFieldEnd()
-    if self.tableName is not None:
-      oprot.writeFieldBegin('tableName', TType.STRING, 2)
-      oprot.writeString(self.tableName)
-      oprot.writeFieldEnd()
-    if self.tableType is not None:
-      oprot.writeFieldBegin('tableType', TType.STRING, 3)
-      oprot.writeString(self.tableType)
-      oprot.writeFieldEnd()
-    if self.comments is not None:
-      oprot.writeFieldBegin('comments', TType.STRING, 4)
-      oprot.writeString(self.comments)
-      oprot.writeFieldEnd()
-    oprot.writeFieldStop()
-    oprot.writeStructEnd()
-
-  def validate(self):
+    if self.eventType is None:
+      raise TProtocol.TProtocolException(message='Required field eventType is unset!')
     if self.dbName is None:
       raise TProtocol.TProtocolException(message='Required field dbName is unset!')
-    if self.tableName is None:
-      raise TProtocol.TProtocolException(message='Required field tableName is unset!')
-    if self.tableType is None:
-      raise TProtocol.TProtocolException(message='Required field tableType is unset!')
+    if self.successful is None:
+      raise TProtocol.TProtocolException(message='Required field successful is unset!')
     return
 
 
diff --git a/metastore/src/gen/thrift/gen-rb/hive_metastore_types.rb b/metastore/src/gen/thrift/gen-rb/hive_metastore_types.rb
index d5580a2..0b89c2f 100644
--- a/metastore/src/gen/thrift/gen-rb/hive_metastore_types.rb
+++ b/metastore/src/gen/thrift/gen-rb/hive_metastore_types.rb
@@ -79,6 +79,14 @@ module GrantRevokeType
   VALID_VALUES = Set.new([GRANT, REVOKE]).freeze
 end
 
+module EventRequestType
+  INSERT = 1
+  UPDATE = 2
+  DELETE = 3
+  VALUE_MAP = {1 => "INSERT", 2 => "UPDATE", 3 => "DELETE"}
+  VALID_VALUES = Set.new([INSERT, UPDATE, DELETE]).freeze
+end
+
 module FunctionType
   JAVA = 1
   VALUE_MAP = {1 => "JAVA"}
@@ -2069,58 +2077,59 @@ class CurrentNotificationEventId
   ::Thrift::Struct.generate_accessors self
 end
 
-class InsertEventRequestData
+class GetAllFunctionsResponse
   include ::Thrift::Struct, ::Thrift::Struct_Union
-  FILESADDED = 1
+  FUNCTIONS = 1
 
   FIELDS = {
-    FILESADDED => {:type => ::Thrift::Types::LIST, :name => 'filesAdded', :element => {:type => ::Thrift::Types::STRING}}
+    FUNCTIONS => {:type => ::Thrift::Types::LIST, :name => 'functions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Function}, :optional => true}
   }
 
   def struct_fields; FIELDS; end
 
   def validate
-    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field filesAdded is unset!') unless @filesAdded
   end
 
   ::Thrift::Struct.generate_accessors self
 end
 
-class FireEventRequestData < ::Thrift::Union
-  include ::Thrift::Struct_Union
-  class << self
-    def insertData(val)
-      FireEventRequestData.new(:insertData, val)
-    end
-  end
-
-  INSERTDATA = 1
+class TableMeta
+  include ::Thrift::Struct, ::Thrift::Struct_Union
+  DBNAME = 1
+  TABLENAME = 2
+  TABLETYPE = 3
+  COMMENTS = 4
 
   FIELDS = {
-    INSERTDATA => {:type => ::Thrift::Types::STRUCT, :name => 'insertData', :class => ::InsertEventRequestData}
+    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
+    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
+    TABLETYPE => {:type => ::Thrift::Types::STRING, :name => 'tableType'},
+    COMMENTS => {:type => ::Thrift::Types::STRING, :name => 'comments', :optional => true}
   }
 
   def struct_fields; FIELDS; end
 
   def validate
-    raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
+    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dbName is unset!') unless @dbName
+    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field tableName is unset!') unless @tableName
+    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field tableType is unset!') unless @tableType
   end
 
-  ::Thrift::Union.generate_accessors self
+  ::Thrift::Struct.generate_accessors self
 end
 
 class FireEventRequest
   include ::Thrift::Struct, ::Thrift::Struct_Union
-  SUCCESSFUL = 1
-  DATA = 2
-  DBNAME = 3
+  EVENTTYPE = 1
+  DBNAME = 2
+  SUCCESSFUL = 3
   TABLENAME = 4
   PARTITIONVALS = 5
 
   FIELDS = {
+    EVENTTYPE => {:type => ::Thrift::Types::I32, :name => 'eventType', :enum_class => ::EventRequestType},
+    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
     SUCCESSFUL => {:type => ::Thrift::Types::BOOL, :name => 'successful'},
-    DATA => {:type => ::Thrift::Types::STRUCT, :name => 'data', :class => ::FireEventRequestData},
-    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName', :optional => true},
     TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName', :optional => true},
     PARTITIONVALS => {:type => ::Thrift::Types::LIST, :name => 'partitionVals', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
   }
@@ -2128,64 +2137,12 @@ class FireEventRequest
   def struct_fields; FIELDS; end
 
   def validate
-    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field successful is unset!') if @successful.nil?
-    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field data is unset!') unless @data
-  end
-
-  ::Thrift::Struct.generate_accessors self
-end
-
-class FireEventResponse
-  include ::Thrift::Struct, ::Thrift::Struct_Union
-
-  FIELDS = {
-
-  }
-
-  def struct_fields; FIELDS; end
-
-  def validate
-  end
-
-  ::Thrift::Struct.generate_accessors self
-end
-
-class GetAllFunctionsResponse
-  include ::Thrift::Struct, ::Thrift::Struct_Union
-  FUNCTIONS = 1
-
-  FIELDS = {
-    FUNCTIONS => {:type => ::Thrift::Types::LIST, :name => 'functions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Function}, :optional => true}
-  }
-
-  def struct_fields; FIELDS; end
-
-  def validate
-  end
-
-  ::Thrift::Struct.generate_accessors self
-end
-
-class TableMeta
-  include ::Thrift::Struct, ::Thrift::Struct_Union
-  DBNAME = 1
-  TABLENAME = 2
-  TABLETYPE = 3
-  COMMENTS = 4
-
-  FIELDS = {
-    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName'},
-    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName'},
-    TABLETYPE => {:type => ::Thrift::Types::STRING, :name => 'tableType'},
-    COMMENTS => {:type => ::Thrift::Types::STRING, :name => 'comments', :optional => true}
-  }
-
-  def struct_fields; FIELDS; end
-
-  def validate
+    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field eventType is unset!') unless @eventType
     raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field dbName is unset!') unless @dbName
-    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field tableName is unset!') unless @tableName
-    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field tableType is unset!') unless @tableType
+    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field successful is unset!') if @successful.nil?
+    unless @eventType.nil? || ::EventRequestType::VALID_VALUES.include?(@eventType)
+      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field eventType!')
+    end
   end
 
   ::Thrift::Struct.generate_accessors self
diff --git a/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb b/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
index aec8e0a..33f03d4 100644
--- a/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
+++ b/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
@@ -2075,6 +2075,20 @@ module ThriftHiveMetastore
       raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_current_notificationEventId failed: unknown result')
     end
 
+    def fire_notification_event(rqst)
+      send_fire_notification_event(rqst)
+      recv_fire_notification_event()
+    end
+
+    def send_fire_notification_event(rqst)
+      send_message('fire_notification_event', Fire_notification_event_args, :rqst => rqst)
+    end
+
+    def recv_fire_notification_event()
+      result = receive_message(Fire_notification_event_result)
+      return
+    end
+
   end
 
   class Processor < ::FacebookService::Processor 
@@ -3657,6 +3671,13 @@ module ThriftHiveMetastore
       write_result(result, oprot, 'get_current_notificationEventId', seqid)
     end
 
+    def process_fire_notification_event(seqid, iprot, oprot)
+      args = read_args(iprot, Fire_notification_event_args)
+      result = Fire_notification_event_result.new()
+      @handler.fire_notification_event(args.rqst)
+      write_result(result, oprot, 'fire_notification_event', seqid)
+    end
+
   end
 
   # HELPER FUNCTIONS AND STRUCTURES
@@ -8363,5 +8384,36 @@ module ThriftHiveMetastore
     ::Thrift::Struct.generate_accessors self
   end
 
+  class Fire_notification_event_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    RQST = 1
+
+    FIELDS = {
+      RQST => {:type => ::Thrift::Types::STRUCT, :name => 'rqst', :class => ::FireEventRequest}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Fire_notification_event_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+
+    FIELDS = {
+
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
 end
 
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
index c52a7ba..d006edd 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
@@ -67,6 +67,7 @@
 import org.apache.hadoop.hive.metastore.api.DropPartitionsResult;
 import org.apache.hadoop.hive.metastore.api.EnvironmentContext;
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
+import org.apache.hadoop.hive.metastore.api.FireEventRequest;
 import org.apache.hadoop.hive.metastore.api.Function;
 import org.apache.hadoop.hive.metastore.api.GetAllFunctionsResponse;
 import org.apache.hadoop.hive.metastore.api.GetOpenTxnsInfoResponse;
@@ -150,6 +151,7 @@
 import org.apache.hadoop.hive.metastore.events.DropPartitionEvent;
 import org.apache.hadoop.hive.metastore.events.DropTableEvent;
 import org.apache.hadoop.hive.metastore.events.EventCleanerTask;
+import org.apache.hadoop.hive.metastore.events.InsertEvent;
 import org.apache.hadoop.hive.metastore.events.LoadPartitionDoneEvent;
 import org.apache.hadoop.hive.metastore.events.PreAddIndexEvent;
 import org.apache.hadoop.hive.metastore.events.PreAddPartitionEvent;
@@ -5884,8 +5886,24 @@ public void updateMetrics() throws MetaException {
       initPartCount = getMS().getPartitionCount();
       initDatabaseCount = getMS().getDatabaseCount();
     }
-  }
 
+    @Override
+    public void fire_notification_event(FireEventRequest rqst) throws TException {
+      switch (rqst.getEventType()) {
+        case INSERT:
+          InsertEvent event = new InsertEvent(rqst.getDbName(), rqst.getTableName(),
+              rqst.getPartitionVals(), rqst.isSuccessful(), this);
+          for (MetaStoreEventListener listener : listeners) {
+            listener.onInsert(event);
+          }
+          break;
+
+        default:
+          throw new TException("Event type " + rqst.getEventType().toString() + " not currently " +
+              "supported.");
+      }
+    }
+  }
 
   public static IHMSHandler newRetryingHMSHandler(IHMSHandler baseHandler, HiveConf hiveConf)
       throws MetaException {
@@ -5932,7 +5950,7 @@ public static boolean isMetaStoreRemote() {
     return isMetaStoreRemote;
   }
 
-  /**
+  /**updateMetric
    * Renew a delegation token to extend its lifetime.
    *
    * @param tokenStrForm
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
index 2613e53..539faf1 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
@@ -71,6 +71,7 @@
 import org.apache.hadoop.hive.metastore.api.DropPartitionsRequest;
 import org.apache.hadoop.hive.metastore.api.EnvironmentContext;
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
+import org.apache.hadoop.hive.metastore.api.FireEventRequest;
 import org.apache.hadoop.hive.metastore.api.Function;
 import org.apache.hadoop.hive.metastore.api.GetAllFunctionsResponse;
 import org.apache.hadoop.hive.metastore.api.GetOpenTxnsInfoResponse;
@@ -1967,6 +1968,11 @@ public CurrentNotificationEventId getCurrentNotificationEventId() throws TExcept
     return client.get_current_notificationEventId();
   }
 
+  @Override
+  public void fireNotificationEvent(FireEventRequest rqst) throws TException {
+    client.fire_notification_event(rqst);
+  }
+
   /**
    * Creates a synchronized wrapper for any {@link IMetaStoreClient}.
    * This may be used by multi-threaded applications until we have
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java b/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
index d4fd9b9..2b768e9 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
@@ -53,6 +53,7 @@
 import org.apache.hadoop.hive.metastore.api.CompactionType;
 import org.apache.hadoop.hive.metastore.api.ConfigValSecurityException;
 import org.apache.hadoop.hive.metastore.api.CurrentNotificationEventId;
+import org.apache.hadoop.hive.metastore.api.FireEventRequest;
 import org.apache.hadoop.hive.metastore.api.Database;
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
 import org.apache.hadoop.hive.metastore.api.Function;
@@ -1411,6 +1412,14 @@ NotificationEventResponse getNextNotification(long lastEventId, int maxEvents,
    */
   CurrentNotificationEventId getCurrentNotificationEventId() throws TException;
 
+  /**
+   * Request that the metastore fire an event.  Currently this is only supported for DML
+   * operations, since the metastore knows when DDL operations happen.
+   * @param request
+   * @throws TException
+   */
+  void fireNotificationEvent(FireEventRequest request) throws TException;
+
   class IncompatibleMetastoreException extends MetaException {
     IncompatibleMetastoreException(String message) {
       super(message);
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreEventListener.java b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreEventListener.java
index 792ef42..5e46ae1 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreEventListener.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreEventListener.java
@@ -33,6 +33,7 @@
 import org.apache.hadoop.hive.metastore.events.DropIndexEvent;
 import org.apache.hadoop.hive.metastore.events.DropPartitionEvent;
 import org.apache.hadoop.hive.metastore.events.DropTableEvent;
+import org.apache.hadoop.hive.metastore.events.InsertEvent;
 import org.apache.hadoop.hive.metastore.events.LoadPartitionDoneEvent;
 
 /**
@@ -143,6 +144,17 @@ public void onDropIndex(DropIndexEvent indexEvent) throws MetaException {
   public void onAlterIndex(AlterIndexEvent indexEvent) throws MetaException {
   }
 
+  /**
+   * This will be called when an insert is executed that does not cause a partition to be added.
+   * If an insert causes a partition to be added it will cause {@link #onAddPartition} to be
+   * called instead.
+   * @param insertEvent
+   * @throws MetaException
+   */
+  public void onInsert(InsertEvent insertEvent) throws MetaException {
+
+  }
+
   @Override
   public Configuration getConf() {
     return this.conf;
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/events/InsertEvent.java b/metastore/src/java/org/apache/hadoop/hive/metastore/events/InsertEvent.java
new file mode 100644
index 0000000..3a04b7e
--- /dev/null
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/events/InsertEvent.java
@@ -0,0 +1,70 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hive.metastore.events;
+
+import org.apache.hadoop.hive.metastore.HiveMetaStore.HMSHandler;
+import org.apache.hadoop.hive.metastore.api.Partition;
+import org.apache.hadoop.hive.metastore.api.Table;
+import org.apache.hadoop.hive.metastore.partition.spec.PartitionSpecProxy;
+
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+
+public class InsertEvent extends ListenerEvent {
+
+  // Note that this event is fired from the client, so rather than having full metastore objects
+  // we have just the string names, but that's fine for what we need.
+  private final String db;
+  private final String table;
+  private final List<String> partVals;
+
+  /**
+   *
+   * @param db name of the database the table is in
+   * @param table name of the table being inserted into
+   * @param partitions list of partition values, can be null
+   * @param status status of insert, true = success, false = failure
+   * @param handler handler that is firing the event
+   */
+  public InsertEvent(String db, String table, List<String> partitions, boolean status,
+                     HMSHandler handler) {
+    super(status, handler);
+    this.db = db;
+    this.table = table;
+    this.partVals = partitions;
+  }
+
+  public String getDb() {
+    return db;
+  }
+  /**
+   * @return The table.
+   */
+  public String getTable() {
+    return table;
+  }
+
+  /**
+   * @return List of partitions.
+   */
+  public List<String> getPartitions() {
+    return partVals;
+  }
+}
-- 
1.7.9.5

