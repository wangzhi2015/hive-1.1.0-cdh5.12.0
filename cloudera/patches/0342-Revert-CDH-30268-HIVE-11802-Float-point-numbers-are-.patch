From 2ffa6a804fa493eed1b008ebb2ec0e75eae91b98 Mon Sep 17 00:00:00 2001
From: Sergio Pena <sergio.pena@cloudera.com>
Date: Tue, 6 Oct 2015 18:17:28 -0500
Subject: [PATCH 0342/1164] Revert "CDH:30268: HIVE-11802: Float-point numbers
 are displayed with different precision in
 Beeline/JDBC (Sergio Pena, reviewed by Carl
 Steinbach)"

This reverts commit dad14a71070c05001f2ff437d841d15cbf30520c.
---
 .../java/org/apache/hive/service/cli/Column.java   |    3 +-
 .../org/apache/hive/service/cli/TestColumn.java    |  129 --------------------
 2 files changed, 1 insertion(+), 131 deletions(-)
 delete mode 100644 service/src/test/org/apache/hive/service/cli/TestColumn.java

diff --git a/service/src/java/org/apache/hive/service/cli/Column.java b/service/src/java/org/apache/hive/service/cli/Column.java
index 31091a3..2e21f18 100644
--- a/service/src/java/org/apache/hive/service/cli/Column.java
+++ b/service/src/java/org/apache/hive/service/cli/Column.java
@@ -40,7 +40,6 @@
 import org.apache.hive.service.cli.thrift.TI32Column;
 import org.apache.hive.service.cli.thrift.TI64Column;
 import org.apache.hive.service.cli.thrift.TStringColumn;
-import sun.misc.FloatingDecimal;
 
 /**
  * Column.
@@ -350,7 +349,7 @@ public void addValue(Type type, Object field) {
         break;
       case FLOAT_TYPE:
         nulls.set(size, field == null);
-        doubleVars()[size] = field == null ? 0 : new FloatingDecimal((Float)field).doubleValue();
+        doubleVars()[size] = field == null ? 0 : ((Float)field).doubleValue();
         break;
       case DOUBLE_TYPE:
         nulls.set(size, field == null);
diff --git a/service/src/test/org/apache/hive/service/cli/TestColumn.java b/service/src/test/org/apache/hive/service/cli/TestColumn.java
deleted file mode 100644
index 87bf848..0000000
--- a/service/src/test/org/apache/hive/service/cli/TestColumn.java
+++ /dev/null
@@ -1,129 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.hive.service.cli;
-
-import org.junit.Test;
-
-import java.util.Arrays;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-
-public class TestColumn {
-  @Test
-  public void testAllIntegerTypeValues() {
-    Map<Type, List<Object>> integerTypesAndValues = new LinkedHashMap<Type, List<Object>>();
-
-    // Add TINYINT values
-    integerTypesAndValues.put(Type.TINYINT_TYPE, Arrays.<Object>asList(
-        Byte.MIN_VALUE, Byte.MAX_VALUE
-    ));
-
-    // Add SMALLINT values
-    integerTypesAndValues.put(Type.SMALLINT_TYPE, Arrays.<Object>asList(
-        Short.MIN_VALUE, Short.MIN_VALUE
-    ));
-
-    // Add INT values
-    integerTypesAndValues.put(Type.INT_TYPE, Arrays.<Object>asList(
-        Integer.MIN_VALUE, Integer.MAX_VALUE
-    ));
-
-    // Add BIGINT values
-    integerTypesAndValues.put(Type.BIGINT_TYPE, Arrays.<Object>asList(
-        Long.MIN_VALUE, Long.MAX_VALUE
-    ));
-
-    // Validate all integer type values are stored correctly
-    for (Map.Entry entry : integerTypesAndValues.entrySet()) {
-      Type type = (Type)entry.getKey();
-      List<Object> values = (List)entry.getValue();
-
-      Column c = new Column(type);
-      for (Object v : values) {
-        c.addValue(type, v);
-      }
-
-      assertEquals(type, c.getType());
-      assertEquals(values.size(), c.size());
-
-      for (int i=0; i<c.size(); i++) {
-        assertEquals(values.get(i), c.get(i));
-      }
-    }
-  }
-
-  @Test
-  public void testFloatAndDoubleValues() {
-    Column floatColumn = new Column(Type.FLOAT_TYPE);
-    floatColumn.addValue(Type.FLOAT_TYPE, 1.1f);
-    floatColumn.addValue(Type.FLOAT_TYPE, 2.033f);
-
-    // FLOAT_TYPE is treated as DOUBLE_TYPE
-    assertEquals(Type.DOUBLE_TYPE, floatColumn.getType());
-    assertEquals(2, floatColumn.size());
-    assertEquals(1.1, floatColumn.get(0));
-    assertEquals(2.033, floatColumn.get(1));
-
-    Column doubleColumn = new Column(Type.DOUBLE_TYPE);
-    doubleColumn.addValue(Type.DOUBLE_TYPE, 1.1);
-    doubleColumn.addValue(Type.DOUBLE_TYPE, 2.033);
-
-    assertEquals(Type.DOUBLE_TYPE, doubleColumn.getType());
-    assertEquals(2, doubleColumn.size());
-    assertEquals(1.1, doubleColumn.get(0));
-    assertEquals(2.033, doubleColumn.get(1));
-  }
-
-  @Test
-  public void testBooleanValues() {
-    Column boolColumn = new Column(Type.BOOLEAN_TYPE);
-    boolColumn.addValue(Type.BOOLEAN_TYPE, true);
-    boolColumn.addValue(Type.BOOLEAN_TYPE, false);
-
-    assertEquals(Type.BOOLEAN_TYPE, boolColumn.getType());
-    assertEquals(2, boolColumn.size());
-    assertEquals(true, boolColumn.get(0));
-    assertEquals(false, boolColumn.get(1));
-  }
-
-  @Test
-  public void testStringValues() {
-    Column stringColumn = new Column(Type.STRING_TYPE);
-    stringColumn.addValue(Type.STRING_TYPE, "12abc456");
-    stringColumn.addValue(Type.STRING_TYPE, "~special$&string");
-
-    assertEquals(Type.STRING_TYPE, stringColumn.getType());
-    assertEquals(2, stringColumn.size());
-    assertEquals("12abc456", stringColumn.get(0));
-    assertEquals("~special$&string", stringColumn.get(1));
-  }
-
-  @Test
-  public void testBinaryValues() {
-    Column binaryColumn = new Column(Type.BINARY_TYPE);
-    binaryColumn.addValue(Type.BINARY_TYPE, new byte[]{-1, 0, 3, 4});
-
-    assertEquals(Type.BINARY_TYPE, binaryColumn.getType());
-    assertEquals(1, binaryColumn.size());
-    assertArrayEquals(new byte[]{-1, 0, 3, 4}, (byte[]) binaryColumn.get(0));
-  }
-}
-- 
1.7.9.5

