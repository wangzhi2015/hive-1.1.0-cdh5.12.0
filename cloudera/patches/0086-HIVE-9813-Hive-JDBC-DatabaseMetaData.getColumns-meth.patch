From 6ea395e7d1592cc95befa3f6be65a5fff0ee791d Mon Sep 17 00:00:00 2001
From: Xuefu Zhang <xuefu@apache.org>
Date: Thu, 12 Mar 2015 12:59:41 +0000
Subject: [PATCH 0086/1164] HIVE-9813: Hive JDBC - DatabaseMetaData.getColumns
 method cannot find classes added with 'add jar'
 command (Yongzhi via Xuefu)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1666173 13f79535-47bb-0310-9956-ffa450edef68

Conflicts:
	metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
	metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
	metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
---
 metastore/if/hive_metastore.thrift                 |    2 +
 .../src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp | 2864 +++++++-----
 .../src/gen/thrift/gen-cpp/ThriftHiveMetastore.h   |  350 ++
 .../ThriftHiveMetastore_server.skeleton.cpp        |   10 +
 .../hadoop/hive/metastore/api/SkewedInfo.java      |    2 +-
 .../hive/metastore/api/ThriftHiveMetastore.java    | 4754 ++++++++++++++++----
 .../gen-php/metastore/ThriftHiveMetastore.php      | 1720 ++++---
 .../hive_metastore/ThriftHiveMetastore-remote      |   14 +
 .../gen-py/hive_metastore/ThriftHiveMetastore.py   | 1140 +++--
 .../src/gen/thrift/gen-rb/thrift_hive_metastore.rb |  150 +
 .../hadoop/hive/metastore/HiveMetaStore.java       |   58 +-
 .../hadoop/hive/metastore/HiveMetaStoreClient.java |   15 +-
 .../hadoop/hive/metastore/IMetaStoreClient.java    |    6 +
 .../hadoop/hive/metastore/MetaStoreUtils.java      |   52 +
 .../service/cli/operation/GetColumnsOperation.java |    1 +
 .../hive/service/cli/session/HiveSessionImpl.java  |    8 +-
 16 files changed, 8328 insertions(+), 2818 deletions(-)
 mode change 100644 => 100755 metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
 mode change 100644 => 100755 service/src/gen/thrift/gen-py/TCLIService/TCLIService-remote
 mode change 100644 => 100755 service/src/gen/thrift/gen-py/hive_service/ThriftHive-remote

diff --git a/metastore/if/hive_metastore.thrift b/metastore/if/hive_metastore.thrift
index 8c50bf8..d339d50 100755
--- a/metastore/if/hive_metastore.thrift
+++ b/metastore/if/hive_metastore.thrift
@@ -754,9 +754,11 @@ service ThriftHiveMetastore extends fb303.FacebookService
 
   // Gets a list of FieldSchemas describing the columns of a particular table
   list<FieldSchema> get_fields(1: string db_name, 2: string table_name) throws (1: MetaException o1, 2: UnknownTableException o2, 3: UnknownDBException o3),
+  list<FieldSchema> get_fields_with_environment_context(1: string db_name, 2: string table_name, 3:EnvironmentContext environment_context) throws (1: MetaException o1, 2: UnknownTableException o2, 3: UnknownDBException o3)
 
   // Gets a list of FieldSchemas describing both the columns and the partition keys of a particular table
   list<FieldSchema> get_schema(1: string db_name, 2: string table_name) throws (1: MetaException o1, 2: UnknownTableException o2, 3: UnknownDBException o3)
+  list<FieldSchema> get_schema_with_environment_context(1: string db_name, 2: string table_name, 3:EnvironmentContext environment_context) throws (1: MetaException o1, 2: UnknownTableException o2, 3: UnknownDBException o3)
 
   // create a Hive table. Following fields must be set
   // tableName
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
index 4c0efc6..d413331 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
@@ -2728,7 +2728,7 @@ uint32_t ThriftHiveMetastore_get_fields_presult::read(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_schema_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_fields_with_environment_context_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -2764,6 +2764,14 @@ uint32_t ThriftHiveMetastore_get_schema_args::read(::apache::thrift::protocol::T
           xfer += iprot->skip(ftype);
         }
         break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->environment_context.read(iprot);
+          this->__isset.environment_context = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
       default:
         xfer += iprot->skip(ftype);
         break;
@@ -2776,9 +2784,9 @@ uint32_t ThriftHiveMetastore_get_schema_args::read(::apache::thrift::protocol::T
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_schema_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_fields_with_environment_context_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_schema_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_fields_with_environment_context_args");
 
   xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
   xfer += oprot->writeString(this->db_name);
@@ -2788,14 +2796,18 @@ uint32_t ThriftHiveMetastore_get_schema_args::write(::apache::thrift::protocol::
   xfer += oprot->writeString(this->table_name);
   xfer += oprot->writeFieldEnd();
 
+  xfer += oprot->writeFieldBegin("environment_context", ::apache::thrift::protocol::T_STRUCT, 3);
+  xfer += this->environment_context.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_schema_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_fields_with_environment_context_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_schema_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_fields_with_environment_context_pargs");
 
   xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
   xfer += oprot->writeString((*(this->db_name)));
@@ -2805,12 +2817,16 @@ uint32_t ThriftHiveMetastore_get_schema_pargs::write(::apache::thrift::protocol:
   xfer += oprot->writeString((*(this->table_name)));
   xfer += oprot->writeFieldEnd();
 
+  xfer += oprot->writeFieldBegin("environment_context", ::apache::thrift::protocol::T_STRUCT, 3);
+  xfer += (*(this->environment_context)).write(oprot);
+  xfer += oprot->writeFieldEnd();
+
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_schema_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_fields_with_environment_context_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -2886,11 +2902,11 @@ uint32_t ThriftHiveMetastore_get_schema_result::read(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_schema_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_fields_with_environment_context_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_schema_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_fields_with_environment_context_result");
 
   if (this->__isset.success) {
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
@@ -2922,7 +2938,7 @@ uint32_t ThriftHiveMetastore_get_schema_result::write(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_schema_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_fields_with_environment_context_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -2998,7 +3014,7 @@ uint32_t ThriftHiveMetastore_get_schema_presult::read(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_create_table_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_schema_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -3019,9 +3035,17 @@ uint32_t ThriftHiveMetastore_create_table_args::read(::apache::thrift::protocol:
     switch (fid)
     {
       case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->tbl.read(iprot);
-          this->__isset.tbl = true;
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->db_name);
+          this->__isset.db_name = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->table_name);
+          this->__isset.table_name = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -3038,12 +3062,16 @@ uint32_t ThriftHiveMetastore_create_table_args::read(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_create_table_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_schema_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_schema_args");
 
-  xfer += oprot->writeFieldBegin("tbl", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->tbl.write(oprot);
+  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString(this->db_name);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
+  xfer += oprot->writeString(this->table_name);
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -3051,12 +3079,16 @@ uint32_t ThriftHiveMetastore_create_table_args::write(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_create_table_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_schema_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_schema_pargs");
 
-  xfer += oprot->writeFieldBegin("tbl", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->tbl)).write(oprot);
+  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString((*(this->db_name)));
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
+  xfer += oprot->writeString((*(this->table_name)));
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -3064,7 +3096,7 @@ uint32_t ThriftHiveMetastore_create_table_pargs::write(::apache::thrift::protoco
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_create_table_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_schema_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -3084,6 +3116,26 @@ uint32_t ThriftHiveMetastore_create_table_result::read(::apache::thrift::protoco
     }
     switch (fid)
     {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            this->success.clear();
+            uint32_t _size466;
+            ::apache::thrift::protocol::TType _etype469;
+            xfer += iprot->readListBegin(_etype469, _size466);
+            this->success.resize(_size466);
+            uint32_t _i470;
+            for (_i470 = 0; _i470 < _size466; ++_i470)
+            {
+              xfer += this->success[_i470].read(iprot);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
       case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
           xfer += this->o1.read(iprot);
@@ -3108,14 +3160,6 @@ uint32_t ThriftHiveMetastore_create_table_result::read(::apache::thrift::protoco
           xfer += iprot->skip(ftype);
         }
         break;
-      case 4:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o4.read(iprot);
-          this->__isset.o4 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
       default:
         xfer += iprot->skip(ftype);
         break;
@@ -3128,13 +3172,25 @@ uint32_t ThriftHiveMetastore_create_table_result::read(::apache::thrift::protoco
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_create_table_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_schema_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_schema_result");
 
-  if (this->__isset.o1) {
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
+    {
+      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
+      std::vector<FieldSchema> ::const_iterator _iter471;
+      for (_iter471 = this->success.begin(); _iter471 != this->success.end(); ++_iter471)
+      {
+        xfer += (*_iter471).write(oprot);
+      }
+      xfer += oprot->writeListEnd();
+    }
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o1) {
     xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
     xfer += this->o1.write(oprot);
     xfer += oprot->writeFieldEnd();
@@ -3146,17 +3202,13 @@ uint32_t ThriftHiveMetastore_create_table_result::write(::apache::thrift::protoc
     xfer += oprot->writeFieldBegin("o3", ::apache::thrift::protocol::T_STRUCT, 3);
     xfer += this->o3.write(oprot);
     xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o4) {
-    xfer += oprot->writeFieldBegin("o4", ::apache::thrift::protocol::T_STRUCT, 4);
-    xfer += this->o4.write(oprot);
-    xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_create_table_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_schema_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -3176,6 +3228,26 @@ uint32_t ThriftHiveMetastore_create_table_presult::read(::apache::thrift::protoc
     }
     switch (fid)
     {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            (*(this->success)).clear();
+            uint32_t _size472;
+            ::apache::thrift::protocol::TType _etype475;
+            xfer += iprot->readListBegin(_etype475, _size472);
+            (*(this->success)).resize(_size472);
+            uint32_t _i476;
+            for (_i476 = 0; _i476 < _size472; ++_i476)
+            {
+              xfer += (*(this->success))[_i476].read(iprot);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
       case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
           xfer += this->o1.read(iprot);
@@ -3200,14 +3272,6 @@ uint32_t ThriftHiveMetastore_create_table_presult::read(::apache::thrift::protoc
           xfer += iprot->skip(ftype);
         }
         break;
-      case 4:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o4.read(iprot);
-          this->__isset.o4 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
       default:
         xfer += iprot->skip(ftype);
         break;
@@ -3220,7 +3284,7 @@ uint32_t ThriftHiveMetastore_create_table_presult::read(::apache::thrift::protoc
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_create_table_with_environment_context_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_schema_with_environment_context_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -3241,14 +3305,22 @@ uint32_t ThriftHiveMetastore_create_table_with_environment_context_args::read(::
     switch (fid)
     {
       case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->tbl.read(iprot);
-          this->__isset.tbl = true;
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->db_name);
+          this->__isset.db_name = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
       case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->table_name);
+          this->__isset.table_name = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
           xfer += this->environment_context.read(iprot);
           this->__isset.environment_context = true;
@@ -3268,15 +3340,19 @@ uint32_t ThriftHiveMetastore_create_table_with_environment_context_args::read(::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_create_table_with_environment_context_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_schema_with_environment_context_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_with_environment_context_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_schema_with_environment_context_args");
 
-  xfer += oprot->writeFieldBegin("tbl", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->tbl.write(oprot);
+  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString(this->db_name);
   xfer += oprot->writeFieldEnd();
 
-  xfer += oprot->writeFieldBegin("environment_context", ::apache::thrift::protocol::T_STRUCT, 2);
+  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
+  xfer += oprot->writeString(this->table_name);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("environment_context", ::apache::thrift::protocol::T_STRUCT, 3);
   xfer += this->environment_context.write(oprot);
   xfer += oprot->writeFieldEnd();
 
@@ -3285,15 +3361,19 @@ uint32_t ThriftHiveMetastore_create_table_with_environment_context_args::write(:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_create_table_with_environment_context_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_schema_with_environment_context_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_with_environment_context_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_schema_with_environment_context_pargs");
 
-  xfer += oprot->writeFieldBegin("tbl", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->tbl)).write(oprot);
+  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString((*(this->db_name)));
   xfer += oprot->writeFieldEnd();
 
-  xfer += oprot->writeFieldBegin("environment_context", ::apache::thrift::protocol::T_STRUCT, 2);
+  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
+  xfer += oprot->writeString((*(this->table_name)));
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("environment_context", ::apache::thrift::protocol::T_STRUCT, 3);
   xfer += (*(this->environment_context)).write(oprot);
   xfer += oprot->writeFieldEnd();
 
@@ -3302,7 +3382,7 @@ uint32_t ThriftHiveMetastore_create_table_with_environment_context_pargs::write(
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_create_table_with_environment_context_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_schema_with_environment_context_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -3322,98 +3402,590 @@ uint32_t ThriftHiveMetastore_create_table_with_environment_context_result::read(
     }
     switch (fid)
     {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 2:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o2.read(iprot);
-          this->__isset.o2 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 3:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o3.read(iprot);
-          this->__isset.o3 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 4:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o4.read(iprot);
-          this->__isset.o4 = true;
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            this->success.clear();
+            uint32_t _size477;
+            ::apache::thrift::protocol::TType _etype480;
+            xfer += iprot->readListBegin(_etype480, _size477);
+            this->success.resize(_size477);
+            uint32_t _i481;
+            for (_i481 = 0; _i481 < _size477; ++_i481)
+            {
+              xfer += this->success[_i481].read(iprot);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
-      default:
-        xfer += iprot->skip(ftype);
-        break;
-    }
-    xfer += iprot->readFieldEnd();
-  }
-
-  xfer += iprot->readStructEnd();
-
-  return xfer;
-}
-
-uint32_t ThriftHiveMetastore_create_table_with_environment_context_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
-
-  uint32_t xfer = 0;
-
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_with_environment_context_result");
-
-  if (this->__isset.o1) {
-    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
-    xfer += this->o1.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o2) {
-    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
-    xfer += this->o2.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o3) {
-    xfer += oprot->writeFieldBegin("o3", ::apache::thrift::protocol::T_STRUCT, 3);
-    xfer += this->o3.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o4) {
-    xfer += oprot->writeFieldBegin("o4", ::apache::thrift::protocol::T_STRUCT, 4);
-    xfer += this->o4.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  }
-  xfer += oprot->writeFieldStop();
-  xfer += oprot->writeStructEnd();
-  return xfer;
-}
-
-uint32_t ThriftHiveMetastore_create_table_with_environment_context_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
-
-  uint32_t xfer = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TType ftype;
-  int16_t fid;
-
-  xfer += iprot->readStructBegin(fname);
-
-  using ::apache::thrift::protocol::TProtocolException;
-
-
-  while (true)
-  {
-    xfer += iprot->readFieldBegin(fname, ftype, fid);
-    if (ftype == ::apache::thrift::protocol::T_STOP) {
-      break;
-    }
-    switch (fid)
-    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o3.read(iprot);
+          this->__isset.o3 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_schema_with_environment_context_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_schema_with_environment_context_result");
+
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
+    {
+      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
+      std::vector<FieldSchema> ::const_iterator _iter482;
+      for (_iter482 = this->success.begin(); _iter482 != this->success.end(); ++_iter482)
+      {
+        xfer += (*_iter482).write(oprot);
+      }
+      xfer += oprot->writeListEnd();
+    }
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o2) {
+    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
+    xfer += this->o2.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o3) {
+    xfer += oprot->writeFieldBegin("o3", ::apache::thrift::protocol::T_STRUCT, 3);
+    xfer += this->o3.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_schema_with_environment_context_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            (*(this->success)).clear();
+            uint32_t _size483;
+            ::apache::thrift::protocol::TType _etype486;
+            xfer += iprot->readListBegin(_etype486, _size483);
+            (*(this->success)).resize(_size483);
+            uint32_t _i487;
+            for (_i487 = 0; _i487 < _size483; ++_i487)
+            {
+              xfer += (*(this->success))[_i487].read(iprot);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o3.read(iprot);
+          this->__isset.o3 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->tbl.read(iprot);
+          this->__isset.tbl = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_args");
+
+  xfer += oprot->writeFieldBegin("tbl", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->tbl.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_pargs");
+
+  xfer += oprot->writeFieldBegin("tbl", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->tbl)).write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o3.read(iprot);
+          this->__isset.o3 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 4:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o4.read(iprot);
+          this->__isset.o4 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_result");
+
+  if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o2) {
+    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
+    xfer += this->o2.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o3) {
+    xfer += oprot->writeFieldBegin("o3", ::apache::thrift::protocol::T_STRUCT, 3);
+    xfer += this->o3.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o4) {
+    xfer += oprot->writeFieldBegin("o4", ::apache::thrift::protocol::T_STRUCT, 4);
+    xfer += this->o4.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o3.read(iprot);
+          this->__isset.o3 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 4:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o4.read(iprot);
+          this->__isset.o4 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_with_environment_context_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->tbl.read(iprot);
+          this->__isset.tbl = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->environment_context.read(iprot);
+          this->__isset.environment_context = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_with_environment_context_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_with_environment_context_args");
+
+  xfer += oprot->writeFieldBegin("tbl", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->tbl.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("environment_context", ::apache::thrift::protocol::T_STRUCT, 2);
+  xfer += this->environment_context.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_with_environment_context_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_with_environment_context_pargs");
+
+  xfer += oprot->writeFieldBegin("tbl", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->tbl)).write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("environment_context", ::apache::thrift::protocol::T_STRUCT, 2);
+  xfer += (*(this->environment_context)).write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_with_environment_context_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o3.read(iprot);
+          this->__isset.o3 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 4:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o4.read(iprot);
+          this->__isset.o4 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_with_environment_context_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_create_table_with_environment_context_result");
+
+  if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o2) {
+    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
+    xfer += this->o2.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o3) {
+    xfer += oprot->writeFieldBegin("o3", ::apache::thrift::protocol::T_STRUCT, 3);
+    xfer += this->o3.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o4) {
+    xfer += oprot->writeFieldBegin("o4", ::apache::thrift::protocol::T_STRUCT, 4);
+    xfer += this->o4.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_create_table_with_environment_context_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
       case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
           xfer += this->o1.read(iprot);
@@ -4008,14 +4580,14 @@ uint32_t ThriftHiveMetastore_get_tables_result::read(::apache::thrift::protocol:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size466;
-            ::apache::thrift::protocol::TType _etype469;
-            xfer += iprot->readListBegin(_etype469, _size466);
-            this->success.resize(_size466);
-            uint32_t _i470;
-            for (_i470 = 0; _i470 < _size466; ++_i470)
+            uint32_t _size488;
+            ::apache::thrift::protocol::TType _etype491;
+            xfer += iprot->readListBegin(_etype491, _size488);
+            this->success.resize(_size488);
+            uint32_t _i492;
+            for (_i492 = 0; _i492 < _size488; ++_i492)
             {
-              xfer += iprot->readString(this->success[_i470]);
+              xfer += iprot->readString(this->success[_i492]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4054,10 +4626,10 @@ uint32_t ThriftHiveMetastore_get_tables_result::write(::apache::thrift::protocol
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter471;
-      for (_iter471 = this->success.begin(); _iter471 != this->success.end(); ++_iter471)
+      std::vector<std::string> ::const_iterator _iter493;
+      for (_iter493 = this->success.begin(); _iter493 != this->success.end(); ++_iter493)
       {
-        xfer += oprot->writeString((*_iter471));
+        xfer += oprot->writeString((*_iter493));
       }
       xfer += oprot->writeListEnd();
     }
@@ -4096,140 +4668,140 @@ uint32_t ThriftHiveMetastore_get_tables_presult::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size472;
-            ::apache::thrift::protocol::TType _etype475;
-            xfer += iprot->readListBegin(_etype475, _size472);
-            (*(this->success)).resize(_size472);
-            uint32_t _i476;
-            for (_i476 = 0; _i476 < _size472; ++_i476)
-            {
-              xfer += iprot->readString((*(this->success))[_i476]);
-            }
-            xfer += iprot->readListEnd();
-          }
-          this->__isset.success = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      default:
-        xfer += iprot->skip(ftype);
-        break;
-    }
-    xfer += iprot->readFieldEnd();
-  }
-
-  xfer += iprot->readStructEnd();
-
-  return xfer;
-}
-
-uint32_t ThriftHiveMetastore_get_all_tables_args::read(::apache::thrift::protocol::TProtocol* iprot) {
-
-  uint32_t xfer = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TType ftype;
-  int16_t fid;
-
-  xfer += iprot->readStructBegin(fname);
-
-  using ::apache::thrift::protocol::TProtocolException;
-
-
-  while (true)
-  {
-    xfer += iprot->readFieldBegin(fname, ftype, fid);
-    if (ftype == ::apache::thrift::protocol::T_STOP) {
-      break;
-    }
-    switch (fid)
-    {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRING) {
-          xfer += iprot->readString(this->db_name);
-          this->__isset.db_name = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      default:
-        xfer += iprot->skip(ftype);
-        break;
-    }
-    xfer += iprot->readFieldEnd();
-  }
-
-  xfer += iprot->readStructEnd();
-
-  return xfer;
-}
-
-uint32_t ThriftHiveMetastore_get_all_tables_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
-  uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_all_tables_args");
-
-  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
-  xfer += oprot->writeString(this->db_name);
-  xfer += oprot->writeFieldEnd();
-
-  xfer += oprot->writeFieldStop();
-  xfer += oprot->writeStructEnd();
-  return xfer;
-}
-
-uint32_t ThriftHiveMetastore_get_all_tables_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
-  uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_all_tables_pargs");
-
-  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
-  xfer += oprot->writeString((*(this->db_name)));
-  xfer += oprot->writeFieldEnd();
-
-  xfer += oprot->writeFieldStop();
-  xfer += oprot->writeStructEnd();
-  return xfer;
-}
-
-uint32_t ThriftHiveMetastore_get_all_tables_result::read(::apache::thrift::protocol::TProtocol* iprot) {
-
-  uint32_t xfer = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TType ftype;
-  int16_t fid;
-
-  xfer += iprot->readStructBegin(fname);
-
-  using ::apache::thrift::protocol::TProtocolException;
-
-
-  while (true)
-  {
-    xfer += iprot->readFieldBegin(fname, ftype, fid);
-    if (ftype == ::apache::thrift::protocol::T_STOP) {
-      break;
-    }
-    switch (fid)
-    {
-      case 0:
-        if (ftype == ::apache::thrift::protocol::T_LIST) {
-          {
-            this->success.clear();
-            uint32_t _size477;
-            ::apache::thrift::protocol::TType _etype480;
-            xfer += iprot->readListBegin(_etype480, _size477);
-            this->success.resize(_size477);
-            uint32_t _i481;
-            for (_i481 = 0; _i481 < _size477; ++_i481)
+            uint32_t _size494;
+            ::apache::thrift::protocol::TType _etype497;
+            xfer += iprot->readListBegin(_etype497, _size494);
+            (*(this->success)).resize(_size494);
+            uint32_t _i498;
+            for (_i498 = 0; _i498 < _size494; ++_i498)
             {
-              xfer += iprot->readString(this->success[_i481]);
+              xfer += iprot->readString((*(this->success))[_i498]);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_all_tables_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->db_name);
+          this->__isset.db_name = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_all_tables_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_all_tables_args");
+
+  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString(this->db_name);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_all_tables_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_all_tables_pargs");
+
+  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString((*(this->db_name)));
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_all_tables_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            this->success.clear();
+            uint32_t _size499;
+            ::apache::thrift::protocol::TType _etype502;
+            xfer += iprot->readListBegin(_etype502, _size499);
+            this->success.resize(_size499);
+            uint32_t _i503;
+            for (_i503 = 0; _i503 < _size499; ++_i503)
+            {
+              xfer += iprot->readString(this->success[_i503]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4268,10 +4840,10 @@ uint32_t ThriftHiveMetastore_get_all_tables_result::write(::apache::thrift::prot
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter482;
-      for (_iter482 = this->success.begin(); _iter482 != this->success.end(); ++_iter482)
+      std::vector<std::string> ::const_iterator _iter504;
+      for (_iter504 = this->success.begin(); _iter504 != this->success.end(); ++_iter504)
       {
-        xfer += oprot->writeString((*_iter482));
+        xfer += oprot->writeString((*_iter504));
       }
       xfer += oprot->writeListEnd();
     }
@@ -4310,14 +4882,14 @@ uint32_t ThriftHiveMetastore_get_all_tables_presult::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size483;
-            ::apache::thrift::protocol::TType _etype486;
-            xfer += iprot->readListBegin(_etype486, _size483);
-            (*(this->success)).resize(_size483);
-            uint32_t _i487;
-            for (_i487 = 0; _i487 < _size483; ++_i487)
+            uint32_t _size505;
+            ::apache::thrift::protocol::TType _etype508;
+            xfer += iprot->readListBegin(_etype508, _size505);
+            (*(this->success)).resize(_size505);
+            uint32_t _i509;
+            for (_i509 = 0; _i509 < _size505; ++_i509)
             {
-              xfer += iprot->readString((*(this->success))[_i487]);
+              xfer += iprot->readString((*(this->success))[_i509]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4596,14 +5168,14 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_args::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->tbl_names.clear();
-            uint32_t _size488;
-            ::apache::thrift::protocol::TType _etype491;
-            xfer += iprot->readListBegin(_etype491, _size488);
-            this->tbl_names.resize(_size488);
-            uint32_t _i492;
-            for (_i492 = 0; _i492 < _size488; ++_i492)
+            uint32_t _size510;
+            ::apache::thrift::protocol::TType _etype513;
+            xfer += iprot->readListBegin(_etype513, _size510);
+            this->tbl_names.resize(_size510);
+            uint32_t _i514;
+            for (_i514 = 0; _i514 < _size510; ++_i514)
             {
-              xfer += iprot->readString(this->tbl_names[_i492]);
+              xfer += iprot->readString(this->tbl_names[_i514]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4635,10 +5207,10 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_args::write(::apache::thr
   xfer += oprot->writeFieldBegin("tbl_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tbl_names.size()));
-    std::vector<std::string> ::const_iterator _iter493;
-    for (_iter493 = this->tbl_names.begin(); _iter493 != this->tbl_names.end(); ++_iter493)
+    std::vector<std::string> ::const_iterator _iter515;
+    for (_iter515 = this->tbl_names.begin(); _iter515 != this->tbl_names.end(); ++_iter515)
     {
-      xfer += oprot->writeString((*_iter493));
+      xfer += oprot->writeString((*_iter515));
     }
     xfer += oprot->writeListEnd();
   }
@@ -4660,10 +5232,10 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_pargs::write(::apache::th
   xfer += oprot->writeFieldBegin("tbl_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->tbl_names)).size()));
-    std::vector<std::string> ::const_iterator _iter494;
-    for (_iter494 = (*(this->tbl_names)).begin(); _iter494 != (*(this->tbl_names)).end(); ++_iter494)
+    std::vector<std::string> ::const_iterator _iter516;
+    for (_iter516 = (*(this->tbl_names)).begin(); _iter516 != (*(this->tbl_names)).end(); ++_iter516)
     {
-      xfer += oprot->writeString((*_iter494));
+      xfer += oprot->writeString((*_iter516));
     }
     xfer += oprot->writeListEnd();
   }
@@ -4698,14 +5270,14 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_result::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size495;
-            ::apache::thrift::protocol::TType _etype498;
-            xfer += iprot->readListBegin(_etype498, _size495);
-            this->success.resize(_size495);
-            uint32_t _i499;
-            for (_i499 = 0; _i499 < _size495; ++_i499)
+            uint32_t _size517;
+            ::apache::thrift::protocol::TType _etype520;
+            xfer += iprot->readListBegin(_etype520, _size517);
+            this->success.resize(_size517);
+            uint32_t _i521;
+            for (_i521 = 0; _i521 < _size517; ++_i521)
             {
-              xfer += this->success[_i499].read(iprot);
+              xfer += this->success[_i521].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -4760,10 +5332,10 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_result::write(::apache::t
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Table> ::const_iterator _iter500;
-      for (_iter500 = this->success.begin(); _iter500 != this->success.end(); ++_iter500)
+      std::vector<Table> ::const_iterator _iter522;
+      for (_iter522 = this->success.begin(); _iter522 != this->success.end(); ++_iter522)
       {
-        xfer += (*_iter500).write(oprot);
+        xfer += (*_iter522).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -4810,14 +5382,14 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_presult::read(::apache::t
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size501;
-            ::apache::thrift::protocol::TType _etype504;
-            xfer += iprot->readListBegin(_etype504, _size501);
-            (*(this->success)).resize(_size501);
-            uint32_t _i505;
-            for (_i505 = 0; _i505 < _size501; ++_i505)
+            uint32_t _size523;
+            ::apache::thrift::protocol::TType _etype526;
+            xfer += iprot->readListBegin(_etype526, _size523);
+            (*(this->success)).resize(_size523);
+            uint32_t _i527;
+            for (_i527 = 0; _i527 < _size523; ++_i527)
             {
-              xfer += (*(this->success))[_i505].read(iprot);
+              xfer += (*(this->success))[_i527].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -4984,14 +5556,14 @@ uint32_t ThriftHiveMetastore_get_table_names_by_filter_result::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size506;
-            ::apache::thrift::protocol::TType _etype509;
-            xfer += iprot->readListBegin(_etype509, _size506);
-            this->success.resize(_size506);
-            uint32_t _i510;
-            for (_i510 = 0; _i510 < _size506; ++_i510)
+            uint32_t _size528;
+            ::apache::thrift::protocol::TType _etype531;
+            xfer += iprot->readListBegin(_etype531, _size528);
+            this->success.resize(_size528);
+            uint32_t _i532;
+            for (_i532 = 0; _i532 < _size528; ++_i532)
             {
-              xfer += iprot->readString(this->success[_i510]);
+              xfer += iprot->readString(this->success[_i532]);
             }
             xfer += iprot->readListEnd();
           }
@@ -5046,10 +5618,10 @@ uint32_t ThriftHiveMetastore_get_table_names_by_filter_result::write(::apache::t
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter511;
-      for (_iter511 = this->success.begin(); _iter511 != this->success.end(); ++_iter511)
+      std::vector<std::string> ::const_iterator _iter533;
+      for (_iter533 = this->success.begin(); _iter533 != this->success.end(); ++_iter533)
       {
-        xfer += oprot->writeString((*_iter511));
+        xfer += oprot->writeString((*_iter533));
       }
       xfer += oprot->writeListEnd();
     }
@@ -5096,14 +5668,14 @@ uint32_t ThriftHiveMetastore_get_table_names_by_filter_presult::read(::apache::t
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size512;
-            ::apache::thrift::protocol::TType _etype515;
-            xfer += iprot->readListBegin(_etype515, _size512);
-            (*(this->success)).resize(_size512);
-            uint32_t _i516;
-            for (_i516 = 0; _i516 < _size512; ++_i516)
+            uint32_t _size534;
+            ::apache::thrift::protocol::TType _etype537;
+            xfer += iprot->readListBegin(_etype537, _size534);
+            (*(this->success)).resize(_size534);
+            uint32_t _i538;
+            for (_i538 = 0; _i538 < _size534; ++_i538)
             {
-              xfer += iprot->readString((*(this->success))[_i516]);
+              xfer += iprot->readString((*(this->success))[_i538]);
             }
             xfer += iprot->readListEnd();
           }
@@ -6306,14 +6878,14 @@ uint32_t ThriftHiveMetastore_add_partitions_args::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->new_parts.clear();
-            uint32_t _size517;
-            ::apache::thrift::protocol::TType _etype520;
-            xfer += iprot->readListBegin(_etype520, _size517);
-            this->new_parts.resize(_size517);
-            uint32_t _i521;
-            for (_i521 = 0; _i521 < _size517; ++_i521)
+            uint32_t _size539;
+            ::apache::thrift::protocol::TType _etype542;
+            xfer += iprot->readListBegin(_etype542, _size539);
+            this->new_parts.resize(_size539);
+            uint32_t _i543;
+            for (_i543 = 0; _i543 < _size539; ++_i543)
             {
-              xfer += this->new_parts[_i521].read(iprot);
+              xfer += this->new_parts[_i543].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -6341,10 +6913,10 @@ uint32_t ThriftHiveMetastore_add_partitions_args::write(::apache::thrift::protoc
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->new_parts.size()));
-    std::vector<Partition> ::const_iterator _iter522;
-    for (_iter522 = this->new_parts.begin(); _iter522 != this->new_parts.end(); ++_iter522)
+    std::vector<Partition> ::const_iterator _iter544;
+    for (_iter544 = this->new_parts.begin(); _iter544 != this->new_parts.end(); ++_iter544)
     {
-      xfer += (*_iter522).write(oprot);
+      xfer += (*_iter544).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -6362,10 +6934,10 @@ uint32_t ThriftHiveMetastore_add_partitions_pargs::write(::apache::thrift::proto
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->new_parts)).size()));
-    std::vector<Partition> ::const_iterator _iter523;
-    for (_iter523 = (*(this->new_parts)).begin(); _iter523 != (*(this->new_parts)).end(); ++_iter523)
+    std::vector<Partition> ::const_iterator _iter545;
+    for (_iter545 = (*(this->new_parts)).begin(); _iter545 != (*(this->new_parts)).end(); ++_iter545)
     {
-      xfer += (*_iter523).write(oprot);
+      xfer += (*_iter545).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -6556,14 +7128,14 @@ uint32_t ThriftHiveMetastore_add_partitions_pspec_args::read(::apache::thrift::p
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->new_parts.clear();
-            uint32_t _size524;
-            ::apache::thrift::protocol::TType _etype527;
-            xfer += iprot->readListBegin(_etype527, _size524);
-            this->new_parts.resize(_size524);
-            uint32_t _i528;
-            for (_i528 = 0; _i528 < _size524; ++_i528)
+            uint32_t _size546;
+            ::apache::thrift::protocol::TType _etype549;
+            xfer += iprot->readListBegin(_etype549, _size546);
+            this->new_parts.resize(_size546);
+            uint32_t _i550;
+            for (_i550 = 0; _i550 < _size546; ++_i550)
             {
-              xfer += this->new_parts[_i528].read(iprot);
+              xfer += this->new_parts[_i550].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -6591,10 +7163,10 @@ uint32_t ThriftHiveMetastore_add_partitions_pspec_args::write(::apache::thrift::
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->new_parts.size()));
-    std::vector<PartitionSpec> ::const_iterator _iter529;
-    for (_iter529 = this->new_parts.begin(); _iter529 != this->new_parts.end(); ++_iter529)
+    std::vector<PartitionSpec> ::const_iterator _iter551;
+    for (_iter551 = this->new_parts.begin(); _iter551 != this->new_parts.end(); ++_iter551)
     {
-      xfer += (*_iter529).write(oprot);
+      xfer += (*_iter551).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -6612,10 +7184,10 @@ uint32_t ThriftHiveMetastore_add_partitions_pspec_pargs::write(::apache::thrift:
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->new_parts)).size()));
-    std::vector<PartitionSpec> ::const_iterator _iter530;
-    for (_iter530 = (*(this->new_parts)).begin(); _iter530 != (*(this->new_parts)).end(); ++_iter530)
+    std::vector<PartitionSpec> ::const_iterator _iter552;
+    for (_iter552 = (*(this->new_parts)).begin(); _iter552 != (*(this->new_parts)).end(); ++_iter552)
     {
-      xfer += (*_iter530).write(oprot);
+      xfer += (*_iter552).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -6822,14 +7394,14 @@ uint32_t ThriftHiveMetastore_append_partition_args::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size531;
-            ::apache::thrift::protocol::TType _etype534;
-            xfer += iprot->readListBegin(_etype534, _size531);
-            this->part_vals.resize(_size531);
-            uint32_t _i535;
-            for (_i535 = 0; _i535 < _size531; ++_i535)
+            uint32_t _size553;
+            ::apache::thrift::protocol::TType _etype556;
+            xfer += iprot->readListBegin(_etype556, _size553);
+            this->part_vals.resize(_size553);
+            uint32_t _i557;
+            for (_i557 = 0; _i557 < _size553; ++_i557)
             {
-              xfer += iprot->readString(this->part_vals[_i535]);
+              xfer += iprot->readString(this->part_vals[_i557]);
             }
             xfer += iprot->readListEnd();
           }
@@ -6865,10 +7437,10 @@ uint32_t ThriftHiveMetastore_append_partition_args::write(::apache::thrift::prot
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter536;
-    for (_iter536 = this->part_vals.begin(); _iter536 != this->part_vals.end(); ++_iter536)
+    std::vector<std::string> ::const_iterator _iter558;
+    for (_iter558 = this->part_vals.begin(); _iter558 != this->part_vals.end(); ++_iter558)
     {
-      xfer += oprot->writeString((*_iter536));
+      xfer += oprot->writeString((*_iter558));
     }
     xfer += oprot->writeListEnd();
   }
@@ -6894,10 +7466,10 @@ uint32_t ThriftHiveMetastore_append_partition_pargs::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter537;
-    for (_iter537 = (*(this->part_vals)).begin(); _iter537 != (*(this->part_vals)).end(); ++_iter537)
+    std::vector<std::string> ::const_iterator _iter559;
+    for (_iter559 = (*(this->part_vals)).begin(); _iter559 != (*(this->part_vals)).end(); ++_iter559)
     {
-      xfer += oprot->writeString((*_iter537));
+      xfer += oprot->writeString((*_iter559));
     }
     xfer += oprot->writeListEnd();
   }
@@ -7326,14 +7898,14 @@ uint32_t ThriftHiveMetastore_append_partition_with_environment_context_args::rea
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size538;
-            ::apache::thrift::protocol::TType _etype541;
-            xfer += iprot->readListBegin(_etype541, _size538);
-            this->part_vals.resize(_size538);
-            uint32_t _i542;
-            for (_i542 = 0; _i542 < _size538; ++_i542)
+            uint32_t _size560;
+            ::apache::thrift::protocol::TType _etype563;
+            xfer += iprot->readListBegin(_etype563, _size560);
+            this->part_vals.resize(_size560);
+            uint32_t _i564;
+            for (_i564 = 0; _i564 < _size560; ++_i564)
             {
-              xfer += iprot->readString(this->part_vals[_i542]);
+              xfer += iprot->readString(this->part_vals[_i564]);
             }
             xfer += iprot->readListEnd();
           }
@@ -7377,10 +7949,10 @@ uint32_t ThriftHiveMetastore_append_partition_with_environment_context_args::wri
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter543;
-    for (_iter543 = this->part_vals.begin(); _iter543 != this->part_vals.end(); ++_iter543)
+    std::vector<std::string> ::const_iterator _iter565;
+    for (_iter565 = this->part_vals.begin(); _iter565 != this->part_vals.end(); ++_iter565)
     {
-      xfer += oprot->writeString((*_iter543));
+      xfer += oprot->writeString((*_iter565));
     }
     xfer += oprot->writeListEnd();
   }
@@ -7410,10 +7982,10 @@ uint32_t ThriftHiveMetastore_append_partition_with_environment_context_pargs::wr
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter544;
-    for (_iter544 = (*(this->part_vals)).begin(); _iter544 != (*(this->part_vals)).end(); ++_iter544)
+    std::vector<std::string> ::const_iterator _iter566;
+    for (_iter566 = (*(this->part_vals)).begin(); _iter566 != (*(this->part_vals)).end(); ++_iter566)
     {
-      xfer += oprot->writeString((*_iter544));
+      xfer += oprot->writeString((*_iter566));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8148,14 +8720,14 @@ uint32_t ThriftHiveMetastore_drop_partition_args::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size545;
-            ::apache::thrift::protocol::TType _etype548;
-            xfer += iprot->readListBegin(_etype548, _size545);
-            this->part_vals.resize(_size545);
-            uint32_t _i549;
-            for (_i549 = 0; _i549 < _size545; ++_i549)
+            uint32_t _size567;
+            ::apache::thrift::protocol::TType _etype570;
+            xfer += iprot->readListBegin(_etype570, _size567);
+            this->part_vals.resize(_size567);
+            uint32_t _i571;
+            for (_i571 = 0; _i571 < _size567; ++_i571)
             {
-              xfer += iprot->readString(this->part_vals[_i549]);
+              xfer += iprot->readString(this->part_vals[_i571]);
             }
             xfer += iprot->readListEnd();
           }
@@ -8199,10 +8771,10 @@ uint32_t ThriftHiveMetastore_drop_partition_args::write(::apache::thrift::protoc
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter550;
-    for (_iter550 = this->part_vals.begin(); _iter550 != this->part_vals.end(); ++_iter550)
+    std::vector<std::string> ::const_iterator _iter572;
+    for (_iter572 = this->part_vals.begin(); _iter572 != this->part_vals.end(); ++_iter572)
     {
-      xfer += oprot->writeString((*_iter550));
+      xfer += oprot->writeString((*_iter572));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8232,10 +8804,10 @@ uint32_t ThriftHiveMetastore_drop_partition_pargs::write(::apache::thrift::proto
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter551;
-    for (_iter551 = (*(this->part_vals)).begin(); _iter551 != (*(this->part_vals)).end(); ++_iter551)
+    std::vector<std::string> ::const_iterator _iter573;
+    for (_iter573 = (*(this->part_vals)).begin(); _iter573 != (*(this->part_vals)).end(); ++_iter573)
     {
-      xfer += oprot->writeString((*_iter551));
+      xfer += oprot->writeString((*_iter573));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8426,14 +8998,14 @@ uint32_t ThriftHiveMetastore_drop_partition_with_environment_context_args::read(
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size552;
-            ::apache::thrift::protocol::TType _etype555;
-            xfer += iprot->readListBegin(_etype555, _size552);
-            this->part_vals.resize(_size552);
-            uint32_t _i556;
-            for (_i556 = 0; _i556 < _size552; ++_i556)
+            uint32_t _size574;
+            ::apache::thrift::protocol::TType _etype577;
+            xfer += iprot->readListBegin(_etype577, _size574);
+            this->part_vals.resize(_size574);
+            uint32_t _i578;
+            for (_i578 = 0; _i578 < _size574; ++_i578)
             {
-              xfer += iprot->readString(this->part_vals[_i556]);
+              xfer += iprot->readString(this->part_vals[_i578]);
             }
             xfer += iprot->readListEnd();
           }
@@ -8485,10 +9057,10 @@ uint32_t ThriftHiveMetastore_drop_partition_with_environment_context_args::write
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter557;
-    for (_iter557 = this->part_vals.begin(); _iter557 != this->part_vals.end(); ++_iter557)
+    std::vector<std::string> ::const_iterator _iter579;
+    for (_iter579 = this->part_vals.begin(); _iter579 != this->part_vals.end(); ++_iter579)
     {
-      xfer += oprot->writeString((*_iter557));
+      xfer += oprot->writeString((*_iter579));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8522,10 +9094,10 @@ uint32_t ThriftHiveMetastore_drop_partition_with_environment_context_pargs::writ
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter558;
-    for (_iter558 = (*(this->part_vals)).begin(); _iter558 != (*(this->part_vals)).end(); ++_iter558)
+    std::vector<std::string> ::const_iterator _iter580;
+    for (_iter580 = (*(this->part_vals)).begin(); _iter580 != (*(this->part_vals)).end(); ++_iter580)
     {
-      xfer += oprot->writeString((*_iter558));
+      xfer += oprot->writeString((*_iter580));
     }
     xfer += oprot->writeListEnd();
   }
@@ -9438,14 +10010,14 @@ uint32_t ThriftHiveMetastore_get_partition_args::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size559;
-            ::apache::thrift::protocol::TType _etype562;
-            xfer += iprot->readListBegin(_etype562, _size559);
-            this->part_vals.resize(_size559);
-            uint32_t _i563;
-            for (_i563 = 0; _i563 < _size559; ++_i563)
+            uint32_t _size581;
+            ::apache::thrift::protocol::TType _etype584;
+            xfer += iprot->readListBegin(_etype584, _size581);
+            this->part_vals.resize(_size581);
+            uint32_t _i585;
+            for (_i585 = 0; _i585 < _size581; ++_i585)
             {
-              xfer += iprot->readString(this->part_vals[_i563]);
+              xfer += iprot->readString(this->part_vals[_i585]);
             }
             xfer += iprot->readListEnd();
           }
@@ -9481,10 +10053,10 @@ uint32_t ThriftHiveMetastore_get_partition_args::write(::apache::thrift::protoco
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter564;
-    for (_iter564 = this->part_vals.begin(); _iter564 != this->part_vals.end(); ++_iter564)
+    std::vector<std::string> ::const_iterator _iter586;
+    for (_iter586 = this->part_vals.begin(); _iter586 != this->part_vals.end(); ++_iter586)
     {
-      xfer += oprot->writeString((*_iter564));
+      xfer += oprot->writeString((*_iter586));
     }
     xfer += oprot->writeListEnd();
   }
@@ -9510,10 +10082,10 @@ uint32_t ThriftHiveMetastore_get_partition_pargs::write(::apache::thrift::protoc
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter565;
-    for (_iter565 = (*(this->part_vals)).begin(); _iter565 != (*(this->part_vals)).end(); ++_iter565)
+    std::vector<std::string> ::const_iterator _iter587;
+    for (_iter587 = (*(this->part_vals)).begin(); _iter587 != (*(this->part_vals)).end(); ++_iter587)
     {
-      xfer += oprot->writeString((*_iter565));
+      xfer += oprot->writeString((*_iter587));
     }
     xfer += oprot->writeListEnd();
   }
@@ -9684,17 +10256,17 @@ uint32_t ThriftHiveMetastore_exchange_partition_args::read(::apache::thrift::pro
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->partitionSpecs.clear();
-            uint32_t _size566;
-            ::apache::thrift::protocol::TType _ktype567;
-            ::apache::thrift::protocol::TType _vtype568;
-            xfer += iprot->readMapBegin(_ktype567, _vtype568, _size566);
-            uint32_t _i570;
-            for (_i570 = 0; _i570 < _size566; ++_i570)
+            uint32_t _size588;
+            ::apache::thrift::protocol::TType _ktype589;
+            ::apache::thrift::protocol::TType _vtype590;
+            xfer += iprot->readMapBegin(_ktype589, _vtype590, _size588);
+            uint32_t _i592;
+            for (_i592 = 0; _i592 < _size588; ++_i592)
             {
-              std::string _key571;
-              xfer += iprot->readString(_key571);
-              std::string& _val572 = this->partitionSpecs[_key571];
-              xfer += iprot->readString(_val572);
+              std::string _key593;
+              xfer += iprot->readString(_key593);
+              std::string& _val594 = this->partitionSpecs[_key593];
+              xfer += iprot->readString(_val594);
             }
             xfer += iprot->readMapEnd();
           }
@@ -9754,11 +10326,11 @@ uint32_t ThriftHiveMetastore_exchange_partition_args::write(::apache::thrift::pr
   xfer += oprot->writeFieldBegin("partitionSpecs", ::apache::thrift::protocol::T_MAP, 1);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partitionSpecs.size()));
-    std::map<std::string, std::string> ::const_iterator _iter573;
-    for (_iter573 = this->partitionSpecs.begin(); _iter573 != this->partitionSpecs.end(); ++_iter573)
+    std::map<std::string, std::string> ::const_iterator _iter595;
+    for (_iter595 = this->partitionSpecs.begin(); _iter595 != this->partitionSpecs.end(); ++_iter595)
     {
-      xfer += oprot->writeString(_iter573->first);
-      xfer += oprot->writeString(_iter573->second);
+      xfer += oprot->writeString(_iter595->first);
+      xfer += oprot->writeString(_iter595->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -9792,11 +10364,11 @@ uint32_t ThriftHiveMetastore_exchange_partition_pargs::write(::apache::thrift::p
   xfer += oprot->writeFieldBegin("partitionSpecs", ::apache::thrift::protocol::T_MAP, 1);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->partitionSpecs)).size()));
-    std::map<std::string, std::string> ::const_iterator _iter574;
-    for (_iter574 = (*(this->partitionSpecs)).begin(); _iter574 != (*(this->partitionSpecs)).end(); ++_iter574)
+    std::map<std::string, std::string> ::const_iterator _iter596;
+    for (_iter596 = (*(this->partitionSpecs)).begin(); _iter596 != (*(this->partitionSpecs)).end(); ++_iter596)
     {
-      xfer += oprot->writeString(_iter574->first);
-      xfer += oprot->writeString(_iter574->second);
+      xfer += oprot->writeString(_iter596->first);
+      xfer += oprot->writeString(_iter596->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -10039,14 +10611,14 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size575;
-            ::apache::thrift::protocol::TType _etype578;
-            xfer += iprot->readListBegin(_etype578, _size575);
-            this->part_vals.resize(_size575);
-            uint32_t _i579;
-            for (_i579 = 0; _i579 < _size575; ++_i579)
+            uint32_t _size597;
+            ::apache::thrift::protocol::TType _etype600;
+            xfer += iprot->readListBegin(_etype600, _size597);
+            this->part_vals.resize(_size597);
+            uint32_t _i601;
+            for (_i601 = 0; _i601 < _size597; ++_i601)
             {
-              xfer += iprot->readString(this->part_vals[_i579]);
+              xfer += iprot->readString(this->part_vals[_i601]);
             }
             xfer += iprot->readListEnd();
           }
@@ -10067,14 +10639,14 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size580;
-            ::apache::thrift::protocol::TType _etype583;
-            xfer += iprot->readListBegin(_etype583, _size580);
-            this->group_names.resize(_size580);
-            uint32_t _i584;
-            for (_i584 = 0; _i584 < _size580; ++_i584)
+            uint32_t _size602;
+            ::apache::thrift::protocol::TType _etype605;
+            xfer += iprot->readListBegin(_etype605, _size602);
+            this->group_names.resize(_size602);
+            uint32_t _i606;
+            for (_i606 = 0; _i606 < _size602; ++_i606)
             {
-              xfer += iprot->readString(this->group_names[_i584]);
+              xfer += iprot->readString(this->group_names[_i606]);
             }
             xfer += iprot->readListEnd();
           }
@@ -10110,10 +10682,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::write(::apache::thrif
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter585;
-    for (_iter585 = this->part_vals.begin(); _iter585 != this->part_vals.end(); ++_iter585)
+    std::vector<std::string> ::const_iterator _iter607;
+    for (_iter607 = this->part_vals.begin(); _iter607 != this->part_vals.end(); ++_iter607)
     {
-      xfer += oprot->writeString((*_iter585));
+      xfer += oprot->writeString((*_iter607));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10126,10 +10698,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::write(::apache::thrif
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter586;
-    for (_iter586 = this->group_names.begin(); _iter586 != this->group_names.end(); ++_iter586)
+    std::vector<std::string> ::const_iterator _iter608;
+    for (_iter608 = this->group_names.begin(); _iter608 != this->group_names.end(); ++_iter608)
     {
-      xfer += oprot->writeString((*_iter586));
+      xfer += oprot->writeString((*_iter608));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10155,10 +10727,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_pargs::write(::apache::thri
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter587;
-    for (_iter587 = (*(this->part_vals)).begin(); _iter587 != (*(this->part_vals)).end(); ++_iter587)
+    std::vector<std::string> ::const_iterator _iter609;
+    for (_iter609 = (*(this->part_vals)).begin(); _iter609 != (*(this->part_vals)).end(); ++_iter609)
     {
-      xfer += oprot->writeString((*_iter587));
+      xfer += oprot->writeString((*_iter609));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10171,10 +10743,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_pargs::write(::apache::thri
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter588;
-    for (_iter588 = (*(this->group_names)).begin(); _iter588 != (*(this->group_names)).end(); ++_iter588)
+    std::vector<std::string> ::const_iterator _iter610;
+    for (_iter610 = (*(this->group_names)).begin(); _iter610 != (*(this->group_names)).end(); ++_iter610)
     {
-      xfer += oprot->writeString((*_iter588));
+      xfer += oprot->writeString((*_iter610));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10677,14 +11249,14 @@ uint32_t ThriftHiveMetastore_get_partitions_result::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size589;
-            ::apache::thrift::protocol::TType _etype592;
-            xfer += iprot->readListBegin(_etype592, _size589);
-            this->success.resize(_size589);
-            uint32_t _i593;
-            for (_i593 = 0; _i593 < _size589; ++_i593)
+            uint32_t _size611;
+            ::apache::thrift::protocol::TType _etype614;
+            xfer += iprot->readListBegin(_etype614, _size611);
+            this->success.resize(_size611);
+            uint32_t _i615;
+            for (_i615 = 0; _i615 < _size611; ++_i615)
             {
-              xfer += this->success[_i593].read(iprot);
+              xfer += this->success[_i615].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -10731,10 +11303,10 @@ uint32_t ThriftHiveMetastore_get_partitions_result::write(::apache::thrift::prot
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter594;
-      for (_iter594 = this->success.begin(); _iter594 != this->success.end(); ++_iter594)
+      std::vector<Partition> ::const_iterator _iter616;
+      for (_iter616 = this->success.begin(); _iter616 != this->success.end(); ++_iter616)
       {
-        xfer += (*_iter594).write(oprot);
+        xfer += (*_iter616).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -10777,14 +11349,14 @@ uint32_t ThriftHiveMetastore_get_partitions_presult::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size595;
-            ::apache::thrift::protocol::TType _etype598;
-            xfer += iprot->readListBegin(_etype598, _size595);
-            (*(this->success)).resize(_size595);
-            uint32_t _i599;
-            for (_i599 = 0; _i599 < _size595; ++_i599)
+            uint32_t _size617;
+            ::apache::thrift::protocol::TType _etype620;
+            xfer += iprot->readListBegin(_etype620, _size617);
+            (*(this->success)).resize(_size617);
+            uint32_t _i621;
+            for (_i621 = 0; _i621 < _size617; ++_i621)
             {
-              xfer += (*(this->success))[_i599].read(iprot);
+              xfer += (*(this->success))[_i621].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -10877,14 +11449,14 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_args::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size600;
-            ::apache::thrift::protocol::TType _etype603;
-            xfer += iprot->readListBegin(_etype603, _size600);
-            this->group_names.resize(_size600);
-            uint32_t _i604;
-            for (_i604 = 0; _i604 < _size600; ++_i604)
+            uint32_t _size622;
+            ::apache::thrift::protocol::TType _etype625;
+            xfer += iprot->readListBegin(_etype625, _size622);
+            this->group_names.resize(_size622);
+            uint32_t _i626;
+            for (_i626 = 0; _i626 < _size622; ++_i626)
             {
-              xfer += iprot->readString(this->group_names[_i604]);
+              xfer += iprot->readString(this->group_names[_i626]);
             }
             xfer += iprot->readListEnd();
           }
@@ -10928,10 +11500,10 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_args::write(::apache::thri
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter605;
-    for (_iter605 = this->group_names.begin(); _iter605 != this->group_names.end(); ++_iter605)
+    std::vector<std::string> ::const_iterator _iter627;
+    for (_iter627 = this->group_names.begin(); _iter627 != this->group_names.end(); ++_iter627)
     {
-      xfer += oprot->writeString((*_iter605));
+      xfer += oprot->writeString((*_iter627));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10965,10 +11537,10 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_pargs::write(::apache::thr
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter606;
-    for (_iter606 = (*(this->group_names)).begin(); _iter606 != (*(this->group_names)).end(); ++_iter606)
+    std::vector<std::string> ::const_iterator _iter628;
+    for (_iter628 = (*(this->group_names)).begin(); _iter628 != (*(this->group_names)).end(); ++_iter628)
     {
-      xfer += oprot->writeString((*_iter606));
+      xfer += oprot->writeString((*_iter628));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11003,14 +11575,14 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_result::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size607;
-            ::apache::thrift::protocol::TType _etype610;
-            xfer += iprot->readListBegin(_etype610, _size607);
-            this->success.resize(_size607);
-            uint32_t _i611;
-            for (_i611 = 0; _i611 < _size607; ++_i611)
+            uint32_t _size629;
+            ::apache::thrift::protocol::TType _etype632;
+            xfer += iprot->readListBegin(_etype632, _size629);
+            this->success.resize(_size629);
+            uint32_t _i633;
+            for (_i633 = 0; _i633 < _size629; ++_i633)
             {
-              xfer += this->success[_i611].read(iprot);
+              xfer += this->success[_i633].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11057,10 +11629,10 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_result::write(::apache::th
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter612;
-      for (_iter612 = this->success.begin(); _iter612 != this->success.end(); ++_iter612)
+      std::vector<Partition> ::const_iterator _iter634;
+      for (_iter634 = this->success.begin(); _iter634 != this->success.end(); ++_iter634)
       {
-        xfer += (*_iter612).write(oprot);
+        xfer += (*_iter634).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -11103,14 +11675,14 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_presult::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size613;
-            ::apache::thrift::protocol::TType _etype616;
-            xfer += iprot->readListBegin(_etype616, _size613);
-            (*(this->success)).resize(_size613);
-            uint32_t _i617;
-            for (_i617 = 0; _i617 < _size613; ++_i617)
+            uint32_t _size635;
+            ::apache::thrift::protocol::TType _etype638;
+            xfer += iprot->readListBegin(_etype638, _size635);
+            (*(this->success)).resize(_size635);
+            uint32_t _i639;
+            for (_i639 = 0; _i639 < _size635; ++_i639)
             {
-              xfer += (*(this->success))[_i617].read(iprot);
+              xfer += (*(this->success))[_i639].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11269,14 +11841,14 @@ uint32_t ThriftHiveMetastore_get_partitions_pspec_result::read(::apache::thrift:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size618;
-            ::apache::thrift::protocol::TType _etype621;
-            xfer += iprot->readListBegin(_etype621, _size618);
-            this->success.resize(_size618);
-            uint32_t _i622;
-            for (_i622 = 0; _i622 < _size618; ++_i622)
+            uint32_t _size640;
+            ::apache::thrift::protocol::TType _etype643;
+            xfer += iprot->readListBegin(_etype643, _size640);
+            this->success.resize(_size640);
+            uint32_t _i644;
+            for (_i644 = 0; _i644 < _size640; ++_i644)
             {
-              xfer += this->success[_i622].read(iprot);
+              xfer += this->success[_i644].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11323,10 +11895,10 @@ uint32_t ThriftHiveMetastore_get_partitions_pspec_result::write(::apache::thrift
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<PartitionSpec> ::const_iterator _iter623;
-      for (_iter623 = this->success.begin(); _iter623 != this->success.end(); ++_iter623)
+      std::vector<PartitionSpec> ::const_iterator _iter645;
+      for (_iter645 = this->success.begin(); _iter645 != this->success.end(); ++_iter645)
       {
-        xfer += (*_iter623).write(oprot);
+        xfer += (*_iter645).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -11369,14 +11941,14 @@ uint32_t ThriftHiveMetastore_get_partitions_pspec_presult::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size624;
-            ::apache::thrift::protocol::TType _etype627;
-            xfer += iprot->readListBegin(_etype627, _size624);
-            (*(this->success)).resize(_size624);
-            uint32_t _i628;
-            for (_i628 = 0; _i628 < _size624; ++_i628)
+            uint32_t _size646;
+            ::apache::thrift::protocol::TType _etype649;
+            xfer += iprot->readListBegin(_etype649, _size646);
+            (*(this->success)).resize(_size646);
+            uint32_t _i650;
+            for (_i650 = 0; _i650 < _size646; ++_i650)
             {
-              xfer += (*(this->success))[_i628].read(iprot);
+              xfer += (*(this->success))[_i650].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11535,14 +12107,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_result::read(::apache::thrift::
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size629;
-            ::apache::thrift::protocol::TType _etype632;
-            xfer += iprot->readListBegin(_etype632, _size629);
-            this->success.resize(_size629);
-            uint32_t _i633;
-            for (_i633 = 0; _i633 < _size629; ++_i633)
+            uint32_t _size651;
+            ::apache::thrift::protocol::TType _etype654;
+            xfer += iprot->readListBegin(_etype654, _size651);
+            this->success.resize(_size651);
+            uint32_t _i655;
+            for (_i655 = 0; _i655 < _size651; ++_i655)
             {
-              xfer += iprot->readString(this->success[_i633]);
+              xfer += iprot->readString(this->success[_i655]);
             }
             xfer += iprot->readListEnd();
           }
@@ -11581,10 +12153,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_result::write(::apache::thrift:
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter634;
-      for (_iter634 = this->success.begin(); _iter634 != this->success.end(); ++_iter634)
+      std::vector<std::string> ::const_iterator _iter656;
+      for (_iter656 = this->success.begin(); _iter656 != this->success.end(); ++_iter656)
       {
-        xfer += oprot->writeString((*_iter634));
+        xfer += oprot->writeString((*_iter656));
       }
       xfer += oprot->writeListEnd();
     }
@@ -11623,14 +12195,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_presult::read(::apache::thrift:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size635;
-            ::apache::thrift::protocol::TType _etype638;
-            xfer += iprot->readListBegin(_etype638, _size635);
-            (*(this->success)).resize(_size635);
-            uint32_t _i639;
-            for (_i639 = 0; _i639 < _size635; ++_i639)
+            uint32_t _size657;
+            ::apache::thrift::protocol::TType _etype660;
+            xfer += iprot->readListBegin(_etype660, _size657);
+            (*(this->success)).resize(_size657);
+            uint32_t _i661;
+            for (_i661 = 0; _i661 < _size657; ++_i661)
             {
-              xfer += iprot->readString((*(this->success))[_i639]);
+              xfer += iprot->readString((*(this->success))[_i661]);
             }
             xfer += iprot->readListEnd();
           }
@@ -11699,14 +12271,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_args::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size640;
-            ::apache::thrift::protocol::TType _etype643;
-            xfer += iprot->readListBegin(_etype643, _size640);
-            this->part_vals.resize(_size640);
-            uint32_t _i644;
-            for (_i644 = 0; _i644 < _size640; ++_i644)
+            uint32_t _size662;
+            ::apache::thrift::protocol::TType _etype665;
+            xfer += iprot->readListBegin(_etype665, _size662);
+            this->part_vals.resize(_size662);
+            uint32_t _i666;
+            for (_i666 = 0; _i666 < _size662; ++_i666)
             {
-              xfer += iprot->readString(this->part_vals[_i644]);
+              xfer += iprot->readString(this->part_vals[_i666]);
             }
             xfer += iprot->readListEnd();
           }
@@ -11750,10 +12322,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_args::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter645;
-    for (_iter645 = this->part_vals.begin(); _iter645 != this->part_vals.end(); ++_iter645)
+    std::vector<std::string> ::const_iterator _iter667;
+    for (_iter667 = this->part_vals.begin(); _iter667 != this->part_vals.end(); ++_iter667)
     {
-      xfer += oprot->writeString((*_iter645));
+      xfer += oprot->writeString((*_iter667));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11783,10 +12355,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_pargs::write(::apache::thrift::pr
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter646;
-    for (_iter646 = (*(this->part_vals)).begin(); _iter646 != (*(this->part_vals)).end(); ++_iter646)
+    std::vector<std::string> ::const_iterator _iter668;
+    for (_iter668 = (*(this->part_vals)).begin(); _iter668 != (*(this->part_vals)).end(); ++_iter668)
     {
-      xfer += oprot->writeString((*_iter646));
+      xfer += oprot->writeString((*_iter668));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11825,14 +12397,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_result::read(::apache::thrift::pr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size647;
-            ::apache::thrift::protocol::TType _etype650;
-            xfer += iprot->readListBegin(_etype650, _size647);
-            this->success.resize(_size647);
-            uint32_t _i651;
-            for (_i651 = 0; _i651 < _size647; ++_i651)
+            uint32_t _size669;
+            ::apache::thrift::protocol::TType _etype672;
+            xfer += iprot->readListBegin(_etype672, _size669);
+            this->success.resize(_size669);
+            uint32_t _i673;
+            for (_i673 = 0; _i673 < _size669; ++_i673)
             {
-              xfer += this->success[_i651].read(iprot);
+              xfer += this->success[_i673].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11879,10 +12451,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_result::write(::apache::thrift::p
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter652;
-      for (_iter652 = this->success.begin(); _iter652 != this->success.end(); ++_iter652)
+      std::vector<Partition> ::const_iterator _iter674;
+      for (_iter674 = this->success.begin(); _iter674 != this->success.end(); ++_iter674)
       {
-        xfer += (*_iter652).write(oprot);
+        xfer += (*_iter674).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -11925,14 +12497,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_presult::read(::apache::thrift::p
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size653;
-            ::apache::thrift::protocol::TType _etype656;
-            xfer += iprot->readListBegin(_etype656, _size653);
-            (*(this->success)).resize(_size653);
-            uint32_t _i657;
-            for (_i657 = 0; _i657 < _size653; ++_i657)
+            uint32_t _size675;
+            ::apache::thrift::protocol::TType _etype678;
+            xfer += iprot->readListBegin(_etype678, _size675);
+            (*(this->success)).resize(_size675);
+            uint32_t _i679;
+            for (_i679 = 0; _i679 < _size675; ++_i679)
             {
-              xfer += (*(this->success))[_i657].read(iprot);
+              xfer += (*(this->success))[_i679].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12009,14 +12581,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size658;
-            ::apache::thrift::protocol::TType _etype661;
-            xfer += iprot->readListBegin(_etype661, _size658);
-            this->part_vals.resize(_size658);
-            uint32_t _i662;
-            for (_i662 = 0; _i662 < _size658; ++_i662)
+            uint32_t _size680;
+            ::apache::thrift::protocol::TType _etype683;
+            xfer += iprot->readListBegin(_etype683, _size680);
+            this->part_vals.resize(_size680);
+            uint32_t _i684;
+            for (_i684 = 0; _i684 < _size680; ++_i684)
             {
-              xfer += iprot->readString(this->part_vals[_i662]);
+              xfer += iprot->readString(this->part_vals[_i684]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12045,14 +12617,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size663;
-            ::apache::thrift::protocol::TType _etype666;
-            xfer += iprot->readListBegin(_etype666, _size663);
-            this->group_names.resize(_size663);
-            uint32_t _i667;
-            for (_i667 = 0; _i667 < _size663; ++_i667)
+            uint32_t _size685;
+            ::apache::thrift::protocol::TType _etype688;
+            xfer += iprot->readListBegin(_etype688, _size685);
+            this->group_names.resize(_size685);
+            uint32_t _i689;
+            for (_i689 = 0; _i689 < _size685; ++_i689)
             {
-              xfer += iprot->readString(this->group_names[_i667]);
+              xfer += iprot->readString(this->group_names[_i689]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12088,10 +12660,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::write(::apache::t
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter668;
-    for (_iter668 = this->part_vals.begin(); _iter668 != this->part_vals.end(); ++_iter668)
+    std::vector<std::string> ::const_iterator _iter690;
+    for (_iter690 = this->part_vals.begin(); _iter690 != this->part_vals.end(); ++_iter690)
     {
-      xfer += oprot->writeString((*_iter668));
+      xfer += oprot->writeString((*_iter690));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12108,10 +12680,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::write(::apache::t
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 6);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter669;
-    for (_iter669 = this->group_names.begin(); _iter669 != this->group_names.end(); ++_iter669)
+    std::vector<std::string> ::const_iterator _iter691;
+    for (_iter691 = this->group_names.begin(); _iter691 != this->group_names.end(); ++_iter691)
     {
-      xfer += oprot->writeString((*_iter669));
+      xfer += oprot->writeString((*_iter691));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12137,10 +12709,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_pargs::write(::apache::
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter670;
-    for (_iter670 = (*(this->part_vals)).begin(); _iter670 != (*(this->part_vals)).end(); ++_iter670)
+    std::vector<std::string> ::const_iterator _iter692;
+    for (_iter692 = (*(this->part_vals)).begin(); _iter692 != (*(this->part_vals)).end(); ++_iter692)
     {
-      xfer += oprot->writeString((*_iter670));
+      xfer += oprot->writeString((*_iter692));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12157,10 +12729,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_pargs::write(::apache::
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 6);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter671;
-    for (_iter671 = (*(this->group_names)).begin(); _iter671 != (*(this->group_names)).end(); ++_iter671)
+    std::vector<std::string> ::const_iterator _iter693;
+    for (_iter693 = (*(this->group_names)).begin(); _iter693 != (*(this->group_names)).end(); ++_iter693)
     {
-      xfer += oprot->writeString((*_iter671));
+      xfer += oprot->writeString((*_iter693));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12195,14 +12767,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_result::read(::apache::
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size672;
-            ::apache::thrift::protocol::TType _etype675;
-            xfer += iprot->readListBegin(_etype675, _size672);
-            this->success.resize(_size672);
-            uint32_t _i676;
-            for (_i676 = 0; _i676 < _size672; ++_i676)
+            uint32_t _size694;
+            ::apache::thrift::protocol::TType _etype697;
+            xfer += iprot->readListBegin(_etype697, _size694);
+            this->success.resize(_size694);
+            uint32_t _i698;
+            for (_i698 = 0; _i698 < _size694; ++_i698)
             {
-              xfer += this->success[_i676].read(iprot);
+              xfer += this->success[_i698].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12249,10 +12821,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_result::write(::apache:
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter677;
-      for (_iter677 = this->success.begin(); _iter677 != this->success.end(); ++_iter677)
+      std::vector<Partition> ::const_iterator _iter699;
+      for (_iter699 = this->success.begin(); _iter699 != this->success.end(); ++_iter699)
       {
-        xfer += (*_iter677).write(oprot);
+        xfer += (*_iter699).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -12295,14 +12867,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_presult::read(::apache:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size678;
-            ::apache::thrift::protocol::TType _etype681;
-            xfer += iprot->readListBegin(_etype681, _size678);
-            (*(this->success)).resize(_size678);
-            uint32_t _i682;
-            for (_i682 = 0; _i682 < _size678; ++_i682)
+            uint32_t _size700;
+            ::apache::thrift::protocol::TType _etype703;
+            xfer += iprot->readListBegin(_etype703, _size700);
+            (*(this->success)).resize(_size700);
+            uint32_t _i704;
+            for (_i704 = 0; _i704 < _size700; ++_i704)
             {
-              xfer += (*(this->success))[_i682].read(iprot);
+              xfer += (*(this->success))[_i704].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12379,14 +12951,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_args::read(::apache::thrift:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size683;
-            ::apache::thrift::protocol::TType _etype686;
-            xfer += iprot->readListBegin(_etype686, _size683);
-            this->part_vals.resize(_size683);
-            uint32_t _i687;
-            for (_i687 = 0; _i687 < _size683; ++_i687)
+            uint32_t _size705;
+            ::apache::thrift::protocol::TType _etype708;
+            xfer += iprot->readListBegin(_etype708, _size705);
+            this->part_vals.resize(_size705);
+            uint32_t _i709;
+            for (_i709 = 0; _i709 < _size705; ++_i709)
             {
-              xfer += iprot->readString(this->part_vals[_i687]);
+              xfer += iprot->readString(this->part_vals[_i709]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12430,10 +13002,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_args::write(::apache::thrift
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter688;
-    for (_iter688 = this->part_vals.begin(); _iter688 != this->part_vals.end(); ++_iter688)
+    std::vector<std::string> ::const_iterator _iter710;
+    for (_iter710 = this->part_vals.begin(); _iter710 != this->part_vals.end(); ++_iter710)
     {
-      xfer += oprot->writeString((*_iter688));
+      xfer += oprot->writeString((*_iter710));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12463,10 +13035,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_pargs::write(::apache::thrif
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter689;
-    for (_iter689 = (*(this->part_vals)).begin(); _iter689 != (*(this->part_vals)).end(); ++_iter689)
+    std::vector<std::string> ::const_iterator _iter711;
+    for (_iter711 = (*(this->part_vals)).begin(); _iter711 != (*(this->part_vals)).end(); ++_iter711)
     {
-      xfer += oprot->writeString((*_iter689));
+      xfer += oprot->writeString((*_iter711));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12505,14 +13077,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_result::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size690;
-            ::apache::thrift::protocol::TType _etype693;
-            xfer += iprot->readListBegin(_etype693, _size690);
-            this->success.resize(_size690);
-            uint32_t _i694;
-            for (_i694 = 0; _i694 < _size690; ++_i694)
+            uint32_t _size712;
+            ::apache::thrift::protocol::TType _etype715;
+            xfer += iprot->readListBegin(_etype715, _size712);
+            this->success.resize(_size712);
+            uint32_t _i716;
+            for (_i716 = 0; _i716 < _size712; ++_i716)
             {
-              xfer += iprot->readString(this->success[_i694]);
+              xfer += iprot->readString(this->success[_i716]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12559,10 +13131,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_result::write(::apache::thri
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter695;
-      for (_iter695 = this->success.begin(); _iter695 != this->success.end(); ++_iter695)
+      std::vector<std::string> ::const_iterator _iter717;
+      for (_iter717 = this->success.begin(); _iter717 != this->success.end(); ++_iter717)
       {
-        xfer += oprot->writeString((*_iter695));
+        xfer += oprot->writeString((*_iter717));
       }
       xfer += oprot->writeListEnd();
     }
@@ -12605,14 +13177,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_presult::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size696;
-            ::apache::thrift::protocol::TType _etype699;
-            xfer += iprot->readListBegin(_etype699, _size696);
-            (*(this->success)).resize(_size696);
-            uint32_t _i700;
-            for (_i700 = 0; _i700 < _size696; ++_i700)
+            uint32_t _size718;
+            ::apache::thrift::protocol::TType _etype721;
+            xfer += iprot->readListBegin(_etype721, _size718);
+            (*(this->success)).resize(_size718);
+            uint32_t _i722;
+            for (_i722 = 0; _i722 < _size718; ++_i722)
             {
-              xfer += iprot->readString((*(this->success))[_i700]);
+              xfer += iprot->readString((*(this->success))[_i722]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12787,14 +13359,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_filter_result::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size701;
-            ::apache::thrift::protocol::TType _etype704;
-            xfer += iprot->readListBegin(_etype704, _size701);
-            this->success.resize(_size701);
-            uint32_t _i705;
-            for (_i705 = 0; _i705 < _size701; ++_i705)
+            uint32_t _size723;
+            ::apache::thrift::protocol::TType _etype726;
+            xfer += iprot->readListBegin(_etype726, _size723);
+            this->success.resize(_size723);
+            uint32_t _i727;
+            for (_i727 = 0; _i727 < _size723; ++_i727)
             {
-              xfer += this->success[_i705].read(iprot);
+              xfer += this->success[_i727].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12841,10 +13413,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_filter_result::write(::apache::th
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter706;
-      for (_iter706 = this->success.begin(); _iter706 != this->success.end(); ++_iter706)
+      std::vector<Partition> ::const_iterator _iter728;
+      for (_iter728 = this->success.begin(); _iter728 != this->success.end(); ++_iter728)
       {
-        xfer += (*_iter706).write(oprot);
+        xfer += (*_iter728).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -12887,14 +13459,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_filter_presult::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size707;
-            ::apache::thrift::protocol::TType _etype710;
-            xfer += iprot->readListBegin(_etype710, _size707);
-            (*(this->success)).resize(_size707);
-            uint32_t _i711;
-            for (_i711 = 0; _i711 < _size707; ++_i711)
+            uint32_t _size729;
+            ::apache::thrift::protocol::TType _etype732;
+            xfer += iprot->readListBegin(_etype732, _size729);
+            (*(this->success)).resize(_size729);
+            uint32_t _i733;
+            for (_i733 = 0; _i733 < _size729; ++_i733)
             {
-              xfer += (*(this->success))[_i711].read(iprot);
+              xfer += (*(this->success))[_i733].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13069,14 +13641,14 @@ uint32_t ThriftHiveMetastore_get_part_specs_by_filter_result::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size712;
-            ::apache::thrift::protocol::TType _etype715;
-            xfer += iprot->readListBegin(_etype715, _size712);
-            this->success.resize(_size712);
-            uint32_t _i716;
-            for (_i716 = 0; _i716 < _size712; ++_i716)
+            uint32_t _size734;
+            ::apache::thrift::protocol::TType _etype737;
+            xfer += iprot->readListBegin(_etype737, _size734);
+            this->success.resize(_size734);
+            uint32_t _i738;
+            for (_i738 = 0; _i738 < _size734; ++_i738)
             {
-              xfer += this->success[_i716].read(iprot);
+              xfer += this->success[_i738].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13123,10 +13695,10 @@ uint32_t ThriftHiveMetastore_get_part_specs_by_filter_result::write(::apache::th
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<PartitionSpec> ::const_iterator _iter717;
-      for (_iter717 = this->success.begin(); _iter717 != this->success.end(); ++_iter717)
+      std::vector<PartitionSpec> ::const_iterator _iter739;
+      for (_iter739 = this->success.begin(); _iter739 != this->success.end(); ++_iter739)
       {
-        xfer += (*_iter717).write(oprot);
+        xfer += (*_iter739).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -13169,14 +13741,14 @@ uint32_t ThriftHiveMetastore_get_part_specs_by_filter_presult::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size718;
-            ::apache::thrift::protocol::TType _etype721;
-            xfer += iprot->readListBegin(_etype721, _size718);
-            (*(this->success)).resize(_size718);
-            uint32_t _i722;
-            for (_i722 = 0; _i722 < _size718; ++_i722)
+            uint32_t _size740;
+            ::apache::thrift::protocol::TType _etype743;
+            xfer += iprot->readListBegin(_etype743, _size740);
+            (*(this->success)).resize(_size740);
+            uint32_t _i744;
+            for (_i744 = 0; _i744 < _size740; ++_i744)
             {
-              xfer += (*(this->success))[_i722].read(iprot);
+              xfer += (*(this->success))[_i744].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13455,14 +14027,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_args::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->names.clear();
-            uint32_t _size723;
-            ::apache::thrift::protocol::TType _etype726;
-            xfer += iprot->readListBegin(_etype726, _size723);
-            this->names.resize(_size723);
-            uint32_t _i727;
-            for (_i727 = 0; _i727 < _size723; ++_i727)
+            uint32_t _size745;
+            ::apache::thrift::protocol::TType _etype748;
+            xfer += iprot->readListBegin(_etype748, _size745);
+            this->names.resize(_size745);
+            uint32_t _i749;
+            for (_i749 = 0; _i749 < _size745; ++_i749)
             {
-              xfer += iprot->readString(this->names[_i727]);
+              xfer += iprot->readString(this->names[_i749]);
             }
             xfer += iprot->readListEnd();
           }
@@ -13498,10 +14070,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_args::write(::apache::thrif
   xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->names.size()));
-    std::vector<std::string> ::const_iterator _iter728;
-    for (_iter728 = this->names.begin(); _iter728 != this->names.end(); ++_iter728)
+    std::vector<std::string> ::const_iterator _iter750;
+    for (_iter750 = this->names.begin(); _iter750 != this->names.end(); ++_iter750)
     {
-      xfer += oprot->writeString((*_iter728));
+      xfer += oprot->writeString((*_iter750));
     }
     xfer += oprot->writeListEnd();
   }
@@ -13527,10 +14099,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_pargs::write(::apache::thri
   xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->names)).size()));
-    std::vector<std::string> ::const_iterator _iter729;
-    for (_iter729 = (*(this->names)).begin(); _iter729 != (*(this->names)).end(); ++_iter729)
+    std::vector<std::string> ::const_iterator _iter751;
+    for (_iter751 = (*(this->names)).begin(); _iter751 != (*(this->names)).end(); ++_iter751)
     {
-      xfer += oprot->writeString((*_iter729));
+      xfer += oprot->writeString((*_iter751));
     }
     xfer += oprot->writeListEnd();
   }
@@ -13565,14 +14137,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_result::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size730;
-            ::apache::thrift::protocol::TType _etype733;
-            xfer += iprot->readListBegin(_etype733, _size730);
-            this->success.resize(_size730);
-            uint32_t _i734;
-            for (_i734 = 0; _i734 < _size730; ++_i734)
+            uint32_t _size752;
+            ::apache::thrift::protocol::TType _etype755;
+            xfer += iprot->readListBegin(_etype755, _size752);
+            this->success.resize(_size752);
+            uint32_t _i756;
+            for (_i756 = 0; _i756 < _size752; ++_i756)
             {
-              xfer += this->success[_i734].read(iprot);
+              xfer += this->success[_i756].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13619,10 +14191,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_result::write(::apache::thr
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter735;
-      for (_iter735 = this->success.begin(); _iter735 != this->success.end(); ++_iter735)
+      std::vector<Partition> ::const_iterator _iter757;
+      for (_iter757 = this->success.begin(); _iter757 != this->success.end(); ++_iter757)
       {
-        xfer += (*_iter735).write(oprot);
+        xfer += (*_iter757).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -13665,14 +14237,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_presult::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size736;
-            ::apache::thrift::protocol::TType _etype739;
-            xfer += iprot->readListBegin(_etype739, _size736);
-            (*(this->success)).resize(_size736);
-            uint32_t _i740;
-            for (_i740 = 0; _i740 < _size736; ++_i740)
+            uint32_t _size758;
+            ::apache::thrift::protocol::TType _etype761;
+            xfer += iprot->readListBegin(_etype761, _size758);
+            (*(this->success)).resize(_size758);
+            uint32_t _i762;
+            for (_i762 = 0; _i762 < _size758; ++_i762)
             {
-              xfer += (*(this->success))[_i740].read(iprot);
+              xfer += (*(this->success))[_i762].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13963,14 +14535,14 @@ uint32_t ThriftHiveMetastore_alter_partitions_args::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->new_parts.clear();
-            uint32_t _size741;
-            ::apache::thrift::protocol::TType _etype744;
-            xfer += iprot->readListBegin(_etype744, _size741);
-            this->new_parts.resize(_size741);
-            uint32_t _i745;
-            for (_i745 = 0; _i745 < _size741; ++_i745)
+            uint32_t _size763;
+            ::apache::thrift::protocol::TType _etype766;
+            xfer += iprot->readListBegin(_etype766, _size763);
+            this->new_parts.resize(_size763);
+            uint32_t _i767;
+            for (_i767 = 0; _i767 < _size763; ++_i767)
             {
-              xfer += this->new_parts[_i745].read(iprot);
+              xfer += this->new_parts[_i767].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -14006,10 +14578,10 @@ uint32_t ThriftHiveMetastore_alter_partitions_args::write(::apache::thrift::prot
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->new_parts.size()));
-    std::vector<Partition> ::const_iterator _iter746;
-    for (_iter746 = this->new_parts.begin(); _iter746 != this->new_parts.end(); ++_iter746)
+    std::vector<Partition> ::const_iterator _iter768;
+    for (_iter768 = this->new_parts.begin(); _iter768 != this->new_parts.end(); ++_iter768)
     {
-      xfer += (*_iter746).write(oprot);
+      xfer += (*_iter768).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -14035,10 +14607,10 @@ uint32_t ThriftHiveMetastore_alter_partitions_pargs::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->new_parts)).size()));
-    std::vector<Partition> ::const_iterator _iter747;
-    for (_iter747 = (*(this->new_parts)).begin(); _iter747 != (*(this->new_parts)).end(); ++_iter747)
+    std::vector<Partition> ::const_iterator _iter769;
+    for (_iter769 = (*(this->new_parts)).begin(); _iter769 != (*(this->new_parts)).end(); ++_iter769)
     {
-      xfer += (*_iter747).write(oprot);
+      xfer += (*_iter769).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -14435,14 +15007,14 @@ uint32_t ThriftHiveMetastore_rename_partition_args::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size748;
-            ::apache::thrift::protocol::TType _etype751;
-            xfer += iprot->readListBegin(_etype751, _size748);
-            this->part_vals.resize(_size748);
-            uint32_t _i752;
-            for (_i752 = 0; _i752 < _size748; ++_i752)
+            uint32_t _size770;
+            ::apache::thrift::protocol::TType _etype773;
+            xfer += iprot->readListBegin(_etype773, _size770);
+            this->part_vals.resize(_size770);
+            uint32_t _i774;
+            for (_i774 = 0; _i774 < _size770; ++_i774)
             {
-              xfer += iprot->readString(this->part_vals[_i752]);
+              xfer += iprot->readString(this->part_vals[_i774]);
             }
             xfer += iprot->readListEnd();
           }
@@ -14486,10 +15058,10 @@ uint32_t ThriftHiveMetastore_rename_partition_args::write(::apache::thrift::prot
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter753;
-    for (_iter753 = this->part_vals.begin(); _iter753 != this->part_vals.end(); ++_iter753)
+    std::vector<std::string> ::const_iterator _iter775;
+    for (_iter775 = this->part_vals.begin(); _iter775 != this->part_vals.end(); ++_iter775)
     {
-      xfer += oprot->writeString((*_iter753));
+      xfer += oprot->writeString((*_iter775));
     }
     xfer += oprot->writeListEnd();
   }
@@ -14519,10 +15091,10 @@ uint32_t ThriftHiveMetastore_rename_partition_pargs::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter754;
-    for (_iter754 = (*(this->part_vals)).begin(); _iter754 != (*(this->part_vals)).end(); ++_iter754)
+    std::vector<std::string> ::const_iterator _iter776;
+    for (_iter776 = (*(this->part_vals)).begin(); _iter776 != (*(this->part_vals)).end(); ++_iter776)
     {
-      xfer += oprot->writeString((*_iter754));
+      xfer += oprot->writeString((*_iter776));
     }
     xfer += oprot->writeListEnd();
   }
@@ -14677,14 +15249,14 @@ uint32_t ThriftHiveMetastore_partition_name_has_valid_characters_args::read(::ap
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size755;
-            ::apache::thrift::protocol::TType _etype758;
-            xfer += iprot->readListBegin(_etype758, _size755);
-            this->part_vals.resize(_size755);
-            uint32_t _i759;
-            for (_i759 = 0; _i759 < _size755; ++_i759)
+            uint32_t _size777;
+            ::apache::thrift::protocol::TType _etype780;
+            xfer += iprot->readListBegin(_etype780, _size777);
+            this->part_vals.resize(_size777);
+            uint32_t _i781;
+            for (_i781 = 0; _i781 < _size777; ++_i781)
             {
-              xfer += iprot->readString(this->part_vals[_i759]);
+              xfer += iprot->readString(this->part_vals[_i781]);
             }
             xfer += iprot->readListEnd();
           }
@@ -14720,10 +15292,10 @@ uint32_t ThriftHiveMetastore_partition_name_has_valid_characters_args::write(::a
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter760;
-    for (_iter760 = this->part_vals.begin(); _iter760 != this->part_vals.end(); ++_iter760)
+    std::vector<std::string> ::const_iterator _iter782;
+    for (_iter782 = this->part_vals.begin(); _iter782 != this->part_vals.end(); ++_iter782)
     {
-      xfer += oprot->writeString((*_iter760));
+      xfer += oprot->writeString((*_iter782));
     }
     xfer += oprot->writeListEnd();
   }
@@ -14745,10 +15317,10 @@ uint32_t ThriftHiveMetastore_partition_name_has_valid_characters_pargs::write(::
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter761;
-    for (_iter761 = (*(this->part_vals)).begin(); _iter761 != (*(this->part_vals)).end(); ++_iter761)
+    std::vector<std::string> ::const_iterator _iter783;
+    for (_iter783 = (*(this->part_vals)).begin(); _iter783 != (*(this->part_vals)).end(); ++_iter783)
     {
-      xfer += oprot->writeString((*_iter761));
+      xfer += oprot->writeString((*_iter783));
     }
     xfer += oprot->writeListEnd();
   }
@@ -15167,14 +15739,14 @@ uint32_t ThriftHiveMetastore_partition_name_to_vals_result::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size762;
-            ::apache::thrift::protocol::TType _etype765;
-            xfer += iprot->readListBegin(_etype765, _size762);
-            this->success.resize(_size762);
-            uint32_t _i766;
-            for (_i766 = 0; _i766 < _size762; ++_i766)
+            uint32_t _size784;
+            ::apache::thrift::protocol::TType _etype787;
+            xfer += iprot->readListBegin(_etype787, _size784);
+            this->success.resize(_size784);
+            uint32_t _i788;
+            for (_i788 = 0; _i788 < _size784; ++_i788)
             {
-              xfer += iprot->readString(this->success[_i766]);
+              xfer += iprot->readString(this->success[_i788]);
             }
             xfer += iprot->readListEnd();
           }
@@ -15213,10 +15785,10 @@ uint32_t ThriftHiveMetastore_partition_name_to_vals_result::write(::apache::thri
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter767;
-      for (_iter767 = this->success.begin(); _iter767 != this->success.end(); ++_iter767)
+      std::vector<std::string> ::const_iterator _iter789;
+      for (_iter789 = this->success.begin(); _iter789 != this->success.end(); ++_iter789)
       {
-        xfer += oprot->writeString((*_iter767));
+        xfer += oprot->writeString((*_iter789));
       }
       xfer += oprot->writeListEnd();
     }
@@ -15255,14 +15827,14 @@ uint32_t ThriftHiveMetastore_partition_name_to_vals_presult::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size768;
-            ::apache::thrift::protocol::TType _etype771;
-            xfer += iprot->readListBegin(_etype771, _size768);
-            (*(this->success)).resize(_size768);
-            uint32_t _i772;
-            for (_i772 = 0; _i772 < _size768; ++_i772)
+            uint32_t _size790;
+            ::apache::thrift::protocol::TType _etype793;
+            xfer += iprot->readListBegin(_etype793, _size790);
+            (*(this->success)).resize(_size790);
+            uint32_t _i794;
+            for (_i794 = 0; _i794 < _size790; ++_i794)
             {
-              xfer += iprot->readString((*(this->success))[_i772]);
+              xfer += iprot->readString((*(this->success))[_i794]);
             }
             xfer += iprot->readListEnd();
           }
@@ -15381,17 +15953,17 @@ uint32_t ThriftHiveMetastore_partition_name_to_spec_result::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->success.clear();
-            uint32_t _size773;
-            ::apache::thrift::protocol::TType _ktype774;
-            ::apache::thrift::protocol::TType _vtype775;
-            xfer += iprot->readMapBegin(_ktype774, _vtype775, _size773);
-            uint32_t _i777;
-            for (_i777 = 0; _i777 < _size773; ++_i777)
+            uint32_t _size795;
+            ::apache::thrift::protocol::TType _ktype796;
+            ::apache::thrift::protocol::TType _vtype797;
+            xfer += iprot->readMapBegin(_ktype796, _vtype797, _size795);
+            uint32_t _i799;
+            for (_i799 = 0; _i799 < _size795; ++_i799)
             {
-              std::string _key778;
-              xfer += iprot->readString(_key778);
-              std::string& _val779 = this->success[_key778];
-              xfer += iprot->readString(_val779);
+              std::string _key800;
+              xfer += iprot->readString(_key800);
+              std::string& _val801 = this->success[_key800];
+              xfer += iprot->readString(_val801);
             }
             xfer += iprot->readMapEnd();
           }
@@ -15430,11 +16002,11 @@ uint32_t ThriftHiveMetastore_partition_name_to_spec_result::write(::apache::thri
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
     {
       xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::map<std::string, std::string> ::const_iterator _iter780;
-      for (_iter780 = this->success.begin(); _iter780 != this->success.end(); ++_iter780)
+      std::map<std::string, std::string> ::const_iterator _iter802;
+      for (_iter802 = this->success.begin(); _iter802 != this->success.end(); ++_iter802)
       {
-        xfer += oprot->writeString(_iter780->first);
-        xfer += oprot->writeString(_iter780->second);
+        xfer += oprot->writeString(_iter802->first);
+        xfer += oprot->writeString(_iter802->second);
       }
       xfer += oprot->writeMapEnd();
     }
@@ -15473,17 +16045,17 @@ uint32_t ThriftHiveMetastore_partition_name_to_spec_presult::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             (*(this->success)).clear();
-            uint32_t _size781;
-            ::apache::thrift::protocol::TType _ktype782;
-            ::apache::thrift::protocol::TType _vtype783;
-            xfer += iprot->readMapBegin(_ktype782, _vtype783, _size781);
-            uint32_t _i785;
-            for (_i785 = 0; _i785 < _size781; ++_i785)
+            uint32_t _size803;
+            ::apache::thrift::protocol::TType _ktype804;
+            ::apache::thrift::protocol::TType _vtype805;
+            xfer += iprot->readMapBegin(_ktype804, _vtype805, _size803);
+            uint32_t _i807;
+            for (_i807 = 0; _i807 < _size803; ++_i807)
             {
-              std::string _key786;
-              xfer += iprot->readString(_key786);
-              std::string& _val787 = (*(this->success))[_key786];
-              xfer += iprot->readString(_val787);
+              std::string _key808;
+              xfer += iprot->readString(_key808);
+              std::string& _val809 = (*(this->success))[_key808];
+              xfer += iprot->readString(_val809);
             }
             xfer += iprot->readMapEnd();
           }
@@ -15552,17 +16124,17 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_args::read(::apache::thrift::
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->part_vals.clear();
-            uint32_t _size788;
-            ::apache::thrift::protocol::TType _ktype789;
-            ::apache::thrift::protocol::TType _vtype790;
-            xfer += iprot->readMapBegin(_ktype789, _vtype790, _size788);
-            uint32_t _i792;
-            for (_i792 = 0; _i792 < _size788; ++_i792)
+            uint32_t _size810;
+            ::apache::thrift::protocol::TType _ktype811;
+            ::apache::thrift::protocol::TType _vtype812;
+            xfer += iprot->readMapBegin(_ktype811, _vtype812, _size810);
+            uint32_t _i814;
+            for (_i814 = 0; _i814 < _size810; ++_i814)
             {
-              std::string _key793;
-              xfer += iprot->readString(_key793);
-              std::string& _val794 = this->part_vals[_key793];
-              xfer += iprot->readString(_val794);
+              std::string _key815;
+              xfer += iprot->readString(_key815);
+              std::string& _val816 = this->part_vals[_key815];
+              xfer += iprot->readString(_val816);
             }
             xfer += iprot->readMapEnd();
           }
@@ -15573,9 +16145,9 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_args::read(::apache::thrift::
         break;
       case 4:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast795;
-          xfer += iprot->readI32(ecast795);
-          this->eventType = (PartitionEventType::type)ecast795;
+          int32_t ecast817;
+          xfer += iprot->readI32(ecast817);
+          this->eventType = (PartitionEventType::type)ecast817;
           this->__isset.eventType = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -15608,11 +16180,11 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_args::write(::apache::thrift:
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::map<std::string, std::string> ::const_iterator _iter796;
-    for (_iter796 = this->part_vals.begin(); _iter796 != this->part_vals.end(); ++_iter796)
+    std::map<std::string, std::string> ::const_iterator _iter818;
+    for (_iter818 = this->part_vals.begin(); _iter818 != this->part_vals.end(); ++_iter818)
     {
-      xfer += oprot->writeString(_iter796->first);
-      xfer += oprot->writeString(_iter796->second);
+      xfer += oprot->writeString(_iter818->first);
+      xfer += oprot->writeString(_iter818->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -15642,11 +16214,11 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_pargs::write(::apache::thrift
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::map<std::string, std::string> ::const_iterator _iter797;
-    for (_iter797 = (*(this->part_vals)).begin(); _iter797 != (*(this->part_vals)).end(); ++_iter797)
+    std::map<std::string, std::string> ::const_iterator _iter819;
+    for (_iter819 = (*(this->part_vals)).begin(); _iter819 != (*(this->part_vals)).end(); ++_iter819)
     {
-      xfer += oprot->writeString(_iter797->first);
-      xfer += oprot->writeString(_iter797->second);
+      xfer += oprot->writeString(_iter819->first);
+      xfer += oprot->writeString(_iter819->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -15897,17 +16469,17 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_args::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->part_vals.clear();
-            uint32_t _size798;
-            ::apache::thrift::protocol::TType _ktype799;
-            ::apache::thrift::protocol::TType _vtype800;
-            xfer += iprot->readMapBegin(_ktype799, _vtype800, _size798);
-            uint32_t _i802;
-            for (_i802 = 0; _i802 < _size798; ++_i802)
+            uint32_t _size820;
+            ::apache::thrift::protocol::TType _ktype821;
+            ::apache::thrift::protocol::TType _vtype822;
+            xfer += iprot->readMapBegin(_ktype821, _vtype822, _size820);
+            uint32_t _i824;
+            for (_i824 = 0; _i824 < _size820; ++_i824)
             {
-              std::string _key803;
-              xfer += iprot->readString(_key803);
-              std::string& _val804 = this->part_vals[_key803];
-              xfer += iprot->readString(_val804);
+              std::string _key825;
+              xfer += iprot->readString(_key825);
+              std::string& _val826 = this->part_vals[_key825];
+              xfer += iprot->readString(_val826);
             }
             xfer += iprot->readMapEnd();
           }
@@ -15918,9 +16490,9 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_args::read(::apache::thri
         break;
       case 4:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast805;
-          xfer += iprot->readI32(ecast805);
-          this->eventType = (PartitionEventType::type)ecast805;
+          int32_t ecast827;
+          xfer += iprot->readI32(ecast827);
+          this->eventType = (PartitionEventType::type)ecast827;
           this->__isset.eventType = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -15953,11 +16525,11 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_args::write(::apache::thr
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::map<std::string, std::string> ::const_iterator _iter806;
-    for (_iter806 = this->part_vals.begin(); _iter806 != this->part_vals.end(); ++_iter806)
+    std::map<std::string, std::string> ::const_iterator _iter828;
+    for (_iter828 = this->part_vals.begin(); _iter828 != this->part_vals.end(); ++_iter828)
     {
-      xfer += oprot->writeString(_iter806->first);
-      xfer += oprot->writeString(_iter806->second);
+      xfer += oprot->writeString(_iter828->first);
+      xfer += oprot->writeString(_iter828->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -15987,11 +16559,11 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_pargs::write(::apache::th
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::map<std::string, std::string> ::const_iterator _iter807;
-    for (_iter807 = (*(this->part_vals)).begin(); _iter807 != (*(this->part_vals)).end(); ++_iter807)
+    std::map<std::string, std::string> ::const_iterator _iter829;
+    for (_iter829 = (*(this->part_vals)).begin(); _iter829 != (*(this->part_vals)).end(); ++_iter829)
     {
-      xfer += oprot->writeString(_iter807->first);
-      xfer += oprot->writeString(_iter807->second);
+      xfer += oprot->writeString(_iter829->first);
+      xfer += oprot->writeString(_iter829->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -17296,14 +17868,14 @@ uint32_t ThriftHiveMetastore_get_indexes_result::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size808;
-            ::apache::thrift::protocol::TType _etype811;
-            xfer += iprot->readListBegin(_etype811, _size808);
-            this->success.resize(_size808);
-            uint32_t _i812;
-            for (_i812 = 0; _i812 < _size808; ++_i812)
+            uint32_t _size830;
+            ::apache::thrift::protocol::TType _etype833;
+            xfer += iprot->readListBegin(_etype833, _size830);
+            this->success.resize(_size830);
+            uint32_t _i834;
+            for (_i834 = 0; _i834 < _size830; ++_i834)
             {
-              xfer += this->success[_i812].read(iprot);
+              xfer += this->success[_i834].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -17350,10 +17922,10 @@ uint32_t ThriftHiveMetastore_get_indexes_result::write(::apache::thrift::protoco
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Index> ::const_iterator _iter813;
-      for (_iter813 = this->success.begin(); _iter813 != this->success.end(); ++_iter813)
+      std::vector<Index> ::const_iterator _iter835;
+      for (_iter835 = this->success.begin(); _iter835 != this->success.end(); ++_iter835)
       {
-        xfer += (*_iter813).write(oprot);
+        xfer += (*_iter835).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -17396,14 +17968,14 @@ uint32_t ThriftHiveMetastore_get_indexes_presult::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size814;
-            ::apache::thrift::protocol::TType _etype817;
-            xfer += iprot->readListBegin(_etype817, _size814);
-            (*(this->success)).resize(_size814);
-            uint32_t _i818;
-            for (_i818 = 0; _i818 < _size814; ++_i818)
+            uint32_t _size836;
+            ::apache::thrift::protocol::TType _etype839;
+            xfer += iprot->readListBegin(_etype839, _size836);
+            (*(this->success)).resize(_size836);
+            uint32_t _i840;
+            for (_i840 = 0; _i840 < _size836; ++_i840)
             {
-              xfer += (*(this->success))[_i818].read(iprot);
+              xfer += (*(this->success))[_i840].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -17562,14 +18134,14 @@ uint32_t ThriftHiveMetastore_get_index_names_result::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size819;
-            ::apache::thrift::protocol::TType _etype822;
-            xfer += iprot->readListBegin(_etype822, _size819);
-            this->success.resize(_size819);
-            uint32_t _i823;
-            for (_i823 = 0; _i823 < _size819; ++_i823)
+            uint32_t _size841;
+            ::apache::thrift::protocol::TType _etype844;
+            xfer += iprot->readListBegin(_etype844, _size841);
+            this->success.resize(_size841);
+            uint32_t _i845;
+            for (_i845 = 0; _i845 < _size841; ++_i845)
             {
-              xfer += iprot->readString(this->success[_i823]);
+              xfer += iprot->readString(this->success[_i845]);
             }
             xfer += iprot->readListEnd();
           }
@@ -17608,10 +18180,10 @@ uint32_t ThriftHiveMetastore_get_index_names_result::write(::apache::thrift::pro
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter824;
-      for (_iter824 = this->success.begin(); _iter824 != this->success.end(); ++_iter824)
+      std::vector<std::string> ::const_iterator _iter846;
+      for (_iter846 = this->success.begin(); _iter846 != this->success.end(); ++_iter846)
       {
-        xfer += oprot->writeString((*_iter824));
+        xfer += oprot->writeString((*_iter846));
       }
       xfer += oprot->writeListEnd();
     }
@@ -17650,14 +18222,14 @@ uint32_t ThriftHiveMetastore_get_index_names_presult::read(::apache::thrift::pro
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size825;
-            ::apache::thrift::protocol::TType _etype828;
-            xfer += iprot->readListBegin(_etype828, _size825);
-            (*(this->success)).resize(_size825);
-            uint32_t _i829;
-            for (_i829 = 0; _i829 < _size825; ++_i829)
+            uint32_t _size847;
+            ::apache::thrift::protocol::TType _etype850;
+            xfer += iprot->readListBegin(_etype850, _size847);
+            (*(this->success)).resize(_size847);
+            uint32_t _i851;
+            for (_i851 = 0; _i851 < _size847; ++_i851)
             {
-              xfer += iprot->readString((*(this->success))[_i829]);
+              xfer += iprot->readString((*(this->success))[_i851]);
             }
             xfer += iprot->readListEnd();
           }
@@ -20886,14 +21458,14 @@ uint32_t ThriftHiveMetastore_get_functions_result::read(::apache::thrift::protoc
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size830;
-            ::apache::thrift::protocol::TType _etype833;
-            xfer += iprot->readListBegin(_etype833, _size830);
-            this->success.resize(_size830);
-            uint32_t _i834;
-            for (_i834 = 0; _i834 < _size830; ++_i834)
+            uint32_t _size852;
+            ::apache::thrift::protocol::TType _etype855;
+            xfer += iprot->readListBegin(_etype855, _size852);
+            this->success.resize(_size852);
+            uint32_t _i856;
+            for (_i856 = 0; _i856 < _size852; ++_i856)
             {
-              xfer += iprot->readString(this->success[_i834]);
+              xfer += iprot->readString(this->success[_i856]);
             }
             xfer += iprot->readListEnd();
           }
@@ -20932,10 +21504,10 @@ uint32_t ThriftHiveMetastore_get_functions_result::write(::apache::thrift::proto
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter835;
-      for (_iter835 = this->success.begin(); _iter835 != this->success.end(); ++_iter835)
+      std::vector<std::string> ::const_iterator _iter857;
+      for (_iter857 = this->success.begin(); _iter857 != this->success.end(); ++_iter857)
       {
-        xfer += oprot->writeString((*_iter835));
+        xfer += oprot->writeString((*_iter857));
       }
       xfer += oprot->writeListEnd();
     }
@@ -20974,14 +21546,14 @@ uint32_t ThriftHiveMetastore_get_functions_presult::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size836;
-            ::apache::thrift::protocol::TType _etype839;
-            xfer += iprot->readListBegin(_etype839, _size836);
-            (*(this->success)).resize(_size836);
-            uint32_t _i840;
-            for (_i840 = 0; _i840 < _size836; ++_i840)
+            uint32_t _size858;
+            ::apache::thrift::protocol::TType _etype861;
+            xfer += iprot->readListBegin(_etype861, _size858);
+            (*(this->success)).resize(_size858);
+            uint32_t _i862;
+            for (_i862 = 0; _i862 < _size858; ++_i862)
             {
-              xfer += iprot->readString((*(this->success))[_i840]);
+              xfer += iprot->readString((*(this->success))[_i862]);
             }
             xfer += iprot->readListEnd();
           }
@@ -21661,14 +22233,14 @@ uint32_t ThriftHiveMetastore_get_role_names_result::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size841;
-            ::apache::thrift::protocol::TType _etype844;
-            xfer += iprot->readListBegin(_etype844, _size841);
-            this->success.resize(_size841);
-            uint32_t _i845;
-            for (_i845 = 0; _i845 < _size841; ++_i845)
+            uint32_t _size863;
+            ::apache::thrift::protocol::TType _etype866;
+            xfer += iprot->readListBegin(_etype866, _size863);
+            this->success.resize(_size863);
+            uint32_t _i867;
+            for (_i867 = 0; _i867 < _size863; ++_i867)
             {
-              xfer += iprot->readString(this->success[_i845]);
+              xfer += iprot->readString(this->success[_i867]);
             }
             xfer += iprot->readListEnd();
           }
@@ -21707,10 +22279,10 @@ uint32_t ThriftHiveMetastore_get_role_names_result::write(::apache::thrift::prot
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter846;
-      for (_iter846 = this->success.begin(); _iter846 != this->success.end(); ++_iter846)
+      std::vector<std::string> ::const_iterator _iter868;
+      for (_iter868 = this->success.begin(); _iter868 != this->success.end(); ++_iter868)
       {
-        xfer += oprot->writeString((*_iter846));
+        xfer += oprot->writeString((*_iter868));
       }
       xfer += oprot->writeListEnd();
     }
@@ -21749,14 +22321,14 @@ uint32_t ThriftHiveMetastore_get_role_names_presult::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size847;
-            ::apache::thrift::protocol::TType _etype850;
-            xfer += iprot->readListBegin(_etype850, _size847);
-            (*(this->success)).resize(_size847);
-            uint32_t _i851;
-            for (_i851 = 0; _i851 < _size847; ++_i851)
+            uint32_t _size869;
+            ::apache::thrift::protocol::TType _etype872;
+            xfer += iprot->readListBegin(_etype872, _size869);
+            (*(this->success)).resize(_size869);
+            uint32_t _i873;
+            for (_i873 = 0; _i873 < _size869; ++_i873)
             {
-              xfer += iprot->readString((*(this->success))[_i851]);
+              xfer += iprot->readString((*(this->success))[_i873]);
             }
             xfer += iprot->readListEnd();
           }
@@ -21823,9 +22395,9 @@ uint32_t ThriftHiveMetastore_grant_role_args::read(::apache::thrift::protocol::T
         break;
       case 3:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast852;
-          xfer += iprot->readI32(ecast852);
-          this->principal_type = (PrincipalType::type)ecast852;
+          int32_t ecast874;
+          xfer += iprot->readI32(ecast874);
+          this->principal_type = (PrincipalType::type)ecast874;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -21841,9 +22413,9 @@ uint32_t ThriftHiveMetastore_grant_role_args::read(::apache::thrift::protocol::T
         break;
       case 5:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast853;
-          xfer += iprot->readI32(ecast853);
-          this->grantorType = (PrincipalType::type)ecast853;
+          int32_t ecast875;
+          xfer += iprot->readI32(ecast875);
+          this->grantorType = (PrincipalType::type)ecast875;
           this->__isset.grantorType = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -22089,9 +22661,9 @@ uint32_t ThriftHiveMetastore_revoke_role_args::read(::apache::thrift::protocol::
         break;
       case 3:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast854;
-          xfer += iprot->readI32(ecast854);
-          this->principal_type = (PrincipalType::type)ecast854;
+          int32_t ecast876;
+          xfer += iprot->readI32(ecast876);
+          this->principal_type = (PrincipalType::type)ecast876;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -22297,9 +22869,9 @@ uint32_t ThriftHiveMetastore_list_roles_args::read(::apache::thrift::protocol::T
         break;
       case 2:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast855;
-          xfer += iprot->readI32(ecast855);
-          this->principal_type = (PrincipalType::type)ecast855;
+          int32_t ecast877;
+          xfer += iprot->readI32(ecast877);
+          this->principal_type = (PrincipalType::type)ecast877;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -22375,14 +22947,14 @@ uint32_t ThriftHiveMetastore_list_roles_result::read(::apache::thrift::protocol:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size856;
-            ::apache::thrift::protocol::TType _etype859;
-            xfer += iprot->readListBegin(_etype859, _size856);
-            this->success.resize(_size856);
-            uint32_t _i860;
-            for (_i860 = 0; _i860 < _size856; ++_i860)
+            uint32_t _size878;
+            ::apache::thrift::protocol::TType _etype881;
+            xfer += iprot->readListBegin(_etype881, _size878);
+            this->success.resize(_size878);
+            uint32_t _i882;
+            for (_i882 = 0; _i882 < _size878; ++_i882)
             {
-              xfer += this->success[_i860].read(iprot);
+              xfer += this->success[_i882].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -22421,10 +22993,10 @@ uint32_t ThriftHiveMetastore_list_roles_result::write(::apache::thrift::protocol
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Role> ::const_iterator _iter861;
-      for (_iter861 = this->success.begin(); _iter861 != this->success.end(); ++_iter861)
+      std::vector<Role> ::const_iterator _iter883;
+      for (_iter883 = this->success.begin(); _iter883 != this->success.end(); ++_iter883)
       {
-        xfer += (*_iter861).write(oprot);
+        xfer += (*_iter883).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -22463,14 +23035,14 @@ uint32_t ThriftHiveMetastore_list_roles_presult::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size862;
-            ::apache::thrift::protocol::TType _etype865;
-            xfer += iprot->readListBegin(_etype865, _size862);
-            (*(this->success)).resize(_size862);
-            uint32_t _i866;
-            for (_i866 = 0; _i866 < _size862; ++_i866)
+            uint32_t _size884;
+            ::apache::thrift::protocol::TType _etype887;
+            xfer += iprot->readListBegin(_etype887, _size884);
+            (*(this->success)).resize(_size884);
+            uint32_t _i888;
+            for (_i888 = 0; _i888 < _size884; ++_i888)
             {
-              xfer += (*(this->success))[_i866].read(iprot);
+              xfer += (*(this->success))[_i888].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -23085,14 +23657,14 @@ uint32_t ThriftHiveMetastore_get_privilege_set_args::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size867;
-            ::apache::thrift::protocol::TType _etype870;
-            xfer += iprot->readListBegin(_etype870, _size867);
-            this->group_names.resize(_size867);
-            uint32_t _i871;
-            for (_i871 = 0; _i871 < _size867; ++_i871)
+            uint32_t _size889;
+            ::apache::thrift::protocol::TType _etype892;
+            xfer += iprot->readListBegin(_etype892, _size889);
+            this->group_names.resize(_size889);
+            uint32_t _i893;
+            for (_i893 = 0; _i893 < _size889; ++_i893)
             {
-              xfer += iprot->readString(this->group_names[_i871]);
+              xfer += iprot->readString(this->group_names[_i893]);
             }
             xfer += iprot->readListEnd();
           }
@@ -23128,10 +23700,10 @@ uint32_t ThriftHiveMetastore_get_privilege_set_args::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter872;
-    for (_iter872 = this->group_names.begin(); _iter872 != this->group_names.end(); ++_iter872)
+    std::vector<std::string> ::const_iterator _iter894;
+    for (_iter894 = this->group_names.begin(); _iter894 != this->group_names.end(); ++_iter894)
     {
-      xfer += oprot->writeString((*_iter872));
+      xfer += oprot->writeString((*_iter894));
     }
     xfer += oprot->writeListEnd();
   }
@@ -23157,10 +23729,10 @@ uint32_t ThriftHiveMetastore_get_privilege_set_pargs::write(::apache::thrift::pr
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter873;
-    for (_iter873 = (*(this->group_names)).begin(); _iter873 != (*(this->group_names)).end(); ++_iter873)
+    std::vector<std::string> ::const_iterator _iter895;
+    for (_iter895 = (*(this->group_names)).begin(); _iter895 != (*(this->group_names)).end(); ++_iter895)
     {
-      xfer += oprot->writeString((*_iter873));
+      xfer += oprot->writeString((*_iter895));
     }
     xfer += oprot->writeListEnd();
   }
@@ -23317,9 +23889,9 @@ uint32_t ThriftHiveMetastore_list_privileges_args::read(::apache::thrift::protoc
         break;
       case 2:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast874;
-          xfer += iprot->readI32(ecast874);
-          this->principal_type = (PrincipalType::type)ecast874;
+          int32_t ecast896;
+          xfer += iprot->readI32(ecast896);
+          this->principal_type = (PrincipalType::type)ecast896;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -23411,14 +23983,14 @@ uint32_t ThriftHiveMetastore_list_privileges_result::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size875;
-            ::apache::thrift::protocol::TType _etype878;
-            xfer += iprot->readListBegin(_etype878, _size875);
-            this->success.resize(_size875);
-            uint32_t _i879;
-            for (_i879 = 0; _i879 < _size875; ++_i879)
+            uint32_t _size897;
+            ::apache::thrift::protocol::TType _etype900;
+            xfer += iprot->readListBegin(_etype900, _size897);
+            this->success.resize(_size897);
+            uint32_t _i901;
+            for (_i901 = 0; _i901 < _size897; ++_i901)
             {
-              xfer += this->success[_i879].read(iprot);
+              xfer += this->success[_i901].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -23457,10 +24029,10 @@ uint32_t ThriftHiveMetastore_list_privileges_result::write(::apache::thrift::pro
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<HiveObjectPrivilege> ::const_iterator _iter880;
-      for (_iter880 = this->success.begin(); _iter880 != this->success.end(); ++_iter880)
+      std::vector<HiveObjectPrivilege> ::const_iterator _iter902;
+      for (_iter902 = this->success.begin(); _iter902 != this->success.end(); ++_iter902)
       {
-        xfer += (*_iter880).write(oprot);
+        xfer += (*_iter902).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -23499,14 +24071,14 @@ uint32_t ThriftHiveMetastore_list_privileges_presult::read(::apache::thrift::pro
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size881;
-            ::apache::thrift::protocol::TType _etype884;
-            xfer += iprot->readListBegin(_etype884, _size881);
-            (*(this->success)).resize(_size881);
-            uint32_t _i885;
-            for (_i885 = 0; _i885 < _size881; ++_i885)
+            uint32_t _size903;
+            ::apache::thrift::protocol::TType _etype906;
+            xfer += iprot->readListBegin(_etype906, _size903);
+            (*(this->success)).resize(_size903);
+            uint32_t _i907;
+            for (_i907 = 0; _i907 < _size903; ++_i907)
             {
-              xfer += (*(this->success))[_i885].read(iprot);
+              xfer += (*(this->success))[_i907].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -24113,14 +24685,14 @@ uint32_t ThriftHiveMetastore_set_ugi_args::read(::apache::thrift::protocol::TPro
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size886;
-            ::apache::thrift::protocol::TType _etype889;
-            xfer += iprot->readListBegin(_etype889, _size886);
-            this->group_names.resize(_size886);
-            uint32_t _i890;
-            for (_i890 = 0; _i890 < _size886; ++_i890)
+            uint32_t _size908;
+            ::apache::thrift::protocol::TType _etype911;
+            xfer += iprot->readListBegin(_etype911, _size908);
+            this->group_names.resize(_size908);
+            uint32_t _i912;
+            for (_i912 = 0; _i912 < _size908; ++_i912)
             {
-              xfer += iprot->readString(this->group_names[_i890]);
+              xfer += iprot->readString(this->group_names[_i912]);
             }
             xfer += iprot->readListEnd();
           }
@@ -24152,10 +24724,10 @@ uint32_t ThriftHiveMetastore_set_ugi_args::write(::apache::thrift::protocol::TPr
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter891;
-    for (_iter891 = this->group_names.begin(); _iter891 != this->group_names.end(); ++_iter891)
+    std::vector<std::string> ::const_iterator _iter913;
+    for (_iter913 = this->group_names.begin(); _iter913 != this->group_names.end(); ++_iter913)
     {
-      xfer += oprot->writeString((*_iter891));
+      xfer += oprot->writeString((*_iter913));
     }
     xfer += oprot->writeListEnd();
   }
@@ -24177,10 +24749,10 @@ uint32_t ThriftHiveMetastore_set_ugi_pargs::write(::apache::thrift::protocol::TP
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter892;
-    for (_iter892 = (*(this->group_names)).begin(); _iter892 != (*(this->group_names)).end(); ++_iter892)
+    std::vector<std::string> ::const_iterator _iter914;
+    for (_iter914 = (*(this->group_names)).begin(); _iter914 != (*(this->group_names)).end(); ++_iter914)
     {
-      xfer += oprot->writeString((*_iter892));
+      xfer += oprot->writeString((*_iter914));
     }
     xfer += oprot->writeListEnd();
   }
@@ -24215,14 +24787,14 @@ uint32_t ThriftHiveMetastore_set_ugi_result::read(::apache::thrift::protocol::TP
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size893;
-            ::apache::thrift::protocol::TType _etype896;
-            xfer += iprot->readListBegin(_etype896, _size893);
-            this->success.resize(_size893);
-            uint32_t _i897;
-            for (_i897 = 0; _i897 < _size893; ++_i897)
+            uint32_t _size915;
+            ::apache::thrift::protocol::TType _etype918;
+            xfer += iprot->readListBegin(_etype918, _size915);
+            this->success.resize(_size915);
+            uint32_t _i919;
+            for (_i919 = 0; _i919 < _size915; ++_i919)
             {
-              xfer += iprot->readString(this->success[_i897]);
+              xfer += iprot->readString(this->success[_i919]);
             }
             xfer += iprot->readListEnd();
           }
@@ -24261,10 +24833,10 @@ uint32_t ThriftHiveMetastore_set_ugi_result::write(::apache::thrift::protocol::T
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter898;
-      for (_iter898 = this->success.begin(); _iter898 != this->success.end(); ++_iter898)
+      std::vector<std::string> ::const_iterator _iter920;
+      for (_iter920 = this->success.begin(); _iter920 != this->success.end(); ++_iter920)
       {
-        xfer += oprot->writeString((*_iter898));
+        xfer += oprot->writeString((*_iter920));
       }
       xfer += oprot->writeListEnd();
     }
@@ -24303,14 +24875,14 @@ uint32_t ThriftHiveMetastore_set_ugi_presult::read(::apache::thrift::protocol::T
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size899;
-            ::apache::thrift::protocol::TType _etype902;
-            xfer += iprot->readListBegin(_etype902, _size899);
-            (*(this->success)).resize(_size899);
-            uint32_t _i903;
-            for (_i903 = 0; _i903 < _size899; ++_i903)
+            uint32_t _size921;
+            ::apache::thrift::protocol::TType _etype924;
+            xfer += iprot->readListBegin(_etype924, _size921);
+            (*(this->success)).resize(_size921);
+            uint32_t _i925;
+            for (_i925 = 0; _i925 < _size921; ++_i925)
             {
-              xfer += iprot->readString((*(this->success))[_i903]);
+              xfer += iprot->readString((*(this->success))[_i925]);
             }
             xfer += iprot->readListEnd();
           }
@@ -28210,6 +28782,75 @@ void ThriftHiveMetastoreClient::recv_get_fields(std::vector<FieldSchema> & _retu
   throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_fields failed: unknown result");
 }
 
+void ThriftHiveMetastoreClient::get_fields_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
+{
+  send_get_fields_with_environment_context(db_name, table_name, environment_context);
+  recv_get_fields_with_environment_context(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_fields_with_environment_context(const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_fields_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_fields_with_environment_context_pargs args;
+  args.db_name = &db_name;
+  args.table_name = &table_name;
+  args.environment_context = &environment_context;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_fields_with_environment_context(std::vector<FieldSchema> & _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_fields_with_environment_context") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_fields_with_environment_context_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_fields_with_environment_context failed: unknown result");
+}
+
 void ThriftHiveMetastoreClient::get_schema(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name)
 {
   send_get_schema(db_name, table_name);
@@ -28278,6 +28919,75 @@ void ThriftHiveMetastoreClient::recv_get_schema(std::vector<FieldSchema> & _retu
   throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_schema failed: unknown result");
 }
 
+void ThriftHiveMetastoreClient::get_schema_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
+{
+  send_get_schema_with_environment_context(db_name, table_name, environment_context);
+  recv_get_schema_with_environment_context(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_schema_with_environment_context(const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_schema_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_schema_with_environment_context_pargs args;
+  args.db_name = &db_name;
+  args.table_name = &table_name;
+  args.environment_context = &environment_context;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_schema_with_environment_context(std::vector<FieldSchema> & _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_schema_with_environment_context") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_schema_with_environment_context_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_schema_with_environment_context failed: unknown result");
+}
+
 void ThriftHiveMetastoreClient::create_table(const Table& tbl)
 {
   send_create_table(tbl);
@@ -35806,6 +36516,69 @@ void ThriftHiveMetastoreProcessor::process_get_fields(int32_t seqid, ::apache::t
   }
 }
 
+void ThriftHiveMetastoreProcessor::process_get_fields_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+{
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_fields_with_environment_context", callContext);
+  }
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
+  }
+
+  ThriftHiveMetastore_get_fields_with_environment_context_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_fields_with_environment_context", bytes);
+  }
+
+  ThriftHiveMetastore_get_fields_with_environment_context_result result;
+  try {
+    iface_->get_fields_with_environment_context(result.success, args.db_name, args.table_name, args.environment_context);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (UnknownTableException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (UnknownDBException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("get_fields_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
+    return;
+  }
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
+  }
+
+  oprot->writeMessageBegin("get_fields_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_fields_with_environment_context", bytes);
+  }
+}
+
 void ThriftHiveMetastoreProcessor::process_get_schema(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
@@ -35869,6 +36642,69 @@ void ThriftHiveMetastoreProcessor::process_get_schema(int32_t seqid, ::apache::t
   }
 }
 
+void ThriftHiveMetastoreProcessor::process_get_schema_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+{
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_schema_with_environment_context", callContext);
+  }
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
+  }
+
+  ThriftHiveMetastore_get_schema_with_environment_context_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_schema_with_environment_context", bytes);
+  }
+
+  ThriftHiveMetastore_get_schema_with_environment_context_result result;
+  try {
+    iface_->get_schema_with_environment_context(result.success, args.db_name, args.table_name, args.environment_context);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (UnknownTableException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (UnknownDBException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("get_schema_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
+    return;
+  }
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
+  }
+
+  oprot->writeMessageBegin("get_schema_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_schema_with_environment_context", bytes);
+  }
+}
+
 void ThriftHiveMetastoreProcessor::process_create_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
index 488c746..52a622d 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
@@ -29,7 +29,9 @@ class ThriftHiveMetastoreIf : virtual public  ::facebook::fb303::FacebookService
   virtual bool drop_type(const std::string& type) = 0;
   virtual void get_type_all(std::map<std::string, Type> & _return, const std::string& name) = 0;
   virtual void get_fields(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name) = 0;
+  virtual void get_fields_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context) = 0;
   virtual void get_schema(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name) = 0;
+  virtual void get_schema_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context) = 0;
   virtual void create_table(const Table& tbl) = 0;
   virtual void create_table_with_environment_context(const Table& tbl, const EnvironmentContext& environment_context) = 0;
   virtual void drop_table(const std::string& dbname, const std::string& name, const bool deleteData) = 0;
@@ -205,9 +207,15 @@ class ThriftHiveMetastoreNull : virtual public ThriftHiveMetastoreIf , virtual p
   void get_fields(std::vector<FieldSchema> & /* _return */, const std::string& /* db_name */, const std::string& /* table_name */) {
     return;
   }
+  void get_fields_with_environment_context(std::vector<FieldSchema> & /* _return */, const std::string& /* db_name */, const std::string& /* table_name */, const EnvironmentContext& /* environment_context */) {
+    return;
+  }
   void get_schema(std::vector<FieldSchema> & /* _return */, const std::string& /* db_name */, const std::string& /* table_name */) {
     return;
   }
+  void get_schema_with_environment_context(std::vector<FieldSchema> & /* _return */, const std::string& /* db_name */, const std::string& /* table_name */, const EnvironmentContext& /* environment_context */) {
+    return;
+  }
   void create_table(const Table& /* tbl */) {
     return;
   }
@@ -2191,6 +2199,162 @@ class ThriftHiveMetastore_get_fields_presult {
 
 };
 
+typedef struct _ThriftHiveMetastore_get_fields_with_environment_context_args__isset {
+  _ThriftHiveMetastore_get_fields_with_environment_context_args__isset() : db_name(false), table_name(false), environment_context(false) {}
+  bool db_name;
+  bool table_name;
+  bool environment_context;
+} _ThriftHiveMetastore_get_fields_with_environment_context_args__isset;
+
+class ThriftHiveMetastore_get_fields_with_environment_context_args {
+ public:
+
+  ThriftHiveMetastore_get_fields_with_environment_context_args() : db_name(), table_name() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_fields_with_environment_context_args() throw() {}
+
+  std::string db_name;
+  std::string table_name;
+  EnvironmentContext environment_context;
+
+  _ThriftHiveMetastore_get_fields_with_environment_context_args__isset __isset;
+
+  void __set_db_name(const std::string& val) {
+    db_name = val;
+  }
+
+  void __set_table_name(const std::string& val) {
+    table_name = val;
+  }
+
+  void __set_environment_context(const EnvironmentContext& val) {
+    environment_context = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_get_fields_with_environment_context_args & rhs) const
+  {
+    if (!(db_name == rhs.db_name))
+      return false;
+    if (!(table_name == rhs.table_name))
+      return false;
+    if (!(environment_context == rhs.environment_context))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_fields_with_environment_context_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_fields_with_environment_context_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_get_fields_with_environment_context_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_fields_with_environment_context_pargs() throw() {}
+
+  const std::string* db_name;
+  const std::string* table_name;
+  const EnvironmentContext* environment_context;
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_fields_with_environment_context_result__isset {
+  _ThriftHiveMetastore_get_fields_with_environment_context_result__isset() : success(false), o1(false), o2(false), o3(false) {}
+  bool success;
+  bool o1;
+  bool o2;
+  bool o3;
+} _ThriftHiveMetastore_get_fields_with_environment_context_result__isset;
+
+class ThriftHiveMetastore_get_fields_with_environment_context_result {
+ public:
+
+  ThriftHiveMetastore_get_fields_with_environment_context_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_fields_with_environment_context_result() throw() {}
+
+  std::vector<FieldSchema>  success;
+  MetaException o1;
+  UnknownTableException o2;
+  UnknownDBException o3;
+
+  _ThriftHiveMetastore_get_fields_with_environment_context_result__isset __isset;
+
+  void __set_success(const std::vector<FieldSchema> & val) {
+    success = val;
+  }
+
+  void __set_o1(const MetaException& val) {
+    o1 = val;
+  }
+
+  void __set_o2(const UnknownTableException& val) {
+    o2 = val;
+  }
+
+  void __set_o3(const UnknownDBException& val) {
+    o3 = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_get_fields_with_environment_context_result & rhs) const
+  {
+    if (!(success == rhs.success))
+      return false;
+    if (!(o1 == rhs.o1))
+      return false;
+    if (!(o2 == rhs.o2))
+      return false;
+    if (!(o3 == rhs.o3))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_fields_with_environment_context_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_fields_with_environment_context_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_fields_with_environment_context_presult__isset {
+  _ThriftHiveMetastore_get_fields_with_environment_context_presult__isset() : success(false), o1(false), o2(false), o3(false) {}
+  bool success;
+  bool o1;
+  bool o2;
+  bool o3;
+} _ThriftHiveMetastore_get_fields_with_environment_context_presult__isset;
+
+class ThriftHiveMetastore_get_fields_with_environment_context_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_fields_with_environment_context_presult() throw() {}
+
+  std::vector<FieldSchema> * success;
+  MetaException o1;
+  UnknownTableException o2;
+  UnknownDBException o3;
+
+  _ThriftHiveMetastore_get_fields_with_environment_context_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
 typedef struct _ThriftHiveMetastore_get_schema_args__isset {
   _ThriftHiveMetastore_get_schema_args__isset() : db_name(false), table_name(false) {}
   bool db_name;
@@ -2338,6 +2502,162 @@ class ThriftHiveMetastore_get_schema_presult {
 
 };
 
+typedef struct _ThriftHiveMetastore_get_schema_with_environment_context_args__isset {
+  _ThriftHiveMetastore_get_schema_with_environment_context_args__isset() : db_name(false), table_name(false), environment_context(false) {}
+  bool db_name;
+  bool table_name;
+  bool environment_context;
+} _ThriftHiveMetastore_get_schema_with_environment_context_args__isset;
+
+class ThriftHiveMetastore_get_schema_with_environment_context_args {
+ public:
+
+  ThriftHiveMetastore_get_schema_with_environment_context_args() : db_name(), table_name() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_schema_with_environment_context_args() throw() {}
+
+  std::string db_name;
+  std::string table_name;
+  EnvironmentContext environment_context;
+
+  _ThriftHiveMetastore_get_schema_with_environment_context_args__isset __isset;
+
+  void __set_db_name(const std::string& val) {
+    db_name = val;
+  }
+
+  void __set_table_name(const std::string& val) {
+    table_name = val;
+  }
+
+  void __set_environment_context(const EnvironmentContext& val) {
+    environment_context = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_get_schema_with_environment_context_args & rhs) const
+  {
+    if (!(db_name == rhs.db_name))
+      return false;
+    if (!(table_name == rhs.table_name))
+      return false;
+    if (!(environment_context == rhs.environment_context))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_schema_with_environment_context_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_schema_with_environment_context_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_get_schema_with_environment_context_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_schema_with_environment_context_pargs() throw() {}
+
+  const std::string* db_name;
+  const std::string* table_name;
+  const EnvironmentContext* environment_context;
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_schema_with_environment_context_result__isset {
+  _ThriftHiveMetastore_get_schema_with_environment_context_result__isset() : success(false), o1(false), o2(false), o3(false) {}
+  bool success;
+  bool o1;
+  bool o2;
+  bool o3;
+} _ThriftHiveMetastore_get_schema_with_environment_context_result__isset;
+
+class ThriftHiveMetastore_get_schema_with_environment_context_result {
+ public:
+
+  ThriftHiveMetastore_get_schema_with_environment_context_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_schema_with_environment_context_result() throw() {}
+
+  std::vector<FieldSchema>  success;
+  MetaException o1;
+  UnknownTableException o2;
+  UnknownDBException o3;
+
+  _ThriftHiveMetastore_get_schema_with_environment_context_result__isset __isset;
+
+  void __set_success(const std::vector<FieldSchema> & val) {
+    success = val;
+  }
+
+  void __set_o1(const MetaException& val) {
+    o1 = val;
+  }
+
+  void __set_o2(const UnknownTableException& val) {
+    o2 = val;
+  }
+
+  void __set_o3(const UnknownDBException& val) {
+    o3 = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_get_schema_with_environment_context_result & rhs) const
+  {
+    if (!(success == rhs.success))
+      return false;
+    if (!(o1 == rhs.o1))
+      return false;
+    if (!(o2 == rhs.o2))
+      return false;
+    if (!(o3 == rhs.o3))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_schema_with_environment_context_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_schema_with_environment_context_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_schema_with_environment_context_presult__isset {
+  _ThriftHiveMetastore_get_schema_with_environment_context_presult__isset() : success(false), o1(false), o2(false), o3(false) {}
+  bool success;
+  bool o1;
+  bool o2;
+  bool o3;
+} _ThriftHiveMetastore_get_schema_with_environment_context_presult__isset;
+
+class ThriftHiveMetastore_get_schema_with_environment_context_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_schema_with_environment_context_presult() throw() {}
+
+  std::vector<FieldSchema> * success;
+  MetaException o1;
+  UnknownTableException o2;
+  UnknownDBException o3;
+
+  _ThriftHiveMetastore_get_schema_with_environment_context_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
 typedef struct _ThriftHiveMetastore_create_table_args__isset {
   _ThriftHiveMetastore_create_table_args__isset() : tbl(false) {}
   bool tbl;
@@ -16828,9 +17148,15 @@ class ThriftHiveMetastoreClient : virtual public ThriftHiveMetastoreIf, public
   void get_fields(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name);
   void send_get_fields(const std::string& db_name, const std::string& table_name);
   void recv_get_fields(std::vector<FieldSchema> & _return);
+  void get_fields_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context);
+  void send_get_fields_with_environment_context(const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context);
+  void recv_get_fields_with_environment_context(std::vector<FieldSchema> & _return);
   void get_schema(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name);
   void send_get_schema(const std::string& db_name, const std::string& table_name);
   void recv_get_schema(std::vector<FieldSchema> & _return);
+  void get_schema_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context);
+  void send_get_schema_with_environment_context(const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context);
+  void recv_get_schema_with_environment_context(std::vector<FieldSchema> & _return);
   void create_table(const Table& tbl);
   void send_create_table(const Table& tbl);
   void recv_create_table();
@@ -17169,7 +17495,9 @@ class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceP
   void process_drop_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_type_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_fields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_get_fields_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_schema(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_get_schema_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_create_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_create_table_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_drop_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
@@ -17292,7 +17620,9 @@ class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceP
     processMap_["drop_type"] = &ThriftHiveMetastoreProcessor::process_drop_type;
     processMap_["get_type_all"] = &ThriftHiveMetastoreProcessor::process_get_type_all;
     processMap_["get_fields"] = &ThriftHiveMetastoreProcessor::process_get_fields;
+    processMap_["get_fields_with_environment_context"] = &ThriftHiveMetastoreProcessor::process_get_fields_with_environment_context;
     processMap_["get_schema"] = &ThriftHiveMetastoreProcessor::process_get_schema;
+    processMap_["get_schema_with_environment_context"] = &ThriftHiveMetastoreProcessor::process_get_schema_with_environment_context;
     processMap_["create_table"] = &ThriftHiveMetastoreProcessor::process_create_table;
     processMap_["create_table_with_environment_context"] = &ThriftHiveMetastoreProcessor::process_create_table_with_environment_context;
     processMap_["drop_table"] = &ThriftHiveMetastoreProcessor::process_drop_table;
@@ -17555,6 +17885,16 @@ class ThriftHiveMetastoreMultiface : virtual public ThriftHiveMetastoreIf, publi
     return;
   }
 
+  void get_fields_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->get_fields_with_environment_context(_return, db_name, table_name, environment_context);
+    }
+    ifaces_[i]->get_fields_with_environment_context(_return, db_name, table_name, environment_context);
+    return;
+  }
+
   void get_schema(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name) {
     size_t sz = ifaces_.size();
     size_t i = 0;
@@ -17565,6 +17905,16 @@ class ThriftHiveMetastoreMultiface : virtual public ThriftHiveMetastoreIf, publi
     return;
   }
 
+  void get_schema_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->get_schema_with_environment_context(_return, db_name, table_name, environment_context);
+    }
+    ifaces_[i]->get_schema_with_environment_context(_return, db_name, table_name, environment_context);
+    return;
+  }
+
   void create_table(const Table& tbl) {
     size_t sz = ifaces_.size();
     size_t i = 0;
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
index e2d41c1..b910251 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
@@ -87,11 +87,21 @@ class ThriftHiveMetastoreHandler : virtual public ThriftHiveMetastoreIf {
     printf("get_fields\n");
   }
 
+  void get_fields_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context) {
+    // Your implementation goes here
+    printf("get_fields_with_environment_context\n");
+  }
+
   void get_schema(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name) {
     // Your implementation goes here
     printf("get_schema\n");
   }
 
+  void get_schema_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context) {
+    // Your implementation goes here
+    printf("get_schema_with_environment_context\n");
+  }
+
   void create_table(const Table& tbl) {
     // Your implementation goes here
     printf("create_table\n");
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java
index 9df36b6..83438c7 100644
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java
@@ -184,7 +184,7 @@ public SkewedInfo(SkewedInfo other) {
 
         __this__skewedColValueLocationMaps.put(__this__skewedColValueLocationMaps_copy_key, __this__skewedColValueLocationMaps_copy_value);
       }
-        this.skewedColValueLocationMaps = __this__skewedColValueLocationMaps;
+      this.skewedColValueLocationMaps = __this__skewedColValueLocationMaps;
     }
   }
 
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
index a72061e..31b5d51 100644
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
@@ -64,8 +64,12 @@
 
     public List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException;
 
+    public List<FieldSchema> get_fields_with_environment_context(String db_name, String table_name, EnvironmentContext environment_context) throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException;
+
     public List<FieldSchema> get_schema(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException;
 
+    public List<FieldSchema> get_schema_with_environment_context(String db_name, String table_name, EnvironmentContext environment_context) throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException;
+
     public void create_table(Table tbl) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, org.apache.thrift.TException;
 
     public void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, org.apache.thrift.TException;
@@ -306,8 +310,12 @@
 
     public void get_fields(String db_name, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_fields_call> resultHandler) throws org.apache.thrift.TException;
 
+    public void get_fields_with_environment_context(String db_name, String table_name, EnvironmentContext environment_context, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_fields_with_environment_context_call> resultHandler) throws org.apache.thrift.TException;
+
     public void get_schema(String db_name, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_schema_call> resultHandler) throws org.apache.thrift.TException;
 
+    public void get_schema_with_environment_context(String db_name, String table_name, EnvironmentContext environment_context, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_schema_with_environment_context_call> resultHandler) throws org.apache.thrift.TException;
+
     public void create_table(Table tbl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_table_call> resultHandler) throws org.apache.thrift.TException;
 
     public void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_table_with_environment_context_call> resultHandler) throws org.apache.thrift.TException;
@@ -906,6 +914,40 @@ public void send_get_fields(String db_name, String table_name) throws org.apache
       throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_fields failed: unknown result");
     }
 
+    public List<FieldSchema> get_fields_with_environment_context(String db_name, String table_name, EnvironmentContext environment_context) throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException
+    {
+      send_get_fields_with_environment_context(db_name, table_name, environment_context);
+      return recv_get_fields_with_environment_context();
+    }
+
+    public void send_get_fields_with_environment_context(String db_name, String table_name, EnvironmentContext environment_context) throws org.apache.thrift.TException
+    {
+      get_fields_with_environment_context_args args = new get_fields_with_environment_context_args();
+      args.setDb_name(db_name);
+      args.setTable_name(table_name);
+      args.setEnvironment_context(environment_context);
+      sendBase("get_fields_with_environment_context", args);
+    }
+
+    public List<FieldSchema> recv_get_fields_with_environment_context() throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException
+    {
+      get_fields_with_environment_context_result result = new get_fields_with_environment_context_result();
+      receiveBase(result, "get_fields_with_environment_context");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      if (result.o1 != null) {
+        throw result.o1;
+      }
+      if (result.o2 != null) {
+        throw result.o2;
+      }
+      if (result.o3 != null) {
+        throw result.o3;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_fields_with_environment_context failed: unknown result");
+    }
+
     public List<FieldSchema> get_schema(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException
     {
       send_get_schema(db_name, table_name);
@@ -939,6 +981,40 @@ public void send_get_schema(String db_name, String table_name) throws org.apache
       throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_schema failed: unknown result");
     }
 
+    public List<FieldSchema> get_schema_with_environment_context(String db_name, String table_name, EnvironmentContext environment_context) throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException
+    {
+      send_get_schema_with_environment_context(db_name, table_name, environment_context);
+      return recv_get_schema_with_environment_context();
+    }
+
+    public void send_get_schema_with_environment_context(String db_name, String table_name, EnvironmentContext environment_context) throws org.apache.thrift.TException
+    {
+      get_schema_with_environment_context_args args = new get_schema_with_environment_context_args();
+      args.setDb_name(db_name);
+      args.setTable_name(table_name);
+      args.setEnvironment_context(environment_context);
+      sendBase("get_schema_with_environment_context", args);
+    }
+
+    public List<FieldSchema> recv_get_schema_with_environment_context() throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException
+    {
+      get_schema_with_environment_context_result result = new get_schema_with_environment_context_result();
+      receiveBase(result, "get_schema_with_environment_context");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      if (result.o1 != null) {
+        throw result.o1;
+      }
+      if (result.o2 != null) {
+        throw result.o2;
+      }
+      if (result.o3 != null) {
+        throw result.o3;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_schema_with_environment_context failed: unknown result");
+    }
+
     public void create_table(Table tbl) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, org.apache.thrift.TException
     {
       send_create_table(tbl);
@@ -4499,6 +4575,44 @@ public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apa
       }
     }
 
+    public void get_fields_with_environment_context(String db_name, String table_name, EnvironmentContext environment_context, org.apache.thrift.async.AsyncMethodCallback<get_fields_with_environment_context_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      get_fields_with_environment_context_call method_call = new get_fields_with_environment_context_call(db_name, table_name, environment_context, resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class get_fields_with_environment_context_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String db_name;
+      private String table_name;
+      private EnvironmentContext environment_context;
+      public get_fields_with_environment_context_call(String db_name, String table_name, EnvironmentContext environment_context, org.apache.thrift.async.AsyncMethodCallback<get_fields_with_environment_context_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+        this.db_name = db_name;
+        this.table_name = table_name;
+        this.environment_context = environment_context;
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_fields_with_environment_context", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        get_fields_with_environment_context_args args = new get_fields_with_environment_context_args();
+        args.setDb_name(db_name);
+        args.setTable_name(table_name);
+        args.setEnvironment_context(environment_context);
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public List<FieldSchema> getResult() throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_get_fields_with_environment_context();
+      }
+    }
+
     public void get_schema(String db_name, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_schema_call> resultHandler) throws org.apache.thrift.TException {
       checkReady();
       get_schema_call method_call = new get_schema_call(db_name, table_name, resultHandler, this, ___protocolFactory, ___transport);
@@ -4534,6 +4648,44 @@ public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apa
       }
     }
 
+    public void get_schema_with_environment_context(String db_name, String table_name, EnvironmentContext environment_context, org.apache.thrift.async.AsyncMethodCallback<get_schema_with_environment_context_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      get_schema_with_environment_context_call method_call = new get_schema_with_environment_context_call(db_name, table_name, environment_context, resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class get_schema_with_environment_context_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String db_name;
+      private String table_name;
+      private EnvironmentContext environment_context;
+      public get_schema_with_environment_context_call(String db_name, String table_name, EnvironmentContext environment_context, org.apache.thrift.async.AsyncMethodCallback<get_schema_with_environment_context_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+        this.db_name = db_name;
+        this.table_name = table_name;
+        this.environment_context = environment_context;
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_schema_with_environment_context", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        get_schema_with_environment_context_args args = new get_schema_with_environment_context_args();
+        args.setDb_name(db_name);
+        args.setTable_name(table_name);
+        args.setEnvironment_context(environment_context);
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public List<FieldSchema> getResult() throws MetaException, UnknownTableException, UnknownDBException, org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_get_schema_with_environment_context();
+      }
+    }
+
     public void create_table(Table tbl, org.apache.thrift.async.AsyncMethodCallback<create_table_call> resultHandler) throws org.apache.thrift.TException {
       checkReady();
       create_table_call method_call = new create_table_call(tbl, resultHandler, this, ___protocolFactory, ___transport);
@@ -8343,7 +8495,9 @@ protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ?
       processMap.put("drop_type", new drop_type());
       processMap.put("get_type_all", new get_type_all());
       processMap.put("get_fields", new get_fields());
+      processMap.put("get_fields_with_environment_context", new get_fields_with_environment_context());
       processMap.put("get_schema", new get_schema());
+      processMap.put("get_schema_with_environment_context", new get_schema_with_environment_context());
       processMap.put("create_table", new create_table());
       processMap.put("create_table_with_environment_context", new create_table_with_environment_context());
       processMap.put("drop_table", new drop_table());
@@ -8790,6 +8944,34 @@ public get_fields_result getResult(I iface, get_fields_args args) throws org.apa
       }
     }
 
+    public static class get_fields_with_environment_context<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_fields_with_environment_context_args> {
+      public get_fields_with_environment_context() {
+        super("get_fields_with_environment_context");
+      }
+
+      public get_fields_with_environment_context_args getEmptyArgsInstance() {
+        return new get_fields_with_environment_context_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public get_fields_with_environment_context_result getResult(I iface, get_fields_with_environment_context_args args) throws org.apache.thrift.TException {
+        get_fields_with_environment_context_result result = new get_fields_with_environment_context_result();
+        try {
+          result.success = iface.get_fields_with_environment_context(args.db_name, args.table_name, args.environment_context);
+        } catch (MetaException o1) {
+          result.o1 = o1;
+        } catch (UnknownTableException o2) {
+          result.o2 = o2;
+        } catch (UnknownDBException o3) {
+          result.o3 = o3;
+        }
+        return result;
+      }
+    }
+
     public static class get_schema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_schema_args> {
       public get_schema() {
         super("get_schema");
@@ -8818,6 +9000,34 @@ public get_schema_result getResult(I iface, get_schema_args args) throws org.apa
       }
     }
 
+    public static class get_schema_with_environment_context<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_schema_with_environment_context_args> {
+      public get_schema_with_environment_context() {
+        super("get_schema_with_environment_context");
+      }
+
+      public get_schema_with_environment_context_args getEmptyArgsInstance() {
+        return new get_schema_with_environment_context_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public get_schema_with_environment_context_result getResult(I iface, get_schema_with_environment_context_args args) throws org.apache.thrift.TException {
+        get_schema_with_environment_context_result result = new get_schema_with_environment_context_result();
+        try {
+          result.success = iface.get_schema_with_environment_context(args.db_name, args.table_name, args.environment_context);
+        } catch (MetaException o1) {
+          result.o1 = o1;
+        } catch (UnknownTableException o2) {
+          result.o2 = o2;
+        } catch (UnknownDBException o3) {
+          result.o3 = o3;
+        }
+        return result;
+      }
+    }
+
     public static class create_table<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_table_args> {
       public create_table() {
         super("create_table");
@@ -23739,25 +23949,28 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_fields_result st
 
   }
 
-  public static class get_schema_args implements org.apache.thrift.TBase<get_schema_args, get_schema_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_args");
+  public static class get_fields_with_environment_context_args implements org.apache.thrift.TBase<get_fields_with_environment_context_args, get_fields_with_environment_context_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_fields_with_environment_context_args");
 
     private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)1);
     private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
+    private static final org.apache.thrift.protocol.TField ENVIRONMENT_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("environment_context", org.apache.thrift.protocol.TType.STRUCT, (short)3);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new get_schema_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new get_schema_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_fields_with_environment_context_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_fields_with_environment_context_argsTupleSchemeFactory());
     }
 
     private String db_name; // required
     private String table_name; // required
+    private EnvironmentContext environment_context; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
       DB_NAME((short)1, "db_name"),
-      TABLE_NAME((short)2, "table_name");
+      TABLE_NAME((short)2, "table_name"),
+      ENVIRONMENT_CONTEXT((short)3, "environment_context");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -23776,6 +23989,8 @@ public static _Fields findByThriftId(int fieldId) {
             return DB_NAME;
           case 2: // TABLE_NAME
             return TABLE_NAME;
+          case 3: // ENVIRONMENT_CONTEXT
+            return ENVIRONMENT_CONTEXT;
           default:
             return null;
         }
@@ -23823,42 +24038,50 @@ public String getFieldName() {
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.ENVIRONMENT_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("environment_context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EnvironmentContext.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_fields_with_environment_context_args.class, metaDataMap);
     }
 
-    public get_schema_args() {
+    public get_fields_with_environment_context_args() {
     }
 
-    public get_schema_args(
+    public get_fields_with_environment_context_args(
       String db_name,
-      String table_name)
+      String table_name,
+      EnvironmentContext environment_context)
     {
       this();
       this.db_name = db_name;
       this.table_name = table_name;
+      this.environment_context = environment_context;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public get_schema_args(get_schema_args other) {
+    public get_fields_with_environment_context_args(get_fields_with_environment_context_args other) {
       if (other.isSetDb_name()) {
         this.db_name = other.db_name;
       }
       if (other.isSetTable_name()) {
         this.table_name = other.table_name;
       }
+      if (other.isSetEnvironment_context()) {
+        this.environment_context = new EnvironmentContext(other.environment_context);
+      }
     }
 
-    public get_schema_args deepCopy() {
-      return new get_schema_args(this);
+    public get_fields_with_environment_context_args deepCopy() {
+      return new get_fields_with_environment_context_args(this);
     }
 
     @Override
     public void clear() {
       this.db_name = null;
       this.table_name = null;
+      this.environment_context = null;
     }
 
     public String getDb_name() {
@@ -23907,6 +24130,29 @@ public void setTable_nameIsSet(boolean value) {
       }
     }
 
+    public EnvironmentContext getEnvironment_context() {
+      return this.environment_context;
+    }
+
+    public void setEnvironment_context(EnvironmentContext environment_context) {
+      this.environment_context = environment_context;
+    }
+
+    public void unsetEnvironment_context() {
+      this.environment_context = null;
+    }
+
+    /** Returns true if field environment_context is set (has been assigned a value) and false otherwise */
+    public boolean isSetEnvironment_context() {
+      return this.environment_context != null;
+    }
+
+    public void setEnvironment_contextIsSet(boolean value) {
+      if (!value) {
+        this.environment_context = null;
+      }
+    }
+
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
       case DB_NAME:
@@ -23925,6 +24171,14 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
+      case ENVIRONMENT_CONTEXT:
+        if (value == null) {
+          unsetEnvironment_context();
+        } else {
+          setEnvironment_context((EnvironmentContext)value);
+        }
+        break;
+
       }
     }
 
@@ -23936,6 +24190,9 @@ public Object getFieldValue(_Fields field) {
       case TABLE_NAME:
         return getTable_name();
 
+      case ENVIRONMENT_CONTEXT:
+        return getEnvironment_context();
+
       }
       throw new IllegalStateException();
     }
@@ -23951,6 +24208,8 @@ public boolean isSet(_Fields field) {
         return isSetDb_name();
       case TABLE_NAME:
         return isSetTable_name();
+      case ENVIRONMENT_CONTEXT:
+        return isSetEnvironment_context();
       }
       throw new IllegalStateException();
     }
@@ -23959,12 +24218,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_schema_args)
-        return this.equals((get_schema_args)that);
+      if (that instanceof get_fields_with_environment_context_args)
+        return this.equals((get_fields_with_environment_context_args)that);
       return false;
     }
 
-    public boolean equals(get_schema_args that) {
+    public boolean equals(get_fields_with_environment_context_args that) {
       if (that == null)
         return false;
 
@@ -23986,6 +24245,15 @@ public boolean equals(get_schema_args that) {
           return false;
       }
 
+      boolean this_present_environment_context = true && this.isSetEnvironment_context();
+      boolean that_present_environment_context = true && that.isSetEnvironment_context();
+      if (this_present_environment_context || that_present_environment_context) {
+        if (!(this_present_environment_context && that_present_environment_context))
+          return false;
+        if (!this.environment_context.equals(that.environment_context))
+          return false;
+      }
+
       return true;
     }
 
@@ -24003,16 +24271,21 @@ public int hashCode() {
       if (present_table_name)
         builder.append(table_name);
 
+      boolean present_environment_context = true && (isSetEnvironment_context());
+      builder.append(present_environment_context);
+      if (present_environment_context)
+        builder.append(environment_context);
+
       return builder.toHashCode();
     }
 
-    public int compareTo(get_schema_args other) {
+    public int compareTo(get_fields_with_environment_context_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_schema_args typedOther = (get_schema_args)other;
+      get_fields_with_environment_context_args typedOther = (get_fields_with_environment_context_args)other;
 
       lastComparison = Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());
       if (lastComparison != 0) {
@@ -24034,6 +24307,16 @@ public int compareTo(get_schema_args other) {
           return lastComparison;
         }
       }
+      lastComparison = Boolean.valueOf(isSetEnvironment_context()).compareTo(typedOther.isSetEnvironment_context());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetEnvironment_context()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.environment_context, typedOther.environment_context);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       return 0;
     }
 
@@ -24051,7 +24334,7 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_schema_args(");
+      StringBuilder sb = new StringBuilder("get_fields_with_environment_context_args(");
       boolean first = true;
 
       sb.append("db_name:");
@@ -24069,6 +24352,14 @@ public String toString() {
         sb.append(this.table_name);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("environment_context:");
+      if (this.environment_context == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.environment_context);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -24076,6 +24367,9 @@ public String toString() {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
+      if (environment_context != null) {
+        environment_context.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -24094,15 +24388,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class get_schema_argsStandardSchemeFactory implements SchemeFactory {
-      public get_schema_argsStandardScheme getScheme() {
-        return new get_schema_argsStandardScheme();
+    private static class get_fields_with_environment_context_argsStandardSchemeFactory implements SchemeFactory {
+      public get_fields_with_environment_context_argsStandardScheme getScheme() {
+        return new get_fields_with_environment_context_argsStandardScheme();
       }
     }
 
-    private static class get_schema_argsStandardScheme extends StandardScheme<get_schema_args> {
+    private static class get_fields_with_environment_context_argsStandardScheme extends StandardScheme<get_fields_with_environment_context_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_fields_with_environment_context_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -24128,6 +24422,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_args str
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
+            case 3: // ENVIRONMENT_CONTEXT
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.environment_context = new EnvironmentContext();
+                struct.environment_context.read(iprot);
+                struct.setEnvironment_contextIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -24137,7 +24440,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_args str
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_fields_with_environment_context_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -24151,22 +24454,27 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_args st
           oprot.writeString(struct.table_name);
           oprot.writeFieldEnd();
         }
+        if (struct.environment_context != null) {
+          oprot.writeFieldBegin(ENVIRONMENT_CONTEXT_FIELD_DESC);
+          struct.environment_context.write(oprot);
+          oprot.writeFieldEnd();
+        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class get_schema_argsTupleSchemeFactory implements SchemeFactory {
-      public get_schema_argsTupleScheme getScheme() {
-        return new get_schema_argsTupleScheme();
+    private static class get_fields_with_environment_context_argsTupleSchemeFactory implements SchemeFactory {
+      public get_fields_with_environment_context_argsTupleScheme getScheme() {
+        return new get_fields_with_environment_context_argsTupleScheme();
       }
     }
 
-    private static class get_schema_argsTupleScheme extends TupleScheme<get_schema_args> {
+    private static class get_fields_with_environment_context_argsTupleScheme extends TupleScheme<get_fields_with_environment_context_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_fields_with_environment_context_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetDb_name()) {
@@ -24175,19 +24483,25 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_args str
         if (struct.isSetTable_name()) {
           optionals.set(1);
         }
-        oprot.writeBitSet(optionals, 2);
+        if (struct.isSetEnvironment_context()) {
+          optionals.set(2);
+        }
+        oprot.writeBitSet(optionals, 3);
         if (struct.isSetDb_name()) {
           oprot.writeString(struct.db_name);
         }
         if (struct.isSetTable_name()) {
           oprot.writeString(struct.table_name);
         }
+        if (struct.isSetEnvironment_context()) {
+          struct.environment_context.write(oprot);
+        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_fields_with_environment_context_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(2);
+        BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           struct.db_name = iprot.readString();
           struct.setDb_nameIsSet(true);
@@ -24196,13 +24510,18 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_args stru
           struct.table_name = iprot.readString();
           struct.setTable_nameIsSet(true);
         }
+        if (incoming.get(2)) {
+          struct.environment_context = new EnvironmentContext();
+          struct.environment_context.read(iprot);
+          struct.setEnvironment_contextIsSet(true);
+        }
       }
     }
 
   }
 
-  public static class get_schema_result implements org.apache.thrift.TBase<get_schema_result, get_schema_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_result");
+  public static class get_fields_with_environment_context_result implements org.apache.thrift.TBase<get_fields_with_environment_context_result, get_fields_with_environment_context_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_fields_with_environment_context_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
     private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
@@ -24211,8 +24530,8 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_args stru
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new get_schema_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new get_schema_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_fields_with_environment_context_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_fields_with_environment_context_resultTupleSchemeFactory());
     }
 
     private List<FieldSchema> success; // required
@@ -24301,13 +24620,13 @@ public String getFieldName() {
       tmpMap.put(_Fields.O3, new org.apache.thrift.meta_data.FieldMetaData("o3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_fields_with_environment_context_result.class, metaDataMap);
     }
 
-    public get_schema_result() {
+    public get_fields_with_environment_context_result() {
     }
 
-    public get_schema_result(
+    public get_fields_with_environment_context_result(
       List<FieldSchema> success,
       MetaException o1,
       UnknownTableException o2,
@@ -24323,7 +24642,7 @@ public get_schema_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public get_schema_result(get_schema_result other) {
+    public get_fields_with_environment_context_result(get_fields_with_environment_context_result other) {
       if (other.isSetSuccess()) {
         List<FieldSchema> __this__success = new ArrayList<FieldSchema>();
         for (FieldSchema other_element : other.success) {
@@ -24342,8 +24661,8 @@ public get_schema_result(get_schema_result other) {
       }
     }
 
-    public get_schema_result deepCopy() {
-      return new get_schema_result(this);
+    public get_fields_with_environment_context_result deepCopy() {
+      return new get_fields_with_environment_context_result(this);
     }
 
     @Override
@@ -24539,12 +24858,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_schema_result)
-        return this.equals((get_schema_result)that);
+      if (that instanceof get_fields_with_environment_context_result)
+        return this.equals((get_fields_with_environment_context_result)that);
       return false;
     }
 
-    public boolean equals(get_schema_result that) {
+    public boolean equals(get_fields_with_environment_context_result that) {
       if (that == null)
         return false;
 
@@ -24614,13 +24933,13 @@ public int hashCode() {
       return builder.toHashCode();
     }
 
-    public int compareTo(get_schema_result other) {
+    public int compareTo(get_fields_with_environment_context_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_schema_result typedOther = (get_schema_result)other;
+      get_fields_with_environment_context_result typedOther = (get_fields_with_environment_context_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -24679,7 +24998,7 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_schema_result(");
+      StringBuilder sb = new StringBuilder("get_fields_with_environment_context_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -24738,15 +25057,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class get_schema_resultStandardSchemeFactory implements SchemeFactory {
-      public get_schema_resultStandardScheme getScheme() {
-        return new get_schema_resultStandardScheme();
+    private static class get_fields_with_environment_context_resultStandardSchemeFactory implements SchemeFactory {
+      public get_fields_with_environment_context_resultStandardScheme getScheme() {
+        return new get_fields_with_environment_context_resultStandardScheme();
       }
     }
 
-    private static class get_schema_resultStandardScheme extends StandardScheme<get_schema_result> {
+    private static class get_fields_with_environment_context_resultStandardScheme extends StandardScheme<get_fields_with_environment_context_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_fields_with_environment_context_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -24811,7 +25130,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_result s
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_fields_with_environment_context_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -24848,16 +25167,16 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_result
 
     }
 
-    private static class get_schema_resultTupleSchemeFactory implements SchemeFactory {
-      public get_schema_resultTupleScheme getScheme() {
-        return new get_schema_resultTupleScheme();
+    private static class get_fields_with_environment_context_resultTupleSchemeFactory implements SchemeFactory {
+      public get_fields_with_environment_context_resultTupleScheme getScheme() {
+        return new get_fields_with_environment_context_resultTupleScheme();
       }
     }
 
-    private static class get_schema_resultTupleScheme extends TupleScheme<get_schema_result> {
+    private static class get_fields_with_environment_context_resultTupleScheme extends TupleScheme<get_fields_with_environment_context_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_fields_with_environment_context_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
@@ -24894,7 +25213,7 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_result s
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_fields_with_environment_context_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
@@ -24931,22 +25250,25 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_result st
 
   }
 
-  public static class create_table_args implements org.apache.thrift.TBase<create_table_args, create_table_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_table_args");
+  public static class get_schema_args implements org.apache.thrift.TBase<get_schema_args, get_schema_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_args");
 
-    private static final org.apache.thrift.protocol.TField TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+    private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new create_table_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new create_table_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_schema_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_schema_argsTupleSchemeFactory());
     }
 
-    private Table tbl; // required
+    private String db_name; // required
+    private String table_name; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      TBL((short)1, "tbl");
+      DB_NAME((short)1, "db_name"),
+      TABLE_NAME((short)2, "table_name");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -24961,8 +25283,10 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_result st
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // TBL
-            return TBL;
+          case 1: // DB_NAME
+            return DB_NAME;
+          case 2: // TABLE_NAME
+            return TABLE_NAME;
           default:
             return null;
         }
@@ -25006,70 +25330,109 @@ public String getFieldName() {
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.TBL, new org.apache.thrift.meta_data.FieldMetaData("tbl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Table.class)));
+      tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_table_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_args.class, metaDataMap);
     }
 
-    public create_table_args() {
+    public get_schema_args() {
     }
 
-    public create_table_args(
-      Table tbl)
+    public get_schema_args(
+      String db_name,
+      String table_name)
     {
       this();
-      this.tbl = tbl;
+      this.db_name = db_name;
+      this.table_name = table_name;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public create_table_args(create_table_args other) {
-      if (other.isSetTbl()) {
-        this.tbl = new Table(other.tbl);
+    public get_schema_args(get_schema_args other) {
+      if (other.isSetDb_name()) {
+        this.db_name = other.db_name;
+      }
+      if (other.isSetTable_name()) {
+        this.table_name = other.table_name;
       }
     }
 
-    public create_table_args deepCopy() {
-      return new create_table_args(this);
+    public get_schema_args deepCopy() {
+      return new get_schema_args(this);
     }
 
     @Override
     public void clear() {
-      this.tbl = null;
+      this.db_name = null;
+      this.table_name = null;
     }
 
-    public Table getTbl() {
-      return this.tbl;
+    public String getDb_name() {
+      return this.db_name;
     }
 
-    public void setTbl(Table tbl) {
-      this.tbl = tbl;
+    public void setDb_name(String db_name) {
+      this.db_name = db_name;
     }
 
-    public void unsetTbl() {
-      this.tbl = null;
+    public void unsetDb_name() {
+      this.db_name = null;
     }
 
-    /** Returns true if field tbl is set (has been assigned a value) and false otherwise */
-    public boolean isSetTbl() {
-      return this.tbl != null;
+    /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
+    public boolean isSetDb_name() {
+      return this.db_name != null;
     }
 
-    public void setTblIsSet(boolean value) {
+    public void setDb_nameIsSet(boolean value) {
       if (!value) {
-        this.tbl = null;
+        this.db_name = null;
+      }
+    }
+
+    public String getTable_name() {
+      return this.table_name;
+    }
+
+    public void setTable_name(String table_name) {
+      this.table_name = table_name;
+    }
+
+    public void unsetTable_name() {
+      this.table_name = null;
+    }
+
+    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
+    public boolean isSetTable_name() {
+      return this.table_name != null;
+    }
+
+    public void setTable_nameIsSet(boolean value) {
+      if (!value) {
+        this.table_name = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case TBL:
+      case DB_NAME:
         if (value == null) {
-          unsetTbl();
+          unsetDb_name();
         } else {
-          setTbl((Table)value);
+          setDb_name((String)value);
+        }
+        break;
+
+      case TABLE_NAME:
+        if (value == null) {
+          unsetTable_name();
+        } else {
+          setTable_name((String)value);
         }
         break;
 
@@ -25078,8 +25441,11 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case TBL:
-        return getTbl();
+      case DB_NAME:
+        return getDb_name();
+
+      case TABLE_NAME:
+        return getTable_name();
 
       }
       throw new IllegalStateException();
@@ -25092,8 +25458,10 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case TBL:
-        return isSetTbl();
+      case DB_NAME:
+        return isSetDb_name();
+      case TABLE_NAME:
+        return isSetTable_name();
       }
       throw new IllegalStateException();
     }
@@ -25102,21 +25470,30 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof create_table_args)
-        return this.equals((create_table_args)that);
+      if (that instanceof get_schema_args)
+        return this.equals((get_schema_args)that);
       return false;
     }
 
-    public boolean equals(create_table_args that) {
+    public boolean equals(get_schema_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_tbl = true && this.isSetTbl();
-      boolean that_present_tbl = true && that.isSetTbl();
-      if (this_present_tbl || that_present_tbl) {
-        if (!(this_present_tbl && that_present_tbl))
+      boolean this_present_db_name = true && this.isSetDb_name();
+      boolean that_present_db_name = true && that.isSetDb_name();
+      if (this_present_db_name || that_present_db_name) {
+        if (!(this_present_db_name && that_present_db_name))
           return false;
-        if (!this.tbl.equals(that.tbl))
+        if (!this.db_name.equals(that.db_name))
+          return false;
+      }
+
+      boolean this_present_table_name = true && this.isSetTable_name();
+      boolean that_present_table_name = true && that.isSetTable_name();
+      if (this_present_table_name || that_present_table_name) {
+        if (!(this_present_table_name && that_present_table_name))
+          return false;
+        if (!this.table_name.equals(that.table_name))
           return false;
       }
 
@@ -25127,28 +25504,43 @@ public boolean equals(create_table_args that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_tbl = true && (isSetTbl());
-      builder.append(present_tbl);
-      if (present_tbl)
-        builder.append(tbl);
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_table_name = true && (isSetTable_name());
+      builder.append(present_table_name);
+      if (present_table_name)
+        builder.append(table_name);
 
       return builder.toHashCode();
     }
 
-    public int compareTo(create_table_args other) {
+    public int compareTo(get_schema_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      create_table_args typedOther = (create_table_args)other;
+      get_schema_args typedOther = (get_schema_args)other;
 
-      lastComparison = Boolean.valueOf(isSetTbl()).compareTo(typedOther.isSetTbl());
+      lastComparison = Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetTbl()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl, typedOther.tbl);
+      if (isSetDb_name()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, typedOther.db_name);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetTable_name()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -25170,14 +25562,22 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("create_table_args(");
+      StringBuilder sb = new StringBuilder("get_schema_args(");
       boolean first = true;
 
-      sb.append("tbl:");
-      if (this.tbl == null) {
+      sb.append("db_name:");
+      if (this.db_name == null) {
         sb.append("null");
       } else {
-        sb.append(this.tbl);
+        sb.append(this.db_name);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("table_name:");
+      if (this.table_name == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.table_name);
       }
       first = false;
       sb.append(")");
@@ -25187,9 +25587,6 @@ public String toString() {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
-      if (tbl != null) {
-        tbl.validate();
-      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -25208,15 +25605,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class create_table_argsStandardSchemeFactory implements SchemeFactory {
-      public create_table_argsStandardScheme getScheme() {
-        return new create_table_argsStandardScheme();
+    private static class get_schema_argsStandardSchemeFactory implements SchemeFactory {
+      public get_schema_argsStandardScheme getScheme() {
+        return new get_schema_argsStandardScheme();
       }
     }
 
-    private static class create_table_argsStandardScheme extends StandardScheme<create_table_args> {
+    private static class get_schema_argsStandardScheme extends StandardScheme<get_schema_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, create_table_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -25226,11 +25623,18 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, create_table_args s
             break;
           }
           switch (schemeField.id) {
-            case 1: // TBL
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.tbl = new Table();
-                struct.tbl.read(iprot);
-                struct.setTblIsSet(true);
+            case 1: // DB_NAME
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.db_name = iprot.readString();
+                struct.setDb_nameIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // TABLE_NAME
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.table_name = iprot.readString();
+                struct.setTable_nameIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -25244,13 +25648,18 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, create_table_args s
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, create_table_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.tbl != null) {
-          oprot.writeFieldBegin(TBL_FIELD_DESC);
-          struct.tbl.write(oprot);
+        if (struct.db_name != null) {
+          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
+          oprot.writeString(struct.db_name);
+          oprot.writeFieldEnd();
+        }
+        if (struct.table_name != null) {
+          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
+          oprot.writeString(struct.table_name);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -25259,66 +25668,75 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, create_table_args
 
     }
 
-    private static class create_table_argsTupleSchemeFactory implements SchemeFactory {
-      public create_table_argsTupleScheme getScheme() {
-        return new create_table_argsTupleScheme();
+    private static class get_schema_argsTupleSchemeFactory implements SchemeFactory {
+      public get_schema_argsTupleScheme getScheme() {
+        return new get_schema_argsTupleScheme();
       }
     }
 
-    private static class create_table_argsTupleScheme extends TupleScheme<create_table_args> {
+    private static class get_schema_argsTupleScheme extends TupleScheme<get_schema_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, create_table_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetTbl()) {
+        if (struct.isSetDb_name()) {
           optionals.set(0);
         }
-        oprot.writeBitSet(optionals, 1);
-        if (struct.isSetTbl()) {
-          struct.tbl.write(oprot);
+        if (struct.isSetTable_name()) {
+          optionals.set(1);
+        }
+        oprot.writeBitSet(optionals, 2);
+        if (struct.isSetDb_name()) {
+          oprot.writeString(struct.db_name);
+        }
+        if (struct.isSetTable_name()) {
+          oprot.writeString(struct.table_name);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, create_table_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(1);
+        BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
-          struct.tbl = new Table();
-          struct.tbl.read(iprot);
-          struct.setTblIsSet(true);
+          struct.db_name = iprot.readString();
+          struct.setDb_nameIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.table_name = iprot.readString();
+          struct.setTable_nameIsSet(true);
         }
       }
     }
 
   }
 
-  public static class create_table_result implements org.apache.thrift.TBase<create_table_result, create_table_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_table_result");
+  public static class get_schema_result implements org.apache.thrift.TBase<get_schema_result, get_schema_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_result");
 
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
     private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
     private static final org.apache.thrift.protocol.TField O2_FIELD_DESC = new org.apache.thrift.protocol.TField("o2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
     private static final org.apache.thrift.protocol.TField O3_FIELD_DESC = new org.apache.thrift.protocol.TField("o3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
-    private static final org.apache.thrift.protocol.TField O4_FIELD_DESC = new org.apache.thrift.protocol.TField("o4", org.apache.thrift.protocol.TType.STRUCT, (short)4);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new create_table_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new create_table_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_schema_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_schema_resultTupleSchemeFactory());
     }
 
-    private AlreadyExistsException o1; // required
-    private InvalidObjectException o2; // required
-    private MetaException o3; // required
-    private NoSuchObjectException o4; // required
+    private List<FieldSchema> success; // required
+    private MetaException o1; // required
+    private UnknownTableException o2; // required
+    private UnknownDBException o3; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success"),
       O1((short)1, "o1"),
       O2((short)2, "o2"),
-      O3((short)3, "o3"),
-      O4((short)4, "o4");
+      O3((short)3, "o3");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -25333,14 +25751,2408 @@ public void read(org.apache.thrift.protocol.TProtocol prot, create_table_args st
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
           case 1: // O1
             return O1;
           case 2: // O2
             return O2;
           case 3: // O3
             return O3;
-          case 4: // O4
-            return O4;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
+              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldSchema.class))));
+      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.O2, new org.apache.thrift.meta_data.FieldMetaData("o2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.O3, new org.apache.thrift.meta_data.FieldMetaData("o3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_result.class, metaDataMap);
+    }
+
+    public get_schema_result() {
+    }
+
+    public get_schema_result(
+      List<FieldSchema> success,
+      MetaException o1,
+      UnknownTableException o2,
+      UnknownDBException o3)
+    {
+      this();
+      this.success = success;
+      this.o1 = o1;
+      this.o2 = o2;
+      this.o3 = o3;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_schema_result(get_schema_result other) {
+      if (other.isSetSuccess()) {
+        List<FieldSchema> __this__success = new ArrayList<FieldSchema>();
+        for (FieldSchema other_element : other.success) {
+          __this__success.add(new FieldSchema(other_element));
+        }
+        this.success = __this__success;
+      }
+      if (other.isSetO1()) {
+        this.o1 = new MetaException(other.o1);
+      }
+      if (other.isSetO2()) {
+        this.o2 = new UnknownTableException(other.o2);
+      }
+      if (other.isSetO3()) {
+        this.o3 = new UnknownDBException(other.o3);
+      }
+    }
+
+    public get_schema_result deepCopy() {
+      return new get_schema_result(this);
+    }
+
+    @Override
+    public void clear() {
+      this.success = null;
+      this.o1 = null;
+      this.o2 = null;
+      this.o3 = null;
+    }
+
+    public int getSuccessSize() {
+      return (this.success == null) ? 0 : this.success.size();
+    }
+
+    public java.util.Iterator<FieldSchema> getSuccessIterator() {
+      return (this.success == null) ? null : this.success.iterator();
+    }
+
+    public void addToSuccess(FieldSchema elem) {
+      if (this.success == null) {
+        this.success = new ArrayList<FieldSchema>();
+      }
+      this.success.add(elem);
+    }
+
+    public List<FieldSchema> getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(List<FieldSchema> success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
+    public MetaException getO1() {
+      return this.o1;
+    }
+
+    public void setO1(MetaException o1) {
+      this.o1 = o1;
+    }
+
+    public void unsetO1() {
+      this.o1 = null;
+    }
+
+    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO1() {
+      return this.o1 != null;
+    }
+
+    public void setO1IsSet(boolean value) {
+      if (!value) {
+        this.o1 = null;
+      }
+    }
+
+    public UnknownTableException getO2() {
+      return this.o2;
+    }
+
+    public void setO2(UnknownTableException o2) {
+      this.o2 = o2;
+    }
+
+    public void unsetO2() {
+      this.o2 = null;
+    }
+
+    /** Returns true if field o2 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO2() {
+      return this.o2 != null;
+    }
+
+    public void setO2IsSet(boolean value) {
+      if (!value) {
+        this.o2 = null;
+      }
+    }
+
+    public UnknownDBException getO3() {
+      return this.o3;
+    }
+
+    public void setO3(UnknownDBException o3) {
+      this.o3 = o3;
+    }
+
+    public void unsetO3() {
+      this.o3 = null;
+    }
+
+    /** Returns true if field o3 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO3() {
+      return this.o3 != null;
+    }
+
+    public void setO3IsSet(boolean value) {
+      if (!value) {
+        this.o3 = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((List<FieldSchema>)value);
+        }
+        break;
+
+      case O1:
+        if (value == null) {
+          unsetO1();
+        } else {
+          setO1((MetaException)value);
+        }
+        break;
+
+      case O2:
+        if (value == null) {
+          unsetO2();
+        } else {
+          setO2((UnknownTableException)value);
+        }
+        break;
+
+      case O3:
+        if (value == null) {
+          unsetO3();
+        } else {
+          setO3((UnknownDBException)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
+      case O1:
+        return getO1();
+
+      case O2:
+        return getO2();
+
+      case O3:
+        return getO3();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      case O1:
+        return isSetO1();
+      case O2:
+        return isSetO2();
+      case O3:
+        return isSetO3();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_schema_result)
+        return this.equals((get_schema_result)that);
+      return false;
+    }
+
+    public boolean equals(get_schema_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
+      boolean this_present_o1 = true && this.isSetO1();
+      boolean that_present_o1 = true && that.isSetO1();
+      if (this_present_o1 || that_present_o1) {
+        if (!(this_present_o1 && that_present_o1))
+          return false;
+        if (!this.o1.equals(that.o1))
+          return false;
+      }
+
+      boolean this_present_o2 = true && this.isSetO2();
+      boolean that_present_o2 = true && that.isSetO2();
+      if (this_present_o2 || that_present_o2) {
+        if (!(this_present_o2 && that_present_o2))
+          return false;
+        if (!this.o2.equals(that.o2))
+          return false;
+      }
+
+      boolean this_present_o3 = true && this.isSetO3();
+      boolean that_present_o3 = true && that.isSetO3();
+      if (this_present_o3 || that_present_o3) {
+        if (!(this_present_o3 && that_present_o3))
+          return false;
+        if (!this.o3.equals(that.o3))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_schema_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_schema_result typedOther = (get_schema_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO1()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO2()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o2, typedOther.o2);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO3()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o3, typedOther.o3);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_schema_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o1:");
+      if (this.o1 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o1);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o2:");
+      if (this.o2 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o2);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o3:");
+      if (this.o3 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o3);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_schema_resultStandardSchemeFactory implements SchemeFactory {
+      public get_schema_resultStandardScheme getScheme() {
+        return new get_schema_resultStandardScheme();
+      }
+    }
+
+    private static class get_schema_resultStandardScheme extends StandardScheme<get_schema_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
+                {
+                  org.apache.thrift.protocol.TList _list542 = iprot.readListBegin();
+                  struct.success = new ArrayList<FieldSchema>(_list542.size);
+                  for (int _i543 = 0; _i543 < _list542.size; ++_i543)
+                  {
+                    FieldSchema _elem544; // required
+                    _elem544 = new FieldSchema();
+                    _elem544.read(iprot);
+                    struct.success.add(_elem544);
+                  }
+                  iprot.readListEnd();
+                }
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 1: // O1
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o1 = new MetaException();
+                struct.o1.read(iprot);
+                struct.setO1IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // O2
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o2 = new UnknownTableException();
+                struct.o2.read(iprot);
+                struct.setO2IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 3: // O3
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o3 = new UnknownDBException();
+                struct.o3.read(iprot);
+                struct.setO3IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          {
+            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
+            for (FieldSchema _iter545 : struct.success)
+            {
+              _iter545.write(oprot);
+            }
+            oprot.writeListEnd();
+          }
+          oprot.writeFieldEnd();
+        }
+        if (struct.o1 != null) {
+          oprot.writeFieldBegin(O1_FIELD_DESC);
+          struct.o1.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.o2 != null) {
+          oprot.writeFieldBegin(O2_FIELD_DESC);
+          struct.o2.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.o3 != null) {
+          oprot.writeFieldBegin(O3_FIELD_DESC);
+          struct.o3.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_schema_resultTupleSchemeFactory implements SchemeFactory {
+      public get_schema_resultTupleScheme getScheme() {
+        return new get_schema_resultTupleScheme();
+      }
+    }
+
+    private static class get_schema_resultTupleScheme extends TupleScheme<get_schema_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        if (struct.isSetO1()) {
+          optionals.set(1);
+        }
+        if (struct.isSetO2()) {
+          optionals.set(2);
+        }
+        if (struct.isSetO3()) {
+          optionals.set(3);
+        }
+        oprot.writeBitSet(optionals, 4);
+        if (struct.isSetSuccess()) {
+          {
+            oprot.writeI32(struct.success.size());
+            for (FieldSchema _iter546 : struct.success)
+            {
+              _iter546.write(oprot);
+            }
+          }
+        }
+        if (struct.isSetO1()) {
+          struct.o1.write(oprot);
+        }
+        if (struct.isSetO2()) {
+          struct.o2.write(oprot);
+        }
+        if (struct.isSetO3()) {
+          struct.o3.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(4);
+        if (incoming.get(0)) {
+          {
+            org.apache.thrift.protocol.TList _list547 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<FieldSchema>(_list547.size);
+            for (int _i548 = 0; _i548 < _list547.size; ++_i548)
+            {
+              FieldSchema _elem549; // required
+              _elem549 = new FieldSchema();
+              _elem549.read(iprot);
+              struct.success.add(_elem549);
+            }
+          }
+          struct.setSuccessIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.o1 = new MetaException();
+          struct.o1.read(iprot);
+          struct.setO1IsSet(true);
+        }
+        if (incoming.get(2)) {
+          struct.o2 = new UnknownTableException();
+          struct.o2.read(iprot);
+          struct.setO2IsSet(true);
+        }
+        if (incoming.get(3)) {
+          struct.o3 = new UnknownDBException();
+          struct.o3.read(iprot);
+          struct.setO3IsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class get_schema_with_environment_context_args implements org.apache.thrift.TBase<get_schema_with_environment_context_args, get_schema_with_environment_context_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_with_environment_context_args");
+
+    private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
+    private static final org.apache.thrift.protocol.TField ENVIRONMENT_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("environment_context", org.apache.thrift.protocol.TType.STRUCT, (short)3);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new get_schema_with_environment_context_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_schema_with_environment_context_argsTupleSchemeFactory());
+    }
+
+    private String db_name; // required
+    private String table_name; // required
+    private EnvironmentContext environment_context; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      DB_NAME((short)1, "db_name"),
+      TABLE_NAME((short)2, "table_name"),
+      ENVIRONMENT_CONTEXT((short)3, "environment_context");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // DB_NAME
+            return DB_NAME;
+          case 2: // TABLE_NAME
+            return TABLE_NAME;
+          case 3: // ENVIRONMENT_CONTEXT
+            return ENVIRONMENT_CONTEXT;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.ENVIRONMENT_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("environment_context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EnvironmentContext.class)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_with_environment_context_args.class, metaDataMap);
+    }
+
+    public get_schema_with_environment_context_args() {
+    }
+
+    public get_schema_with_environment_context_args(
+      String db_name,
+      String table_name,
+      EnvironmentContext environment_context)
+    {
+      this();
+      this.db_name = db_name;
+      this.table_name = table_name;
+      this.environment_context = environment_context;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_schema_with_environment_context_args(get_schema_with_environment_context_args other) {
+      if (other.isSetDb_name()) {
+        this.db_name = other.db_name;
+      }
+      if (other.isSetTable_name()) {
+        this.table_name = other.table_name;
+      }
+      if (other.isSetEnvironment_context()) {
+        this.environment_context = new EnvironmentContext(other.environment_context);
+      }
+    }
+
+    public get_schema_with_environment_context_args deepCopy() {
+      return new get_schema_with_environment_context_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.db_name = null;
+      this.table_name = null;
+      this.environment_context = null;
+    }
+
+    public String getDb_name() {
+      return this.db_name;
+    }
+
+    public void setDb_name(String db_name) {
+      this.db_name = db_name;
+    }
+
+    public void unsetDb_name() {
+      this.db_name = null;
+    }
+
+    /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
+    public boolean isSetDb_name() {
+      return this.db_name != null;
+    }
+
+    public void setDb_nameIsSet(boolean value) {
+      if (!value) {
+        this.db_name = null;
+      }
+    }
+
+    public String getTable_name() {
+      return this.table_name;
+    }
+
+    public void setTable_name(String table_name) {
+      this.table_name = table_name;
+    }
+
+    public void unsetTable_name() {
+      this.table_name = null;
+    }
+
+    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
+    public boolean isSetTable_name() {
+      return this.table_name != null;
+    }
+
+    public void setTable_nameIsSet(boolean value) {
+      if (!value) {
+        this.table_name = null;
+      }
+    }
+
+    public EnvironmentContext getEnvironment_context() {
+      return this.environment_context;
+    }
+
+    public void setEnvironment_context(EnvironmentContext environment_context) {
+      this.environment_context = environment_context;
+    }
+
+    public void unsetEnvironment_context() {
+      this.environment_context = null;
+    }
+
+    /** Returns true if field environment_context is set (has been assigned a value) and false otherwise */
+    public boolean isSetEnvironment_context() {
+      return this.environment_context != null;
+    }
+
+    public void setEnvironment_contextIsSet(boolean value) {
+      if (!value) {
+        this.environment_context = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case DB_NAME:
+        if (value == null) {
+          unsetDb_name();
+        } else {
+          setDb_name((String)value);
+        }
+        break;
+
+      case TABLE_NAME:
+        if (value == null) {
+          unsetTable_name();
+        } else {
+          setTable_name((String)value);
+        }
+        break;
+
+      case ENVIRONMENT_CONTEXT:
+        if (value == null) {
+          unsetEnvironment_context();
+        } else {
+          setEnvironment_context((EnvironmentContext)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case DB_NAME:
+        return getDb_name();
+
+      case TABLE_NAME:
+        return getTable_name();
+
+      case ENVIRONMENT_CONTEXT:
+        return getEnvironment_context();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case DB_NAME:
+        return isSetDb_name();
+      case TABLE_NAME:
+        return isSetTable_name();
+      case ENVIRONMENT_CONTEXT:
+        return isSetEnvironment_context();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_schema_with_environment_context_args)
+        return this.equals((get_schema_with_environment_context_args)that);
+      return false;
+    }
+
+    public boolean equals(get_schema_with_environment_context_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_db_name = true && this.isSetDb_name();
+      boolean that_present_db_name = true && that.isSetDb_name();
+      if (this_present_db_name || that_present_db_name) {
+        if (!(this_present_db_name && that_present_db_name))
+          return false;
+        if (!this.db_name.equals(that.db_name))
+          return false;
+      }
+
+      boolean this_present_table_name = true && this.isSetTable_name();
+      boolean that_present_table_name = true && that.isSetTable_name();
+      if (this_present_table_name || that_present_table_name) {
+        if (!(this_present_table_name && that_present_table_name))
+          return false;
+        if (!this.table_name.equals(that.table_name))
+          return false;
+      }
+
+      boolean this_present_environment_context = true && this.isSetEnvironment_context();
+      boolean that_present_environment_context = true && that.isSetEnvironment_context();
+      if (this_present_environment_context || that_present_environment_context) {
+        if (!(this_present_environment_context && that_present_environment_context))
+          return false;
+        if (!this.environment_context.equals(that.environment_context))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_db_name = true && (isSetDb_name());
+      builder.append(present_db_name);
+      if (present_db_name)
+        builder.append(db_name);
+
+      boolean present_table_name = true && (isSetTable_name());
+      builder.append(present_table_name);
+      if (present_table_name)
+        builder.append(table_name);
+
+      boolean present_environment_context = true && (isSetEnvironment_context());
+      builder.append(present_environment_context);
+      if (present_environment_context)
+        builder.append(environment_context);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_schema_with_environment_context_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_schema_with_environment_context_args typedOther = (get_schema_with_environment_context_args)other;
+
+      lastComparison = Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetDb_name()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, typedOther.db_name);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetTable_name()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetEnvironment_context()).compareTo(typedOther.isSetEnvironment_context());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetEnvironment_context()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.environment_context, typedOther.environment_context);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_schema_with_environment_context_args(");
+      boolean first = true;
+
+      sb.append("db_name:");
+      if (this.db_name == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.db_name);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("table_name:");
+      if (this.table_name == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.table_name);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("environment_context:");
+      if (this.environment_context == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.environment_context);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+      if (environment_context != null) {
+        environment_context.validate();
+      }
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_schema_with_environment_context_argsStandardSchemeFactory implements SchemeFactory {
+      public get_schema_with_environment_context_argsStandardScheme getScheme() {
+        return new get_schema_with_environment_context_argsStandardScheme();
+      }
+    }
+
+    private static class get_schema_with_environment_context_argsStandardScheme extends StandardScheme<get_schema_with_environment_context_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_with_environment_context_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // DB_NAME
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.db_name = iprot.readString();
+                struct.setDb_nameIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // TABLE_NAME
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.table_name = iprot.readString();
+                struct.setTable_nameIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 3: // ENVIRONMENT_CONTEXT
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.environment_context = new EnvironmentContext();
+                struct.environment_context.read(iprot);
+                struct.setEnvironment_contextIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_with_environment_context_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.db_name != null) {
+          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
+          oprot.writeString(struct.db_name);
+          oprot.writeFieldEnd();
+        }
+        if (struct.table_name != null) {
+          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
+          oprot.writeString(struct.table_name);
+          oprot.writeFieldEnd();
+        }
+        if (struct.environment_context != null) {
+          oprot.writeFieldBegin(ENVIRONMENT_CONTEXT_FIELD_DESC);
+          struct.environment_context.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_schema_with_environment_context_argsTupleSchemeFactory implements SchemeFactory {
+      public get_schema_with_environment_context_argsTupleScheme getScheme() {
+        return new get_schema_with_environment_context_argsTupleScheme();
+      }
+    }
+
+    private static class get_schema_with_environment_context_argsTupleScheme extends TupleScheme<get_schema_with_environment_context_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_with_environment_context_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetDb_name()) {
+          optionals.set(0);
+        }
+        if (struct.isSetTable_name()) {
+          optionals.set(1);
+        }
+        if (struct.isSetEnvironment_context()) {
+          optionals.set(2);
+        }
+        oprot.writeBitSet(optionals, 3);
+        if (struct.isSetDb_name()) {
+          oprot.writeString(struct.db_name);
+        }
+        if (struct.isSetTable_name()) {
+          oprot.writeString(struct.table_name);
+        }
+        if (struct.isSetEnvironment_context()) {
+          struct.environment_context.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_with_environment_context_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(3);
+        if (incoming.get(0)) {
+          struct.db_name = iprot.readString();
+          struct.setDb_nameIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.table_name = iprot.readString();
+          struct.setTable_nameIsSet(true);
+        }
+        if (incoming.get(2)) {
+          struct.environment_context = new EnvironmentContext();
+          struct.environment_context.read(iprot);
+          struct.setEnvironment_contextIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class get_schema_with_environment_context_result implements org.apache.thrift.TBase<get_schema_with_environment_context_result, get_schema_with_environment_context_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_with_environment_context_result");
+
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
+    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+    private static final org.apache.thrift.protocol.TField O2_FIELD_DESC = new org.apache.thrift.protocol.TField("o2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+    private static final org.apache.thrift.protocol.TField O3_FIELD_DESC = new org.apache.thrift.protocol.TField("o3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new get_schema_with_environment_context_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_schema_with_environment_context_resultTupleSchemeFactory());
+    }
+
+    private List<FieldSchema> success; // required
+    private MetaException o1; // required
+    private UnknownTableException o2; // required
+    private UnknownDBException o3; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success"),
+      O1((short)1, "o1"),
+      O2((short)2, "o2"),
+      O3((short)3, "o3");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          case 1: // O1
+            return O1;
+          case 2: // O2
+            return O2;
+          case 3: // O3
+            return O3;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
+              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldSchema.class))));
+      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.O2, new org.apache.thrift.meta_data.FieldMetaData("o2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.O3, new org.apache.thrift.meta_data.FieldMetaData("o3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_with_environment_context_result.class, metaDataMap);
+    }
+
+    public get_schema_with_environment_context_result() {
+    }
+
+    public get_schema_with_environment_context_result(
+      List<FieldSchema> success,
+      MetaException o1,
+      UnknownTableException o2,
+      UnknownDBException o3)
+    {
+      this();
+      this.success = success;
+      this.o1 = o1;
+      this.o2 = o2;
+      this.o3 = o3;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_schema_with_environment_context_result(get_schema_with_environment_context_result other) {
+      if (other.isSetSuccess()) {
+        List<FieldSchema> __this__success = new ArrayList<FieldSchema>();
+        for (FieldSchema other_element : other.success) {
+          __this__success.add(new FieldSchema(other_element));
+        }
+        this.success = __this__success;
+      }
+      if (other.isSetO1()) {
+        this.o1 = new MetaException(other.o1);
+      }
+      if (other.isSetO2()) {
+        this.o2 = new UnknownTableException(other.o2);
+      }
+      if (other.isSetO3()) {
+        this.o3 = new UnknownDBException(other.o3);
+      }
+    }
+
+    public get_schema_with_environment_context_result deepCopy() {
+      return new get_schema_with_environment_context_result(this);
+    }
+
+    @Override
+    public void clear() {
+      this.success = null;
+      this.o1 = null;
+      this.o2 = null;
+      this.o3 = null;
+    }
+
+    public int getSuccessSize() {
+      return (this.success == null) ? 0 : this.success.size();
+    }
+
+    public java.util.Iterator<FieldSchema> getSuccessIterator() {
+      return (this.success == null) ? null : this.success.iterator();
+    }
+
+    public void addToSuccess(FieldSchema elem) {
+      if (this.success == null) {
+        this.success = new ArrayList<FieldSchema>();
+      }
+      this.success.add(elem);
+    }
+
+    public List<FieldSchema> getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(List<FieldSchema> success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
+    public MetaException getO1() {
+      return this.o1;
+    }
+
+    public void setO1(MetaException o1) {
+      this.o1 = o1;
+    }
+
+    public void unsetO1() {
+      this.o1 = null;
+    }
+
+    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO1() {
+      return this.o1 != null;
+    }
+
+    public void setO1IsSet(boolean value) {
+      if (!value) {
+        this.o1 = null;
+      }
+    }
+
+    public UnknownTableException getO2() {
+      return this.o2;
+    }
+
+    public void setO2(UnknownTableException o2) {
+      this.o2 = o2;
+    }
+
+    public void unsetO2() {
+      this.o2 = null;
+    }
+
+    /** Returns true if field o2 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO2() {
+      return this.o2 != null;
+    }
+
+    public void setO2IsSet(boolean value) {
+      if (!value) {
+        this.o2 = null;
+      }
+    }
+
+    public UnknownDBException getO3() {
+      return this.o3;
+    }
+
+    public void setO3(UnknownDBException o3) {
+      this.o3 = o3;
+    }
+
+    public void unsetO3() {
+      this.o3 = null;
+    }
+
+    /** Returns true if field o3 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO3() {
+      return this.o3 != null;
+    }
+
+    public void setO3IsSet(boolean value) {
+      if (!value) {
+        this.o3 = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((List<FieldSchema>)value);
+        }
+        break;
+
+      case O1:
+        if (value == null) {
+          unsetO1();
+        } else {
+          setO1((MetaException)value);
+        }
+        break;
+
+      case O2:
+        if (value == null) {
+          unsetO2();
+        } else {
+          setO2((UnknownTableException)value);
+        }
+        break;
+
+      case O3:
+        if (value == null) {
+          unsetO3();
+        } else {
+          setO3((UnknownDBException)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
+      case O1:
+        return getO1();
+
+      case O2:
+        return getO2();
+
+      case O3:
+        return getO3();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      case O1:
+        return isSetO1();
+      case O2:
+        return isSetO2();
+      case O3:
+        return isSetO3();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_schema_with_environment_context_result)
+        return this.equals((get_schema_with_environment_context_result)that);
+      return false;
+    }
+
+    public boolean equals(get_schema_with_environment_context_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
+      boolean this_present_o1 = true && this.isSetO1();
+      boolean that_present_o1 = true && that.isSetO1();
+      if (this_present_o1 || that_present_o1) {
+        if (!(this_present_o1 && that_present_o1))
+          return false;
+        if (!this.o1.equals(that.o1))
+          return false;
+      }
+
+      boolean this_present_o2 = true && this.isSetO2();
+      boolean that_present_o2 = true && that.isSetO2();
+      if (this_present_o2 || that_present_o2) {
+        if (!(this_present_o2 && that_present_o2))
+          return false;
+        if (!this.o2.equals(that.o2))
+          return false;
+      }
+
+      boolean this_present_o3 = true && this.isSetO3();
+      boolean that_present_o3 = true && that.isSetO3();
+      if (this_present_o3 || that_present_o3) {
+        if (!(this_present_o3 && that_present_o3))
+          return false;
+        if (!this.o3.equals(that.o3))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      boolean present_o3 = true && (isSetO3());
+      builder.append(present_o3);
+      if (present_o3)
+        builder.append(o3);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_schema_with_environment_context_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_schema_with_environment_context_result typedOther = (get_schema_with_environment_context_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO1()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO2()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o2, typedOther.o2);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO3()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o3, typedOther.o3);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_schema_with_environment_context_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o1:");
+      if (this.o1 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o1);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o2:");
+      if (this.o2 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o2);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o3:");
+      if (this.o3 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o3);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_schema_with_environment_context_resultStandardSchemeFactory implements SchemeFactory {
+      public get_schema_with_environment_context_resultStandardScheme getScheme() {
+        return new get_schema_with_environment_context_resultStandardScheme();
+      }
+    }
+
+    private static class get_schema_with_environment_context_resultStandardScheme extends StandardScheme<get_schema_with_environment_context_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_with_environment_context_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
+                {
+                  org.apache.thrift.protocol.TList _list550 = iprot.readListBegin();
+                  struct.success = new ArrayList<FieldSchema>(_list550.size);
+                  for (int _i551 = 0; _i551 < _list550.size; ++_i551)
+                  {
+                    FieldSchema _elem552; // required
+                    _elem552 = new FieldSchema();
+                    _elem552.read(iprot);
+                    struct.success.add(_elem552);
+                  }
+                  iprot.readListEnd();
+                }
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 1: // O1
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o1 = new MetaException();
+                struct.o1.read(iprot);
+                struct.setO1IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // O2
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o2 = new UnknownTableException();
+                struct.o2.read(iprot);
+                struct.setO2IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 3: // O3
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o3 = new UnknownDBException();
+                struct.o3.read(iprot);
+                struct.setO3IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_with_environment_context_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          {
+            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
+            for (FieldSchema _iter553 : struct.success)
+            {
+              _iter553.write(oprot);
+            }
+            oprot.writeListEnd();
+          }
+          oprot.writeFieldEnd();
+        }
+        if (struct.o1 != null) {
+          oprot.writeFieldBegin(O1_FIELD_DESC);
+          struct.o1.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.o2 != null) {
+          oprot.writeFieldBegin(O2_FIELD_DESC);
+          struct.o2.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.o3 != null) {
+          oprot.writeFieldBegin(O3_FIELD_DESC);
+          struct.o3.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_schema_with_environment_context_resultTupleSchemeFactory implements SchemeFactory {
+      public get_schema_with_environment_context_resultTupleScheme getScheme() {
+        return new get_schema_with_environment_context_resultTupleScheme();
+      }
+    }
+
+    private static class get_schema_with_environment_context_resultTupleScheme extends TupleScheme<get_schema_with_environment_context_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_with_environment_context_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        if (struct.isSetO1()) {
+          optionals.set(1);
+        }
+        if (struct.isSetO2()) {
+          optionals.set(2);
+        }
+        if (struct.isSetO3()) {
+          optionals.set(3);
+        }
+        oprot.writeBitSet(optionals, 4);
+        if (struct.isSetSuccess()) {
+          {
+            oprot.writeI32(struct.success.size());
+            for (FieldSchema _iter554 : struct.success)
+            {
+              _iter554.write(oprot);
+            }
+          }
+        }
+        if (struct.isSetO1()) {
+          struct.o1.write(oprot);
+        }
+        if (struct.isSetO2()) {
+          struct.o2.write(oprot);
+        }
+        if (struct.isSetO3()) {
+          struct.o3.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_with_environment_context_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(4);
+        if (incoming.get(0)) {
+          {
+            org.apache.thrift.protocol.TList _list555 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<FieldSchema>(_list555.size);
+            for (int _i556 = 0; _i556 < _list555.size; ++_i556)
+            {
+              FieldSchema _elem557; // required
+              _elem557 = new FieldSchema();
+              _elem557.read(iprot);
+              struct.success.add(_elem557);
+            }
+          }
+          struct.setSuccessIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.o1 = new MetaException();
+          struct.o1.read(iprot);
+          struct.setO1IsSet(true);
+        }
+        if (incoming.get(2)) {
+          struct.o2 = new UnknownTableException();
+          struct.o2.read(iprot);
+          struct.setO2IsSet(true);
+        }
+        if (incoming.get(3)) {
+          struct.o3 = new UnknownDBException();
+          struct.o3.read(iprot);
+          struct.setO3IsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class create_table_args implements org.apache.thrift.TBase<create_table_args, create_table_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_table_args");
+
+    private static final org.apache.thrift.protocol.TField TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new create_table_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new create_table_argsTupleSchemeFactory());
+    }
+
+    private Table tbl; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      TBL((short)1, "tbl");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // TBL
+            return TBL;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.TBL, new org.apache.thrift.meta_data.FieldMetaData("tbl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Table.class)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_table_args.class, metaDataMap);
+    }
+
+    public create_table_args() {
+    }
+
+    public create_table_args(
+      Table tbl)
+    {
+      this();
+      this.tbl = tbl;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public create_table_args(create_table_args other) {
+      if (other.isSetTbl()) {
+        this.tbl = new Table(other.tbl);
+      }
+    }
+
+    public create_table_args deepCopy() {
+      return new create_table_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.tbl = null;
+    }
+
+    public Table getTbl() {
+      return this.tbl;
+    }
+
+    public void setTbl(Table tbl) {
+      this.tbl = tbl;
+    }
+
+    public void unsetTbl() {
+      this.tbl = null;
+    }
+
+    /** Returns true if field tbl is set (has been assigned a value) and false otherwise */
+    public boolean isSetTbl() {
+      return this.tbl != null;
+    }
+
+    public void setTblIsSet(boolean value) {
+      if (!value) {
+        this.tbl = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case TBL:
+        if (value == null) {
+          unsetTbl();
+        } else {
+          setTbl((Table)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case TBL:
+        return getTbl();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case TBL:
+        return isSetTbl();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof create_table_args)
+        return this.equals((create_table_args)that);
+      return false;
+    }
+
+    public boolean equals(create_table_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_tbl = true && this.isSetTbl();
+      boolean that_present_tbl = true && that.isSetTbl();
+      if (this_present_tbl || that_present_tbl) {
+        if (!(this_present_tbl && that_present_tbl))
+          return false;
+        if (!this.tbl.equals(that.tbl))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_tbl = true && (isSetTbl());
+      builder.append(present_tbl);
+      if (present_tbl)
+        builder.append(tbl);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(create_table_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      create_table_args typedOther = (create_table_args)other;
+
+      lastComparison = Boolean.valueOf(isSetTbl()).compareTo(typedOther.isSetTbl());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetTbl()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl, typedOther.tbl);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("create_table_args(");
+      boolean first = true;
+
+      sb.append("tbl:");
+      if (this.tbl == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.tbl);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+      if (tbl != null) {
+        tbl.validate();
+      }
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class create_table_argsStandardSchemeFactory implements SchemeFactory {
+      public create_table_argsStandardScheme getScheme() {
+        return new create_table_argsStandardScheme();
+      }
+    }
+
+    private static class create_table_argsStandardScheme extends StandardScheme<create_table_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, create_table_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // TBL
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.tbl = new Table();
+                struct.tbl.read(iprot);
+                struct.setTblIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, create_table_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.tbl != null) {
+          oprot.writeFieldBegin(TBL_FIELD_DESC);
+          struct.tbl.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class create_table_argsTupleSchemeFactory implements SchemeFactory {
+      public create_table_argsTupleScheme getScheme() {
+        return new create_table_argsTupleScheme();
+      }
+    }
+
+    private static class create_table_argsTupleScheme extends TupleScheme<create_table_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, create_table_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetTbl()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetTbl()) {
+          struct.tbl.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, create_table_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.tbl = new Table();
+          struct.tbl.read(iprot);
+          struct.setTblIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class create_table_result implements org.apache.thrift.TBase<create_table_result, create_table_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_table_result");
+
+    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+    private static final org.apache.thrift.protocol.TField O2_FIELD_DESC = new org.apache.thrift.protocol.TField("o2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+    private static final org.apache.thrift.protocol.TField O3_FIELD_DESC = new org.apache.thrift.protocol.TField("o3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
+    private static final org.apache.thrift.protocol.TField O4_FIELD_DESC = new org.apache.thrift.protocol.TField("o4", org.apache.thrift.protocol.TType.STRUCT, (short)4);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new create_table_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new create_table_resultTupleSchemeFactory());
+    }
+
+    private AlreadyExistsException o1; // required
+    private InvalidObjectException o2; // required
+    private MetaException o3; // required
+    private NoSuchObjectException o4; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      O1((short)1, "o1"),
+      O2((short)2, "o2"),
+      O3((short)3, "o3"),
+      O4((short)4, "o4");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // O1
+            return O1;
+          case 2: // O2
+            return O2;
+          case 3: // O3
+            return O3;
+          case 4: // O4
+            return O4;
           default:
             return null;
         }
@@ -30149,13 +32961,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_tables_result s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list542 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list542.size);
-                  for (int _i543 = 0; _i543 < _list542.size; ++_i543)
+                  org.apache.thrift.protocol.TList _list558 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list558.size);
+                  for (int _i559 = 0; _i559 < _list558.size; ++_i559)
                   {
-                    String _elem544; // required
-                    _elem544 = iprot.readString();
-                    struct.success.add(_elem544);
+                    String _elem560; // required
+                    _elem560 = iprot.readString();
+                    struct.success.add(_elem560);
                   }
                   iprot.readListEnd();
                 }
@@ -30190,9 +33002,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_tables_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter545 : struct.success)
+            for (String _iter561 : struct.success)
             {
-              oprot.writeString(_iter545);
+              oprot.writeString(_iter561);
             }
             oprot.writeListEnd();
           }
@@ -30231,9 +33043,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_tables_result s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter546 : struct.success)
+            for (String _iter562 : struct.success)
             {
-              oprot.writeString(_iter546);
+              oprot.writeString(_iter562);
             }
           }
         }
@@ -30248,13 +33060,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_tables_result st
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list547 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list547.size);
-            for (int _i548 = 0; _i548 < _list547.size; ++_i548)
+            org.apache.thrift.protocol.TList _list563 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list563.size);
+            for (int _i564 = 0; _i564 < _list563.size; ++_i564)
             {
-              String _elem549; // required
-              _elem549 = iprot.readString();
-              struct.success.add(_elem549);
+              String _elem565; // required
+              _elem565 = iprot.readString();
+              struct.success.add(_elem565);
             }
           }
           struct.setSuccessIsSet(true);
@@ -31023,13 +33835,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_tables_resu
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list550 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list550.size);
-                  for (int _i551 = 0; _i551 < _list550.size; ++_i551)
+                  org.apache.thrift.protocol.TList _list566 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list566.size);
+                  for (int _i567 = 0; _i567 < _list566.size; ++_i567)
                   {
-                    String _elem552; // required
-                    _elem552 = iprot.readString();
-                    struct.success.add(_elem552);
+                    String _elem568; // required
+                    _elem568 = iprot.readString();
+                    struct.success.add(_elem568);
                   }
                   iprot.readListEnd();
                 }
@@ -31064,9 +33876,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_tables_res
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter553 : struct.success)
+            for (String _iter569 : struct.success)
             {
-              oprot.writeString(_iter553);
+              oprot.writeString(_iter569);
             }
             oprot.writeListEnd();
           }
@@ -31105,9 +33917,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_all_tables_resu
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter554 : struct.success)
+            for (String _iter570 : struct.success)
             {
-              oprot.writeString(_iter554);
+              oprot.writeString(_iter570);
             }
           }
         }
@@ -31122,13 +33934,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_all_tables_resul
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list555 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list555.size);
-            for (int _i556 = 0; _i556 < _list555.size; ++_i556)
+            org.apache.thrift.protocol.TList _list571 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list571.size);
+            for (int _i572 = 0; _i572 < _list571.size; ++_i572)
             {
-              String _elem557; // required
-              _elem557 = iprot.readString();
-              struct.success.add(_elem557);
+              String _elem573; // required
+              _elem573 = iprot.readString();
+              struct.success.add(_elem573);
             }
           }
           struct.setSuccessIsSet(true);
@@ -32584,13 +35396,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_objects_b
             case 2: // TBL_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list558 = iprot.readListBegin();
-                  struct.tbl_names = new ArrayList<String>(_list558.size);
-                  for (int _i559 = 0; _i559 < _list558.size; ++_i559)
+                  org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
+                  struct.tbl_names = new ArrayList<String>(_list574.size);
+                  for (int _i575 = 0; _i575 < _list574.size; ++_i575)
                   {
-                    String _elem560; // required
-                    _elem560 = iprot.readString();
-                    struct.tbl_names.add(_elem560);
+                    String _elem576; // required
+                    _elem576 = iprot.readString();
+                    struct.tbl_names.add(_elem576);
                   }
                   iprot.readListEnd();
                 }
@@ -32621,9 +35433,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_objects_
           oprot.writeFieldBegin(TBL_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tbl_names.size()));
-            for (String _iter561 : struct.tbl_names)
+            for (String _iter577 : struct.tbl_names)
             {
-              oprot.writeString(_iter561);
+              oprot.writeString(_iter577);
             }
             oprot.writeListEnd();
           }
@@ -32660,9 +35472,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_objects_b
         if (struct.isSetTbl_names()) {
           {
             oprot.writeI32(struct.tbl_names.size());
-            for (String _iter562 : struct.tbl_names)
+            for (String _iter578 : struct.tbl_names)
             {
-              oprot.writeString(_iter562);
+              oprot.writeString(_iter578);
             }
           }
         }
@@ -32678,13 +35490,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_objects_by
         }
         if (incoming.get(1)) {
           {
-            org.apache.thrift.protocol.TList _list563 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.tbl_names = new ArrayList<String>(_list563.size);
-            for (int _i564 = 0; _i564 < _list563.size; ++_i564)
+            org.apache.thrift.protocol.TList _list579 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.tbl_names = new ArrayList<String>(_list579.size);
+            for (int _i580 = 0; _i580 < _list579.size; ++_i580)
             {
-              String _elem565; // required
-              _elem565 = iprot.readString();
-              struct.tbl_names.add(_elem565);
+              String _elem581; // required
+              _elem581 = iprot.readString();
+              struct.tbl_names.add(_elem581);
             }
           }
           struct.setTbl_namesIsSet(true);
@@ -33252,14 +36064,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_objects_b
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list566 = iprot.readListBegin();
-                  struct.success = new ArrayList<Table>(_list566.size);
-                  for (int _i567 = 0; _i567 < _list566.size; ++_i567)
+                  org.apache.thrift.protocol.TList _list582 = iprot.readListBegin();
+                  struct.success = new ArrayList<Table>(_list582.size);
+                  for (int _i583 = 0; _i583 < _list582.size; ++_i583)
                   {
-                    Table _elem568; // required
-                    _elem568 = new Table();
-                    _elem568.read(iprot);
-                    struct.success.add(_elem568);
+                    Table _elem584; // required
+                    _elem584 = new Table();
+                    _elem584.read(iprot);
+                    struct.success.add(_elem584);
                   }
                   iprot.readListEnd();
                 }
@@ -33312,9 +36124,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_objects_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Table _iter569 : struct.success)
+            for (Table _iter585 : struct.success)
             {
-              _iter569.write(oprot);
+              _iter585.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -33369,9 +36181,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_objects_b
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Table _iter570 : struct.success)
+            for (Table _iter586 : struct.success)
             {
-              _iter570.write(oprot);
+              _iter586.write(oprot);
             }
           }
         }
@@ -33392,14 +36204,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_objects_by
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list571 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Table>(_list571.size);
-            for (int _i572 = 0; _i572 < _list571.size; ++_i572)
+            org.apache.thrift.protocol.TList _list587 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Table>(_list587.size);
+            for (int _i588 = 0; _i588 < _list587.size; ++_i588)
             {
-              Table _elem573; // required
-              _elem573 = new Table();
-              _elem573.read(iprot);
-              struct.success.add(_elem573);
+              Table _elem589; // required
+              _elem589 = new Table();
+              _elem589.read(iprot);
+              struct.success.add(_elem589);
             }
           }
           struct.setSuccessIsSet(true);
@@ -34548,13 +37360,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_names_by_
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list574.size);
-                  for (int _i575 = 0; _i575 < _list574.size; ++_i575)
+                  org.apache.thrift.protocol.TList _list590 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list590.size);
+                  for (int _i591 = 0; _i591 < _list590.size; ++_i591)
                   {
-                    String _elem576; // required
-                    _elem576 = iprot.readString();
-                    struct.success.add(_elem576);
+                    String _elem592; // required
+                    _elem592 = iprot.readString();
+                    struct.success.add(_elem592);
                   }
                   iprot.readListEnd();
                 }
@@ -34607,9 +37419,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_names_by
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter577 : struct.success)
+            for (String _iter593 : struct.success)
             {
-              oprot.writeString(_iter577);
+              oprot.writeString(_iter593);
             }
             oprot.writeListEnd();
           }
@@ -34664,9 +37476,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_names_by_
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter578 : struct.success)
+            for (String _iter594 : struct.success)
             {
-              oprot.writeString(_iter578);
+              oprot.writeString(_iter594);
             }
           }
         }
@@ -34687,13 +37499,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_names_by_f
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list579 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list579.size);
-            for (int _i580 = 0; _i580 < _list579.size; ++_i580)
+            org.apache.thrift.protocol.TList _list595 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list595.size);
+            for (int _i596 = 0; _i596 < _list595.size; ++_i596)
             {
-              String _elem581; // required
-              _elem581 = iprot.readString();
-              struct.success.add(_elem581);
+              String _elem597; // required
+              _elem597 = iprot.readString();
+              struct.success.add(_elem597);
             }
           }
           struct.setSuccessIsSet(true);
@@ -40552,14 +43364,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, add_partitions_args
             case 1: // NEW_PARTS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list582 = iprot.readListBegin();
-                  struct.new_parts = new ArrayList<Partition>(_list582.size);
-                  for (int _i583 = 0; _i583 < _list582.size; ++_i583)
+                  org.apache.thrift.protocol.TList _list598 = iprot.readListBegin();
+                  struct.new_parts = new ArrayList<Partition>(_list598.size);
+                  for (int _i599 = 0; _i599 < _list598.size; ++_i599)
                   {
-                    Partition _elem584; // required
-                    _elem584 = new Partition();
-                    _elem584.read(iprot);
-                    struct.new_parts.add(_elem584);
+                    Partition _elem600; // required
+                    _elem600 = new Partition();
+                    _elem600.read(iprot);
+                    struct.new_parts.add(_elem600);
                   }
                   iprot.readListEnd();
                 }
@@ -40585,9 +43397,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, add_partitions_arg
           oprot.writeFieldBegin(NEW_PARTS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.new_parts.size()));
-            for (Partition _iter585 : struct.new_parts)
+            for (Partition _iter601 : struct.new_parts)
             {
-              _iter585.write(oprot);
+              _iter601.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -40618,9 +43430,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, add_partitions_args
         if (struct.isSetNew_parts()) {
           {
             oprot.writeI32(struct.new_parts.size());
-            for (Partition _iter586 : struct.new_parts)
+            for (Partition _iter602 : struct.new_parts)
             {
-              _iter586.write(oprot);
+              _iter602.write(oprot);
             }
           }
         }
@@ -40632,14 +43444,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, add_partitions_args
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list587 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.new_parts = new ArrayList<Partition>(_list587.size);
-            for (int _i588 = 0; _i588 < _list587.size; ++_i588)
+            org.apache.thrift.protocol.TList _list603 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.new_parts = new ArrayList<Partition>(_list603.size);
+            for (int _i604 = 0; _i604 < _list603.size; ++_i604)
             {
-              Partition _elem589; // required
-              _elem589 = new Partition();
-              _elem589.read(iprot);
-              struct.new_parts.add(_elem589);
+              Partition _elem605; // required
+              _elem605 = new Partition();
+              _elem605.read(iprot);
+              struct.new_parts.add(_elem605);
             }
           }
           struct.setNew_partsIsSet(true);
@@ -41640,14 +44452,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, add_partitions_pspe
             case 1: // NEW_PARTS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list590 = iprot.readListBegin();
-                  struct.new_parts = new ArrayList<PartitionSpec>(_list590.size);
-                  for (int _i591 = 0; _i591 < _list590.size; ++_i591)
+                  org.apache.thrift.protocol.TList _list606 = iprot.readListBegin();
+                  struct.new_parts = new ArrayList<PartitionSpec>(_list606.size);
+                  for (int _i607 = 0; _i607 < _list606.size; ++_i607)
                   {
-                    PartitionSpec _elem592; // required
-                    _elem592 = new PartitionSpec();
-                    _elem592.read(iprot);
-                    struct.new_parts.add(_elem592);
+                    PartitionSpec _elem608; // required
+                    _elem608 = new PartitionSpec();
+                    _elem608.read(iprot);
+                    struct.new_parts.add(_elem608);
                   }
                   iprot.readListEnd();
                 }
@@ -41673,9 +44485,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, add_partitions_psp
           oprot.writeFieldBegin(NEW_PARTS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.new_parts.size()));
-            for (PartitionSpec _iter593 : struct.new_parts)
+            for (PartitionSpec _iter609 : struct.new_parts)
             {
-              _iter593.write(oprot);
+              _iter609.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -41706,9 +44518,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, add_partitions_pspe
         if (struct.isSetNew_parts()) {
           {
             oprot.writeI32(struct.new_parts.size());
-            for (PartitionSpec _iter594 : struct.new_parts)
+            for (PartitionSpec _iter610 : struct.new_parts)
             {
-              _iter594.write(oprot);
+              _iter610.write(oprot);
             }
           }
         }
@@ -41720,14 +44532,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, add_partitions_pspec
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list595 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.new_parts = new ArrayList<PartitionSpec>(_list595.size);
-            for (int _i596 = 0; _i596 < _list595.size; ++_i596)
+            org.apache.thrift.protocol.TList _list611 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.new_parts = new ArrayList<PartitionSpec>(_list611.size);
+            for (int _i612 = 0; _i612 < _list611.size; ++_i612)
             {
-              PartitionSpec _elem597; // required
-              _elem597 = new PartitionSpec();
-              _elem597.read(iprot);
-              struct.new_parts.add(_elem597);
+              PartitionSpec _elem613; // required
+              _elem613 = new PartitionSpec();
+              _elem613.read(iprot);
+              struct.new_parts.add(_elem613);
             }
           }
           struct.setNew_partsIsSet(true);
@@ -42906,13 +45718,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, append_partition_ar
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list598 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list598.size);
-                  for (int _i599 = 0; _i599 < _list598.size; ++_i599)
+                  org.apache.thrift.protocol.TList _list614 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list614.size);
+                  for (int _i615 = 0; _i615 < _list614.size; ++_i615)
                   {
-                    String _elem600; // required
-                    _elem600 = iprot.readString();
-                    struct.part_vals.add(_elem600);
+                    String _elem616; // required
+                    _elem616 = iprot.readString();
+                    struct.part_vals.add(_elem616);
                   }
                   iprot.readListEnd();
                 }
@@ -42948,9 +45760,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, append_partition_a
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter601 : struct.part_vals)
+            for (String _iter617 : struct.part_vals)
             {
-              oprot.writeString(_iter601);
+              oprot.writeString(_iter617);
             }
             oprot.writeListEnd();
           }
@@ -42993,9 +45805,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, append_partition_ar
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter602 : struct.part_vals)
+            for (String _iter618 : struct.part_vals)
             {
-              oprot.writeString(_iter602);
+              oprot.writeString(_iter618);
             }
           }
         }
@@ -43015,13 +45827,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, append_partition_arg
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list603 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list603.size);
-            for (int _i604 = 0; _i604 < _list603.size; ++_i604)
+            org.apache.thrift.protocol.TList _list619 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list619.size);
+            for (int _i620 = 0; _i620 < _list619.size; ++_i620)
             {
-              String _elem605; // required
-              _elem605 = iprot.readString();
-              struct.part_vals.add(_elem605);
+              String _elem621; // required
+              _elem621 = iprot.readString();
+              struct.part_vals.add(_elem621);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -45333,13 +48145,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, append_partition_wi
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list606 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list606.size);
-                  for (int _i607 = 0; _i607 < _list606.size; ++_i607)
+                  org.apache.thrift.protocol.TList _list622 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list622.size);
+                  for (int _i623 = 0; _i623 < _list622.size; ++_i623)
                   {
-                    String _elem608; // required
-                    _elem608 = iprot.readString();
-                    struct.part_vals.add(_elem608);
+                    String _elem624; // required
+                    _elem624 = iprot.readString();
+                    struct.part_vals.add(_elem624);
                   }
                   iprot.readListEnd();
                 }
@@ -45384,9 +48196,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, append_partition_w
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter609 : struct.part_vals)
+            for (String _iter625 : struct.part_vals)
             {
-              oprot.writeString(_iter609);
+              oprot.writeString(_iter625);
             }
             oprot.writeListEnd();
           }
@@ -45437,9 +48249,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, append_partition_wi
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter610 : struct.part_vals)
+            for (String _iter626 : struct.part_vals)
             {
-              oprot.writeString(_iter610);
+              oprot.writeString(_iter626);
             }
           }
         }
@@ -45462,13 +48274,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, append_partition_wit
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list611 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list611.size);
-            for (int _i612 = 0; _i612 < _list611.size; ++_i612)
+            org.apache.thrift.protocol.TList _list627 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list627.size);
+            for (int _i628 = 0; _i628 < _list627.size; ++_i628)
             {
-              String _elem613; // required
-              _elem613 = iprot.readString();
-              struct.part_vals.add(_elem613);
+              String _elem629; // required
+              _elem629 = iprot.readString();
+              struct.part_vals.add(_elem629);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -49341,13 +52153,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, drop_partition_args
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list614 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list614.size);
-                  for (int _i615 = 0; _i615 < _list614.size; ++_i615)
+                  org.apache.thrift.protocol.TList _list630 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list630.size);
+                  for (int _i631 = 0; _i631 < _list630.size; ++_i631)
                   {
-                    String _elem616; // required
-                    _elem616 = iprot.readString();
-                    struct.part_vals.add(_elem616);
+                    String _elem632; // required
+                    _elem632 = iprot.readString();
+                    struct.part_vals.add(_elem632);
                   }
                   iprot.readListEnd();
                 }
@@ -49391,9 +52203,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, drop_partition_arg
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter617 : struct.part_vals)
+            for (String _iter633 : struct.part_vals)
             {
-              oprot.writeString(_iter617);
+              oprot.writeString(_iter633);
             }
             oprot.writeListEnd();
           }
@@ -49442,9 +52254,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, drop_partition_args
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter618 : struct.part_vals)
+            for (String _iter634 : struct.part_vals)
             {
-              oprot.writeString(_iter618);
+              oprot.writeString(_iter634);
             }
           }
         }
@@ -49467,13 +52279,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, drop_partition_args
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list619 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list619.size);
-            for (int _i620 = 0; _i620 < _list619.size; ++_i620)
+            org.apache.thrift.protocol.TList _list635 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list635.size);
+            for (int _i636 = 0; _i636 < _list635.size; ++_i636)
             {
-              String _elem621; // required
-              _elem621 = iprot.readString();
-              struct.part_vals.add(_elem621);
+              String _elem637; // required
+              _elem637 = iprot.readString();
+              struct.part_vals.add(_elem637);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -50715,13 +53527,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, drop_partition_with
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list622 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list622.size);
-                  for (int _i623 = 0; _i623 < _list622.size; ++_i623)
+                  org.apache.thrift.protocol.TList _list638 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list638.size);
+                  for (int _i639 = 0; _i639 < _list638.size; ++_i639)
                   {
-                    String _elem624; // required
-                    _elem624 = iprot.readString();
-                    struct.part_vals.add(_elem624);
+                    String _elem640; // required
+                    _elem640 = iprot.readString();
+                    struct.part_vals.add(_elem640);
                   }
                   iprot.readListEnd();
                 }
@@ -50774,9 +53586,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, drop_partition_wit
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter625 : struct.part_vals)
+            for (String _iter641 : struct.part_vals)
             {
-              oprot.writeString(_iter625);
+              oprot.writeString(_iter641);
             }
             oprot.writeListEnd();
           }
@@ -50833,9 +53645,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, drop_partition_with
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter626 : struct.part_vals)
+            for (String _iter642 : struct.part_vals)
             {
-              oprot.writeString(_iter626);
+              oprot.writeString(_iter642);
             }
           }
         }
@@ -50861,13 +53673,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, drop_partition_with_
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list627 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list627.size);
-            for (int _i628 = 0; _i628 < _list627.size; ++_i628)
+            org.apache.thrift.protocol.TList _list643 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list643.size);
+            for (int _i644 = 0; _i644 < _list643.size; ++_i644)
             {
-              String _elem629; // required
-              _elem629 = iprot.readString();
-              struct.part_vals.add(_elem629);
+              String _elem645; // required
+              _elem645 = iprot.readString();
+              struct.part_vals.add(_elem645);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -55472,13 +58284,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_args
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list630 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list630.size);
-                  for (int _i631 = 0; _i631 < _list630.size; ++_i631)
+                  org.apache.thrift.protocol.TList _list646 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list646.size);
+                  for (int _i647 = 0; _i647 < _list646.size; ++_i647)
                   {
-                    String _elem632; // required
-                    _elem632 = iprot.readString();
-                    struct.part_vals.add(_elem632);
+                    String _elem648; // required
+                    _elem648 = iprot.readString();
+                    struct.part_vals.add(_elem648);
                   }
                   iprot.readListEnd();
                 }
@@ -55514,9 +58326,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_args
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter633 : struct.part_vals)
+            for (String _iter649 : struct.part_vals)
             {
-              oprot.writeString(_iter633);
+              oprot.writeString(_iter649);
             }
             oprot.writeListEnd();
           }
@@ -55559,9 +58371,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_args
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter634 : struct.part_vals)
+            for (String _iter650 : struct.part_vals)
             {
-              oprot.writeString(_iter634);
+              oprot.writeString(_iter650);
             }
           }
         }
@@ -55581,13 +58393,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_args s
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list635 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list635.size);
-            for (int _i636 = 0; _i636 < _list635.size; ++_i636)
+            org.apache.thrift.protocol.TList _list651 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list651.size);
+            for (int _i652 = 0; _i652 < _list651.size; ++_i652)
             {
-              String _elem637; // required
-              _elem637 = iprot.readString();
-              struct.part_vals.add(_elem637);
+              String _elem653; // required
+              _elem653 = iprot.readString();
+              struct.part_vals.add(_elem653);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -56816,15 +59628,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, exchange_partition_
             case 1: // PARTITION_SPECS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map638 = iprot.readMapBegin();
-                  struct.partitionSpecs = new HashMap<String,String>(2*_map638.size);
-                  for (int _i639 = 0; _i639 < _map638.size; ++_i639)
+                  org.apache.thrift.protocol.TMap _map654 = iprot.readMapBegin();
+                  struct.partitionSpecs = new HashMap<String,String>(2*_map654.size);
+                  for (int _i655 = 0; _i655 < _map654.size; ++_i655)
                   {
-                    String _key640; // required
-                    String _val641; // required
-                    _key640 = iprot.readString();
-                    _val641 = iprot.readString();
-                    struct.partitionSpecs.put(_key640, _val641);
+                    String _key656; // required
+                    String _val657; // required
+                    _key656 = iprot.readString();
+                    _val657 = iprot.readString();
+                    struct.partitionSpecs.put(_key656, _val657);
                   }
                   iprot.readMapEnd();
                 }
@@ -56882,10 +59694,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, exchange_partition
           oprot.writeFieldBegin(PARTITION_SPECS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.partitionSpecs.size()));
-            for (Map.Entry<String, String> _iter642 : struct.partitionSpecs.entrySet())
+            for (Map.Entry<String, String> _iter658 : struct.partitionSpecs.entrySet())
             {
-              oprot.writeString(_iter642.getKey());
-              oprot.writeString(_iter642.getValue());
+              oprot.writeString(_iter658.getKey());
+              oprot.writeString(_iter658.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -56948,10 +59760,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, exchange_partition_
         if (struct.isSetPartitionSpecs()) {
           {
             oprot.writeI32(struct.partitionSpecs.size());
-            for (Map.Entry<String, String> _iter643 : struct.partitionSpecs.entrySet())
+            for (Map.Entry<String, String> _iter659 : struct.partitionSpecs.entrySet())
             {
-              oprot.writeString(_iter643.getKey());
-              oprot.writeString(_iter643.getValue());
+              oprot.writeString(_iter659.getKey());
+              oprot.writeString(_iter659.getValue());
             }
           }
         }
@@ -56975,15 +59787,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, exchange_partition_a
         BitSet incoming = iprot.readBitSet(5);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TMap _map644 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.partitionSpecs = new HashMap<String,String>(2*_map644.size);
-            for (int _i645 = 0; _i645 < _map644.size; ++_i645)
+            org.apache.thrift.protocol.TMap _map660 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.partitionSpecs = new HashMap<String,String>(2*_map660.size);
+            for (int _i661 = 0; _i661 < _map660.size; ++_i661)
             {
-              String _key646; // required
-              String _val647; // required
-              _key646 = iprot.readString();
-              _val647 = iprot.readString();
-              struct.partitionSpecs.put(_key646, _val647);
+              String _key662; // required
+              String _val663; // required
+              _key662 = iprot.readString();
+              _val663 = iprot.readString();
+              struct.partitionSpecs.put(_key662, _val663);
             }
           }
           struct.setPartitionSpecsIsSet(true);
@@ -58471,13 +61283,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_with_
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list648 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list648.size);
-                  for (int _i649 = 0; _i649 < _list648.size; ++_i649)
+                  org.apache.thrift.protocol.TList _list664 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list664.size);
+                  for (int _i665 = 0; _i665 < _list664.size; ++_i665)
                   {
-                    String _elem650; // required
-                    _elem650 = iprot.readString();
-                    struct.part_vals.add(_elem650);
+                    String _elem666; // required
+                    _elem666 = iprot.readString();
+                    struct.part_vals.add(_elem666);
                   }
                   iprot.readListEnd();
                 }
@@ -58497,13 +61309,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_with_
             case 5: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list651 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list651.size);
-                  for (int _i652 = 0; _i652 < _list651.size; ++_i652)
+                  org.apache.thrift.protocol.TList _list667 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list667.size);
+                  for (int _i668 = 0; _i668 < _list667.size; ++_i668)
                   {
-                    String _elem653; // required
-                    _elem653 = iprot.readString();
-                    struct.group_names.add(_elem653);
+                    String _elem669; // required
+                    _elem669 = iprot.readString();
+                    struct.group_names.add(_elem669);
                   }
                   iprot.readListEnd();
                 }
@@ -58539,9 +61351,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_with
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter654 : struct.part_vals)
+            for (String _iter670 : struct.part_vals)
             {
-              oprot.writeString(_iter654);
+              oprot.writeString(_iter670);
             }
             oprot.writeListEnd();
           }
@@ -58556,9 +61368,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_with
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter655 : struct.group_names)
+            for (String _iter671 : struct.group_names)
             {
-              oprot.writeString(_iter655);
+              oprot.writeString(_iter671);
             }
             oprot.writeListEnd();
           }
@@ -58607,9 +61419,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_with_
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter656 : struct.part_vals)
+            for (String _iter672 : struct.part_vals)
             {
-              oprot.writeString(_iter656);
+              oprot.writeString(_iter672);
             }
           }
         }
@@ -58619,9 +61431,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_with_
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter657 : struct.group_names)
+            for (String _iter673 : struct.group_names)
             {
-              oprot.writeString(_iter657);
+              oprot.writeString(_iter673);
             }
           }
         }
@@ -58641,13 +61453,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_with_a
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list658 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list658.size);
-            for (int _i659 = 0; _i659 < _list658.size; ++_i659)
+            org.apache.thrift.protocol.TList _list674 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list674.size);
+            for (int _i675 = 0; _i675 < _list674.size; ++_i675)
             {
-              String _elem660; // required
-              _elem660 = iprot.readString();
-              struct.part_vals.add(_elem660);
+              String _elem676; // required
+              _elem676 = iprot.readString();
+              struct.part_vals.add(_elem676);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -58658,13 +61470,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_with_a
         }
         if (incoming.get(4)) {
           {
-            org.apache.thrift.protocol.TList _list661 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list661.size);
-            for (int _i662 = 0; _i662 < _list661.size; ++_i662)
+            org.apache.thrift.protocol.TList _list677 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list677.size);
+            for (int _i678 = 0; _i678 < _list677.size; ++_i678)
             {
-              String _elem663; // required
-              _elem663 = iprot.readString();
-              struct.group_names.add(_elem663);
+              String _elem679; // required
+              _elem679 = iprot.readString();
+              struct.group_names.add(_elem679);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -61433,14 +64245,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_resu
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list664 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list664.size);
-                  for (int _i665 = 0; _i665 < _list664.size; ++_i665)
+                  org.apache.thrift.protocol.TList _list680 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list680.size);
+                  for (int _i681 = 0; _i681 < _list680.size; ++_i681)
                   {
-                    Partition _elem666; // required
-                    _elem666 = new Partition();
-                    _elem666.read(iprot);
-                    struct.success.add(_elem666);
+                    Partition _elem682; // required
+                    _elem682 = new Partition();
+                    _elem682.read(iprot);
+                    struct.success.add(_elem682);
                   }
                   iprot.readListEnd();
                 }
@@ -61484,9 +64296,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_res
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter667 : struct.success)
+            for (Partition _iter683 : struct.success)
             {
-              _iter667.write(oprot);
+              _iter683.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -61533,9 +64345,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_resu
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter668 : struct.success)
+            for (Partition _iter684 : struct.success)
             {
-              _iter668.write(oprot);
+              _iter684.write(oprot);
             }
           }
         }
@@ -61553,14 +64365,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_resul
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list669 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list669.size);
-            for (int _i670 = 0; _i670 < _list669.size; ++_i670)
+            org.apache.thrift.protocol.TList _list685 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list685.size);
+            for (int _i686 = 0; _i686 < _list685.size; ++_i686)
             {
-              Partition _elem671; // required
-              _elem671 = new Partition();
-              _elem671.read(iprot);
-              struct.success.add(_elem671);
+              Partition _elem687; // required
+              _elem687 = new Partition();
+              _elem687.read(iprot);
+              struct.success.add(_elem687);
             }
           }
           struct.setSuccessIsSet(true);
@@ -62253,13 +65065,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_with
             case 5: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list672 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list672.size);
-                  for (int _i673 = 0; _i673 < _list672.size; ++_i673)
+                  org.apache.thrift.protocol.TList _list688 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list688.size);
+                  for (int _i689 = 0; _i689 < _list688.size; ++_i689)
                   {
-                    String _elem674; // required
-                    _elem674 = iprot.readString();
-                    struct.group_names.add(_elem674);
+                    String _elem690; // required
+                    _elem690 = iprot.readString();
+                    struct.group_names.add(_elem690);
                   }
                   iprot.readListEnd();
                 }
@@ -62303,9 +65115,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_wit
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter675 : struct.group_names)
+            for (String _iter691 : struct.group_names)
             {
-              oprot.writeString(_iter675);
+              oprot.writeString(_iter691);
             }
             oprot.writeListEnd();
           }
@@ -62360,9 +65172,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_with
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter676 : struct.group_names)
+            for (String _iter692 : struct.group_names)
             {
-              oprot.writeString(_iter676);
+              oprot.writeString(_iter692);
             }
           }
         }
@@ -62390,13 +65202,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_with_
         }
         if (incoming.get(4)) {
           {
-            org.apache.thrift.protocol.TList _list677 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list677.size);
-            for (int _i678 = 0; _i678 < _list677.size; ++_i678)
+            org.apache.thrift.protocol.TList _list693 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list693.size);
+            for (int _i694 = 0; _i694 < _list693.size; ++_i694)
             {
-              String _elem679; // required
-              _elem679 = iprot.readString();
-              struct.group_names.add(_elem679);
+              String _elem695; // required
+              _elem695 = iprot.readString();
+              struct.group_names.add(_elem695);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -62883,14 +65695,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_with
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list680 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list680.size);
-                  for (int _i681 = 0; _i681 < _list680.size; ++_i681)
+                  org.apache.thrift.protocol.TList _list696 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list696.size);
+                  for (int _i697 = 0; _i697 < _list696.size; ++_i697)
                   {
-                    Partition _elem682; // required
-                    _elem682 = new Partition();
-                    _elem682.read(iprot);
-                    struct.success.add(_elem682);
+                    Partition _elem698; // required
+                    _elem698 = new Partition();
+                    _elem698.read(iprot);
+                    struct.success.add(_elem698);
                   }
                   iprot.readListEnd();
                 }
@@ -62934,9 +65746,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_wit
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter683 : struct.success)
+            for (Partition _iter699 : struct.success)
             {
-              _iter683.write(oprot);
+              _iter699.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -62983,9 +65795,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_with
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter684 : struct.success)
+            for (Partition _iter700 : struct.success)
             {
-              _iter684.write(oprot);
+              _iter700.write(oprot);
             }
           }
         }
@@ -63003,14 +65815,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_with_
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list685 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list685.size);
-            for (int _i686 = 0; _i686 < _list685.size; ++_i686)
+            org.apache.thrift.protocol.TList _list701 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list701.size);
+            for (int _i702 = 0; _i702 < _list701.size; ++_i702)
             {
-              Partition _elem687; // required
-              _elem687 = new Partition();
-              _elem687.read(iprot);
-              struct.success.add(_elem687);
+              Partition _elem703; // required
+              _elem703 = new Partition();
+              _elem703.read(iprot);
+              struct.success.add(_elem703);
             }
           }
           struct.setSuccessIsSet(true);
@@ -64073,14 +66885,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_pspe
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list688 = iprot.readListBegin();
-                  struct.success = new ArrayList<PartitionSpec>(_list688.size);
-                  for (int _i689 = 0; _i689 < _list688.size; ++_i689)
+                  org.apache.thrift.protocol.TList _list704 = iprot.readListBegin();
+                  struct.success = new ArrayList<PartitionSpec>(_list704.size);
+                  for (int _i705 = 0; _i705 < _list704.size; ++_i705)
                   {
-                    PartitionSpec _elem690; // required
-                    _elem690 = new PartitionSpec();
-                    _elem690.read(iprot);
-                    struct.success.add(_elem690);
+                    PartitionSpec _elem706; // required
+                    _elem706 = new PartitionSpec();
+                    _elem706.read(iprot);
+                    struct.success.add(_elem706);
                   }
                   iprot.readListEnd();
                 }
@@ -64124,9 +66936,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_psp
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (PartitionSpec _iter691 : struct.success)
+            for (PartitionSpec _iter707 : struct.success)
             {
-              _iter691.write(oprot);
+              _iter707.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -64173,9 +66985,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_pspe
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (PartitionSpec _iter692 : struct.success)
+            for (PartitionSpec _iter708 : struct.success)
             {
-              _iter692.write(oprot);
+              _iter708.write(oprot);
             }
           }
         }
@@ -64193,14 +67005,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_pspec
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list693 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<PartitionSpec>(_list693.size);
-            for (int _i694 = 0; _i694 < _list693.size; ++_i694)
+            org.apache.thrift.protocol.TList _list709 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<PartitionSpec>(_list709.size);
+            for (int _i710 = 0; _i710 < _list709.size; ++_i710)
             {
-              PartitionSpec _elem695; // required
-              _elem695 = new PartitionSpec();
-              _elem695.read(iprot);
-              struct.success.add(_elem695);
+              PartitionSpec _elem711; // required
+              _elem711 = new PartitionSpec();
+              _elem711.read(iprot);
+              struct.success.add(_elem711);
             }
           }
           struct.setSuccessIsSet(true);
@@ -65182,13 +67994,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_names
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list696 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list696.size);
-                  for (int _i697 = 0; _i697 < _list696.size; ++_i697)
+                  org.apache.thrift.protocol.TList _list712 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list712.size);
+                  for (int _i713 = 0; _i713 < _list712.size; ++_i713)
                   {
-                    String _elem698; // required
-                    _elem698 = iprot.readString();
-                    struct.success.add(_elem698);
+                    String _elem714; // required
+                    _elem714 = iprot.readString();
+                    struct.success.add(_elem714);
                   }
                   iprot.readListEnd();
                 }
@@ -65223,9 +68035,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_name
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter699 : struct.success)
+            for (String _iter715 : struct.success)
             {
-              oprot.writeString(_iter699);
+              oprot.writeString(_iter715);
             }
             oprot.writeListEnd();
           }
@@ -65264,9 +68076,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_names
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter700 : struct.success)
+            for (String _iter716 : struct.success)
             {
-              oprot.writeString(_iter700);
+              oprot.writeString(_iter716);
             }
           }
         }
@@ -65281,13 +68093,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_names_
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list701 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list701.size);
-            for (int _i702 = 0; _i702 < _list701.size; ++_i702)
+            org.apache.thrift.protocol.TList _list717 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list717.size);
+            for (int _i718 = 0; _i718 < _list717.size; ++_i718)
             {
-              String _elem703; // required
-              _elem703 = iprot.readString();
-              struct.success.add(_elem703);
+              String _elem719; // required
+              _elem719 = iprot.readString();
+              struct.success.add(_elem719);
             }
           }
           struct.setSuccessIsSet(true);
@@ -65878,13 +68690,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_a
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list704 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list704.size);
-                  for (int _i705 = 0; _i705 < _list704.size; ++_i705)
+                  org.apache.thrift.protocol.TList _list720 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list720.size);
+                  for (int _i721 = 0; _i721 < _list720.size; ++_i721)
                   {
-                    String _elem706; // required
-                    _elem706 = iprot.readString();
-                    struct.part_vals.add(_elem706);
+                    String _elem722; // required
+                    _elem722 = iprot.readString();
+                    struct.part_vals.add(_elem722);
                   }
                   iprot.readListEnd();
                 }
@@ -65928,9 +68740,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter707 : struct.part_vals)
+            for (String _iter723 : struct.part_vals)
             {
-              oprot.writeString(_iter707);
+              oprot.writeString(_iter723);
             }
             oprot.writeListEnd();
           }
@@ -65979,9 +68791,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_a
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter708 : struct.part_vals)
+            for (String _iter724 : struct.part_vals)
             {
-              oprot.writeString(_iter708);
+              oprot.writeString(_iter724);
             }
           }
         }
@@ -66004,13 +68816,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_ar
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list709 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list709.size);
-            for (int _i710 = 0; _i710 < _list709.size; ++_i710)
+            org.apache.thrift.protocol.TList _list725 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list725.size);
+            for (int _i726 = 0; _i726 < _list725.size; ++_i726)
             {
-              String _elem711; // required
-              _elem711 = iprot.readString();
-              struct.part_vals.add(_elem711);
+              String _elem727; // required
+              _elem727 = iprot.readString();
+              struct.part_vals.add(_elem727);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -66501,14 +69313,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_r
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list712 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list712.size);
-                  for (int _i713 = 0; _i713 < _list712.size; ++_i713)
+                  org.apache.thrift.protocol.TList _list728 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list728.size);
+                  for (int _i729 = 0; _i729 < _list728.size; ++_i729)
                   {
-                    Partition _elem714; // required
-                    _elem714 = new Partition();
-                    _elem714.read(iprot);
-                    struct.success.add(_elem714);
+                    Partition _elem730; // required
+                    _elem730 = new Partition();
+                    _elem730.read(iprot);
+                    struct.success.add(_elem730);
                   }
                   iprot.readListEnd();
                 }
@@ -66552,9 +69364,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter715 : struct.success)
+            for (Partition _iter731 : struct.success)
             {
-              _iter715.write(oprot);
+              _iter731.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -66601,9 +69413,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_r
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter716 : struct.success)
+            for (Partition _iter732 : struct.success)
             {
-              _iter716.write(oprot);
+              _iter732.write(oprot);
             }
           }
         }
@@ -66621,14 +69433,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_re
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list717 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list717.size);
-            for (int _i718 = 0; _i718 < _list717.size; ++_i718)
+            org.apache.thrift.protocol.TList _list733 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list733.size);
+            for (int _i734 = 0; _i734 < _list733.size; ++_i734)
             {
-              Partition _elem719; // required
-              _elem719 = new Partition();
-              _elem719.read(iprot);
-              struct.success.add(_elem719);
+              Partition _elem735; // required
+              _elem735 = new Partition();
+              _elem735.read(iprot);
+              struct.success.add(_elem735);
             }
           }
           struct.setSuccessIsSet(true);
@@ -67406,13 +70218,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_w
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list720 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list720.size);
-                  for (int _i721 = 0; _i721 < _list720.size; ++_i721)
+                  org.apache.thrift.protocol.TList _list736 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list736.size);
+                  for (int _i737 = 0; _i737 < _list736.size; ++_i737)
                   {
-                    String _elem722; // required
-                    _elem722 = iprot.readString();
-                    struct.part_vals.add(_elem722);
+                    String _elem738; // required
+                    _elem738 = iprot.readString();
+                    struct.part_vals.add(_elem738);
                   }
                   iprot.readListEnd();
                 }
@@ -67440,13 +70252,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_w
             case 6: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list723 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list723.size);
-                  for (int _i724 = 0; _i724 < _list723.size; ++_i724)
+                  org.apache.thrift.protocol.TList _list739 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list739.size);
+                  for (int _i740 = 0; _i740 < _list739.size; ++_i740)
                   {
-                    String _elem725; // required
-                    _elem725 = iprot.readString();
-                    struct.group_names.add(_elem725);
+                    String _elem741; // required
+                    _elem741 = iprot.readString();
+                    struct.group_names.add(_elem741);
                   }
                   iprot.readListEnd();
                 }
@@ -67482,9 +70294,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter726 : struct.part_vals)
+            for (String _iter742 : struct.part_vals)
             {
-              oprot.writeString(_iter726);
+              oprot.writeString(_iter742);
             }
             oprot.writeListEnd();
           }
@@ -67502,9 +70314,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter727 : struct.group_names)
+            for (String _iter743 : struct.group_names)
             {
-              oprot.writeString(_iter727);
+              oprot.writeString(_iter743);
             }
             oprot.writeListEnd();
           }
@@ -67556,9 +70368,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_w
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter728 : struct.part_vals)
+            for (String _iter744 : struct.part_vals)
             {
-              oprot.writeString(_iter728);
+              oprot.writeString(_iter744);
             }
           }
         }
@@ -67571,9 +70383,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_w
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter729 : struct.group_names)
+            for (String _iter745 : struct.group_names)
             {
-              oprot.writeString(_iter729);
+              oprot.writeString(_iter745);
             }
           }
         }
@@ -67593,13 +70405,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_wi
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list730 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list730.size);
-            for (int _i731 = 0; _i731 < _list730.size; ++_i731)
+            org.apache.thrift.protocol.TList _list746 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list746.size);
+            for (int _i747 = 0; _i747 < _list746.size; ++_i747)
             {
-              String _elem732; // required
-              _elem732 = iprot.readString();
-              struct.part_vals.add(_elem732);
+              String _elem748; // required
+              _elem748 = iprot.readString();
+              struct.part_vals.add(_elem748);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -67614,13 +70426,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_wi
         }
         if (incoming.get(5)) {
           {
-            org.apache.thrift.protocol.TList _list733 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list733.size);
-            for (int _i734 = 0; _i734 < _list733.size; ++_i734)
+            org.apache.thrift.protocol.TList _list749 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list749.size);
+            for (int _i750 = 0; _i750 < _list749.size; ++_i750)
             {
-              String _elem735; // required
-              _elem735 = iprot.readString();
-              struct.group_names.add(_elem735);
+              String _elem751; // required
+              _elem751 = iprot.readString();
+              struct.group_names.add(_elem751);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -68107,14 +70919,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_w
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list736 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list736.size);
-                  for (int _i737 = 0; _i737 < _list736.size; ++_i737)
+                  org.apache.thrift.protocol.TList _list752 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list752.size);
+                  for (int _i753 = 0; _i753 < _list752.size; ++_i753)
                   {
-                    Partition _elem738; // required
-                    _elem738 = new Partition();
-                    _elem738.read(iprot);
-                    struct.success.add(_elem738);
+                    Partition _elem754; // required
+                    _elem754 = new Partition();
+                    _elem754.read(iprot);
+                    struct.success.add(_elem754);
                   }
                   iprot.readListEnd();
                 }
@@ -68158,9 +70970,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter739 : struct.success)
+            for (Partition _iter755 : struct.success)
             {
-              _iter739.write(oprot);
+              _iter755.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -68207,9 +71019,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_w
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter740 : struct.success)
+            for (Partition _iter756 : struct.success)
             {
-              _iter740.write(oprot);
+              _iter756.write(oprot);
             }
           }
         }
@@ -68227,14 +71039,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_wi
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list741 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list741.size);
-            for (int _i742 = 0; _i742 < _list741.size; ++_i742)
+            org.apache.thrift.protocol.TList _list757 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list757.size);
+            for (int _i758 = 0; _i758 < _list757.size; ++_i758)
             {
-              Partition _elem743; // required
-              _elem743 = new Partition();
-              _elem743.read(iprot);
-              struct.success.add(_elem743);
+              Partition _elem759; // required
+              _elem759 = new Partition();
+              _elem759.read(iprot);
+              struct.success.add(_elem759);
             }
           }
           struct.setSuccessIsSet(true);
@@ -68830,13 +71642,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_names
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list744 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list744.size);
-                  for (int _i745 = 0; _i745 < _list744.size; ++_i745)
+                  org.apache.thrift.protocol.TList _list760 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list760.size);
+                  for (int _i761 = 0; _i761 < _list760.size; ++_i761)
                   {
-                    String _elem746; // required
-                    _elem746 = iprot.readString();
-                    struct.part_vals.add(_elem746);
+                    String _elem762; // required
+                    _elem762 = iprot.readString();
+                    struct.part_vals.add(_elem762);
                   }
                   iprot.readListEnd();
                 }
@@ -68880,9 +71692,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_name
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter747 : struct.part_vals)
+            for (String _iter763 : struct.part_vals)
             {
-              oprot.writeString(_iter747);
+              oprot.writeString(_iter763);
             }
             oprot.writeListEnd();
           }
@@ -68931,9 +71743,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_names
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter748 : struct.part_vals)
+            for (String _iter764 : struct.part_vals)
             {
-              oprot.writeString(_iter748);
+              oprot.writeString(_iter764);
             }
           }
         }
@@ -68956,13 +71768,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_names_
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list749 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list749.size);
-            for (int _i750 = 0; _i750 < _list749.size; ++_i750)
+            org.apache.thrift.protocol.TList _list765 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list765.size);
+            for (int _i766 = 0; _i766 < _list765.size; ++_i766)
             {
-              String _elem751; // required
-              _elem751 = iprot.readString();
-              struct.part_vals.add(_elem751);
+              String _elem767; // required
+              _elem767 = iprot.readString();
+              struct.part_vals.add(_elem767);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -69453,13 +72265,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_names
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list752 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list752.size);
-                  for (int _i753 = 0; _i753 < _list752.size; ++_i753)
+                  org.apache.thrift.protocol.TList _list768 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list768.size);
+                  for (int _i769 = 0; _i769 < _list768.size; ++_i769)
                   {
-                    String _elem754; // required
-                    _elem754 = iprot.readString();
-                    struct.success.add(_elem754);
+                    String _elem770; // required
+                    _elem770 = iprot.readString();
+                    struct.success.add(_elem770);
                   }
                   iprot.readListEnd();
                 }
@@ -69503,9 +72315,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_name
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter755 : struct.success)
+            for (String _iter771 : struct.success)
             {
-              oprot.writeString(_iter755);
+              oprot.writeString(_iter771);
             }
             oprot.writeListEnd();
           }
@@ -69552,9 +72364,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_names
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter756 : struct.success)
+            for (String _iter772 : struct.success)
             {
-              oprot.writeString(_iter756);
+              oprot.writeString(_iter772);
             }
           }
         }
@@ -69572,13 +72384,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_names_
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list757 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list757.size);
-            for (int _i758 = 0; _i758 < _list757.size; ++_i758)
+            org.apache.thrift.protocol.TList _list773 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list773.size);
+            for (int _i774 = 0; _i774 < _list773.size; ++_i774)
             {
-              String _elem759; // required
-              _elem759 = iprot.readString();
-              struct.success.add(_elem759);
+              String _elem775; // required
+              _elem775 = iprot.readString();
+              struct.success.add(_elem775);
             }
           }
           struct.setSuccessIsSet(true);
@@ -70745,14 +73557,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_by_f
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list760 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list760.size);
-                  for (int _i761 = 0; _i761 < _list760.size; ++_i761)
+                  org.apache.thrift.protocol.TList _list776 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list776.size);
+                  for (int _i777 = 0; _i777 < _list776.size; ++_i777)
                   {
-                    Partition _elem762; // required
-                    _elem762 = new Partition();
-                    _elem762.read(iprot);
-                    struct.success.add(_elem762);
+                    Partition _elem778; // required
+                    _elem778 = new Partition();
+                    _elem778.read(iprot);
+                    struct.success.add(_elem778);
                   }
                   iprot.readListEnd();
                 }
@@ -70796,9 +73608,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_by_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter763 : struct.success)
+            for (Partition _iter779 : struct.success)
             {
-              _iter763.write(oprot);
+              _iter779.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -70845,9 +73657,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_f
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter764 : struct.success)
+            for (Partition _iter780 : struct.success)
             {
-              _iter764.write(oprot);
+              _iter780.write(oprot);
             }
           }
         }
@@ -70865,14 +73677,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_fi
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list765 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list765.size);
-            for (int _i766 = 0; _i766 < _list765.size; ++_i766)
+            org.apache.thrift.protocol.TList _list781 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list781.size);
+            for (int _i782 = 0; _i782 < _list781.size; ++_i782)
             {
-              Partition _elem767; // required
-              _elem767 = new Partition();
-              _elem767.read(iprot);
-              struct.success.add(_elem767);
+              Partition _elem783; // required
+              _elem783 = new Partition();
+              _elem783.read(iprot);
+              struct.success.add(_elem783);
             }
           }
           struct.setSuccessIsSet(true);
@@ -72039,14 +74851,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_part_specs_by_f
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list768 = iprot.readListBegin();
-                  struct.success = new ArrayList<PartitionSpec>(_list768.size);
-                  for (int _i769 = 0; _i769 < _list768.size; ++_i769)
+                  org.apache.thrift.protocol.TList _list784 = iprot.readListBegin();
+                  struct.success = new ArrayList<PartitionSpec>(_list784.size);
+                  for (int _i785 = 0; _i785 < _list784.size; ++_i785)
                   {
-                    PartitionSpec _elem770; // required
-                    _elem770 = new PartitionSpec();
-                    _elem770.read(iprot);
-                    struct.success.add(_elem770);
+                    PartitionSpec _elem786; // required
+                    _elem786 = new PartitionSpec();
+                    _elem786.read(iprot);
+                    struct.success.add(_elem786);
                   }
                   iprot.readListEnd();
                 }
@@ -72090,9 +74902,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_part_specs_by_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (PartitionSpec _iter771 : struct.success)
+            for (PartitionSpec _iter787 : struct.success)
             {
-              _iter771.write(oprot);
+              _iter787.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -72139,9 +74951,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_part_specs_by_f
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (PartitionSpec _iter772 : struct.success)
+            for (PartitionSpec _iter788 : struct.success)
             {
-              _iter772.write(oprot);
+              _iter788.write(oprot);
             }
           }
         }
@@ -72159,14 +74971,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_part_specs_by_fi
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list773 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<PartitionSpec>(_list773.size);
-            for (int _i774 = 0; _i774 < _list773.size; ++_i774)
+            org.apache.thrift.protocol.TList _list789 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<PartitionSpec>(_list789.size);
+            for (int _i790 = 0; _i790 < _list789.size; ++_i790)
             {
-              PartitionSpec _elem775; // required
-              _elem775 = new PartitionSpec();
-              _elem775.read(iprot);
-              struct.success.add(_elem775);
+              PartitionSpec _elem791; // required
+              _elem791 = new PartitionSpec();
+              _elem791.read(iprot);
+              struct.success.add(_elem791);
             }
           }
           struct.setSuccessIsSet(true);
@@ -73617,13 +76429,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_by_n
             case 3: // NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list776 = iprot.readListBegin();
-                  struct.names = new ArrayList<String>(_list776.size);
-                  for (int _i777 = 0; _i777 < _list776.size; ++_i777)
+                  org.apache.thrift.protocol.TList _list792 = iprot.readListBegin();
+                  struct.names = new ArrayList<String>(_list792.size);
+                  for (int _i793 = 0; _i793 < _list792.size; ++_i793)
                   {
-                    String _elem778; // required
-                    _elem778 = iprot.readString();
-                    struct.names.add(_elem778);
+                    String _elem794; // required
+                    _elem794 = iprot.readString();
+                    struct.names.add(_elem794);
                   }
                   iprot.readListEnd();
                 }
@@ -73659,9 +76471,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_by_
           oprot.writeFieldBegin(NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.names.size()));
-            for (String _iter779 : struct.names)
+            for (String _iter795 : struct.names)
             {
-              oprot.writeString(_iter779);
+              oprot.writeString(_iter795);
             }
             oprot.writeListEnd();
           }
@@ -73704,9 +76516,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_n
         if (struct.isSetNames()) {
           {
             oprot.writeI32(struct.names.size());
-            for (String _iter780 : struct.names)
+            for (String _iter796 : struct.names)
             {
-              oprot.writeString(_iter780);
+              oprot.writeString(_iter796);
             }
           }
         }
@@ -73726,13 +76538,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_na
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list781 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.names = new ArrayList<String>(_list781.size);
-            for (int _i782 = 0; _i782 < _list781.size; ++_i782)
+            org.apache.thrift.protocol.TList _list797 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.names = new ArrayList<String>(_list797.size);
+            for (int _i798 = 0; _i798 < _list797.size; ++_i798)
             {
-              String _elem783; // required
-              _elem783 = iprot.readString();
-              struct.names.add(_elem783);
+              String _elem799; // required
+              _elem799 = iprot.readString();
+              struct.names.add(_elem799);
             }
           }
           struct.setNamesIsSet(true);
@@ -74219,14 +77031,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_by_n
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list784 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list784.size);
-                  for (int _i785 = 0; _i785 < _list784.size; ++_i785)
+                  org.apache.thrift.protocol.TList _list800 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list800.size);
+                  for (int _i801 = 0; _i801 < _list800.size; ++_i801)
                   {
-                    Partition _elem786; // required
-                    _elem786 = new Partition();
-                    _elem786.read(iprot);
-                    struct.success.add(_elem786);
+                    Partition _elem802; // required
+                    _elem802 = new Partition();
+                    _elem802.read(iprot);
+                    struct.success.add(_elem802);
                   }
                   iprot.readListEnd();
                 }
@@ -74270,9 +77082,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_by_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter787 : struct.success)
+            for (Partition _iter803 : struct.success)
             {
-              _iter787.write(oprot);
+              _iter803.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -74319,9 +77131,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_n
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter788 : struct.success)
+            for (Partition _iter804 : struct.success)
             {
-              _iter788.write(oprot);
+              _iter804.write(oprot);
             }
           }
         }
@@ -74339,14 +77151,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_na
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list789 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list789.size);
-            for (int _i790 = 0; _i790 < _list789.size; ++_i790)
+            org.apache.thrift.protocol.TList _list805 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list805.size);
+            for (int _i806 = 0; _i806 < _list805.size; ++_i806)
             {
-              Partition _elem791; // required
-              _elem791 = new Partition();
-              _elem791.read(iprot);
-              struct.success.add(_elem791);
+              Partition _elem807; // required
+              _elem807 = new Partition();
+              _elem807.read(iprot);
+              struct.success.add(_elem807);
             }
           }
           struct.setSuccessIsSet(true);
@@ -75896,14 +78708,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, alter_partitions_ar
             case 3: // NEW_PARTS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list792 = iprot.readListBegin();
-                  struct.new_parts = new ArrayList<Partition>(_list792.size);
-                  for (int _i793 = 0; _i793 < _list792.size; ++_i793)
+                  org.apache.thrift.protocol.TList _list808 = iprot.readListBegin();
+                  struct.new_parts = new ArrayList<Partition>(_list808.size);
+                  for (int _i809 = 0; _i809 < _list808.size; ++_i809)
                   {
-                    Partition _elem794; // required
-                    _elem794 = new Partition();
-                    _elem794.read(iprot);
-                    struct.new_parts.add(_elem794);
+                    Partition _elem810; // required
+                    _elem810 = new Partition();
+                    _elem810.read(iprot);
+                    struct.new_parts.add(_elem810);
                   }
                   iprot.readListEnd();
                 }
@@ -75939,9 +78751,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, alter_partitions_a
           oprot.writeFieldBegin(NEW_PARTS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.new_parts.size()));
-            for (Partition _iter795 : struct.new_parts)
+            for (Partition _iter811 : struct.new_parts)
             {
-              _iter795.write(oprot);
+              _iter811.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -75984,9 +78796,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, alter_partitions_ar
         if (struct.isSetNew_parts()) {
           {
             oprot.writeI32(struct.new_parts.size());
-            for (Partition _iter796 : struct.new_parts)
+            for (Partition _iter812 : struct.new_parts)
             {
-              _iter796.write(oprot);
+              _iter812.write(oprot);
             }
           }
         }
@@ -76006,14 +78818,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, alter_partitions_arg
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list797 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.new_parts = new ArrayList<Partition>(_list797.size);
-            for (int _i798 = 0; _i798 < _list797.size; ++_i798)
+            org.apache.thrift.protocol.TList _list813 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.new_parts = new ArrayList<Partition>(_list813.size);
+            for (int _i814 = 0; _i814 < _list813.size; ++_i814)
             {
-              Partition _elem799; // required
-              _elem799 = new Partition();
-              _elem799.read(iprot);
-              struct.new_parts.add(_elem799);
+              Partition _elem815; // required
+              _elem815 = new Partition();
+              _elem815.read(iprot);
+              struct.new_parts.add(_elem815);
             }
           }
           struct.setNew_partsIsSet(true);
@@ -78212,13 +81024,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, rename_partition_ar
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list800 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list800.size);
-                  for (int _i801 = 0; _i801 < _list800.size; ++_i801)
+                  org.apache.thrift.protocol.TList _list816 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list816.size);
+                  for (int _i817 = 0; _i817 < _list816.size; ++_i817)
                   {
-                    String _elem802; // required
-                    _elem802 = iprot.readString();
-                    struct.part_vals.add(_elem802);
+                    String _elem818; // required
+                    _elem818 = iprot.readString();
+                    struct.part_vals.add(_elem818);
                   }
                   iprot.readListEnd();
                 }
@@ -78263,9 +81075,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, rename_partition_a
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter803 : struct.part_vals)
+            for (String _iter819 : struct.part_vals)
             {
-              oprot.writeString(_iter803);
+              oprot.writeString(_iter819);
             }
             oprot.writeListEnd();
           }
@@ -78316,9 +81128,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, rename_partition_ar
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter804 : struct.part_vals)
+            for (String _iter820 : struct.part_vals)
             {
-              oprot.writeString(_iter804);
+              oprot.writeString(_iter820);
             }
           }
         }
@@ -78341,13 +81153,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, rename_partition_arg
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list805 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list805.size);
-            for (int _i806 = 0; _i806 < _list805.size; ++_i806)
+            org.apache.thrift.protocol.TList _list821 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list821.size);
+            for (int _i822 = 0; _i822 < _list821.size; ++_i822)
             {
-              String _elem807; // required
-              _elem807 = iprot.readString();
-              struct.part_vals.add(_elem807);
+              String _elem823; // required
+              _elem823 = iprot.readString();
+              struct.part_vals.add(_elem823);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -79224,13 +82036,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, partition_name_has_
             case 1: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list808 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list808.size);
-                  for (int _i809 = 0; _i809 < _list808.size; ++_i809)
+                  org.apache.thrift.protocol.TList _list824 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list824.size);
+                  for (int _i825 = 0; _i825 < _list824.size; ++_i825)
                   {
-                    String _elem810; // required
-                    _elem810 = iprot.readString();
-                    struct.part_vals.add(_elem810);
+                    String _elem826; // required
+                    _elem826 = iprot.readString();
+                    struct.part_vals.add(_elem826);
                   }
                   iprot.readListEnd();
                 }
@@ -79264,9 +82076,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, partition_name_has
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter811 : struct.part_vals)
+            for (String _iter827 : struct.part_vals)
             {
-              oprot.writeString(_iter811);
+              oprot.writeString(_iter827);
             }
             oprot.writeListEnd();
           }
@@ -79303,9 +82115,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, partition_name_has_
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter812 : struct.part_vals)
+            for (String _iter828 : struct.part_vals)
             {
-              oprot.writeString(_iter812);
+              oprot.writeString(_iter828);
             }
           }
         }
@@ -79320,13 +82132,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, partition_name_has_v
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list813 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list813.size);
-            for (int _i814 = 0; _i814 < _list813.size; ++_i814)
+            org.apache.thrift.protocol.TList _list829 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list829.size);
+            for (int _i830 = 0; _i830 < _list829.size; ++_i830)
             {
-              String _elem815; // required
-              _elem815 = iprot.readString();
-              struct.part_vals.add(_elem815);
+              String _elem831; // required
+              _elem831 = iprot.readString();
+              struct.part_vals.add(_elem831);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -81484,13 +84296,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, partition_name_to_v
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list816 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list816.size);
-                  for (int _i817 = 0; _i817 < _list816.size; ++_i817)
+                  org.apache.thrift.protocol.TList _list832 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list832.size);
+                  for (int _i833 = 0; _i833 < _list832.size; ++_i833)
                   {
-                    String _elem818; // required
-                    _elem818 = iprot.readString();
-                    struct.success.add(_elem818);
+                    String _elem834; // required
+                    _elem834 = iprot.readString();
+                    struct.success.add(_elem834);
                   }
                   iprot.readListEnd();
                 }
@@ -81525,9 +84337,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, partition_name_to_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter819 : struct.success)
+            for (String _iter835 : struct.success)
             {
-              oprot.writeString(_iter819);
+              oprot.writeString(_iter835);
             }
             oprot.writeListEnd();
           }
@@ -81566,9 +84378,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, partition_name_to_v
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter820 : struct.success)
+            for (String _iter836 : struct.success)
             {
-              oprot.writeString(_iter820);
+              oprot.writeString(_iter836);
             }
           }
         }
@@ -81583,13 +84395,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, partition_name_to_va
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list821 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list821.size);
-            for (int _i822 = 0; _i822 < _list821.size; ++_i822)
+            org.apache.thrift.protocol.TList _list837 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list837.size);
+            for (int _i838 = 0; _i838 < _list837.size; ++_i838)
             {
-              String _elem823; // required
-              _elem823 = iprot.readString();
-              struct.success.add(_elem823);
+              String _elem839; // required
+              _elem839 = iprot.readString();
+              struct.success.add(_elem839);
             }
           }
           struct.setSuccessIsSet(true);
@@ -82363,15 +85175,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, partition_name_to_s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map824 = iprot.readMapBegin();
-                  struct.success = new HashMap<String,String>(2*_map824.size);
-                  for (int _i825 = 0; _i825 < _map824.size; ++_i825)
+                  org.apache.thrift.protocol.TMap _map840 = iprot.readMapBegin();
+                  struct.success = new HashMap<String,String>(2*_map840.size);
+                  for (int _i841 = 0; _i841 < _map840.size; ++_i841)
                   {
-                    String _key826; // required
-                    String _val827; // required
-                    _key826 = iprot.readString();
-                    _val827 = iprot.readString();
-                    struct.success.put(_key826, _val827);
+                    String _key842; // required
+                    String _val843; // required
+                    _key842 = iprot.readString();
+                    _val843 = iprot.readString();
+                    struct.success.put(_key842, _val843);
                   }
                   iprot.readMapEnd();
                 }
@@ -82406,10 +85218,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, partition_name_to_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (Map.Entry<String, String> _iter828 : struct.success.entrySet())
+            for (Map.Entry<String, String> _iter844 : struct.success.entrySet())
             {
-              oprot.writeString(_iter828.getKey());
-              oprot.writeString(_iter828.getValue());
+              oprot.writeString(_iter844.getKey());
+              oprot.writeString(_iter844.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -82448,10 +85260,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, partition_name_to_s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Map.Entry<String, String> _iter829 : struct.success.entrySet())
+            for (Map.Entry<String, String> _iter845 : struct.success.entrySet())
             {
-              oprot.writeString(_iter829.getKey());
-              oprot.writeString(_iter829.getValue());
+              oprot.writeString(_iter845.getKey());
+              oprot.writeString(_iter845.getValue());
             }
           }
         }
@@ -82466,15 +85278,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, partition_name_to_sp
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TMap _map830 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new HashMap<String,String>(2*_map830.size);
-            for (int _i831 = 0; _i831 < _map830.size; ++_i831)
+            org.apache.thrift.protocol.TMap _map846 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new HashMap<String,String>(2*_map846.size);
+            for (int _i847 = 0; _i847 < _map846.size; ++_i847)
             {
-              String _key832; // required
-              String _val833; // required
-              _key832 = iprot.readString();
-              _val833 = iprot.readString();
-              struct.success.put(_key832, _val833);
+              String _key848; // required
+              String _val849; // required
+              _key848 = iprot.readString();
+              _val849 = iprot.readString();
+              struct.success.put(_key848, _val849);
             }
           }
           struct.setSuccessIsSet(true);
@@ -83080,15 +85892,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, markPartitionForEve
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map834 = iprot.readMapBegin();
-                  struct.part_vals = new HashMap<String,String>(2*_map834.size);
-                  for (int _i835 = 0; _i835 < _map834.size; ++_i835)
+                  org.apache.thrift.protocol.TMap _map850 = iprot.readMapBegin();
+                  struct.part_vals = new HashMap<String,String>(2*_map850.size);
+                  for (int _i851 = 0; _i851 < _map850.size; ++_i851)
                   {
-                    String _key836; // required
-                    String _val837; // required
-                    _key836 = iprot.readString();
-                    _val837 = iprot.readString();
-                    struct.part_vals.put(_key836, _val837);
+                    String _key852; // required
+                    String _val853; // required
+                    _key852 = iprot.readString();
+                    _val853 = iprot.readString();
+                    struct.part_vals.put(_key852, _val853);
                   }
                   iprot.readMapEnd();
                 }
@@ -83132,10 +85944,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, markPartitionForEv
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (Map.Entry<String, String> _iter838 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter854 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter838.getKey());
-              oprot.writeString(_iter838.getValue());
+              oprot.writeString(_iter854.getKey());
+              oprot.writeString(_iter854.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -83186,10 +85998,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, markPartitionForEve
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (Map.Entry<String, String> _iter839 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter855 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter839.getKey());
-              oprot.writeString(_iter839.getValue());
+              oprot.writeString(_iter855.getKey());
+              oprot.writeString(_iter855.getValue());
             }
           }
         }
@@ -83212,15 +86024,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, markPartitionForEven
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TMap _map840 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new HashMap<String,String>(2*_map840.size);
-            for (int _i841 = 0; _i841 < _map840.size; ++_i841)
+            org.apache.thrift.protocol.TMap _map856 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new HashMap<String,String>(2*_map856.size);
+            for (int _i857 = 0; _i857 < _map856.size; ++_i857)
             {
-              String _key842; // required
-              String _val843; // required
-              _key842 = iprot.readString();
-              _val843 = iprot.readString();
-              struct.part_vals.put(_key842, _val843);
+              String _key858; // required
+              String _val859; // required
+              _key858 = iprot.readString();
+              _val859 = iprot.readString();
+              struct.part_vals.put(_key858, _val859);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -84715,15 +87527,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, isPartitionMarkedFo
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map844 = iprot.readMapBegin();
-                  struct.part_vals = new HashMap<String,String>(2*_map844.size);
-                  for (int _i845 = 0; _i845 < _map844.size; ++_i845)
+                  org.apache.thrift.protocol.TMap _map860 = iprot.readMapBegin();
+                  struct.part_vals = new HashMap<String,String>(2*_map860.size);
+                  for (int _i861 = 0; _i861 < _map860.size; ++_i861)
                   {
-                    String _key846; // required
-                    String _val847; // required
-                    _key846 = iprot.readString();
-                    _val847 = iprot.readString();
-                    struct.part_vals.put(_key846, _val847);
+                    String _key862; // required
+                    String _val863; // required
+                    _key862 = iprot.readString();
+                    _val863 = iprot.readString();
+                    struct.part_vals.put(_key862, _val863);
                   }
                   iprot.readMapEnd();
                 }
@@ -84767,10 +87579,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, isPartitionMarkedF
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (Map.Entry<String, String> _iter848 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter864 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter848.getKey());
-              oprot.writeString(_iter848.getValue());
+              oprot.writeString(_iter864.getKey());
+              oprot.writeString(_iter864.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -84821,10 +87633,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, isPartitionMarkedFo
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (Map.Entry<String, String> _iter849 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter865 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter849.getKey());
-              oprot.writeString(_iter849.getValue());
+              oprot.writeString(_iter865.getKey());
+              oprot.writeString(_iter865.getValue());
             }
           }
         }
@@ -84847,15 +87659,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, isPartitionMarkedFor
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TMap _map850 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new HashMap<String,String>(2*_map850.size);
-            for (int _i851 = 0; _i851 < _map850.size; ++_i851)
+            org.apache.thrift.protocol.TMap _map866 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new HashMap<String,String>(2*_map866.size);
+            for (int _i867 = 0; _i867 < _map866.size; ++_i867)
             {
-              String _key852; // required
-              String _val853; // required
-              _key852 = iprot.readString();
-              _val853 = iprot.readString();
-              struct.part_vals.put(_key852, _val853);
+              String _key868; // required
+              String _val869; // required
+              _key868 = iprot.readString();
+              _val869 = iprot.readString();
+              struct.part_vals.put(_key868, _val869);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -91579,14 +94391,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_indexes_result
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list854 = iprot.readListBegin();
-                  struct.success = new ArrayList<Index>(_list854.size);
-                  for (int _i855 = 0; _i855 < _list854.size; ++_i855)
+                  org.apache.thrift.protocol.TList _list870 = iprot.readListBegin();
+                  struct.success = new ArrayList<Index>(_list870.size);
+                  for (int _i871 = 0; _i871 < _list870.size; ++_i871)
                   {
-                    Index _elem856; // required
-                    _elem856 = new Index();
-                    _elem856.read(iprot);
-                    struct.success.add(_elem856);
+                    Index _elem872; // required
+                    _elem872 = new Index();
+                    _elem872.read(iprot);
+                    struct.success.add(_elem872);
                   }
                   iprot.readListEnd();
                 }
@@ -91630,9 +94442,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_indexes_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Index _iter857 : struct.success)
+            for (Index _iter873 : struct.success)
             {
-              _iter857.write(oprot);
+              _iter873.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -91679,9 +94491,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_indexes_result
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Index _iter858 : struct.success)
+            for (Index _iter874 : struct.success)
             {
-              _iter858.write(oprot);
+              _iter874.write(oprot);
             }
           }
         }
@@ -91699,14 +94511,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_indexes_result s
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list859 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Index>(_list859.size);
-            for (int _i860 = 0; _i860 < _list859.size; ++_i860)
+            org.apache.thrift.protocol.TList _list875 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Index>(_list875.size);
+            for (int _i876 = 0; _i876 < _list875.size; ++_i876)
             {
-              Index _elem861; // required
-              _elem861 = new Index();
-              _elem861.read(iprot);
-              struct.success.add(_elem861);
+              Index _elem877; // required
+              _elem877 = new Index();
+              _elem877.read(iprot);
+              struct.success.add(_elem877);
             }
           }
           struct.setSuccessIsSet(true);
@@ -92688,13 +95500,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_index_names_res
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list862 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list862.size);
-                  for (int _i863 = 0; _i863 < _list862.size; ++_i863)
+                  org.apache.thrift.protocol.TList _list878 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list878.size);
+                  for (int _i879 = 0; _i879 < _list878.size; ++_i879)
                   {
-                    String _elem864; // required
-                    _elem864 = iprot.readString();
-                    struct.success.add(_elem864);
+                    String _elem880; // required
+                    _elem880 = iprot.readString();
+                    struct.success.add(_elem880);
                   }
                   iprot.readListEnd();
                 }
@@ -92729,9 +95541,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_index_names_re
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter865 : struct.success)
+            for (String _iter881 : struct.success)
             {
-              oprot.writeString(_iter865);
+              oprot.writeString(_iter881);
             }
             oprot.writeListEnd();
           }
@@ -92770,9 +95582,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_index_names_res
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter866 : struct.success)
+            for (String _iter882 : struct.success)
             {
-              oprot.writeString(_iter866);
+              oprot.writeString(_iter882);
             }
           }
         }
@@ -92787,13 +95599,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_index_names_resu
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list867 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list867.size);
-            for (int _i868 = 0; _i868 < _list867.size; ++_i868)
+            org.apache.thrift.protocol.TList _list883 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list883.size);
+            for (int _i884 = 0; _i884 < _list883.size; ++_i884)
             {
-              String _elem869; // required
-              _elem869 = iprot.readString();
-              struct.success.add(_elem869);
+              String _elem885; // required
+              _elem885 = iprot.readString();
+              struct.success.add(_elem885);
             }
           }
           struct.setSuccessIsSet(true);
@@ -108531,13 +111343,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_functions_resul
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list870 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list870.size);
-                  for (int _i871 = 0; _i871 < _list870.size; ++_i871)
+                  org.apache.thrift.protocol.TList _list886 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list886.size);
+                  for (int _i887 = 0; _i887 < _list886.size; ++_i887)
                   {
-                    String _elem872; // required
-                    _elem872 = iprot.readString();
-                    struct.success.add(_elem872);
+                    String _elem888; // required
+                    _elem888 = iprot.readString();
+                    struct.success.add(_elem888);
                   }
                   iprot.readListEnd();
                 }
@@ -108572,9 +111384,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_functions_resu
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter873 : struct.success)
+            for (String _iter889 : struct.success)
             {
-              oprot.writeString(_iter873);
+              oprot.writeString(_iter889);
             }
             oprot.writeListEnd();
           }
@@ -108613,9 +111425,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_functions_resul
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter874 : struct.success)
+            for (String _iter890 : struct.success)
             {
-              oprot.writeString(_iter874);
+              oprot.writeString(_iter890);
             }
           }
         }
@@ -108630,13 +111442,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_functions_result
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list875 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list875.size);
-            for (int _i876 = 0; _i876 < _list875.size; ++_i876)
+            org.apache.thrift.protocol.TList _list891 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list891.size);
+            for (int _i892 = 0; _i892 < _list891.size; ++_i892)
             {
-              String _elem877; // required
-              _elem877 = iprot.readString();
-              struct.success.add(_elem877);
+              String _elem893; // required
+              _elem893 = iprot.readString();
+              struct.success.add(_elem893);
             }
           }
           struct.setSuccessIsSet(true);
@@ -111979,13 +114791,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_role_names_resu
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list878 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list878.size);
-                  for (int _i879 = 0; _i879 < _list878.size; ++_i879)
+                  org.apache.thrift.protocol.TList _list894 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list894.size);
+                  for (int _i895 = 0; _i895 < _list894.size; ++_i895)
                   {
-                    String _elem880; // required
-                    _elem880 = iprot.readString();
-                    struct.success.add(_elem880);
+                    String _elem896; // required
+                    _elem896 = iprot.readString();
+                    struct.success.add(_elem896);
                   }
                   iprot.readListEnd();
                 }
@@ -112020,9 +114832,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_role_names_res
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter881 : struct.success)
+            for (String _iter897 : struct.success)
             {
-              oprot.writeString(_iter881);
+              oprot.writeString(_iter897);
             }
             oprot.writeListEnd();
           }
@@ -112061,9 +114873,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_role_names_resu
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter882 : struct.success)
+            for (String _iter898 : struct.success)
             {
-              oprot.writeString(_iter882);
+              oprot.writeString(_iter898);
             }
           }
         }
@@ -112078,13 +114890,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_role_names_resul
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list883 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list883.size);
-            for (int _i884 = 0; _i884 < _list883.size; ++_i884)
+            org.apache.thrift.protocol.TList _list899 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list899.size);
+            for (int _i900 = 0; _i900 < _list899.size; ++_i900)
             {
-              String _elem885; // required
-              _elem885 = iprot.readString();
-              struct.success.add(_elem885);
+              String _elem901; // required
+              _elem901 = iprot.readString();
+              struct.success.add(_elem901);
             }
           }
           struct.setSuccessIsSet(true);
@@ -115375,14 +118187,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, list_roles_result s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list886 = iprot.readListBegin();
-                  struct.success = new ArrayList<Role>(_list886.size);
-                  for (int _i887 = 0; _i887 < _list886.size; ++_i887)
+                  org.apache.thrift.protocol.TList _list902 = iprot.readListBegin();
+                  struct.success = new ArrayList<Role>(_list902.size);
+                  for (int _i903 = 0; _i903 < _list902.size; ++_i903)
                   {
-                    Role _elem888; // required
-                    _elem888 = new Role();
-                    _elem888.read(iprot);
-                    struct.success.add(_elem888);
+                    Role _elem904; // required
+                    _elem904 = new Role();
+                    _elem904.read(iprot);
+                    struct.success.add(_elem904);
                   }
                   iprot.readListEnd();
                 }
@@ -115417,9 +118229,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, list_roles_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Role _iter889 : struct.success)
+            for (Role _iter905 : struct.success)
             {
-              _iter889.write(oprot);
+              _iter905.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -115458,9 +118270,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, list_roles_result s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Role _iter890 : struct.success)
+            for (Role _iter906 : struct.success)
             {
-              _iter890.write(oprot);
+              _iter906.write(oprot);
             }
           }
         }
@@ -115475,14 +118287,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, list_roles_result st
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list891 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Role>(_list891.size);
-            for (int _i892 = 0; _i892 < _list891.size; ++_i892)
+            org.apache.thrift.protocol.TList _list907 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Role>(_list907.size);
+            for (int _i908 = 0; _i908 < _list907.size; ++_i908)
             {
-              Role _elem893; // required
-              _elem893 = new Role();
-              _elem893.read(iprot);
-              struct.success.add(_elem893);
+              Role _elem909; // required
+              _elem909 = new Role();
+              _elem909.read(iprot);
+              struct.success.add(_elem909);
             }
           }
           struct.setSuccessIsSet(true);
@@ -118490,13 +121302,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_privilege_set_a
             case 3: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list894 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list894.size);
-                  for (int _i895 = 0; _i895 < _list894.size; ++_i895)
+                  org.apache.thrift.protocol.TList _list910 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list910.size);
+                  for (int _i911 = 0; _i911 < _list910.size; ++_i911)
                   {
-                    String _elem896; // required
-                    _elem896 = iprot.readString();
-                    struct.group_names.add(_elem896);
+                    String _elem912; // required
+                    _elem912 = iprot.readString();
+                    struct.group_names.add(_elem912);
                   }
                   iprot.readListEnd();
                 }
@@ -118532,9 +121344,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_privilege_set_
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter897 : struct.group_names)
+            for (String _iter913 : struct.group_names)
             {
-              oprot.writeString(_iter897);
+              oprot.writeString(_iter913);
             }
             oprot.writeListEnd();
           }
@@ -118577,9 +121389,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_privilege_set_a
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter898 : struct.group_names)
+            for (String _iter914 : struct.group_names)
             {
-              oprot.writeString(_iter898);
+              oprot.writeString(_iter914);
             }
           }
         }
@@ -118600,13 +121412,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_privilege_set_ar
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list899 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list899.size);
-            for (int _i900 = 0; _i900 < _list899.size; ++_i900)
+            org.apache.thrift.protocol.TList _list915 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list915.size);
+            for (int _i916 = 0; _i916 < _list915.size; ++_i916)
             {
-              String _elem901; // required
-              _elem901 = iprot.readString();
-              struct.group_names.add(_elem901);
+              String _elem917; // required
+              _elem917 = iprot.readString();
+              struct.group_names.add(_elem917);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -120064,14 +122876,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, list_privileges_res
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list902 = iprot.readListBegin();
-                  struct.success = new ArrayList<HiveObjectPrivilege>(_list902.size);
-                  for (int _i903 = 0; _i903 < _list902.size; ++_i903)
+                  org.apache.thrift.protocol.TList _list918 = iprot.readListBegin();
+                  struct.success = new ArrayList<HiveObjectPrivilege>(_list918.size);
+                  for (int _i919 = 0; _i919 < _list918.size; ++_i919)
                   {
-                    HiveObjectPrivilege _elem904; // required
-                    _elem904 = new HiveObjectPrivilege();
-                    _elem904.read(iprot);
-                    struct.success.add(_elem904);
+                    HiveObjectPrivilege _elem920; // required
+                    _elem920 = new HiveObjectPrivilege();
+                    _elem920.read(iprot);
+                    struct.success.add(_elem920);
                   }
                   iprot.readListEnd();
                 }
@@ -120106,9 +122918,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, list_privileges_re
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (HiveObjectPrivilege _iter905 : struct.success)
+            for (HiveObjectPrivilege _iter921 : struct.success)
             {
-              _iter905.write(oprot);
+              _iter921.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -120147,9 +122959,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, list_privileges_res
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (HiveObjectPrivilege _iter906 : struct.success)
+            for (HiveObjectPrivilege _iter922 : struct.success)
             {
-              _iter906.write(oprot);
+              _iter922.write(oprot);
             }
           }
         }
@@ -120164,14 +122976,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, list_privileges_resu
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list907 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<HiveObjectPrivilege>(_list907.size);
-            for (int _i908 = 0; _i908 < _list907.size; ++_i908)
+            org.apache.thrift.protocol.TList _list923 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<HiveObjectPrivilege>(_list923.size);
+            for (int _i924 = 0; _i924 < _list923.size; ++_i924)
             {
-              HiveObjectPrivilege _elem909; // required
-              _elem909 = new HiveObjectPrivilege();
-              _elem909.read(iprot);
-              struct.success.add(_elem909);
+              HiveObjectPrivilege _elem925; // required
+              _elem925 = new HiveObjectPrivilege();
+              _elem925.read(iprot);
+              struct.success.add(_elem925);
             }
           }
           struct.setSuccessIsSet(true);
@@ -123076,13 +125888,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, set_ugi_args struct
             case 2: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list910 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list910.size);
-                  for (int _i911 = 0; _i911 < _list910.size; ++_i911)
+                  org.apache.thrift.protocol.TList _list926 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list926.size);
+                  for (int _i927 = 0; _i927 < _list926.size; ++_i927)
                   {
-                    String _elem912; // required
-                    _elem912 = iprot.readString();
-                    struct.group_names.add(_elem912);
+                    String _elem928; // required
+                    _elem928 = iprot.readString();
+                    struct.group_names.add(_elem928);
                   }
                   iprot.readListEnd();
                 }
@@ -123113,9 +125925,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, set_ugi_args struc
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter913 : struct.group_names)
+            for (String _iter929 : struct.group_names)
             {
-              oprot.writeString(_iter913);
+              oprot.writeString(_iter929);
             }
             oprot.writeListEnd();
           }
@@ -123152,9 +125964,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, set_ugi_args struct
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter914 : struct.group_names)
+            for (String _iter930 : struct.group_names)
             {
-              oprot.writeString(_iter914);
+              oprot.writeString(_iter930);
             }
           }
         }
@@ -123170,13 +125982,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, set_ugi_args struct)
         }
         if (incoming.get(1)) {
           {
-            org.apache.thrift.protocol.TList _list915 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list915.size);
-            for (int _i916 = 0; _i916 < _list915.size; ++_i916)
+            org.apache.thrift.protocol.TList _list931 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list931.size);
+            for (int _i932 = 0; _i932 < _list931.size; ++_i932)
             {
-              String _elem917; // required
-              _elem917 = iprot.readString();
-              struct.group_names.add(_elem917);
+              String _elem933; // required
+              _elem933 = iprot.readString();
+              struct.group_names.add(_elem933);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -123582,13 +126394,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, set_ugi_result stru
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list918 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list918.size);
-                  for (int _i919 = 0; _i919 < _list918.size; ++_i919)
+                  org.apache.thrift.protocol.TList _list934 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list934.size);
+                  for (int _i935 = 0; _i935 < _list934.size; ++_i935)
                   {
-                    String _elem920; // required
-                    _elem920 = iprot.readString();
-                    struct.success.add(_elem920);
+                    String _elem936; // required
+                    _elem936 = iprot.readString();
+                    struct.success.add(_elem936);
                   }
                   iprot.readListEnd();
                 }
@@ -123623,9 +126435,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, set_ugi_result str
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter921 : struct.success)
+            for (String _iter937 : struct.success)
             {
-              oprot.writeString(_iter921);
+              oprot.writeString(_iter937);
             }
             oprot.writeListEnd();
           }
@@ -123664,9 +126476,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, set_ugi_result stru
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter922 : struct.success)
+            for (String _iter938 : struct.success)
             {
-              oprot.writeString(_iter922);
+              oprot.writeString(_iter938);
             }
           }
         }
@@ -123681,13 +126493,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, set_ugi_result struc
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list923 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list923.size);
-            for (int _i924 = 0; _i924 < _list923.size; ++_i924)
+            org.apache.thrift.protocol.TList _list939 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list939.size);
+            for (int _i940 = 0; _i940 < _list939.size; ++_i940)
             {
-              String _elem925; // required
-              _elem925 = iprot.readString();
-              struct.success.add(_elem925);
+              String _elem941; // required
+              _elem941 = iprot.readString();
+              struct.success.add(_elem941);
             }
           }
           struct.setSuccessIsSet(true);
diff --git a/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php b/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
index 2d1f935..c915929 100644
--- a/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
+++ b/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
@@ -29,7 +29,9 @@ interface ThriftHiveMetastoreIf extends \FacebookServiceIf {
   public function drop_type($type);
   public function get_type_all($name);
   public function get_fields($db_name, $table_name);
+  public function get_fields_with_environment_context($db_name, $table_name, \metastore\EnvironmentContext $environment_context);
   public function get_schema($db_name, $table_name);
+  public function get_schema_with_environment_context($db_name, $table_name, \metastore\EnvironmentContext $environment_context);
   public function create_table(\metastore\Table $tbl);
   public function create_table_with_environment_context(\metastore\Table $tbl, \metastore\EnvironmentContext $environment_context);
   public function drop_table($dbname, $name, $deleteData);
@@ -872,6 +874,68 @@ class ThriftHiveMetastoreClient extends \FacebookServiceClient implements \metas
     throw new \Exception("get_fields failed: unknown result");
   }
 
+  public function get_fields_with_environment_context($db_name, $table_name, \metastore\EnvironmentContext $environment_context)
+  {
+    $this->send_get_fields_with_environment_context($db_name, $table_name, $environment_context);
+    return $this->recv_get_fields_with_environment_context();
+  }
+
+  public function send_get_fields_with_environment_context($db_name, $table_name, \metastore\EnvironmentContext $environment_context)
+  {
+    $args = new \metastore\ThriftHiveMetastore_get_fields_with_environment_context_args();
+    $args->db_name = $db_name;
+    $args->table_name = $table_name;
+    $args->environment_context = $environment_context;
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'get_fields_with_environment_context', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('get_fields_with_environment_context', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_get_fields_with_environment_context()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_get_fields_with_environment_context_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_get_fields_with_environment_context_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    if ($result->o1 !== null) {
+      throw $result->o1;
+    }
+    if ($result->o2 !== null) {
+      throw $result->o2;
+    }
+    if ($result->o3 !== null) {
+      throw $result->o3;
+    }
+    throw new \Exception("get_fields_with_environment_context failed: unknown result");
+  }
+
   public function get_schema($db_name, $table_name)
   {
     $this->send_get_schema($db_name, $table_name);
@@ -933,6 +997,68 @@ class ThriftHiveMetastoreClient extends \FacebookServiceClient implements \metas
     throw new \Exception("get_schema failed: unknown result");
   }
 
+  public function get_schema_with_environment_context($db_name, $table_name, \metastore\EnvironmentContext $environment_context)
+  {
+    $this->send_get_schema_with_environment_context($db_name, $table_name, $environment_context);
+    return $this->recv_get_schema_with_environment_context();
+  }
+
+  public function send_get_schema_with_environment_context($db_name, $table_name, \metastore\EnvironmentContext $environment_context)
+  {
+    $args = new \metastore\ThriftHiveMetastore_get_schema_with_environment_context_args();
+    $args->db_name = $db_name;
+    $args->table_name = $table_name;
+    $args->environment_context = $environment_context;
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'get_schema_with_environment_context', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('get_schema_with_environment_context', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_get_schema_with_environment_context()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_get_schema_with_environment_context_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_get_schema_with_environment_context_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    if ($result->o1 !== null) {
+      throw $result->o1;
+    }
+    if ($result->o2 !== null) {
+      throw $result->o2;
+    }
+    if ($result->o3 !== null) {
+      throw $result->o3;
+    }
+    throw new \Exception("get_schema_with_environment_context failed: unknown result");
+  }
+
   public function create_table(\metastore\Table $tbl)
   {
     $this->send_create_table($tbl);
@@ -9552,11 +9678,12 @@ class ThriftHiveMetastore_get_fields_result {
 
 }
 
-class ThriftHiveMetastore_get_schema_args {
+class ThriftHiveMetastore_get_fields_with_environment_context_args {
   static $_TSPEC;
 
   public $db_name = null;
   public $table_name = null;
+  public $environment_context = null;
 
   public function __construct($vals=null) {
     if (!isset(self::$_TSPEC)) {
@@ -9569,6 +9696,11 @@ class ThriftHiveMetastore_get_schema_args {
           'var' => 'table_name',
           'type' => TType::STRING,
           ),
+        3 => array(
+          'var' => 'environment_context',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\EnvironmentContext',
+          ),
         );
     }
     if (is_array($vals)) {
@@ -9578,11 +9710,14 @@ class ThriftHiveMetastore_get_schema_args {
       if (isset($vals['table_name'])) {
         $this->table_name = $vals['table_name'];
       }
+      if (isset($vals['environment_context'])) {
+        $this->environment_context = $vals['environment_context'];
+      }
     }
   }
 
   public function getName() {
-    return 'ThriftHiveMetastore_get_schema_args';
+    return 'ThriftHiveMetastore_get_fields_with_environment_context_args';
   }
 
   public function read($input)
@@ -9614,6 +9749,14 @@ class ThriftHiveMetastore_get_schema_args {
             $xfer += $input->skip($ftype);
           }
           break;
+        case 3:
+          if ($ftype == TType::STRUCT) {
+            $this->environment_context = new \metastore\EnvironmentContext();
+            $xfer += $this->environment_context->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
         default:
           $xfer += $input->skip($ftype);
           break;
@@ -9626,7 +9769,7 @@ class ThriftHiveMetastore_get_schema_args {
 
   public function write($output) {
     $xfer = 0;
-    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_schema_args');
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_fields_with_environment_context_args');
     if ($this->db_name !== null) {
       $xfer += $output->writeFieldBegin('db_name', TType::STRING, 1);
       $xfer += $output->writeString($this->db_name);
@@ -9637,6 +9780,14 @@ class ThriftHiveMetastore_get_schema_args {
       $xfer += $output->writeString($this->table_name);
       $xfer += $output->writeFieldEnd();
     }
+    if ($this->environment_context !== null) {
+      if (!is_object($this->environment_context)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('environment_context', TType::STRUCT, 3);
+      $xfer += $this->environment_context->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
     $xfer += $output->writeFieldStop();
     $xfer += $output->writeStructEnd();
     return $xfer;
@@ -9644,7 +9795,7 @@ class ThriftHiveMetastore_get_schema_args {
 
 }
 
-class ThriftHiveMetastore_get_schema_result {
+class ThriftHiveMetastore_get_fields_with_environment_context_result {
   static $_TSPEC;
 
   public $success = null;
@@ -9698,7 +9849,7 @@ class ThriftHiveMetastore_get_schema_result {
   }
 
   public function getName() {
-    return 'ThriftHiveMetastore_get_schema_result';
+    return 'ThriftHiveMetastore_get_fields_with_environment_context_result';
   }
 
   public function read($input)
@@ -9770,7 +9921,7 @@ class ThriftHiveMetastore_get_schema_result {
 
   public function write($output) {
     $xfer = 0;
-    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_schema_result');
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_fields_with_environment_context_result');
     if ($this->success !== null) {
       if (!is_array($this->success)) {
         throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
@@ -9810,30 +9961,37 @@ class ThriftHiveMetastore_get_schema_result {
 
 }
 
-class ThriftHiveMetastore_create_table_args {
+class ThriftHiveMetastore_get_schema_args {
   static $_TSPEC;
 
-  public $tbl = null;
+  public $db_name = null;
+  public $table_name = null;
 
   public function __construct($vals=null) {
     if (!isset(self::$_TSPEC)) {
       self::$_TSPEC = array(
         1 => array(
-          'var' => 'tbl',
-          'type' => TType::STRUCT,
-          'class' => '\metastore\Table',
+          'var' => 'db_name',
+          'type' => TType::STRING,
+          ),
+        2 => array(
+          'var' => 'table_name',
+          'type' => TType::STRING,
           ),
         );
     }
     if (is_array($vals)) {
-      if (isset($vals['tbl'])) {
-        $this->tbl = $vals['tbl'];
+      if (isset($vals['db_name'])) {
+        $this->db_name = $vals['db_name'];
+      }
+      if (isset($vals['table_name'])) {
+        $this->table_name = $vals['table_name'];
       }
     }
   }
 
   public function getName() {
-    return 'ThriftHiveMetastore_create_table_args';
+    return 'ThriftHiveMetastore_get_schema_args';
   }
 
   public function read($input)
@@ -9852,9 +10010,15 @@ class ThriftHiveMetastore_create_table_args {
       switch ($fid)
       {
         case 1:
-          if ($ftype == TType::STRUCT) {
-            $this->tbl = new \metastore\Table();
-            $xfer += $this->tbl->read($input);
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->db_name);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 2:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->table_name);
           } else {
             $xfer += $input->skip($ftype);
           }
@@ -9871,13 +10035,15 @@ class ThriftHiveMetastore_create_table_args {
 
   public function write($output) {
     $xfer = 0;
-    $xfer += $output->writeStructBegin('ThriftHiveMetastore_create_table_args');
-    if ($this->tbl !== null) {
-      if (!is_object($this->tbl)) {
-        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
-      }
-      $xfer += $output->writeFieldBegin('tbl', TType::STRUCT, 1);
-      $xfer += $this->tbl->write($output);
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_schema_args');
+    if ($this->db_name !== null) {
+      $xfer += $output->writeFieldBegin('db_name', TType::STRING, 1);
+      $xfer += $output->writeString($this->db_name);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->table_name !== null) {
+      $xfer += $output->writeFieldBegin('table_name', TType::STRING, 2);
+      $xfer += $output->writeString($this->table_name);
       $xfer += $output->writeFieldEnd();
     }
     $xfer += $output->writeFieldStop();
@@ -9887,40 +10053,47 @@ class ThriftHiveMetastore_create_table_args {
 
 }
 
-class ThriftHiveMetastore_create_table_result {
+class ThriftHiveMetastore_get_schema_result {
   static $_TSPEC;
 
+  public $success = null;
   public $o1 = null;
   public $o2 = null;
   public $o3 = null;
-  public $o4 = null;
 
   public function __construct($vals=null) {
     if (!isset(self::$_TSPEC)) {
       self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::LST,
+          'etype' => TType::STRUCT,
+          'elem' => array(
+            'type' => TType::STRUCT,
+            'class' => '\metastore\FieldSchema',
+            ),
+          ),
         1 => array(
           'var' => 'o1',
           'type' => TType::STRUCT,
-          'class' => '\metastore\AlreadyExistsException',
+          'class' => '\metastore\MetaException',
           ),
         2 => array(
           'var' => 'o2',
           'type' => TType::STRUCT,
-          'class' => '\metastore\InvalidObjectException',
+          'class' => '\metastore\UnknownTableException',
           ),
         3 => array(
           'var' => 'o3',
           'type' => TType::STRUCT,
-          'class' => '\metastore\MetaException',
-          ),
-        4 => array(
-          'var' => 'o4',
-          'type' => TType::STRUCT,
-          'class' => '\metastore\NoSuchObjectException',
+          'class' => '\metastore\UnknownDBException',
           ),
         );
     }
     if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
       if (isset($vals['o1'])) {
         $this->o1 = $vals['o1'];
       }
@@ -9930,14 +10103,11 @@ class ThriftHiveMetastore_create_table_result {
       if (isset($vals['o3'])) {
         $this->o3 = $vals['o3'];
       }
-      if (isset($vals['o4'])) {
-        $this->o4 = $vals['o4'];
-      }
     }
   }
 
   public function getName() {
-    return 'ThriftHiveMetastore_create_table_result';
+    return 'ThriftHiveMetastore_get_schema_result';
   }
 
   public function read($input)
@@ -9955,9 +10125,27 @@ class ThriftHiveMetastore_create_table_result {
       }
       switch ($fid)
       {
+        case 0:
+          if ($ftype == TType::LST) {
+            $this->success = array();
+            $_size481 = 0;
+            $_etype484 = 0;
+            $xfer += $input->readListBegin($_etype484, $_size481);
+            for ($_i485 = 0; $_i485 < $_size481; ++$_i485)
+            {
+              $elem486 = null;
+              $elem486 = new \metastore\FieldSchema();
+              $xfer += $elem486->read($input);
+              $this->success []= $elem486;
+            }
+            $xfer += $input->readListEnd();
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
         case 1:
           if ($ftype == TType::STRUCT) {
-            $this->o1 = new \metastore\AlreadyExistsException();
+            $this->o1 = new \metastore\MetaException();
             $xfer += $this->o1->read($input);
           } else {
             $xfer += $input->skip($ftype);
@@ -9965,7 +10153,7 @@ class ThriftHiveMetastore_create_table_result {
           break;
         case 2:
           if ($ftype == TType::STRUCT) {
-            $this->o2 = new \metastore\InvalidObjectException();
+            $this->o2 = new \metastore\UnknownTableException();
             $xfer += $this->o2->read($input);
           } else {
             $xfer += $input->skip($ftype);
@@ -9973,20 +10161,12 @@ class ThriftHiveMetastore_create_table_result {
           break;
         case 3:
           if ($ftype == TType::STRUCT) {
-            $this->o3 = new \metastore\MetaException();
+            $this->o3 = new \metastore\UnknownDBException();
             $xfer += $this->o3->read($input);
           } else {
             $xfer += $input->skip($ftype);
           }
           break;
-        case 4:
-          if ($ftype == TType::STRUCT) {
-            $this->o4 = new \metastore\NoSuchObjectException();
-            $xfer += $this->o4->read($input);
-          } else {
-            $xfer += $input->skip($ftype);
-          }
-          break;
         default:
           $xfer += $input->skip($ftype);
           break;
@@ -9999,17 +10179,529 @@ class ThriftHiveMetastore_create_table_result {
 
   public function write($output) {
     $xfer = 0;
-    $xfer += $output->writeStructBegin('ThriftHiveMetastore_create_table_result');
-    if ($this->o1 !== null) {
-      $xfer += $output->writeFieldBegin('o1', TType::STRUCT, 1);
-      $xfer += $this->o1->write($output);
-      $xfer += $output->writeFieldEnd();
-    }
-    if ($this->o2 !== null) {
-      $xfer += $output->writeFieldBegin('o2', TType::STRUCT, 2);
-      $xfer += $this->o2->write($output);
-      $xfer += $output->writeFieldEnd();
-    }
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_schema_result');
+    if ($this->success !== null) {
+      if (!is_array($this->success)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
+      {
+        $output->writeListBegin(TType::STRUCT, count($this->success));
+        {
+          foreach ($this->success as $iter487)
+          {
+            $xfer += $iter487->write($output);
+          }
+        }
+        $output->writeListEnd();
+      }
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o1 !== null) {
+      $xfer += $output->writeFieldBegin('o1', TType::STRUCT, 1);
+      $xfer += $this->o1->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o2 !== null) {
+      $xfer += $output->writeFieldBegin('o2', TType::STRUCT, 2);
+      $xfer += $this->o2->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o3 !== null) {
+      $xfer += $output->writeFieldBegin('o3', TType::STRUCT, 3);
+      $xfer += $this->o3->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_get_schema_with_environment_context_args {
+  static $_TSPEC;
+
+  public $db_name = null;
+  public $table_name = null;
+  public $environment_context = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'db_name',
+          'type' => TType::STRING,
+          ),
+        2 => array(
+          'var' => 'table_name',
+          'type' => TType::STRING,
+          ),
+        3 => array(
+          'var' => 'environment_context',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\EnvironmentContext',
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['db_name'])) {
+        $this->db_name = $vals['db_name'];
+      }
+      if (isset($vals['table_name'])) {
+        $this->table_name = $vals['table_name'];
+      }
+      if (isset($vals['environment_context'])) {
+        $this->environment_context = $vals['environment_context'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_schema_with_environment_context_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->db_name);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 2:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->table_name);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 3:
+          if ($ftype == TType::STRUCT) {
+            $this->environment_context = new \metastore\EnvironmentContext();
+            $xfer += $this->environment_context->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_schema_with_environment_context_args');
+    if ($this->db_name !== null) {
+      $xfer += $output->writeFieldBegin('db_name', TType::STRING, 1);
+      $xfer += $output->writeString($this->db_name);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->table_name !== null) {
+      $xfer += $output->writeFieldBegin('table_name', TType::STRING, 2);
+      $xfer += $output->writeString($this->table_name);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->environment_context !== null) {
+      if (!is_object($this->environment_context)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('environment_context', TType::STRUCT, 3);
+      $xfer += $this->environment_context->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_get_schema_with_environment_context_result {
+  static $_TSPEC;
+
+  public $success = null;
+  public $o1 = null;
+  public $o2 = null;
+  public $o3 = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::LST,
+          'etype' => TType::STRUCT,
+          'elem' => array(
+            'type' => TType::STRUCT,
+            'class' => '\metastore\FieldSchema',
+            ),
+          ),
+        1 => array(
+          'var' => 'o1',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\MetaException',
+          ),
+        2 => array(
+          'var' => 'o2',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\UnknownTableException',
+          ),
+        3 => array(
+          'var' => 'o3',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\UnknownDBException',
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
+      if (isset($vals['o1'])) {
+        $this->o1 = $vals['o1'];
+      }
+      if (isset($vals['o2'])) {
+        $this->o2 = $vals['o2'];
+      }
+      if (isset($vals['o3'])) {
+        $this->o3 = $vals['o3'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_schema_with_environment_context_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 0:
+          if ($ftype == TType::LST) {
+            $this->success = array();
+            $_size488 = 0;
+            $_etype491 = 0;
+            $xfer += $input->readListBegin($_etype491, $_size488);
+            for ($_i492 = 0; $_i492 < $_size488; ++$_i492)
+            {
+              $elem493 = null;
+              $elem493 = new \metastore\FieldSchema();
+              $xfer += $elem493->read($input);
+              $this->success []= $elem493;
+            }
+            $xfer += $input->readListEnd();
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 1:
+          if ($ftype == TType::STRUCT) {
+            $this->o1 = new \metastore\MetaException();
+            $xfer += $this->o1->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 2:
+          if ($ftype == TType::STRUCT) {
+            $this->o2 = new \metastore\UnknownTableException();
+            $xfer += $this->o2->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 3:
+          if ($ftype == TType::STRUCT) {
+            $this->o3 = new \metastore\UnknownDBException();
+            $xfer += $this->o3->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_schema_with_environment_context_result');
+    if ($this->success !== null) {
+      if (!is_array($this->success)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
+      {
+        $output->writeListBegin(TType::STRUCT, count($this->success));
+        {
+          foreach ($this->success as $iter494)
+          {
+            $xfer += $iter494->write($output);
+          }
+        }
+        $output->writeListEnd();
+      }
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o1 !== null) {
+      $xfer += $output->writeFieldBegin('o1', TType::STRUCT, 1);
+      $xfer += $this->o1->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o2 !== null) {
+      $xfer += $output->writeFieldBegin('o2', TType::STRUCT, 2);
+      $xfer += $this->o2->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o3 !== null) {
+      $xfer += $output->writeFieldBegin('o3', TType::STRUCT, 3);
+      $xfer += $this->o3->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_create_table_args {
+  static $_TSPEC;
+
+  public $tbl = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'tbl',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\Table',
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['tbl'])) {
+        $this->tbl = $vals['tbl'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_create_table_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::STRUCT) {
+            $this->tbl = new \metastore\Table();
+            $xfer += $this->tbl->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_create_table_args');
+    if ($this->tbl !== null) {
+      if (!is_object($this->tbl)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('tbl', TType::STRUCT, 1);
+      $xfer += $this->tbl->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_create_table_result {
+  static $_TSPEC;
+
+  public $o1 = null;
+  public $o2 = null;
+  public $o3 = null;
+  public $o4 = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'o1',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\AlreadyExistsException',
+          ),
+        2 => array(
+          'var' => 'o2',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\InvalidObjectException',
+          ),
+        3 => array(
+          'var' => 'o3',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\MetaException',
+          ),
+        4 => array(
+          'var' => 'o4',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\NoSuchObjectException',
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['o1'])) {
+        $this->o1 = $vals['o1'];
+      }
+      if (isset($vals['o2'])) {
+        $this->o2 = $vals['o2'];
+      }
+      if (isset($vals['o3'])) {
+        $this->o3 = $vals['o3'];
+      }
+      if (isset($vals['o4'])) {
+        $this->o4 = $vals['o4'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_create_table_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::STRUCT) {
+            $this->o1 = new \metastore\AlreadyExistsException();
+            $xfer += $this->o1->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 2:
+          if ($ftype == TType::STRUCT) {
+            $this->o2 = new \metastore\InvalidObjectException();
+            $xfer += $this->o2->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 3:
+          if ($ftype == TType::STRUCT) {
+            $this->o3 = new \metastore\MetaException();
+            $xfer += $this->o3->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 4:
+          if ($ftype == TType::STRUCT) {
+            $this->o4 = new \metastore\NoSuchObjectException();
+            $xfer += $this->o4->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_create_table_result');
+    if ($this->o1 !== null) {
+      $xfer += $output->writeFieldBegin('o1', TType::STRUCT, 1);
+      $xfer += $this->o1->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o2 !== null) {
+      $xfer += $output->writeFieldBegin('o2', TType::STRUCT, 2);
+      $xfer += $this->o2->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
     if ($this->o3 !== null) {
       $xfer += $output->writeFieldBegin('o3', TType::STRUCT, 3);
       $xfer += $this->o3->write($output);
@@ -10858,14 +11550,14 @@ class ThriftHiveMetastore_get_tables_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size481 = 0;
-            $_etype484 = 0;
-            $xfer += $input->readListBegin($_etype484, $_size481);
-            for ($_i485 = 0; $_i485 < $_size481; ++$_i485)
+            $_size495 = 0;
+            $_etype498 = 0;
+            $xfer += $input->readListBegin($_etype498, $_size495);
+            for ($_i499 = 0; $_i499 < $_size495; ++$_i499)
             {
-              $elem486 = null;
-              $xfer += $input->readString($elem486);
-              $this->success []= $elem486;
+              $elem500 = null;
+              $xfer += $input->readString($elem500);
+              $this->success []= $elem500;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -10901,9 +11593,9 @@ class ThriftHiveMetastore_get_tables_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter487)
+          foreach ($this->success as $iter501)
           {
-            $xfer += $output->writeString($iter487);
+            $xfer += $output->writeString($iter501);
           }
         }
         $output->writeListEnd();
@@ -11050,14 +11742,14 @@ class ThriftHiveMetastore_get_all_tables_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size488 = 0;
-            $_etype491 = 0;
-            $xfer += $input->readListBegin($_etype491, $_size488);
-            for ($_i492 = 0; $_i492 < $_size488; ++$_i492)
+            $_size502 = 0;
+            $_etype505 = 0;
+            $xfer += $input->readListBegin($_etype505, $_size502);
+            for ($_i506 = 0; $_i506 < $_size502; ++$_i506)
             {
-              $elem493 = null;
-              $xfer += $input->readString($elem493);
-              $this->success []= $elem493;
+              $elem507 = null;
+              $xfer += $input->readString($elem507);
+              $this->success []= $elem507;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11093,9 +11785,9 @@ class ThriftHiveMetastore_get_all_tables_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter494)
+          foreach ($this->success as $iter508)
           {
-            $xfer += $output->writeString($iter494);
+            $xfer += $output->writeString($iter508);
           }
         }
         $output->writeListEnd();
@@ -11389,14 +12081,14 @@ class ThriftHiveMetastore_get_table_objects_by_name_args {
         case 2:
           if ($ftype == TType::LST) {
             $this->tbl_names = array();
-            $_size495 = 0;
-            $_etype498 = 0;
-            $xfer += $input->readListBegin($_etype498, $_size495);
-            for ($_i499 = 0; $_i499 < $_size495; ++$_i499)
+            $_size509 = 0;
+            $_etype512 = 0;
+            $xfer += $input->readListBegin($_etype512, $_size509);
+            for ($_i513 = 0; $_i513 < $_size509; ++$_i513)
             {
-              $elem500 = null;
-              $xfer += $input->readString($elem500);
-              $this->tbl_names []= $elem500;
+              $elem514 = null;
+              $xfer += $input->readString($elem514);
+              $this->tbl_names []= $elem514;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11429,9 +12121,9 @@ class ThriftHiveMetastore_get_table_objects_by_name_args {
       {
         $output->writeListBegin(TType::STRING, count($this->tbl_names));
         {
-          foreach ($this->tbl_names as $iter501)
+          foreach ($this->tbl_names as $iter515)
           {
-            $xfer += $output->writeString($iter501);
+            $xfer += $output->writeString($iter515);
           }
         }
         $output->writeListEnd();
@@ -11520,15 +12212,15 @@ class ThriftHiveMetastore_get_table_objects_by_name_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size502 = 0;
-            $_etype505 = 0;
-            $xfer += $input->readListBegin($_etype505, $_size502);
-            for ($_i506 = 0; $_i506 < $_size502; ++$_i506)
+            $_size516 = 0;
+            $_etype519 = 0;
+            $xfer += $input->readListBegin($_etype519, $_size516);
+            for ($_i520 = 0; $_i520 < $_size516; ++$_i520)
             {
-              $elem507 = null;
-              $elem507 = new \metastore\Table();
-              $xfer += $elem507->read($input);
-              $this->success []= $elem507;
+              $elem521 = null;
+              $elem521 = new \metastore\Table();
+              $xfer += $elem521->read($input);
+              $this->success []= $elem521;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11580,9 +12272,9 @@ class ThriftHiveMetastore_get_table_objects_by_name_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter508)
+          foreach ($this->success as $iter522)
           {
-            $xfer += $iter508->write($output);
+            $xfer += $iter522->write($output);
           }
         }
         $output->writeListEnd();
@@ -11797,14 +12489,14 @@ class ThriftHiveMetastore_get_table_names_by_filter_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size509 = 0;
-            $_etype512 = 0;
-            $xfer += $input->readListBegin($_etype512, $_size509);
-            for ($_i513 = 0; $_i513 < $_size509; ++$_i513)
+            $_size523 = 0;
+            $_etype526 = 0;
+            $xfer += $input->readListBegin($_etype526, $_size523);
+            for ($_i527 = 0; $_i527 < $_size523; ++$_i527)
             {
-              $elem514 = null;
-              $xfer += $input->readString($elem514);
-              $this->success []= $elem514;
+              $elem528 = null;
+              $xfer += $input->readString($elem528);
+              $this->success []= $elem528;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11856,9 +12548,9 @@ class ThriftHiveMetastore_get_table_names_by_filter_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter515)
+          foreach ($this->success as $iter529)
           {
-            $xfer += $output->writeString($iter515);
+            $xfer += $output->writeString($iter529);
           }
         }
         $output->writeListEnd();
@@ -13084,15 +13776,15 @@ class ThriftHiveMetastore_add_partitions_args {
         case 1:
           if ($ftype == TType::LST) {
             $this->new_parts = array();
-            $_size516 = 0;
-            $_etype519 = 0;
-            $xfer += $input->readListBegin($_etype519, $_size516);
-            for ($_i520 = 0; $_i520 < $_size516; ++$_i520)
+            $_size530 = 0;
+            $_etype533 = 0;
+            $xfer += $input->readListBegin($_etype533, $_size530);
+            for ($_i534 = 0; $_i534 < $_size530; ++$_i534)
             {
-              $elem521 = null;
-              $elem521 = new \metastore\Partition();
-              $xfer += $elem521->read($input);
-              $this->new_parts []= $elem521;
+              $elem535 = null;
+              $elem535 = new \metastore\Partition();
+              $xfer += $elem535->read($input);
+              $this->new_parts []= $elem535;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -13120,9 +13812,9 @@ class ThriftHiveMetastore_add_partitions_args {
       {
         $output->writeListBegin(TType::STRUCT, count($this->new_parts));
         {
-          foreach ($this->new_parts as $iter522)
+          foreach ($this->new_parts as $iter536)
           {
-            $xfer += $iter522->write($output);
+            $xfer += $iter536->write($output);
           }
         }
         $output->writeListEnd();
@@ -13322,15 +14014,15 @@ class ThriftHiveMetastore_add_partitions_pspec_args {
         case 1:
           if ($ftype == TType::LST) {
             $this->new_parts = array();
-            $_size523 = 0;
-            $_etype526 = 0;
-            $xfer += $input->readListBegin($_etype526, $_size523);
-            for ($_i527 = 0; $_i527 < $_size523; ++$_i527)
+            $_size537 = 0;
+            $_etype540 = 0;
+            $xfer += $input->readListBegin($_etype540, $_size537);
+            for ($_i541 = 0; $_i541 < $_size537; ++$_i541)
             {
-              $elem528 = null;
-              $elem528 = new \metastore\PartitionSpec();
-              $xfer += $elem528->read($input);
-              $this->new_parts []= $elem528;
+              $elem542 = null;
+              $elem542 = new \metastore\PartitionSpec();
+              $xfer += $elem542->read($input);
+              $this->new_parts []= $elem542;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -13358,9 +14050,9 @@ class ThriftHiveMetastore_add_partitions_pspec_args {
       {
         $output->writeListBegin(TType::STRUCT, count($this->new_parts));
         {
-          foreach ($this->new_parts as $iter529)
+          foreach ($this->new_parts as $iter543)
           {
-            $xfer += $iter529->write($output);
+            $xfer += $iter543->write($output);
           }
         }
         $output->writeListEnd();
@@ -13589,14 +14281,14 @@ class ThriftHiveMetastore_append_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size530 = 0;
-            $_etype533 = 0;
-            $xfer += $input->readListBegin($_etype533, $_size530);
-            for ($_i534 = 0; $_i534 < $_size530; ++$_i534)
+            $_size544 = 0;
+            $_etype547 = 0;
+            $xfer += $input->readListBegin($_etype547, $_size544);
+            for ($_i548 = 0; $_i548 < $_size544; ++$_i548)
             {
-              $elem535 = null;
-              $xfer += $input->readString($elem535);
-              $this->part_vals []= $elem535;
+              $elem549 = null;
+              $xfer += $input->readString($elem549);
+              $this->part_vals []= $elem549;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -13634,9 +14326,9 @@ class ThriftHiveMetastore_append_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter536)
+          foreach ($this->part_vals as $iter550)
           {
-            $xfer += $output->writeString($iter536);
+            $xfer += $output->writeString($iter550);
           }
         }
         $output->writeListEnd();
@@ -14099,14 +14791,14 @@ class ThriftHiveMetastore_append_partition_with_environment_context_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size537 = 0;
-            $_etype540 = 0;
-            $xfer += $input->readListBegin($_etype540, $_size537);
-            for ($_i541 = 0; $_i541 < $_size537; ++$_i541)
+            $_size551 = 0;
+            $_etype554 = 0;
+            $xfer += $input->readListBegin($_etype554, $_size551);
+            for ($_i555 = 0; $_i555 < $_size551; ++$_i555)
             {
-              $elem542 = null;
-              $xfer += $input->readString($elem542);
-              $this->part_vals []= $elem542;
+              $elem556 = null;
+              $xfer += $input->readString($elem556);
+              $this->part_vals []= $elem556;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -14152,9 +14844,9 @@ class ThriftHiveMetastore_append_partition_with_environment_context_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter543)
+          foreach ($this->part_vals as $iter557)
           {
-            $xfer += $output->writeString($iter543);
+            $xfer += $output->writeString($iter557);
           }
         }
         $output->writeListEnd();
@@ -14939,14 +15631,14 @@ class ThriftHiveMetastore_drop_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size544 = 0;
-            $_etype547 = 0;
-            $xfer += $input->readListBegin($_etype547, $_size544);
-            for ($_i548 = 0; $_i548 < $_size544; ++$_i548)
+            $_size558 = 0;
+            $_etype561 = 0;
+            $xfer += $input->readListBegin($_etype561, $_size558);
+            for ($_i562 = 0; $_i562 < $_size558; ++$_i562)
             {
-              $elem549 = null;
-              $xfer += $input->readString($elem549);
-              $this->part_vals []= $elem549;
+              $elem563 = null;
+              $xfer += $input->readString($elem563);
+              $this->part_vals []= $elem563;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -14991,9 +15683,9 @@ class ThriftHiveMetastore_drop_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter550)
+          foreach ($this->part_vals as $iter564)
           {
-            $xfer += $output->writeString($iter550);
+            $xfer += $output->writeString($iter564);
           }
         }
         $output->writeListEnd();
@@ -15222,14 +15914,14 @@ class ThriftHiveMetastore_drop_partition_with_environment_context_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size551 = 0;
-            $_etype554 = 0;
-            $xfer += $input->readListBegin($_etype554, $_size551);
-            for ($_i555 = 0; $_i555 < $_size551; ++$_i555)
+            $_size565 = 0;
+            $_etype568 = 0;
+            $xfer += $input->readListBegin($_etype568, $_size565);
+            for ($_i569 = 0; $_i569 < $_size565; ++$_i569)
             {
-              $elem556 = null;
-              $xfer += $input->readString($elem556);
-              $this->part_vals []= $elem556;
+              $elem570 = null;
+              $xfer += $input->readString($elem570);
+              $this->part_vals []= $elem570;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -15282,9 +15974,9 @@ class ThriftHiveMetastore_drop_partition_with_environment_context_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter557)
+          foreach ($this->part_vals as $iter571)
           {
-            $xfer += $output->writeString($iter557);
+            $xfer += $output->writeString($iter571);
           }
         }
         $output->writeListEnd();
@@ -16223,14 +16915,14 @@ class ThriftHiveMetastore_get_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size558 = 0;
-            $_etype561 = 0;
-            $xfer += $input->readListBegin($_etype561, $_size558);
-            for ($_i562 = 0; $_i562 < $_size558; ++$_i562)
+            $_size572 = 0;
+            $_etype575 = 0;
+            $xfer += $input->readListBegin($_etype575, $_size572);
+            for ($_i576 = 0; $_i576 < $_size572; ++$_i576)
             {
-              $elem563 = null;
-              $xfer += $input->readString($elem563);
-              $this->part_vals []= $elem563;
+              $elem577 = null;
+              $xfer += $input->readString($elem577);
+              $this->part_vals []= $elem577;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -16268,9 +16960,9 @@ class ThriftHiveMetastore_get_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter564)
+          foreach ($this->part_vals as $iter578)
           {
-            $xfer += $output->writeString($iter564);
+            $xfer += $output->writeString($iter578);
           }
         }
         $output->writeListEnd();
@@ -16488,17 +17180,17 @@ class ThriftHiveMetastore_exchange_partition_args {
         case 1:
           if ($ftype == TType::MAP) {
             $this->partitionSpecs = array();
-            $_size565 = 0;
-            $_ktype566 = 0;
-            $_vtype567 = 0;
-            $xfer += $input->readMapBegin($_ktype566, $_vtype567, $_size565);
-            for ($_i569 = 0; $_i569 < $_size565; ++$_i569)
+            $_size579 = 0;
+            $_ktype580 = 0;
+            $_vtype581 = 0;
+            $xfer += $input->readMapBegin($_ktype580, $_vtype581, $_size579);
+            for ($_i583 = 0; $_i583 < $_size579; ++$_i583)
             {
-              $key570 = '';
-              $val571 = '';
-              $xfer += $input->readString($key570);
-              $xfer += $input->readString($val571);
-              $this->partitionSpecs[$key570] = $val571;
+              $key584 = '';
+              $val585 = '';
+              $xfer += $input->readString($key584);
+              $xfer += $input->readString($val585);
+              $this->partitionSpecs[$key584] = $val585;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -16554,10 +17246,10 @@ class ThriftHiveMetastore_exchange_partition_args {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->partitionSpecs));
         {
-          foreach ($this->partitionSpecs as $kiter572 => $viter573)
+          foreach ($this->partitionSpecs as $kiter586 => $viter587)
           {
-            $xfer += $output->writeString($kiter572);
-            $xfer += $output->writeString($viter573);
+            $xfer += $output->writeString($kiter586);
+            $xfer += $output->writeString($viter587);
           }
         }
         $output->writeMapEnd();
@@ -16853,14 +17545,14 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size574 = 0;
-            $_etype577 = 0;
-            $xfer += $input->readListBegin($_etype577, $_size574);
-            for ($_i578 = 0; $_i578 < $_size574; ++$_i578)
+            $_size588 = 0;
+            $_etype591 = 0;
+            $xfer += $input->readListBegin($_etype591, $_size588);
+            for ($_i592 = 0; $_i592 < $_size588; ++$_i592)
             {
-              $elem579 = null;
-              $xfer += $input->readString($elem579);
-              $this->part_vals []= $elem579;
+              $elem593 = null;
+              $xfer += $input->readString($elem593);
+              $this->part_vals []= $elem593;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -16877,14 +17569,14 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
         case 5:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size580 = 0;
-            $_etype583 = 0;
-            $xfer += $input->readListBegin($_etype583, $_size580);
-            for ($_i584 = 0; $_i584 < $_size580; ++$_i584)
+            $_size594 = 0;
+            $_etype597 = 0;
+            $xfer += $input->readListBegin($_etype597, $_size594);
+            for ($_i598 = 0; $_i598 < $_size594; ++$_i598)
             {
-              $elem585 = null;
-              $xfer += $input->readString($elem585);
-              $this->group_names []= $elem585;
+              $elem599 = null;
+              $xfer += $input->readString($elem599);
+              $this->group_names []= $elem599;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -16922,9 +17614,9 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter586)
+          foreach ($this->part_vals as $iter600)
           {
-            $xfer += $output->writeString($iter586);
+            $xfer += $output->writeString($iter600);
           }
         }
         $output->writeListEnd();
@@ -16944,9 +17636,9 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter587)
+          foreach ($this->group_names as $iter601)
           {
-            $xfer += $output->writeString($iter587);
+            $xfer += $output->writeString($iter601);
           }
         }
         $output->writeListEnd();
@@ -17492,15 +18184,15 @@ class ThriftHiveMetastore_get_partitions_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size588 = 0;
-            $_etype591 = 0;
-            $xfer += $input->readListBegin($_etype591, $_size588);
-            for ($_i592 = 0; $_i592 < $_size588; ++$_i592)
+            $_size602 = 0;
+            $_etype605 = 0;
+            $xfer += $input->readListBegin($_etype605, $_size602);
+            for ($_i606 = 0; $_i606 < $_size602; ++$_i606)
             {
-              $elem593 = null;
-              $elem593 = new \metastore\Partition();
-              $xfer += $elem593->read($input);
-              $this->success []= $elem593;
+              $elem607 = null;
+              $elem607 = new \metastore\Partition();
+              $xfer += $elem607->read($input);
+              $this->success []= $elem607;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -17544,9 +18236,9 @@ class ThriftHiveMetastore_get_partitions_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter594)
+          foreach ($this->success as $iter608)
           {
-            $xfer += $iter594->write($output);
+            $xfer += $iter608->write($output);
           }
         }
         $output->writeListEnd();
@@ -17677,14 +18369,14 @@ class ThriftHiveMetastore_get_partitions_with_auth_args {
         case 5:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size595 = 0;
-            $_etype598 = 0;
-            $xfer += $input->readListBegin($_etype598, $_size595);
-            for ($_i599 = 0; $_i599 < $_size595; ++$_i599)
+            $_size609 = 0;
+            $_etype612 = 0;
+            $xfer += $input->readListBegin($_etype612, $_size609);
+            for ($_i613 = 0; $_i613 < $_size609; ++$_i613)
             {
-              $elem600 = null;
-              $xfer += $input->readString($elem600);
-              $this->group_names []= $elem600;
+              $elem614 = null;
+              $xfer += $input->readString($elem614);
+              $this->group_names []= $elem614;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -17732,9 +18424,9 @@ class ThriftHiveMetastore_get_partitions_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter601)
+          foreach ($this->group_names as $iter615)
           {
-            $xfer += $output->writeString($iter601);
+            $xfer += $output->writeString($iter615);
           }
         }
         $output->writeListEnd();
@@ -17814,15 +18506,15 @@ class ThriftHiveMetastore_get_partitions_with_auth_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size602 = 0;
-            $_etype605 = 0;
-            $xfer += $input->readListBegin($_etype605, $_size602);
-            for ($_i606 = 0; $_i606 < $_size602; ++$_i606)
+            $_size616 = 0;
+            $_etype619 = 0;
+            $xfer += $input->readListBegin($_etype619, $_size616);
+            for ($_i620 = 0; $_i620 < $_size616; ++$_i620)
             {
-              $elem607 = null;
-              $elem607 = new \metastore\Partition();
-              $xfer += $elem607->read($input);
-              $this->success []= $elem607;
+              $elem621 = null;
+              $elem621 = new \metastore\Partition();
+              $xfer += $elem621->read($input);
+              $this->success []= $elem621;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -17866,9 +18558,9 @@ class ThriftHiveMetastore_get_partitions_with_auth_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter608)
+          foreach ($this->success as $iter622)
           {
-            $xfer += $iter608->write($output);
+            $xfer += $iter622->write($output);
           }
         }
         $output->writeListEnd();
@@ -18070,15 +18762,15 @@ class ThriftHiveMetastore_get_partitions_pspec_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size609 = 0;
-            $_etype612 = 0;
-            $xfer += $input->readListBegin($_etype612, $_size609);
-            for ($_i613 = 0; $_i613 < $_size609; ++$_i613)
+            $_size623 = 0;
+            $_etype626 = 0;
+            $xfer += $input->readListBegin($_etype626, $_size623);
+            for ($_i627 = 0; $_i627 < $_size623; ++$_i627)
             {
-              $elem614 = null;
-              $elem614 = new \metastore\PartitionSpec();
-              $xfer += $elem614->read($input);
-              $this->success []= $elem614;
+              $elem628 = null;
+              $elem628 = new \metastore\PartitionSpec();
+              $xfer += $elem628->read($input);
+              $this->success []= $elem628;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18122,9 +18814,9 @@ class ThriftHiveMetastore_get_partitions_pspec_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter615)
+          foreach ($this->success as $iter629)
           {
-            $xfer += $iter615->write($output);
+            $xfer += $iter629->write($output);
           }
         }
         $output->writeListEnd();
@@ -18316,14 +19008,14 @@ class ThriftHiveMetastore_get_partition_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size616 = 0;
-            $_etype619 = 0;
-            $xfer += $input->readListBegin($_etype619, $_size616);
-            for ($_i620 = 0; $_i620 < $_size616; ++$_i620)
+            $_size630 = 0;
+            $_etype633 = 0;
+            $xfer += $input->readListBegin($_etype633, $_size630);
+            for ($_i634 = 0; $_i634 < $_size630; ++$_i634)
             {
-              $elem621 = null;
-              $xfer += $input->readString($elem621);
-              $this->success []= $elem621;
+              $elem635 = null;
+              $xfer += $input->readString($elem635);
+              $this->success []= $elem635;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18359,9 +19051,9 @@ class ThriftHiveMetastore_get_partition_names_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter622)
+          foreach ($this->success as $iter636)
           {
-            $xfer += $output->writeString($iter622);
+            $xfer += $output->writeString($iter636);
           }
         }
         $output->writeListEnd();
@@ -18465,14 +19157,14 @@ class ThriftHiveMetastore_get_partitions_ps_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size623 = 0;
-            $_etype626 = 0;
-            $xfer += $input->readListBegin($_etype626, $_size623);
-            for ($_i627 = 0; $_i627 < $_size623; ++$_i627)
+            $_size637 = 0;
+            $_etype640 = 0;
+            $xfer += $input->readListBegin($_etype640, $_size637);
+            for ($_i641 = 0; $_i641 < $_size637; ++$_i641)
             {
-              $elem628 = null;
-              $xfer += $input->readString($elem628);
-              $this->part_vals []= $elem628;
+              $elem642 = null;
+              $xfer += $input->readString($elem642);
+              $this->part_vals []= $elem642;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18517,9 +19209,9 @@ class ThriftHiveMetastore_get_partitions_ps_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter629)
+          foreach ($this->part_vals as $iter643)
           {
-            $xfer += $output->writeString($iter629);
+            $xfer += $output->writeString($iter643);
           }
         }
         $output->writeListEnd();
@@ -18604,15 +19296,15 @@ class ThriftHiveMetastore_get_partitions_ps_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size630 = 0;
-            $_etype633 = 0;
-            $xfer += $input->readListBegin($_etype633, $_size630);
-            for ($_i634 = 0; $_i634 < $_size630; ++$_i634)
+            $_size644 = 0;
+            $_etype647 = 0;
+            $xfer += $input->readListBegin($_etype647, $_size644);
+            for ($_i648 = 0; $_i648 < $_size644; ++$_i648)
             {
-              $elem635 = null;
-              $elem635 = new \metastore\Partition();
-              $xfer += $elem635->read($input);
-              $this->success []= $elem635;
+              $elem649 = null;
+              $elem649 = new \metastore\Partition();
+              $xfer += $elem649->read($input);
+              $this->success []= $elem649;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18656,9 +19348,9 @@ class ThriftHiveMetastore_get_partitions_ps_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter636)
+          foreach ($this->success as $iter650)
           {
-            $xfer += $iter636->write($output);
+            $xfer += $iter650->write($output);
           }
         }
         $output->writeListEnd();
@@ -18787,14 +19479,14 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size637 = 0;
-            $_etype640 = 0;
-            $xfer += $input->readListBegin($_etype640, $_size637);
-            for ($_i641 = 0; $_i641 < $_size637; ++$_i641)
+            $_size651 = 0;
+            $_etype654 = 0;
+            $xfer += $input->readListBegin($_etype654, $_size651);
+            for ($_i655 = 0; $_i655 < $_size651; ++$_i655)
             {
-              $elem642 = null;
-              $xfer += $input->readString($elem642);
-              $this->part_vals []= $elem642;
+              $elem656 = null;
+              $xfer += $input->readString($elem656);
+              $this->part_vals []= $elem656;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18818,14 +19510,14 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
         case 6:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size643 = 0;
-            $_etype646 = 0;
-            $xfer += $input->readListBegin($_etype646, $_size643);
-            for ($_i647 = 0; $_i647 < $_size643; ++$_i647)
+            $_size657 = 0;
+            $_etype660 = 0;
+            $xfer += $input->readListBegin($_etype660, $_size657);
+            for ($_i661 = 0; $_i661 < $_size657; ++$_i661)
             {
-              $elem648 = null;
-              $xfer += $input->readString($elem648);
-              $this->group_names []= $elem648;
+              $elem662 = null;
+              $xfer += $input->readString($elem662);
+              $this->group_names []= $elem662;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18863,9 +19555,9 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter649)
+          foreach ($this->part_vals as $iter663)
           {
-            $xfer += $output->writeString($iter649);
+            $xfer += $output->writeString($iter663);
           }
         }
         $output->writeListEnd();
@@ -18890,9 +19582,9 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter650)
+          foreach ($this->group_names as $iter664)
           {
-            $xfer += $output->writeString($iter650);
+            $xfer += $output->writeString($iter664);
           }
         }
         $output->writeListEnd();
@@ -18972,15 +19664,15 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size651 = 0;
-            $_etype654 = 0;
-            $xfer += $input->readListBegin($_etype654, $_size651);
-            for ($_i655 = 0; $_i655 < $_size651; ++$_i655)
+            $_size665 = 0;
+            $_etype668 = 0;
+            $xfer += $input->readListBegin($_etype668, $_size665);
+            for ($_i669 = 0; $_i669 < $_size665; ++$_i669)
             {
-              $elem656 = null;
-              $elem656 = new \metastore\Partition();
-              $xfer += $elem656->read($input);
-              $this->success []= $elem656;
+              $elem670 = null;
+              $elem670 = new \metastore\Partition();
+              $xfer += $elem670->read($input);
+              $this->success []= $elem670;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19024,9 +19716,9 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter657)
+          foreach ($this->success as $iter671)
           {
-            $xfer += $iter657->write($output);
+            $xfer += $iter671->write($output);
           }
         }
         $output->writeListEnd();
@@ -19135,14 +19827,14 @@ class ThriftHiveMetastore_get_partition_names_ps_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size658 = 0;
-            $_etype661 = 0;
-            $xfer += $input->readListBegin($_etype661, $_size658);
-            for ($_i662 = 0; $_i662 < $_size658; ++$_i662)
+            $_size672 = 0;
+            $_etype675 = 0;
+            $xfer += $input->readListBegin($_etype675, $_size672);
+            for ($_i676 = 0; $_i676 < $_size672; ++$_i676)
             {
-              $elem663 = null;
-              $xfer += $input->readString($elem663);
-              $this->part_vals []= $elem663;
+              $elem677 = null;
+              $xfer += $input->readString($elem677);
+              $this->part_vals []= $elem677;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19187,9 +19879,9 @@ class ThriftHiveMetastore_get_partition_names_ps_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter664)
+          foreach ($this->part_vals as $iter678)
           {
-            $xfer += $output->writeString($iter664);
+            $xfer += $output->writeString($iter678);
           }
         }
         $output->writeListEnd();
@@ -19273,14 +19965,14 @@ class ThriftHiveMetastore_get_partition_names_ps_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size665 = 0;
-            $_etype668 = 0;
-            $xfer += $input->readListBegin($_etype668, $_size665);
-            for ($_i669 = 0; $_i669 < $_size665; ++$_i669)
+            $_size679 = 0;
+            $_etype682 = 0;
+            $xfer += $input->readListBegin($_etype682, $_size679);
+            for ($_i683 = 0; $_i683 < $_size679; ++$_i683)
             {
-              $elem670 = null;
-              $xfer += $input->readString($elem670);
-              $this->success []= $elem670;
+              $elem684 = null;
+              $xfer += $input->readString($elem684);
+              $this->success []= $elem684;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19324,9 +20016,9 @@ class ThriftHiveMetastore_get_partition_names_ps_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter671)
+          foreach ($this->success as $iter685)
           {
-            $xfer += $output->writeString($iter671);
+            $xfer += $output->writeString($iter685);
           }
         }
         $output->writeListEnd();
@@ -19548,15 +20240,15 @@ class ThriftHiveMetastore_get_partitions_by_filter_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size672 = 0;
-            $_etype675 = 0;
-            $xfer += $input->readListBegin($_etype675, $_size672);
-            for ($_i676 = 0; $_i676 < $_size672; ++$_i676)
+            $_size686 = 0;
+            $_etype689 = 0;
+            $xfer += $input->readListBegin($_etype689, $_size686);
+            for ($_i690 = 0; $_i690 < $_size686; ++$_i690)
             {
-              $elem677 = null;
-              $elem677 = new \metastore\Partition();
-              $xfer += $elem677->read($input);
-              $this->success []= $elem677;
+              $elem691 = null;
+              $elem691 = new \metastore\Partition();
+              $xfer += $elem691->read($input);
+              $this->success []= $elem691;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19600,9 +20292,9 @@ class ThriftHiveMetastore_get_partitions_by_filter_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter678)
+          foreach ($this->success as $iter692)
           {
-            $xfer += $iter678->write($output);
+            $xfer += $iter692->write($output);
           }
         }
         $output->writeListEnd();
@@ -19824,15 +20516,15 @@ class ThriftHiveMetastore_get_part_specs_by_filter_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size679 = 0;
-            $_etype682 = 0;
-            $xfer += $input->readListBegin($_etype682, $_size679);
-            for ($_i683 = 0; $_i683 < $_size679; ++$_i683)
+            $_size693 = 0;
+            $_etype696 = 0;
+            $xfer += $input->readListBegin($_etype696, $_size693);
+            for ($_i697 = 0; $_i697 < $_size693; ++$_i697)
             {
-              $elem684 = null;
-              $elem684 = new \metastore\PartitionSpec();
-              $xfer += $elem684->read($input);
-              $this->success []= $elem684;
+              $elem698 = null;
+              $elem698 = new \metastore\PartitionSpec();
+              $xfer += $elem698->read($input);
+              $this->success []= $elem698;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19876,9 +20568,9 @@ class ThriftHiveMetastore_get_part_specs_by_filter_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter685)
+          foreach ($this->success as $iter699)
           {
-            $xfer += $iter685->write($output);
+            $xfer += $iter699->write($output);
           }
         }
         $output->writeListEnd();
@@ -20177,14 +20869,14 @@ class ThriftHiveMetastore_get_partitions_by_names_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->names = array();
-            $_size686 = 0;
-            $_etype689 = 0;
-            $xfer += $input->readListBegin($_etype689, $_size686);
-            for ($_i690 = 0; $_i690 < $_size686; ++$_i690)
+            $_size700 = 0;
+            $_etype703 = 0;
+            $xfer += $input->readListBegin($_etype703, $_size700);
+            for ($_i704 = 0; $_i704 < $_size700; ++$_i704)
             {
-              $elem691 = null;
-              $xfer += $input->readString($elem691);
-              $this->names []= $elem691;
+              $elem705 = null;
+              $xfer += $input->readString($elem705);
+              $this->names []= $elem705;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20222,9 +20914,9 @@ class ThriftHiveMetastore_get_partitions_by_names_args {
       {
         $output->writeListBegin(TType::STRING, count($this->names));
         {
-          foreach ($this->names as $iter692)
+          foreach ($this->names as $iter706)
           {
-            $xfer += $output->writeString($iter692);
+            $xfer += $output->writeString($iter706);
           }
         }
         $output->writeListEnd();
@@ -20304,15 +20996,15 @@ class ThriftHiveMetastore_get_partitions_by_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size693 = 0;
-            $_etype696 = 0;
-            $xfer += $input->readListBegin($_etype696, $_size693);
-            for ($_i697 = 0; $_i697 < $_size693; ++$_i697)
+            $_size707 = 0;
+            $_etype710 = 0;
+            $xfer += $input->readListBegin($_etype710, $_size707);
+            for ($_i711 = 0; $_i711 < $_size707; ++$_i711)
             {
-              $elem698 = null;
-              $elem698 = new \metastore\Partition();
-              $xfer += $elem698->read($input);
-              $this->success []= $elem698;
+              $elem712 = null;
+              $elem712 = new \metastore\Partition();
+              $xfer += $elem712->read($input);
+              $this->success []= $elem712;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20356,9 +21048,9 @@ class ThriftHiveMetastore_get_partitions_by_names_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter699)
+          foreach ($this->success as $iter713)
           {
-            $xfer += $iter699->write($output);
+            $xfer += $iter713->write($output);
           }
         }
         $output->writeListEnd();
@@ -20673,15 +21365,15 @@ class ThriftHiveMetastore_alter_partitions_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->new_parts = array();
-            $_size700 = 0;
-            $_etype703 = 0;
-            $xfer += $input->readListBegin($_etype703, $_size700);
-            for ($_i704 = 0; $_i704 < $_size700; ++$_i704)
+            $_size714 = 0;
+            $_etype717 = 0;
+            $xfer += $input->readListBegin($_etype717, $_size714);
+            for ($_i718 = 0; $_i718 < $_size714; ++$_i718)
             {
-              $elem705 = null;
-              $elem705 = new \metastore\Partition();
-              $xfer += $elem705->read($input);
-              $this->new_parts []= $elem705;
+              $elem719 = null;
+              $elem719 = new \metastore\Partition();
+              $xfer += $elem719->read($input);
+              $this->new_parts []= $elem719;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20719,9 +21411,9 @@ class ThriftHiveMetastore_alter_partitions_args {
       {
         $output->writeListBegin(TType::STRUCT, count($this->new_parts));
         {
-          foreach ($this->new_parts as $iter706)
+          foreach ($this->new_parts as $iter720)
           {
-            $xfer += $iter706->write($output);
+            $xfer += $iter720->write($output);
           }
         }
         $output->writeListEnd();
@@ -21155,14 +21847,14 @@ class ThriftHiveMetastore_rename_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size707 = 0;
-            $_etype710 = 0;
-            $xfer += $input->readListBegin($_etype710, $_size707);
-            for ($_i711 = 0; $_i711 < $_size707; ++$_i711)
+            $_size721 = 0;
+            $_etype724 = 0;
+            $xfer += $input->readListBegin($_etype724, $_size721);
+            for ($_i725 = 0; $_i725 < $_size721; ++$_i725)
             {
-              $elem712 = null;
-              $xfer += $input->readString($elem712);
-              $this->part_vals []= $elem712;
+              $elem726 = null;
+              $xfer += $input->readString($elem726);
+              $this->part_vals []= $elem726;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -21208,9 +21900,9 @@ class ThriftHiveMetastore_rename_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter713)
+          foreach ($this->part_vals as $iter727)
           {
-            $xfer += $output->writeString($iter713);
+            $xfer += $output->writeString($iter727);
           }
         }
         $output->writeListEnd();
@@ -21383,14 +22075,14 @@ class ThriftHiveMetastore_partition_name_has_valid_characters_args {
         case 1:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size714 = 0;
-            $_etype717 = 0;
-            $xfer += $input->readListBegin($_etype717, $_size714);
-            for ($_i718 = 0; $_i718 < $_size714; ++$_i718)
+            $_size728 = 0;
+            $_etype731 = 0;
+            $xfer += $input->readListBegin($_etype731, $_size728);
+            for ($_i732 = 0; $_i732 < $_size728; ++$_i732)
             {
-              $elem719 = null;
-              $xfer += $input->readString($elem719);
-              $this->part_vals []= $elem719;
+              $elem733 = null;
+              $xfer += $input->readString($elem733);
+              $this->part_vals []= $elem733;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -21425,9 +22117,9 @@ class ThriftHiveMetastore_partition_name_has_valid_characters_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter720)
+          foreach ($this->part_vals as $iter734)
           {
-            $xfer += $output->writeString($iter720);
+            $xfer += $output->writeString($iter734);
           }
         }
         $output->writeListEnd();
@@ -21854,14 +22546,14 @@ class ThriftHiveMetastore_partition_name_to_vals_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size721 = 0;
-            $_etype724 = 0;
-            $xfer += $input->readListBegin($_etype724, $_size721);
-            for ($_i725 = 0; $_i725 < $_size721; ++$_i725)
+            $_size735 = 0;
+            $_etype738 = 0;
+            $xfer += $input->readListBegin($_etype738, $_size735);
+            for ($_i739 = 0; $_i739 < $_size735; ++$_i739)
             {
-              $elem726 = null;
-              $xfer += $input->readString($elem726);
-              $this->success []= $elem726;
+              $elem740 = null;
+              $xfer += $input->readString($elem740);
+              $this->success []= $elem740;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -21897,9 +22589,9 @@ class ThriftHiveMetastore_partition_name_to_vals_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter727)
+          foreach ($this->success as $iter741)
           {
-            $xfer += $output->writeString($iter727);
+            $xfer += $output->writeString($iter741);
           }
         }
         $output->writeListEnd();
@@ -22050,17 +22742,17 @@ class ThriftHiveMetastore_partition_name_to_spec_result {
         case 0:
           if ($ftype == TType::MAP) {
             $this->success = array();
-            $_size728 = 0;
-            $_ktype729 = 0;
-            $_vtype730 = 0;
-            $xfer += $input->readMapBegin($_ktype729, $_vtype730, $_size728);
-            for ($_i732 = 0; $_i732 < $_size728; ++$_i732)
+            $_size742 = 0;
+            $_ktype743 = 0;
+            $_vtype744 = 0;
+            $xfer += $input->readMapBegin($_ktype743, $_vtype744, $_size742);
+            for ($_i746 = 0; $_i746 < $_size742; ++$_i746)
             {
-              $key733 = '';
-              $val734 = '';
-              $xfer += $input->readString($key733);
-              $xfer += $input->readString($val734);
-              $this->success[$key733] = $val734;
+              $key747 = '';
+              $val748 = '';
+              $xfer += $input->readString($key747);
+              $xfer += $input->readString($val748);
+              $this->success[$key747] = $val748;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -22096,10 +22788,10 @@ class ThriftHiveMetastore_partition_name_to_spec_result {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
         {
-          foreach ($this->success as $kiter735 => $viter736)
+          foreach ($this->success as $kiter749 => $viter750)
           {
-            $xfer += $output->writeString($kiter735);
-            $xfer += $output->writeString($viter736);
+            $xfer += $output->writeString($kiter749);
+            $xfer += $output->writeString($viter750);
           }
         }
         $output->writeMapEnd();
@@ -22207,17 +22899,17 @@ class ThriftHiveMetastore_markPartitionForEvent_args {
         case 3:
           if ($ftype == TType::MAP) {
             $this->part_vals = array();
-            $_size737 = 0;
-            $_ktype738 = 0;
-            $_vtype739 = 0;
-            $xfer += $input->readMapBegin($_ktype738, $_vtype739, $_size737);
-            for ($_i741 = 0; $_i741 < $_size737; ++$_i741)
+            $_size751 = 0;
+            $_ktype752 = 0;
+            $_vtype753 = 0;
+            $xfer += $input->readMapBegin($_ktype752, $_vtype753, $_size751);
+            for ($_i755 = 0; $_i755 < $_size751; ++$_i755)
             {
-              $key742 = '';
-              $val743 = '';
-              $xfer += $input->readString($key742);
-              $xfer += $input->readString($val743);
-              $this->part_vals[$key742] = $val743;
+              $key756 = '';
+              $val757 = '';
+              $xfer += $input->readString($key756);
+              $xfer += $input->readString($val757);
+              $this->part_vals[$key756] = $val757;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -22262,10 +22954,10 @@ class ThriftHiveMetastore_markPartitionForEvent_args {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $kiter744 => $viter745)
+          foreach ($this->part_vals as $kiter758 => $viter759)
           {
-            $xfer += $output->writeString($kiter744);
-            $xfer += $output->writeString($viter745);
+            $xfer += $output->writeString($kiter758);
+            $xfer += $output->writeString($viter759);
           }
         }
         $output->writeMapEnd();
@@ -22557,17 +23249,17 @@ class ThriftHiveMetastore_isPartitionMarkedForEvent_args {
         case 3:
           if ($ftype == TType::MAP) {
             $this->part_vals = array();
-            $_size746 = 0;
-            $_ktype747 = 0;
-            $_vtype748 = 0;
-            $xfer += $input->readMapBegin($_ktype747, $_vtype748, $_size746);
-            for ($_i750 = 0; $_i750 < $_size746; ++$_i750)
+            $_size760 = 0;
+            $_ktype761 = 0;
+            $_vtype762 = 0;
+            $xfer += $input->readMapBegin($_ktype761, $_vtype762, $_size760);
+            for ($_i764 = 0; $_i764 < $_size760; ++$_i764)
             {
-              $key751 = '';
-              $val752 = '';
-              $xfer += $input->readString($key751);
-              $xfer += $input->readString($val752);
-              $this->part_vals[$key751] = $val752;
+              $key765 = '';
+              $val766 = '';
+              $xfer += $input->readString($key765);
+              $xfer += $input->readString($val766);
+              $this->part_vals[$key765] = $val766;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -22612,10 +23304,10 @@ class ThriftHiveMetastore_isPartitionMarkedForEvent_args {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $kiter753 => $viter754)
+          foreach ($this->part_vals as $kiter767 => $viter768)
           {
-            $xfer += $output->writeString($kiter753);
-            $xfer += $output->writeString($viter754);
+            $xfer += $output->writeString($kiter767);
+            $xfer += $output->writeString($viter768);
           }
         }
         $output->writeMapEnd();
@@ -23975,15 +24667,15 @@ class ThriftHiveMetastore_get_indexes_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size755 = 0;
-            $_etype758 = 0;
-            $xfer += $input->readListBegin($_etype758, $_size755);
-            for ($_i759 = 0; $_i759 < $_size755; ++$_i759)
+            $_size769 = 0;
+            $_etype772 = 0;
+            $xfer += $input->readListBegin($_etype772, $_size769);
+            for ($_i773 = 0; $_i773 < $_size769; ++$_i773)
             {
-              $elem760 = null;
-              $elem760 = new \metastore\Index();
-              $xfer += $elem760->read($input);
-              $this->success []= $elem760;
+              $elem774 = null;
+              $elem774 = new \metastore\Index();
+              $xfer += $elem774->read($input);
+              $this->success []= $elem774;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -24027,9 +24719,9 @@ class ThriftHiveMetastore_get_indexes_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter761)
+          foreach ($this->success as $iter775)
           {
-            $xfer += $iter761->write($output);
+            $xfer += $iter775->write($output);
           }
         }
         $output->writeListEnd();
@@ -24221,14 +24913,14 @@ class ThriftHiveMetastore_get_index_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size762 = 0;
-            $_etype765 = 0;
-            $xfer += $input->readListBegin($_etype765, $_size762);
-            for ($_i766 = 0; $_i766 < $_size762; ++$_i766)
+            $_size776 = 0;
+            $_etype779 = 0;
+            $xfer += $input->readListBegin($_etype779, $_size776);
+            for ($_i780 = 0; $_i780 < $_size776; ++$_i780)
             {
-              $elem767 = null;
-              $xfer += $input->readString($elem767);
-              $this->success []= $elem767;
+              $elem781 = null;
+              $xfer += $input->readString($elem781);
+              $this->success []= $elem781;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -24264,9 +24956,9 @@ class ThriftHiveMetastore_get_index_names_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter768)
+          foreach ($this->success as $iter782)
           {
-            $xfer += $output->writeString($iter768);
+            $xfer += $output->writeString($iter782);
           }
         }
         $output->writeListEnd();
@@ -27494,14 +28186,14 @@ class ThriftHiveMetastore_get_functions_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size769 = 0;
-            $_etype772 = 0;
-            $xfer += $input->readListBegin($_etype772, $_size769);
-            for ($_i773 = 0; $_i773 < $_size769; ++$_i773)
+            $_size783 = 0;
+            $_etype786 = 0;
+            $xfer += $input->readListBegin($_etype786, $_size783);
+            for ($_i787 = 0; $_i787 < $_size783; ++$_i787)
             {
-              $elem774 = null;
-              $xfer += $input->readString($elem774);
-              $this->success []= $elem774;
+              $elem788 = null;
+              $xfer += $input->readString($elem788);
+              $this->success []= $elem788;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -27537,9 +28229,9 @@ class ThriftHiveMetastore_get_functions_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter775)
+          foreach ($this->success as $iter789)
           {
-            $xfer += $output->writeString($iter775);
+            $xfer += $output->writeString($iter789);
           }
         }
         $output->writeListEnd();
@@ -28214,14 +28906,14 @@ class ThriftHiveMetastore_get_role_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size776 = 0;
-            $_etype779 = 0;
-            $xfer += $input->readListBegin($_etype779, $_size776);
-            for ($_i780 = 0; $_i780 < $_size776; ++$_i780)
+            $_size790 = 0;
+            $_etype793 = 0;
+            $xfer += $input->readListBegin($_etype793, $_size790);
+            for ($_i794 = 0; $_i794 < $_size790; ++$_i794)
             {
-              $elem781 = null;
-              $xfer += $input->readString($elem781);
-              $this->success []= $elem781;
+              $elem795 = null;
+              $xfer += $input->readString($elem795);
+              $this->success []= $elem795;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -28257,9 +28949,9 @@ class ThriftHiveMetastore_get_role_names_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter782)
+          foreach ($this->success as $iter796)
           {
-            $xfer += $output->writeString($iter782);
+            $xfer += $output->writeString($iter796);
           }
         }
         $output->writeListEnd();
@@ -28899,15 +29591,15 @@ class ThriftHiveMetastore_list_roles_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size783 = 0;
-            $_etype786 = 0;
-            $xfer += $input->readListBegin($_etype786, $_size783);
-            for ($_i787 = 0; $_i787 < $_size783; ++$_i787)
+            $_size797 = 0;
+            $_etype800 = 0;
+            $xfer += $input->readListBegin($_etype800, $_size797);
+            for ($_i801 = 0; $_i801 < $_size797; ++$_i801)
             {
-              $elem788 = null;
-              $elem788 = new \metastore\Role();
-              $xfer += $elem788->read($input);
-              $this->success []= $elem788;
+              $elem802 = null;
+              $elem802 = new \metastore\Role();
+              $xfer += $elem802->read($input);
+              $this->success []= $elem802;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -28943,9 +29635,9 @@ class ThriftHiveMetastore_list_roles_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter789)
+          foreach ($this->success as $iter803)
           {
-            $xfer += $iter789->write($output);
+            $xfer += $iter803->write($output);
           }
         }
         $output->writeListEnd();
@@ -29571,14 +30263,14 @@ class ThriftHiveMetastore_get_privilege_set_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size790 = 0;
-            $_etype793 = 0;
-            $xfer += $input->readListBegin($_etype793, $_size790);
-            for ($_i794 = 0; $_i794 < $_size790; ++$_i794)
+            $_size804 = 0;
+            $_etype807 = 0;
+            $xfer += $input->readListBegin($_etype807, $_size804);
+            for ($_i808 = 0; $_i808 < $_size804; ++$_i808)
             {
-              $elem795 = null;
-              $xfer += $input->readString($elem795);
-              $this->group_names []= $elem795;
+              $elem809 = null;
+              $xfer += $input->readString($elem809);
+              $this->group_names []= $elem809;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -29619,9 +30311,9 @@ class ThriftHiveMetastore_get_privilege_set_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter796)
+          foreach ($this->group_names as $iter810)
           {
-            $xfer += $output->writeString($iter796);
+            $xfer += $output->writeString($iter810);
           }
         }
         $output->writeListEnd();
@@ -29908,15 +30600,15 @@ class ThriftHiveMetastore_list_privileges_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size797 = 0;
-            $_etype800 = 0;
-            $xfer += $input->readListBegin($_etype800, $_size797);
-            for ($_i801 = 0; $_i801 < $_size797; ++$_i801)
+            $_size811 = 0;
+            $_etype814 = 0;
+            $xfer += $input->readListBegin($_etype814, $_size811);
+            for ($_i815 = 0; $_i815 < $_size811; ++$_i815)
             {
-              $elem802 = null;
-              $elem802 = new \metastore\HiveObjectPrivilege();
-              $xfer += $elem802->read($input);
-              $this->success []= $elem802;
+              $elem816 = null;
+              $elem816 = new \metastore\HiveObjectPrivilege();
+              $xfer += $elem816->read($input);
+              $this->success []= $elem816;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -29952,9 +30644,9 @@ class ThriftHiveMetastore_list_privileges_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter803)
+          foreach ($this->success as $iter817)
           {
-            $xfer += $iter803->write($output);
+            $xfer += $iter817->write($output);
           }
         }
         $output->writeListEnd();
@@ -30553,14 +31245,14 @@ class ThriftHiveMetastore_set_ugi_args {
         case 2:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size804 = 0;
-            $_etype807 = 0;
-            $xfer += $input->readListBegin($_etype807, $_size804);
-            for ($_i808 = 0; $_i808 < $_size804; ++$_i808)
+            $_size818 = 0;
+            $_etype821 = 0;
+            $xfer += $input->readListBegin($_etype821, $_size818);
+            for ($_i822 = 0; $_i822 < $_size818; ++$_i822)
             {
-              $elem809 = null;
-              $xfer += $input->readString($elem809);
-              $this->group_names []= $elem809;
+              $elem823 = null;
+              $xfer += $input->readString($elem823);
+              $this->group_names []= $elem823;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -30593,9 +31285,9 @@ class ThriftHiveMetastore_set_ugi_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter810)
+          foreach ($this->group_names as $iter824)
           {
-            $xfer += $output->writeString($iter810);
+            $xfer += $output->writeString($iter824);
           }
         }
         $output->writeListEnd();
@@ -30665,14 +31357,14 @@ class ThriftHiveMetastore_set_ugi_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size811 = 0;
-            $_etype814 = 0;
-            $xfer += $input->readListBegin($_etype814, $_size811);
-            for ($_i815 = 0; $_i815 < $_size811; ++$_i815)
+            $_size825 = 0;
+            $_etype828 = 0;
+            $xfer += $input->readListBegin($_etype828, $_size825);
+            for ($_i829 = 0; $_i829 < $_size825; ++$_i829)
             {
-              $elem816 = null;
-              $xfer += $input->readString($elem816);
-              $this->success []= $elem816;
+              $elem830 = null;
+              $xfer += $input->readString($elem830);
+              $this->success []= $elem830;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -30708,9 +31400,9 @@ class ThriftHiveMetastore_set_ugi_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter817)
+          foreach ($this->success as $iter831)
           {
-            $xfer += $output->writeString($iter817);
+            $xfer += $output->writeString($iter831);
           }
         }
         $output->writeListEnd();
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
old mode 100644
new mode 100755
index 197b35e..1e0b14c
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
@@ -36,7 +36,9 @@ if len(sys.argv) <= 1 or sys.argv[1] == '--help':
   print '  bool drop_type(string type)'
   print '   get_type_all(string name)'
   print '   get_fields(string db_name, string table_name)'
+  print '   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)'
   print '   get_schema(string db_name, string table_name)'
+  print '   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)'
   print '  void create_table(Table tbl)'
   print '  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)'
   print '  void drop_table(string dbname, string name, bool deleteData)'
@@ -271,12 +273,24 @@ elif cmd == 'get_fields':
     sys.exit(1)
   pp.pprint(client.get_fields(args[0],args[1],))
 
+elif cmd == 'get_fields_with_environment_context':
+  if len(args) != 3:
+    print 'get_fields_with_environment_context requires 3 args'
+    sys.exit(1)
+  pp.pprint(client.get_fields_with_environment_context(args[0],args[1],eval(args[2]),))
+
 elif cmd == 'get_schema':
   if len(args) != 2:
     print 'get_schema requires 2 args'
     sys.exit(1)
   pp.pprint(client.get_schema(args[0],args[1],))
 
+elif cmd == 'get_schema_with_environment_context':
+  if len(args) != 3:
+    print 'get_schema_with_environment_context requires 3 args'
+    sys.exit(1)
+  pp.pprint(client.get_schema_with_environment_context(args[0],args[1],eval(args[2]),))
+
 elif cmd == 'create_table':
   if len(args) != 1:
     print 'create_table requires 1 args'
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
index 1357e41..634d0cc 100644
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
@@ -114,6 +114,15 @@ def get_fields(self, db_name, table_name):
     """
     pass
 
+  def get_fields_with_environment_context(self, db_name, table_name, environment_context):
+    """
+    Parameters:
+     - db_name
+     - table_name
+     - environment_context
+    """
+    pass
+
   def get_schema(self, db_name, table_name):
     """
     Parameters:
@@ -122,6 +131,15 @@ def get_schema(self, db_name, table_name):
     """
     pass
 
+  def get_schema_with_environment_context(self, db_name, table_name, environment_context):
+    """
+    Parameters:
+     - db_name
+     - table_name
+     - environment_context
+    """
+    pass
+
   def create_table(self, tbl):
     """
     Parameters:
@@ -1431,6 +1449,46 @@ def recv_get_fields(self, ):
       raise result.o3
     raise TApplicationException(TApplicationException.MISSING_RESULT, "get_fields failed: unknown result");
 
+  def get_fields_with_environment_context(self, db_name, table_name, environment_context):
+    """
+    Parameters:
+     - db_name
+     - table_name
+     - environment_context
+    """
+    self.send_get_fields_with_environment_context(db_name, table_name, environment_context)
+    return self.recv_get_fields_with_environment_context()
+
+  def send_get_fields_with_environment_context(self, db_name, table_name, environment_context):
+    self._oprot.writeMessageBegin('get_fields_with_environment_context', TMessageType.CALL, self._seqid)
+    args = get_fields_with_environment_context_args()
+    args.db_name = db_name
+    args.table_name = table_name
+    args.environment_context = environment_context
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_get_fields_with_environment_context(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = get_fields_with_environment_context_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    if result.o1 is not None:
+      raise result.o1
+    if result.o2 is not None:
+      raise result.o2
+    if result.o3 is not None:
+      raise result.o3
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_fields_with_environment_context failed: unknown result");
+
   def get_schema(self, db_name, table_name):
     """
     Parameters:
@@ -1469,6 +1527,46 @@ def recv_get_schema(self, ):
       raise result.o3
     raise TApplicationException(TApplicationException.MISSING_RESULT, "get_schema failed: unknown result");
 
+  def get_schema_with_environment_context(self, db_name, table_name, environment_context):
+    """
+    Parameters:
+     - db_name
+     - table_name
+     - environment_context
+    """
+    self.send_get_schema_with_environment_context(db_name, table_name, environment_context)
+    return self.recv_get_schema_with_environment_context()
+
+  def send_get_schema_with_environment_context(self, db_name, table_name, environment_context):
+    self._oprot.writeMessageBegin('get_schema_with_environment_context', TMessageType.CALL, self._seqid)
+    args = get_schema_with_environment_context_args()
+    args.db_name = db_name
+    args.table_name = table_name
+    args.environment_context = environment_context
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_get_schema_with_environment_context(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = get_schema_with_environment_context_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    if result.o1 is not None:
+      raise result.o1
+    if result.o2 is not None:
+      raise result.o2
+    if result.o3 is not None:
+      raise result.o3
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_schema_with_environment_context failed: unknown result");
+
   def create_table(self, tbl):
     """
     Parameters:
@@ -5278,7 +5376,9 @@ def __init__(self, handler):
     self._processMap["drop_type"] = Processor.process_drop_type
     self._processMap["get_type_all"] = Processor.process_get_type_all
     self._processMap["get_fields"] = Processor.process_get_fields
+    self._processMap["get_fields_with_environment_context"] = Processor.process_get_fields_with_environment_context
     self._processMap["get_schema"] = Processor.process_get_schema
+    self._processMap["get_schema_with_environment_context"] = Processor.process_get_schema_with_environment_context
     self._processMap["create_table"] = Processor.process_create_table
     self._processMap["create_table_with_environment_context"] = Processor.process_create_table_with_environment_context
     self._processMap["drop_table"] = Processor.process_drop_table
@@ -5606,6 +5706,24 @@ def process_get_fields(self, seqid, iprot, oprot):
     oprot.writeMessageEnd()
     oprot.trans.flush()
 
+  def process_get_fields_with_environment_context(self, seqid, iprot, oprot):
+    args = get_fields_with_environment_context_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = get_fields_with_environment_context_result()
+    try:
+      result.success = self._handler.get_fields_with_environment_context(args.db_name, args.table_name, args.environment_context)
+    except MetaException as o1:
+      result.o1 = o1
+    except UnknownTableException as o2:
+      result.o2 = o2
+    except UnknownDBException as o3:
+      result.o3 = o3
+    oprot.writeMessageBegin("get_fields_with_environment_context", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
   def process_get_schema(self, seqid, iprot, oprot):
     args = get_schema_args()
     args.read(iprot)
@@ -5624,6 +5742,24 @@ def process_get_schema(self, seqid, iprot, oprot):
     oprot.writeMessageEnd()
     oprot.trans.flush()
 
+  def process_get_schema_with_environment_context(self, seqid, iprot, oprot):
+    args = get_schema_with_environment_context_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = get_schema_with_environment_context_result()
+    try:
+      result.success = self._handler.get_schema_with_environment_context(args.db_name, args.table_name, args.environment_context)
+    except MetaException as o1:
+      result.o1 = o1
+    except UnknownTableException as o2:
+      result.o2 = o2
+    except UnknownDBException as o3:
+      result.o3 = o3
+    oprot.writeMessageBegin("get_schema_with_environment_context", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
   def process_create_table(self, seqid, iprot, oprot):
     args = create_table_args()
     args.read(iprot)
@@ -9205,22 +9341,25 @@ def __eq__(self, other):
   def __ne__(self, other):
     return not (self == other)
 
-class get_schema_args:
+class get_fields_with_environment_context_args:
   """
   Attributes:
    - db_name
    - table_name
+   - environment_context
   """
 
   thrift_spec = (
     None, # 0
     (1, TType.STRING, 'db_name', None, None, ), # 1
     (2, TType.STRING, 'table_name', None, None, ), # 2
+    (3, TType.STRUCT, 'environment_context', (EnvironmentContext, EnvironmentContext.thrift_spec), None, ), # 3
   )
 
-  def __init__(self, db_name=None, table_name=None,):
+  def __init__(self, db_name=None, table_name=None, environment_context=None,):
     self.db_name = db_name
     self.table_name = table_name
+    self.environment_context = environment_context
 
   def read(self, iprot):
     if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
@@ -9241,6 +9380,12 @@ def read(self, iprot):
           self.table_name = iprot.readString();
         else:
           iprot.skip(ftype)
+      elif fid == 3:
+        if ftype == TType.STRUCT:
+          self.environment_context = EnvironmentContext()
+          self.environment_context.read(iprot)
+        else:
+          iprot.skip(ftype)
       else:
         iprot.skip(ftype)
       iprot.readFieldEnd()
@@ -9250,7 +9395,7 @@ def write(self, oprot):
     if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
       oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
       return
-    oprot.writeStructBegin('get_schema_args')
+    oprot.writeStructBegin('get_fields_with_environment_context_args')
     if self.db_name is not None:
       oprot.writeFieldBegin('db_name', TType.STRING, 1)
       oprot.writeString(self.db_name)
@@ -9259,6 +9404,10 @@ def write(self, oprot):
       oprot.writeFieldBegin('table_name', TType.STRING, 2)
       oprot.writeString(self.table_name)
       oprot.writeFieldEnd()
+    if self.environment_context is not None:
+      oprot.writeFieldBegin('environment_context', TType.STRUCT, 3)
+      self.environment_context.write(oprot)
+      oprot.writeFieldEnd()
     oprot.writeFieldStop()
     oprot.writeStructEnd()
 
@@ -9277,7 +9426,7 @@ def __eq__(self, other):
   def __ne__(self, other):
     return not (self == other)
 
-class get_schema_result:
+class get_fields_with_environment_context_result:
   """
   Attributes:
    - success
@@ -9346,7 +9495,7 @@ def write(self, oprot):
     if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
       oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
       return
-    oprot.writeStructBegin('get_schema_result')
+    oprot.writeStructBegin('get_fields_with_environment_context_result')
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
@@ -9384,6 +9533,377 @@ def __eq__(self, other):
   def __ne__(self, other):
     return not (self == other)
 
+class get_schema_args:
+  """
+  Attributes:
+   - db_name
+   - table_name
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.STRING, 'db_name', None, None, ), # 1
+    (2, TType.STRING, 'table_name', None, None, ), # 2
+  )
+
+  def __init__(self, db_name=None, table_name=None,):
+    self.db_name = db_name
+    self.table_name = table_name
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.STRING:
+          self.db_name = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      elif fid == 2:
+        if ftype == TType.STRING:
+          self.table_name = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_schema_args')
+    if self.db_name is not None:
+      oprot.writeFieldBegin('db_name', TType.STRING, 1)
+      oprot.writeString(self.db_name)
+      oprot.writeFieldEnd()
+    if self.table_name is not None:
+      oprot.writeFieldBegin('table_name', TType.STRING, 2)
+      oprot.writeString(self.table_name)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_schema_result:
+  """
+  Attributes:
+   - success
+   - o1
+   - o2
+   - o3
+  """
+
+  thrift_spec = (
+    (0, TType.LIST, 'success', (TType.STRUCT,(FieldSchema, FieldSchema.thrift_spec)), None, ), # 0
+    (1, TType.STRUCT, 'o1', (MetaException, MetaException.thrift_spec), None, ), # 1
+    (2, TType.STRUCT, 'o2', (UnknownTableException, UnknownTableException.thrift_spec), None, ), # 2
+    (3, TType.STRUCT, 'o3', (UnknownDBException, UnknownDBException.thrift_spec), None, ), # 3
+  )
+
+  def __init__(self, success=None, o1=None, o2=None, o3=None,):
+    self.success = success
+    self.o1 = o1
+    self.o2 = o2
+    self.o3 = o3
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.LIST:
+          self.success = []
+          (_etype481, _size478) = iprot.readListBegin()
+          for _i482 in xrange(_size478):
+            _elem483 = FieldSchema()
+            _elem483.read(iprot)
+            self.success.append(_elem483)
+          iprot.readListEnd()
+        else:
+          iprot.skip(ftype)
+      elif fid == 1:
+        if ftype == TType.STRUCT:
+          self.o1 = MetaException()
+          self.o1.read(iprot)
+        else:
+          iprot.skip(ftype)
+      elif fid == 2:
+        if ftype == TType.STRUCT:
+          self.o2 = UnknownTableException()
+          self.o2.read(iprot)
+        else:
+          iprot.skip(ftype)
+      elif fid == 3:
+        if ftype == TType.STRUCT:
+          self.o3 = UnknownDBException()
+          self.o3.read(iprot)
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_schema_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.LIST, 0)
+      oprot.writeListBegin(TType.STRUCT, len(self.success))
+      for iter484 in self.success:
+        iter484.write(oprot)
+      oprot.writeListEnd()
+      oprot.writeFieldEnd()
+    if self.o1 is not None:
+      oprot.writeFieldBegin('o1', TType.STRUCT, 1)
+      self.o1.write(oprot)
+      oprot.writeFieldEnd()
+    if self.o2 is not None:
+      oprot.writeFieldBegin('o2', TType.STRUCT, 2)
+      self.o2.write(oprot)
+      oprot.writeFieldEnd()
+    if self.o3 is not None:
+      oprot.writeFieldBegin('o3', TType.STRUCT, 3)
+      self.o3.write(oprot)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_schema_with_environment_context_args:
+  """
+  Attributes:
+   - db_name
+   - table_name
+   - environment_context
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.STRING, 'db_name', None, None, ), # 1
+    (2, TType.STRING, 'table_name', None, None, ), # 2
+    (3, TType.STRUCT, 'environment_context', (EnvironmentContext, EnvironmentContext.thrift_spec), None, ), # 3
+  )
+
+  def __init__(self, db_name=None, table_name=None, environment_context=None,):
+    self.db_name = db_name
+    self.table_name = table_name
+    self.environment_context = environment_context
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.STRING:
+          self.db_name = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      elif fid == 2:
+        if ftype == TType.STRING:
+          self.table_name = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      elif fid == 3:
+        if ftype == TType.STRUCT:
+          self.environment_context = EnvironmentContext()
+          self.environment_context.read(iprot)
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_schema_with_environment_context_args')
+    if self.db_name is not None:
+      oprot.writeFieldBegin('db_name', TType.STRING, 1)
+      oprot.writeString(self.db_name)
+      oprot.writeFieldEnd()
+    if self.table_name is not None:
+      oprot.writeFieldBegin('table_name', TType.STRING, 2)
+      oprot.writeString(self.table_name)
+      oprot.writeFieldEnd()
+    if self.environment_context is not None:
+      oprot.writeFieldBegin('environment_context', TType.STRUCT, 3)
+      self.environment_context.write(oprot)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_schema_with_environment_context_result:
+  """
+  Attributes:
+   - success
+   - o1
+   - o2
+   - o3
+  """
+
+  thrift_spec = (
+    (0, TType.LIST, 'success', (TType.STRUCT,(FieldSchema, FieldSchema.thrift_spec)), None, ), # 0
+    (1, TType.STRUCT, 'o1', (MetaException, MetaException.thrift_spec), None, ), # 1
+    (2, TType.STRUCT, 'o2', (UnknownTableException, UnknownTableException.thrift_spec), None, ), # 2
+    (3, TType.STRUCT, 'o3', (UnknownDBException, UnknownDBException.thrift_spec), None, ), # 3
+  )
+
+  def __init__(self, success=None, o1=None, o2=None, o3=None,):
+    self.success = success
+    self.o1 = o1
+    self.o2 = o2
+    self.o3 = o3
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.LIST:
+          self.success = []
+          (_etype488, _size485) = iprot.readListBegin()
+          for _i489 in xrange(_size485):
+            _elem490 = FieldSchema()
+            _elem490.read(iprot)
+            self.success.append(_elem490)
+          iprot.readListEnd()
+        else:
+          iprot.skip(ftype)
+      elif fid == 1:
+        if ftype == TType.STRUCT:
+          self.o1 = MetaException()
+          self.o1.read(iprot)
+        else:
+          iprot.skip(ftype)
+      elif fid == 2:
+        if ftype == TType.STRUCT:
+          self.o2 = UnknownTableException()
+          self.o2.read(iprot)
+        else:
+          iprot.skip(ftype)
+      elif fid == 3:
+        if ftype == TType.STRUCT:
+          self.o3 = UnknownDBException()
+          self.o3.read(iprot)
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_schema_with_environment_context_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.LIST, 0)
+      oprot.writeListBegin(TType.STRUCT, len(self.success))
+      for iter491 in self.success:
+        iter491.write(oprot)
+      oprot.writeListEnd()
+      oprot.writeFieldEnd()
+    if self.o1 is not None:
+      oprot.writeFieldBegin('o1', TType.STRUCT, 1)
+      self.o1.write(oprot)
+      oprot.writeFieldEnd()
+    if self.o2 is not None:
+      oprot.writeFieldBegin('o2', TType.STRUCT, 2)
+      self.o2.write(oprot)
+      oprot.writeFieldEnd()
+    if self.o3 is not None:
+      oprot.writeFieldBegin('o3', TType.STRUCT, 3)
+      self.o3.write(oprot)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
 class create_table_args:
   """
   Attributes:
@@ -10148,10 +10668,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype481, _size478) = iprot.readListBegin()
-          for _i482 in xrange(_size478):
-            _elem483 = iprot.readString();
-            self.success.append(_elem483)
+          (_etype495, _size492) = iprot.readListBegin()
+          for _i496 in xrange(_size492):
+            _elem497 = iprot.readString();
+            self.success.append(_elem497)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10174,8 +10694,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter484 in self.success:
-        oprot.writeString(iter484)
+      for iter498 in self.success:
+        oprot.writeString(iter498)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -10288,10 +10808,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype488, _size485) = iprot.readListBegin()
-          for _i489 in xrange(_size485):
-            _elem490 = iprot.readString();
-            self.success.append(_elem490)
+          (_etype502, _size499) = iprot.readListBegin()
+          for _i503 in xrange(_size499):
+            _elem504 = iprot.readString();
+            self.success.append(_elem504)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10314,8 +10834,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter491 in self.success:
-        oprot.writeString(iter491)
+      for iter505 in self.success:
+        oprot.writeString(iter505)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -10532,10 +11052,10 @@ def read(self, iprot):
       elif fid == 2:
         if ftype == TType.LIST:
           self.tbl_names = []
-          (_etype495, _size492) = iprot.readListBegin()
-          for _i496 in xrange(_size492):
-            _elem497 = iprot.readString();
-            self.tbl_names.append(_elem497)
+          (_etype509, _size506) = iprot.readListBegin()
+          for _i510 in xrange(_size506):
+            _elem511 = iprot.readString();
+            self.tbl_names.append(_elem511)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10556,8 +11076,8 @@ def write(self, oprot):
     if self.tbl_names is not None:
       oprot.writeFieldBegin('tbl_names', TType.LIST, 2)
       oprot.writeListBegin(TType.STRING, len(self.tbl_names))
-      for iter498 in self.tbl_names:
-        oprot.writeString(iter498)
+      for iter512 in self.tbl_names:
+        oprot.writeString(iter512)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -10612,11 +11132,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype502, _size499) = iprot.readListBegin()
-          for _i503 in xrange(_size499):
-            _elem504 = Table()
-            _elem504.read(iprot)
-            self.success.append(_elem504)
+          (_etype516, _size513) = iprot.readListBegin()
+          for _i517 in xrange(_size513):
+            _elem518 = Table()
+            _elem518.read(iprot)
+            self.success.append(_elem518)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10651,8 +11171,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter505 in self.success:
-        iter505.write(oprot)
+      for iter519 in self.success:
+        iter519.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -10803,10 +11323,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype509, _size506) = iprot.readListBegin()
-          for _i510 in xrange(_size506):
-            _elem511 = iprot.readString();
-            self.success.append(_elem511)
+          (_etype523, _size520) = iprot.readListBegin()
+          for _i524 in xrange(_size520):
+            _elem525 = iprot.readString();
+            self.success.append(_elem525)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10841,8 +11361,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter512 in self.success:
-        oprot.writeString(iter512)
+      for iter526 in self.success:
+        oprot.writeString(iter526)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -11736,11 +12256,11 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.LIST:
           self.new_parts = []
-          (_etype516, _size513) = iprot.readListBegin()
-          for _i517 in xrange(_size513):
-            _elem518 = Partition()
-            _elem518.read(iprot)
-            self.new_parts.append(_elem518)
+          (_etype530, _size527) = iprot.readListBegin()
+          for _i531 in xrange(_size527):
+            _elem532 = Partition()
+            _elem532.read(iprot)
+            self.new_parts.append(_elem532)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -11757,8 +12277,8 @@ def write(self, oprot):
     if self.new_parts is not None:
       oprot.writeFieldBegin('new_parts', TType.LIST, 1)
       oprot.writeListBegin(TType.STRUCT, len(self.new_parts))
-      for iter519 in self.new_parts:
-        iter519.write(oprot)
+      for iter533 in self.new_parts:
+        iter533.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -11903,11 +12423,11 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.LIST:
           self.new_parts = []
-          (_etype523, _size520) = iprot.readListBegin()
-          for _i524 in xrange(_size520):
-            _elem525 = PartitionSpec()
-            _elem525.read(iprot)
-            self.new_parts.append(_elem525)
+          (_etype537, _size534) = iprot.readListBegin()
+          for _i538 in xrange(_size534):
+            _elem539 = PartitionSpec()
+            _elem539.read(iprot)
+            self.new_parts.append(_elem539)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -11924,8 +12444,8 @@ def write(self, oprot):
     if self.new_parts is not None:
       oprot.writeFieldBegin('new_parts', TType.LIST, 1)
       oprot.writeListBegin(TType.STRUCT, len(self.new_parts))
-      for iter526 in self.new_parts:
-        iter526.write(oprot)
+      for iter540 in self.new_parts:
+        iter540.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -12086,10 +12606,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype530, _size527) = iprot.readListBegin()
-          for _i531 in xrange(_size527):
-            _elem532 = iprot.readString();
-            self.part_vals.append(_elem532)
+          (_etype544, _size541) = iprot.readListBegin()
+          for _i545 in xrange(_size541):
+            _elem546 = iprot.readString();
+            self.part_vals.append(_elem546)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -12114,8 +12634,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter533 in self.part_vals:
-        oprot.writeString(iter533)
+      for iter547 in self.part_vals:
+        oprot.writeString(iter547)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -12440,10 +12960,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype537, _size534) = iprot.readListBegin()
-          for _i538 in xrange(_size534):
-            _elem539 = iprot.readString();
-            self.part_vals.append(_elem539)
+          (_etype551, _size548) = iprot.readListBegin()
+          for _i552 in xrange(_size548):
+            _elem553 = iprot.readString();
+            self.part_vals.append(_elem553)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -12474,8 +12994,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter540 in self.part_vals:
-        oprot.writeString(iter540)
+      for iter554 in self.part_vals:
+        oprot.writeString(iter554)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.environment_context is not None:
@@ -13023,10 +13543,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype544, _size541) = iprot.readListBegin()
-          for _i545 in xrange(_size541):
-            _elem546 = iprot.readString();
-            self.part_vals.append(_elem546)
+          (_etype558, _size555) = iprot.readListBegin()
+          for _i559 in xrange(_size555):
+            _elem560 = iprot.readString();
+            self.part_vals.append(_elem560)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -13056,8 +13576,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter547 in self.part_vals:
-        oprot.writeString(iter547)
+      for iter561 in self.part_vals:
+        oprot.writeString(iter561)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.deleteData is not None:
@@ -13215,10 +13735,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype551, _size548) = iprot.readListBegin()
-          for _i552 in xrange(_size548):
-            _elem553 = iprot.readString();
-            self.part_vals.append(_elem553)
+          (_etype565, _size562) = iprot.readListBegin()
+          for _i566 in xrange(_size562):
+            _elem567 = iprot.readString();
+            self.part_vals.append(_elem567)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -13254,8 +13774,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter554 in self.part_vals:
-        oprot.writeString(iter554)
+      for iter568 in self.part_vals:
+        oprot.writeString(iter568)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.deleteData is not None:
@@ -13933,10 +14453,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype558, _size555) = iprot.readListBegin()
-          for _i559 in xrange(_size555):
-            _elem560 = iprot.readString();
-            self.part_vals.append(_elem560)
+          (_etype572, _size569) = iprot.readListBegin()
+          for _i573 in xrange(_size569):
+            _elem574 = iprot.readString();
+            self.part_vals.append(_elem574)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -13961,8 +14481,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter561 in self.part_vals:
-        oprot.writeString(iter561)
+      for iter575 in self.part_vals:
+        oprot.writeString(iter575)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -14107,11 +14627,11 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.MAP:
           self.partitionSpecs = {}
-          (_ktype563, _vtype564, _size562 ) = iprot.readMapBegin() 
-          for _i566 in xrange(_size562):
-            _key567 = iprot.readString();
-            _val568 = iprot.readString();
-            self.partitionSpecs[_key567] = _val568
+          (_ktype577, _vtype578, _size576 ) = iprot.readMapBegin() 
+          for _i580 in xrange(_size576):
+            _key581 = iprot.readString();
+            _val582 = iprot.readString();
+            self.partitionSpecs[_key581] = _val582
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -14148,9 +14668,9 @@ def write(self, oprot):
     if self.partitionSpecs is not None:
       oprot.writeFieldBegin('partitionSpecs', TType.MAP, 1)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.partitionSpecs))
-      for kiter569,viter570 in self.partitionSpecs.items():
-        oprot.writeString(kiter569)
-        oprot.writeString(viter570)
+      for kiter583,viter584 in self.partitionSpecs.items():
+        oprot.writeString(kiter583)
+        oprot.writeString(viter584)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.source_db is not None:
@@ -14347,10 +14867,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype574, _size571) = iprot.readListBegin()
-          for _i575 in xrange(_size571):
-            _elem576 = iprot.readString();
-            self.part_vals.append(_elem576)
+          (_etype588, _size585) = iprot.readListBegin()
+          for _i589 in xrange(_size585):
+            _elem590 = iprot.readString();
+            self.part_vals.append(_elem590)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -14362,10 +14882,10 @@ def read(self, iprot):
       elif fid == 5:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype580, _size577) = iprot.readListBegin()
-          for _i581 in xrange(_size577):
-            _elem582 = iprot.readString();
-            self.group_names.append(_elem582)
+          (_etype594, _size591) = iprot.readListBegin()
+          for _i595 in xrange(_size591):
+            _elem596 = iprot.readString();
+            self.group_names.append(_elem596)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -14390,8 +14910,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter583 in self.part_vals:
-        oprot.writeString(iter583)
+      for iter597 in self.part_vals:
+        oprot.writeString(iter597)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.user_name is not None:
@@ -14401,8 +14921,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 5)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter584 in self.group_names:
-        oprot.writeString(iter584)
+      for iter598 in self.group_names:
+        oprot.writeString(iter598)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -14794,11 +15314,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype588, _size585) = iprot.readListBegin()
-          for _i589 in xrange(_size585):
-            _elem590 = Partition()
-            _elem590.read(iprot)
-            self.success.append(_elem590)
+          (_etype602, _size599) = iprot.readListBegin()
+          for _i603 in xrange(_size599):
+            _elem604 = Partition()
+            _elem604.read(iprot)
+            self.success.append(_elem604)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -14827,8 +15347,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter591 in self.success:
-        iter591.write(oprot)
+      for iter605 in self.success:
+        iter605.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -14915,10 +15435,10 @@ def read(self, iprot):
       elif fid == 5:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype595, _size592) = iprot.readListBegin()
-          for _i596 in xrange(_size592):
-            _elem597 = iprot.readString();
-            self.group_names.append(_elem597)
+          (_etype609, _size606) = iprot.readListBegin()
+          for _i610 in xrange(_size606):
+            _elem611 = iprot.readString();
+            self.group_names.append(_elem611)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -14951,8 +15471,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 5)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter598 in self.group_names:
-        oprot.writeString(iter598)
+      for iter612 in self.group_names:
+        oprot.writeString(iter612)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -15004,11 +15524,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype602, _size599) = iprot.readListBegin()
-          for _i603 in xrange(_size599):
-            _elem604 = Partition()
-            _elem604.read(iprot)
-            self.success.append(_elem604)
+          (_etype616, _size613) = iprot.readListBegin()
+          for _i617 in xrange(_size613):
+            _elem618 = Partition()
+            _elem618.read(iprot)
+            self.success.append(_elem618)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15037,8 +15557,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter605 in self.success:
-        iter605.write(oprot)
+      for iter619 in self.success:
+        iter619.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -15182,11 +15702,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype609, _size606) = iprot.readListBegin()
-          for _i610 in xrange(_size606):
-            _elem611 = PartitionSpec()
-            _elem611.read(iprot)
-            self.success.append(_elem611)
+          (_etype623, _size620) = iprot.readListBegin()
+          for _i624 in xrange(_size620):
+            _elem625 = PartitionSpec()
+            _elem625.read(iprot)
+            self.success.append(_elem625)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15215,8 +15735,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter612 in self.success:
-        iter612.write(oprot)
+      for iter626 in self.success:
+        iter626.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -15357,10 +15877,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype616, _size613) = iprot.readListBegin()
-          for _i617 in xrange(_size613):
-            _elem618 = iprot.readString();
-            self.success.append(_elem618)
+          (_etype630, _size627) = iprot.readListBegin()
+          for _i631 in xrange(_size627):
+            _elem632 = iprot.readString();
+            self.success.append(_elem632)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15383,8 +15903,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter619 in self.success:
-        oprot.writeString(iter619)
+      for iter633 in self.success:
+        oprot.writeString(iter633)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o2 is not None:
@@ -15454,10 +15974,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype623, _size620) = iprot.readListBegin()
-          for _i624 in xrange(_size620):
-            _elem625 = iprot.readString();
-            self.part_vals.append(_elem625)
+          (_etype637, _size634) = iprot.readListBegin()
+          for _i638 in xrange(_size634):
+            _elem639 = iprot.readString();
+            self.part_vals.append(_elem639)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15487,8 +16007,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter626 in self.part_vals:
-        oprot.writeString(iter626)
+      for iter640 in self.part_vals:
+        oprot.writeString(iter640)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.max_parts is not None:
@@ -15544,11 +16064,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype630, _size627) = iprot.readListBegin()
-          for _i631 in xrange(_size627):
-            _elem632 = Partition()
-            _elem632.read(iprot)
-            self.success.append(_elem632)
+          (_etype644, _size641) = iprot.readListBegin()
+          for _i645 in xrange(_size641):
+            _elem646 = Partition()
+            _elem646.read(iprot)
+            self.success.append(_elem646)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15577,8 +16097,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter633 in self.success:
-        iter633.write(oprot)
+      for iter647 in self.success:
+        iter647.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -15658,10 +16178,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype637, _size634) = iprot.readListBegin()
-          for _i638 in xrange(_size634):
-            _elem639 = iprot.readString();
-            self.part_vals.append(_elem639)
+          (_etype651, _size648) = iprot.readListBegin()
+          for _i652 in xrange(_size648):
+            _elem653 = iprot.readString();
+            self.part_vals.append(_elem653)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15678,10 +16198,10 @@ def read(self, iprot):
       elif fid == 6:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype643, _size640) = iprot.readListBegin()
-          for _i644 in xrange(_size640):
-            _elem645 = iprot.readString();
-            self.group_names.append(_elem645)
+          (_etype657, _size654) = iprot.readListBegin()
+          for _i658 in xrange(_size654):
+            _elem659 = iprot.readString();
+            self.group_names.append(_elem659)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15706,8 +16226,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter646 in self.part_vals:
-        oprot.writeString(iter646)
+      for iter660 in self.part_vals:
+        oprot.writeString(iter660)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.max_parts is not None:
@@ -15721,8 +16241,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 6)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter647 in self.group_names:
-        oprot.writeString(iter647)
+      for iter661 in self.group_names:
+        oprot.writeString(iter661)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -15774,11 +16294,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype651, _size648) = iprot.readListBegin()
-          for _i652 in xrange(_size648):
-            _elem653 = Partition()
-            _elem653.read(iprot)
-            self.success.append(_elem653)
+          (_etype665, _size662) = iprot.readListBegin()
+          for _i666 in xrange(_size662):
+            _elem667 = Partition()
+            _elem667.read(iprot)
+            self.success.append(_elem667)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15807,8 +16327,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter654 in self.success:
-        iter654.write(oprot)
+      for iter668 in self.success:
+        iter668.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -15882,10 +16402,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype658, _size655) = iprot.readListBegin()
-          for _i659 in xrange(_size655):
-            _elem660 = iprot.readString();
-            self.part_vals.append(_elem660)
+          (_etype672, _size669) = iprot.readListBegin()
+          for _i673 in xrange(_size669):
+            _elem674 = iprot.readString();
+            self.part_vals.append(_elem674)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15915,8 +16435,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter661 in self.part_vals:
-        oprot.writeString(iter661)
+      for iter675 in self.part_vals:
+        oprot.writeString(iter675)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.max_parts is not None:
@@ -15972,10 +16492,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype665, _size662) = iprot.readListBegin()
-          for _i666 in xrange(_size662):
-            _elem667 = iprot.readString();
-            self.success.append(_elem667)
+          (_etype679, _size676) = iprot.readListBegin()
+          for _i680 in xrange(_size676):
+            _elem681 = iprot.readString();
+            self.success.append(_elem681)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16004,8 +16524,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter668 in self.success:
-        oprot.writeString(iter668)
+      for iter682 in self.success:
+        oprot.writeString(iter682)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16161,11 +16681,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype672, _size669) = iprot.readListBegin()
-          for _i673 in xrange(_size669):
-            _elem674 = Partition()
-            _elem674.read(iprot)
-            self.success.append(_elem674)
+          (_etype686, _size683) = iprot.readListBegin()
+          for _i687 in xrange(_size683):
+            _elem688 = Partition()
+            _elem688.read(iprot)
+            self.success.append(_elem688)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16194,8 +16714,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter675 in self.success:
-        iter675.write(oprot)
+      for iter689 in self.success:
+        iter689.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16351,11 +16871,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype679, _size676) = iprot.readListBegin()
-          for _i680 in xrange(_size676):
-            _elem681 = PartitionSpec()
-            _elem681.read(iprot)
-            self.success.append(_elem681)
+          (_etype693, _size690) = iprot.readListBegin()
+          for _i694 in xrange(_size690):
+            _elem695 = PartitionSpec()
+            _elem695.read(iprot)
+            self.success.append(_elem695)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16384,8 +16904,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter682 in self.success:
-        iter682.write(oprot)
+      for iter696 in self.success:
+        iter696.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16603,10 +17123,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.names = []
-          (_etype686, _size683) = iprot.readListBegin()
-          for _i687 in xrange(_size683):
-            _elem688 = iprot.readString();
-            self.names.append(_elem688)
+          (_etype700, _size697) = iprot.readListBegin()
+          for _i701 in xrange(_size697):
+            _elem702 = iprot.readString();
+            self.names.append(_elem702)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16631,8 +17151,8 @@ def write(self, oprot):
     if self.names is not None:
       oprot.writeFieldBegin('names', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.names))
-      for iter689 in self.names:
-        oprot.writeString(iter689)
+      for iter703 in self.names:
+        oprot.writeString(iter703)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -16684,11 +17204,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype693, _size690) = iprot.readListBegin()
-          for _i694 in xrange(_size690):
-            _elem695 = Partition()
-            _elem695.read(iprot)
-            self.success.append(_elem695)
+          (_etype707, _size704) = iprot.readListBegin()
+          for _i708 in xrange(_size704):
+            _elem709 = Partition()
+            _elem709.read(iprot)
+            self.success.append(_elem709)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16717,8 +17237,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter696 in self.success:
-        iter696.write(oprot)
+      for iter710 in self.success:
+        iter710.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16948,11 +17468,11 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.new_parts = []
-          (_etype700, _size697) = iprot.readListBegin()
-          for _i701 in xrange(_size697):
-            _elem702 = Partition()
-            _elem702.read(iprot)
-            self.new_parts.append(_elem702)
+          (_etype714, _size711) = iprot.readListBegin()
+          for _i715 in xrange(_size711):
+            _elem716 = Partition()
+            _elem716.read(iprot)
+            self.new_parts.append(_elem716)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16977,8 +17497,8 @@ def write(self, oprot):
     if self.new_parts is not None:
       oprot.writeFieldBegin('new_parts', TType.LIST, 3)
       oprot.writeListBegin(TType.STRUCT, len(self.new_parts))
-      for iter703 in self.new_parts:
-        iter703.write(oprot)
+      for iter717 in self.new_parts:
+        iter717.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -17290,10 +17810,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype707, _size704) = iprot.readListBegin()
-          for _i708 in xrange(_size704):
-            _elem709 = iprot.readString();
-            self.part_vals.append(_elem709)
+          (_etype721, _size718) = iprot.readListBegin()
+          for _i722 in xrange(_size718):
+            _elem723 = iprot.readString();
+            self.part_vals.append(_elem723)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -17324,8 +17844,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter710 in self.part_vals:
-        oprot.writeString(iter710)
+      for iter724 in self.part_vals:
+        oprot.writeString(iter724)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.new_part is not None:
@@ -17453,10 +17973,10 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype714, _size711) = iprot.readListBegin()
-          for _i715 in xrange(_size711):
-            _elem716 = iprot.readString();
-            self.part_vals.append(_elem716)
+          (_etype728, _size725) = iprot.readListBegin()
+          for _i729 in xrange(_size725):
+            _elem730 = iprot.readString();
+            self.part_vals.append(_elem730)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -17478,8 +17998,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 1)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter717 in self.part_vals:
-        oprot.writeString(iter717)
+      for iter731 in self.part_vals:
+        oprot.writeString(iter731)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.throw_exception is not None:
@@ -17808,10 +18328,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype721, _size718) = iprot.readListBegin()
-          for _i722 in xrange(_size718):
-            _elem723 = iprot.readString();
-            self.success.append(_elem723)
+          (_etype735, _size732) = iprot.readListBegin()
+          for _i736 in xrange(_size732):
+            _elem737 = iprot.readString();
+            self.success.append(_elem737)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -17834,8 +18354,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter724 in self.success:
-        oprot.writeString(iter724)
+      for iter738 in self.success:
+        oprot.writeString(iter738)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -17948,11 +18468,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.MAP:
           self.success = {}
-          (_ktype726, _vtype727, _size725 ) = iprot.readMapBegin() 
-          for _i729 in xrange(_size725):
-            _key730 = iprot.readString();
-            _val731 = iprot.readString();
-            self.success[_key730] = _val731
+          (_ktype740, _vtype741, _size739 ) = iprot.readMapBegin() 
+          for _i743 in xrange(_size739):
+            _key744 = iprot.readString();
+            _val745 = iprot.readString();
+            self.success[_key744] = _val745
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -17975,9 +18495,9 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.MAP, 0)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
-      for kiter732,viter733 in self.success.items():
-        oprot.writeString(kiter732)
-        oprot.writeString(viter733)
+      for kiter746,viter747 in self.success.items():
+        oprot.writeString(kiter746)
+        oprot.writeString(viter747)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -18047,11 +18567,11 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.MAP:
           self.part_vals = {}
-          (_ktype735, _vtype736, _size734 ) = iprot.readMapBegin() 
-          for _i738 in xrange(_size734):
-            _key739 = iprot.readString();
-            _val740 = iprot.readString();
-            self.part_vals[_key739] = _val740
+          (_ktype749, _vtype750, _size748 ) = iprot.readMapBegin() 
+          for _i752 in xrange(_size748):
+            _key753 = iprot.readString();
+            _val754 = iprot.readString();
+            self.part_vals[_key753] = _val754
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -18081,9 +18601,9 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.MAP, 3)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.part_vals))
-      for kiter741,viter742 in self.part_vals.items():
-        oprot.writeString(kiter741)
-        oprot.writeString(viter742)
+      for kiter755,viter756 in self.part_vals.items():
+        oprot.writeString(kiter755)
+        oprot.writeString(viter756)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.eventType is not None:
@@ -18279,11 +18799,11 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.MAP:
           self.part_vals = {}
-          (_ktype744, _vtype745, _size743 ) = iprot.readMapBegin() 
-          for _i747 in xrange(_size743):
-            _key748 = iprot.readString();
-            _val749 = iprot.readString();
-            self.part_vals[_key748] = _val749
+          (_ktype758, _vtype759, _size757 ) = iprot.readMapBegin() 
+          for _i761 in xrange(_size757):
+            _key762 = iprot.readString();
+            _val763 = iprot.readString();
+            self.part_vals[_key762] = _val763
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -18313,9 +18833,9 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.MAP, 3)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.part_vals))
-      for kiter750,viter751 in self.part_vals.items():
-        oprot.writeString(kiter750)
-        oprot.writeString(viter751)
+      for kiter764,viter765 in self.part_vals.items():
+        oprot.writeString(kiter764)
+        oprot.writeString(viter765)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.eventType is not None:
@@ -19287,11 +19807,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype755, _size752) = iprot.readListBegin()
-          for _i756 in xrange(_size752):
-            _elem757 = Index()
-            _elem757.read(iprot)
-            self.success.append(_elem757)
+          (_etype769, _size766) = iprot.readListBegin()
+          for _i770 in xrange(_size766):
+            _elem771 = Index()
+            _elem771.read(iprot)
+            self.success.append(_elem771)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -19320,8 +19840,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter758 in self.success:
-        iter758.write(oprot)
+      for iter772 in self.success:
+        iter772.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -19462,10 +19982,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype762, _size759) = iprot.readListBegin()
-          for _i763 in xrange(_size759):
-            _elem764 = iprot.readString();
-            self.success.append(_elem764)
+          (_etype776, _size773) = iprot.readListBegin()
+          for _i777 in xrange(_size773):
+            _elem778 = iprot.readString();
+            self.success.append(_elem778)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -19488,8 +20008,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter765 in self.success:
-        oprot.writeString(iter765)
+      for iter779 in self.success:
+        oprot.writeString(iter779)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o2 is not None:
@@ -21843,10 +22363,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype769, _size766) = iprot.readListBegin()
-          for _i770 in xrange(_size766):
-            _elem771 = iprot.readString();
-            self.success.append(_elem771)
+          (_etype783, _size780) = iprot.readListBegin()
+          for _i784 in xrange(_size780):
+            _elem785 = iprot.readString();
+            self.success.append(_elem785)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -21869,8 +22389,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter772 in self.success:
-        oprot.writeString(iter772)
+      for iter786 in self.success:
+        oprot.writeString(iter786)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -22388,10 +22908,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype776, _size773) = iprot.readListBegin()
-          for _i777 in xrange(_size773):
-            _elem778 = iprot.readString();
-            self.success.append(_elem778)
+          (_etype790, _size787) = iprot.readListBegin()
+          for _i791 in xrange(_size787):
+            _elem792 = iprot.readString();
+            self.success.append(_elem792)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -22414,8 +22934,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter779 in self.success:
-        oprot.writeString(iter779)
+      for iter793 in self.success:
+        oprot.writeString(iter793)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -22888,11 +23408,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype783, _size780) = iprot.readListBegin()
-          for _i784 in xrange(_size780):
-            _elem785 = Role()
-            _elem785.read(iprot)
-            self.success.append(_elem785)
+          (_etype797, _size794) = iprot.readListBegin()
+          for _i798 in xrange(_size794):
+            _elem799 = Role()
+            _elem799.read(iprot)
+            self.success.append(_elem799)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -22915,8 +23435,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter786 in self.success:
-        iter786.write(oprot)
+      for iter800 in self.success:
+        iter800.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -23386,10 +23906,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype790, _size787) = iprot.readListBegin()
-          for _i791 in xrange(_size787):
-            _elem792 = iprot.readString();
-            self.group_names.append(_elem792)
+          (_etype804, _size801) = iprot.readListBegin()
+          for _i805 in xrange(_size801):
+            _elem806 = iprot.readString();
+            self.group_names.append(_elem806)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -23414,8 +23934,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter793 in self.group_names:
-        oprot.writeString(iter793)
+      for iter807 in self.group_names:
+        oprot.writeString(iter807)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -23622,11 +24142,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype797, _size794) = iprot.readListBegin()
-          for _i798 in xrange(_size794):
-            _elem799 = HiveObjectPrivilege()
-            _elem799.read(iprot)
-            self.success.append(_elem799)
+          (_etype811, _size808) = iprot.readListBegin()
+          for _i812 in xrange(_size808):
+            _elem813 = HiveObjectPrivilege()
+            _elem813.read(iprot)
+            self.success.append(_elem813)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -23649,8 +24169,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter800 in self.success:
-        iter800.write(oprot)
+      for iter814 in self.success:
+        iter814.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -24109,10 +24629,10 @@ def read(self, iprot):
       elif fid == 2:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype804, _size801) = iprot.readListBegin()
-          for _i805 in xrange(_size801):
-            _elem806 = iprot.readString();
-            self.group_names.append(_elem806)
+          (_etype818, _size815) = iprot.readListBegin()
+          for _i819 in xrange(_size815):
+            _elem820 = iprot.readString();
+            self.group_names.append(_elem820)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -24133,8 +24653,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 2)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter807 in self.group_names:
-        oprot.writeString(iter807)
+      for iter821 in self.group_names:
+        oprot.writeString(iter821)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -24183,10 +24703,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype811, _size808) = iprot.readListBegin()
-          for _i812 in xrange(_size808):
-            _elem813 = iprot.readString();
-            self.success.append(_elem813)
+          (_etype825, _size822) = iprot.readListBegin()
+          for _i826 in xrange(_size822):
+            _elem827 = iprot.readString();
+            self.success.append(_elem827)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -24209,8 +24729,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter814 in self.success:
-        oprot.writeString(iter814)
+      for iter828 in self.success:
+        oprot.writeString(iter828)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
diff --git a/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb b/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
index a383e0b..3228cd6 100644
--- a/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
+++ b/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
@@ -228,6 +228,24 @@ module ThriftHiveMetastore
       raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_fields failed: unknown result')
     end
 
+    def get_fields_with_environment_context(db_name, table_name, environment_context)
+      send_get_fields_with_environment_context(db_name, table_name, environment_context)
+      return recv_get_fields_with_environment_context()
+    end
+
+    def send_get_fields_with_environment_context(db_name, table_name, environment_context)
+      send_message('get_fields_with_environment_context', Get_fields_with_environment_context_args, :db_name => db_name, :table_name => table_name, :environment_context => environment_context)
+    end
+
+    def recv_get_fields_with_environment_context()
+      result = receive_message(Get_fields_with_environment_context_result)
+      return result.success unless result.success.nil?
+      raise result.o1 unless result.o1.nil?
+      raise result.o2 unless result.o2.nil?
+      raise result.o3 unless result.o3.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_fields_with_environment_context failed: unknown result')
+    end
+
     def get_schema(db_name, table_name)
       send_get_schema(db_name, table_name)
       return recv_get_schema()
@@ -246,6 +264,24 @@ module ThriftHiveMetastore
       raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_schema failed: unknown result')
     end
 
+    def get_schema_with_environment_context(db_name, table_name, environment_context)
+      send_get_schema_with_environment_context(db_name, table_name, environment_context)
+      return recv_get_schema_with_environment_context()
+    end
+
+    def send_get_schema_with_environment_context(db_name, table_name, environment_context)
+      send_message('get_schema_with_environment_context', Get_schema_with_environment_context_args, :db_name => db_name, :table_name => table_name, :environment_context => environment_context)
+    end
+
+    def recv_get_schema_with_environment_context()
+      result = receive_message(Get_schema_with_environment_context_result)
+      return result.success unless result.success.nil?
+      raise result.o1 unless result.o1.nil?
+      raise result.o2 unless result.o2.nil?
+      raise result.o3 unless result.o3.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_schema_with_environment_context failed: unknown result')
+    end
+
     def create_table(tbl)
       send_create_table(tbl)
       recv_create_table()
@@ -2179,6 +2215,21 @@ module ThriftHiveMetastore
       write_result(result, oprot, 'get_fields', seqid)
     end
 
+    def process_get_fields_with_environment_context(seqid, iprot, oprot)
+      args = read_args(iprot, Get_fields_with_environment_context_args)
+      result = Get_fields_with_environment_context_result.new()
+      begin
+        result.success = @handler.get_fields_with_environment_context(args.db_name, args.table_name, args.environment_context)
+      rescue ::MetaException => o1
+        result.o1 = o1
+      rescue ::UnknownTableException => o2
+        result.o2 = o2
+      rescue ::UnknownDBException => o3
+        result.o3 = o3
+      end
+      write_result(result, oprot, 'get_fields_with_environment_context', seqid)
+    end
+
     def process_get_schema(seqid, iprot, oprot)
       args = read_args(iprot, Get_schema_args)
       result = Get_schema_result.new()
@@ -2194,6 +2245,21 @@ module ThriftHiveMetastore
       write_result(result, oprot, 'get_schema', seqid)
     end
 
+    def process_get_schema_with_environment_context(seqid, iprot, oprot)
+      args = read_args(iprot, Get_schema_with_environment_context_args)
+      result = Get_schema_with_environment_context_result.new()
+      begin
+        result.success = @handler.get_schema_with_environment_context(args.db_name, args.table_name, args.environment_context)
+      rescue ::MetaException => o1
+        result.o1 = o1
+      rescue ::UnknownTableException => o2
+        result.o2 = o2
+      rescue ::UnknownDBException => o3
+        result.o3 = o3
+      end
+      write_result(result, oprot, 'get_schema_with_environment_context', seqid)
+    end
+
     def process_create_table(seqid, iprot, oprot)
       args = read_args(iprot, Create_table_args)
       result = Create_table_result.new()
@@ -4008,6 +4074,48 @@ module ThriftHiveMetastore
     ::Thrift::Struct.generate_accessors self
   end
 
+  class Get_fields_with_environment_context_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    DB_NAME = 1
+    TABLE_NAME = 2
+    ENVIRONMENT_CONTEXT = 3
+
+    FIELDS = {
+      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
+      TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
+      ENVIRONMENT_CONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'environment_context', :class => ::EnvironmentContext}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Get_fields_with_environment_context_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+    O1 = 1
+    O2 = 2
+    O3 = 3
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FieldSchema}},
+      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
+      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::UnknownTableException},
+      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::UnknownDBException}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
   class Get_schema_args
     include ::Thrift::Struct, ::Thrift::Struct_Union
     DB_NAME = 1
@@ -4048,6 +4156,48 @@ module ThriftHiveMetastore
     ::Thrift::Struct.generate_accessors self
   end
 
+  class Get_schema_with_environment_context_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    DB_NAME = 1
+    TABLE_NAME = 2
+    ENVIRONMENT_CONTEXT = 3
+
+    FIELDS = {
+      DB_NAME => {:type => ::Thrift::Types::STRING, :name => 'db_name'},
+      TABLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'table_name'},
+      ENVIRONMENT_CONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'environment_context', :class => ::EnvironmentContext}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Get_schema_with_environment_context_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+    O1 = 1
+    O2 = 2
+    O3 = 3
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FieldSchema}},
+      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException},
+      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::UnknownTableException},
+      O3 => {:type => ::Thrift::Types::STRUCT, :name => 'o3', :class => ::UnknownDBException}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
   class Create_table_args
     include ::Thrift::Struct, ::Thrift::Struct_Union
     TBL = 1
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
index 3d27723..8920ecc 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
@@ -3388,13 +3388,22 @@ private void alter_table_core(final String dbname, final String name, final Tabl
     @Override
     public List<FieldSchema> get_fields(String db, String tableName)
         throws MetaException, UnknownTableException, UnknownDBException {
-      startFunction("get_fields", ": db=" + db + "tbl=" + tableName);
+      return get_fields_with_environment_context(db, tableName, null);
+    }
+
+    @Override
+    public List<FieldSchema> get_fields_with_environment_context(String db, String tableName,
+        final EnvironmentContext envContext)
+        throws MetaException, UnknownTableException, UnknownDBException {
+      startFunction("get_fields_with_environment_context", ": db=" + db + "tbl=" + tableName);
       String[] names = tableName.split("\\.");
       String base_table_name = names[0];
 
       Table tbl;
       List<FieldSchema> ret = null;
       Exception ex = null;
+      ClassLoader orgHiveLoader = null;
+      Configuration curConf = hiveConf;
       try {
         try {
           tbl = get_table_core(db, base_table_name);
@@ -3407,7 +3416,18 @@ private void alter_table_core(final String dbname, final String name, final Tabl
           ret = tbl.getSd().getCols();
         } else {
           try {
-            Deserializer s = MetaStoreUtils.getDeserializer(hiveConf, tbl, false);
+            if (envContext != null) {
+              String addedJars = envContext.getProperties().get("hive.added.jars.path");
+              if (org.apache.commons.lang.StringUtils.isNotBlank(addedJars)) {
+                //for thread safe
+                curConf = getConf();
+                orgHiveLoader = curConf.getClassLoader();
+                ClassLoader loader = MetaStoreUtils.addToClassPath(orgHiveLoader, org.apache.commons.lang.StringUtils.split(addedJars, ","));
+                curConf.setClassLoader(loader);
+              }
+            }
+
+            Deserializer s = MetaStoreUtils.getDeserializer(curConf, tbl, false);
             ret = MetaStoreUtils.getFieldsFromDeserializer(tableName, s);
           } catch (SerDeException e) {
             StringUtils.stringifyException(e);
@@ -3426,7 +3446,10 @@ private void alter_table_core(final String dbname, final String name, final Tabl
           throw newMetaException(e);
         }
       } finally {
-        endFunction("get_fields", ret != null, ex, tableName);
+        if (orgHiveLoader != null) {
+          curConf.setClassLoader(orgHiveLoader);
+        }
+        endFunction("get_fields_with_environment_context", ret != null, ex, tableName);
       }
 
       return ret;
@@ -3448,7 +3471,30 @@ private void alter_table_core(final String dbname, final String name, final Tabl
     @Override
     public List<FieldSchema> get_schema(String db, String tableName)
         throws MetaException, UnknownTableException, UnknownDBException {
-      startFunction("get_schema", ": db=" + db + "tbl=" + tableName);
+      return get_schema_with_environment_context(db,tableName, null);
+    }
+
+
+    /**
+     * Return the schema of the table. This function includes partition columns
+     * in addition to the regular columns.
+     *
+     * @param db
+     *          Name of the database
+     * @param tableName
+     *          Name of the table
+     * @param envContext
+     *          Store session based properties
+     * @return List of columns, each column is a FieldSchema structure
+     * @throws MetaException
+     * @throws UnknownTableException
+     * @throws UnknownDBException
+     */
+    @Override
+    public List<FieldSchema> get_schema_with_environment_context(String db, String tableName,
+          final EnvironmentContext envContext)
+        throws MetaException, UnknownTableException, UnknownDBException {
+      startFunction("get_schema_with_environment_context", ": db=" + db + "tbl=" + tableName);
       boolean success = false;
       Exception ex = null;
       try {
@@ -3461,7 +3507,7 @@ private void alter_table_core(final String dbname, final String name, final Tabl
         } catch (NoSuchObjectException e) {
           throw new UnknownTableException(e.getMessage());
         }
-        List<FieldSchema> fieldSchemas = get_fields(db, base_table_name);
+        List<FieldSchema> fieldSchemas = get_fields_with_environment_context(db, base_table_name,envContext);
 
         if (tbl == null || fieldSchemas == null) {
           throw new UnknownTableException(tableName + " doesn't exist");
@@ -3488,7 +3534,7 @@ private void alter_table_core(final String dbname, final String name, final Tabl
           throw me;
         }
       } finally {
-        endFunction("get_schema", success, ex, tableName);
+        endFunction("get_schema_with_environment_context", success, ex, tableName);
       }
     }
 
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
index 301940d..bc9ab4a 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
@@ -291,6 +291,11 @@ public boolean isCompatibleWith(HiveConf conf) {
   }
 
   @Override
+  public void setHiveAddedJars(String addedJars) {
+    HiveConf.setVar(conf, ConfVars.HIVEADDEDJARS, addedJars);
+  }
+
+  @Override
   public void reconnect() throws MetaException {
     if (localMetaStore) {
       // For direct DB connections we don't yet support reestablishing connections.
@@ -1426,7 +1431,15 @@ public boolean deleteTableColumnStatistics(String dbName, String tableName, Stri
   public List<FieldSchema> getSchema(String db, String tableName)
       throws MetaException, TException, UnknownTableException,
       UnknownDBException {
-    return deepCopyFieldSchemas(client.get_schema(db, tableName));
+      EnvironmentContext envCxt = null;
+      String addedJars = conf.getVar(ConfVars.HIVEADDEDJARS);
+      if(org.apache.commons.lang.StringUtils.isNotBlank(addedJars)) {
+         Map<String, String> props = new HashMap<String, String>();
+         props.put("hive.added.jars.path", addedJars);
+         envCxt = new EnvironmentContext(props);
+       }
+
+    return deepCopyFieldSchemas(client.get_schema_with_environment_context(db, tableName, envCxt));
   }
 
   @Override
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java b/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
index 0deb97a..1af93c8 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
@@ -90,6 +90,12 @@
   boolean isCompatibleWith(HiveConf conf);
 
   /**
+   * Set added jars path info to MetaStoreClient.
+   * @param addedJars the hive.added.jars.path. It is qualified paths separated by commas.
+   */
+  void setHiveAddedJars(String addedJars);
+
+  /**
    *  Tries to reconnect this MetaStoreClient to the MetaStore.
    */
   void reconnect() throws MetaException;
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java
index 612f927..9c0991c 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java
@@ -25,7 +25,10 @@
 import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
+import java.net.URL;
+import java.net.URLClassLoader;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -39,6 +42,7 @@
 
 import com.google.common.base.Predicates;
 import com.google.common.collect.Maps;
+
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -1653,4 +1657,52 @@ public static int getArchivingLevel(Partition part) throws MetaException {
     }
   }
 
+
+  /**
+   * Create a URL from a string representing a path to a local file.
+   * The path string can be just a path, or can start with file:/, file:///
+   * @param onestr  path string
+   * @return
+   */
+  private static URL urlFromPathString(String onestr) {
+    URL oneurl = null;
+    try {
+      if (StringUtils.indexOf(onestr, "file:/") == 0) {
+        oneurl = new URL(onestr);
+      } else {
+        oneurl = new File(onestr).toURL();
+      }
+    } catch (Exception err) {
+      LOG.error("Bad URL " + onestr + ", ignoring path");
+    }
+    return oneurl;
+  }
+
+  /**
+   * Add new elements to the classpath.
+   *
+   * @param newPaths
+   *          Array of classpath elements
+   */
+  public static ClassLoader addToClassPath(ClassLoader cloader, String[] newPaths) throws Exception {
+    URLClassLoader loader = (URLClassLoader) cloader;
+    List<URL> curPath = Arrays.asList(loader.getURLs());
+    ArrayList<URL> newPath = new ArrayList<URL>();
+
+    // get a list with the current classpath components
+    for (URL onePath : curPath) {
+      newPath.add(onePath);
+    }
+    curPath = newPath;
+
+    for (String onestr : newPaths) {
+      URL oneurl = urlFromPathString(onestr);
+      if (oneurl != null && !curPath.contains(oneurl)) {
+        curPath.add(oneurl);
+      }
+    }
+
+    return new URLClassLoader(curPath.toArray(new URL[0]), loader);
+  }
+
 }
diff --git a/service/src/gen/thrift/gen-py/TCLIService/TCLIService-remote b/service/src/gen/thrift/gen-py/TCLIService/TCLIService-remote
old mode 100644
new mode 100755
diff --git a/service/src/gen/thrift/gen-py/hive_service/ThriftHive-remote b/service/src/gen/thrift/gen-py/hive_service/ThriftHive-remote
old mode 100644
new mode 100755
diff --git a/service/src/java/org/apache/hive/service/cli/operation/GetColumnsOperation.java b/service/src/java/org/apache/hive/service/cli/operation/GetColumnsOperation.java
index 92ea7b0..95edc6a 100644
--- a/service/src/java/org/apache/hive/service/cli/operation/GetColumnsOperation.java
+++ b/service/src/java/org/apache/hive/service/cli/operation/GetColumnsOperation.java
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.regex.Pattern;
 
+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
 import org.apache.hadoop.hive.metastore.IMetaStoreClient;
 import org.apache.hadoop.hive.metastore.api.Table;
 import org.apache.hive.service.cli.ColumnDescriptor;
diff --git a/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java b/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java
index 5b8e6de..b62cfd9 100644
--- a/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java
+++ b/service/src/java/org/apache/hive/service/cli/session/HiveSessionImpl.java
@@ -29,6 +29,7 @@
 import java.util.Set;
 
 import org.apache.commons.io.FileUtils;
+import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hive.common.cli.HiveFileProcessor;
@@ -39,6 +40,7 @@
 import org.apache.hadoop.hive.metastore.api.MetaException;
 import org.apache.hadoop.hive.ql.exec.FetchFormatter;
 import org.apache.hadoop.hive.ql.exec.ListSinkOperator;
+import org.apache.hadoop.hive.ql.exec.Utilities;
 import org.apache.hadoop.hive.ql.history.HiveHistory;
 import org.apache.hadoop.hive.ql.metadata.Hive;
 import org.apache.hadoop.hive.ql.metadata.HiveException;
@@ -498,7 +500,11 @@ public OperationHandle getTableTypes()
   public OperationHandle getColumns(String catalogName, String schemaName,
       String tableName, String columnName)  throws HiveSQLException {
     acquire(true);
-
+    String addedJars = Utilities.getResourceFiles(hiveConf, SessionState.ResourceType.JAR);
+    if (StringUtils.isNotBlank(addedJars)) {
+       IMetaStoreClient metastoreClient = getSession().getMetaStoreClient();
+       metastoreClient.setHiveAddedJars(addedJars);
+    }
     OperationManager operationManager = getOperationManager();
     GetColumnsOperation operation = operationManager.newGetColumnsOperation(getSession(),
         catalogName, schemaName, tableName, columnName);
-- 
1.7.9.5

