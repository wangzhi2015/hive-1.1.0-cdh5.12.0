From b0a5b0f2f994d783ef59969b2861e69ba3afed04 Mon Sep 17 00:00:00 2001
From: Jason Dere <jdere@apache.org>
Date: Fri, 27 Feb 2015 21:09:45 +0000
Subject: [PATCH 0314/1164] HIVE-9738: create SOUNDEX udf

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1662816 13f79535-47bb-0310-9956-ffa450edef68
---
 .../hadoop/hive/ql/exec/FunctionRegistry.java      |    1 +
 .../hive/ql/udf/generic/GenericUDFSoundex.java     |  119 ++++++++++++++++++++
 .../hive/ql/udf/generic/TestGenericUDFSoundex.java |   97 ++++++++++++++++
 ql/src/test/queries/clientpositive/udf_soundex.q   |   17 +++
 .../results/clientpositive/show_functions.q.out    |    1 +
 .../test/results/clientpositive/udf_soundex.q.out  |   67 +++++++++++
 6 files changed, 302 insertions(+)
 create mode 100644 ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSoundex.java
 create mode 100644 ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSoundex.java
 create mode 100644 ql/src/test/queries/clientpositive/udf_soundex.q
 create mode 100644 ql/src/test/results/clientpositive/udf_soundex.q.out

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java
index bfeb33c..269d790 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java
@@ -181,6 +181,7 @@
     system.registerGenericUDF("lpad", GenericUDFLpad.class);
     system.registerGenericUDF("rpad", GenericUDFRpad.class);
     system.registerGenericUDF("levenshtein", GenericUDFLevenstein.class);
+    system.registerGenericUDF("soundex", GenericUDFSoundex.class);
 
     system.registerGenericUDF("size", GenericUDFSize.class);
 
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSoundex.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSoundex.java
new file mode 100644
index 0000000..ad72d05
--- /dev/null
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSoundex.java
@@ -0,0 +1,119 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hive.ql.udf.generic;
+
+import org.apache.commons.codec.language.Soundex;
+import org.apache.hadoop.hive.ql.exec.Description;
+import org.apache.hadoop.hive.ql.exec.UDFArgumentException;
+import org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;
+import org.apache.hadoop.hive.ql.exec.UDFArgumentTypeException;
+import org.apache.hadoop.hive.ql.metadata.HiveException;
+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters;
+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters.Converter;
+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveGrouping;
+import org.apache.hadoop.io.Text;
+
+/**
+ * GenericUDFSoundex.
+ *
+ * Soundex is an encoding used to relate similar names, but can also be used as
+ * a general purpose scheme to find word with similar phonemes.
+ *
+ */
+@Description(name = "soundex", value = "_FUNC_(string) - Returns soundex code of the string.",
+    extended = "The soundex code consist of the first letter of the name followed by three digits.\n"
+    + "Example:\n" + " > SELECT _FUNC_('Miller');\n M460")
+public class GenericUDFSoundex extends GenericUDF {
+  private final transient Converter[] textConverters = new Converter[1];
+  private final transient PrimitiveCategory[] inputTypes = new PrimitiveCategory[1];
+  private final transient Soundex soundex = new Soundex();
+  private final Text output = new Text();
+
+  @Override
+  public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumentException {
+    if (arguments.length != 1) {
+      throw new UDFArgumentLengthException(getFuncName() + " requires 1 argument, got "
+          + arguments.length);
+    }
+    checkIfPrimitive(arguments, 0, "1st");
+
+    checkIfStringGroup(arguments, 0, "1st");
+
+    getStringConverter(arguments, 0, "1st");
+
+    ObjectInspector outputOI = PrimitiveObjectInspectorFactory.writableStringObjectInspector;
+    return outputOI;
+  }
+
+  @Override
+  public Object evaluate(DeferredObject[] arguments) throws HiveException {
+    Object obj0;
+    if ((obj0 = arguments[0].get()) == null) {
+      return null;
+    }
+
+    String str0 = textConverters[0].convert(obj0).toString();
+    String soundexCode;
+    try {
+      soundexCode = soundex.soundex(str0);
+    } catch (IllegalArgumentException e) {
+      return null;
+    }
+    output.set(soundexCode);
+    return output;
+  }
+
+  @Override
+  public String getDisplayString(String[] children) {
+    return getStandardDisplayString(getFuncName(), children);
+  }
+
+  protected void checkIfPrimitive(ObjectInspector[] arguments, int i, String argOrder)
+      throws UDFArgumentTypeException {
+    ObjectInspector.Category oiCat = arguments[i].getCategory();
+    if (oiCat != ObjectInspector.Category.PRIMITIVE) {
+      throw new UDFArgumentTypeException(i, getFuncName() + " only takes primitive types as "
+          + argOrder + " argument, got " + oiCat);
+    }
+  }
+
+  protected void checkIfStringGroup(ObjectInspector[] arguments, int i, String argOrder)
+      throws UDFArgumentTypeException {
+    inputTypes[i] = ((PrimitiveObjectInspector) arguments[i]).getPrimitiveCategory();
+    if (PrimitiveObjectInspectorUtils.getPrimitiveGrouping(inputTypes[i]) != PrimitiveGrouping.STRING_GROUP) {
+      throw new UDFArgumentTypeException(i, getFuncName() + " only takes STRING_GROUP types as "
+          + argOrder + " argument, got " + inputTypes[i]);
+    }
+  }
+
+  protected void getStringConverter(ObjectInspector[] arguments, int i, String argOrder)
+      throws UDFArgumentTypeException {
+    textConverters[i] = ObjectInspectorConverters.getConverter(
+        (PrimitiveObjectInspector) arguments[i],
+        PrimitiveObjectInspectorFactory.writableStringObjectInspector);
+  }
+
+  protected String getFuncName() {
+    return "soundex";
+  }
+}
diff --git a/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSoundex.java b/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSoundex.java
new file mode 100644
index 0000000..0bac2f4
--- /dev/null
+++ b/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFSoundex.java
@@ -0,0 +1,97 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hive.ql.udf.generic;
+
+import junit.framework.TestCase;
+
+import org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;
+import org.apache.hadoop.hive.ql.exec.UDFArgumentTypeException;
+import org.apache.hadoop.hive.ql.metadata.HiveException;
+import org.apache.hadoop.hive.ql.udf.generic.GenericUDF.DeferredJavaObject;
+import org.apache.hadoop.hive.ql.udf.generic.GenericUDF.DeferredObject;
+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
+import org.apache.hadoop.io.Text;
+
+public class TestGenericUDFSoundex extends TestCase {
+
+  public void testSoundex() throws HiveException {
+    GenericUDFSoundex udf = new GenericUDFSoundex();
+    ObjectInspector valueOI0 = PrimitiveObjectInspectorFactory.writableStringObjectInspector;
+    ObjectInspector[] arguments = { valueOI0 };
+
+    udf.initialize(arguments);
+    runAndVerify("Miller", "M460", udf);
+    runAndVerify("miler", "M460", udf);
+    runAndVerify("myller", "M460", udf);
+    runAndVerify("muller", "M460", udf);
+    runAndVerify("m", "M000", udf);
+    runAndVerify("mu", "M000", udf);
+    runAndVerify("mil", "M400", udf);
+
+    runAndVerify("Peterson", "P362", udf);
+    runAndVerify("Pittersen", "P362", udf);
+
+    runAndVerify("", "", udf);
+
+    runAndVerify(null, null, udf);
+    runAndVerify("\u3500\u3501\u3502\u3503", null, udf);
+  }
+
+  public void testSoundexWrongType0() throws HiveException {
+    @SuppressWarnings("resource")
+    GenericUDFSoundex udf = new GenericUDFSoundex();
+    ObjectInspector valueOI0 = PrimitiveObjectInspectorFactory.writableIntObjectInspector;
+    ObjectInspector[] arguments = { valueOI0 };
+
+    try {
+      udf.initialize(arguments);
+      assertTrue("soundex test. UDFArgumentTypeException is expected", false);
+    } catch (UDFArgumentTypeException e) {
+      assertEquals("soundex test",
+          "soundex only takes STRING_GROUP types as 1st argument, got INT", e.getMessage());
+    }
+  }
+
+  public void testSoundexWrongLength() throws HiveException {
+    @SuppressWarnings("resource")
+    GenericUDFSoundex udf = new GenericUDFSoundex();
+    ObjectInspector valueOI0 = PrimitiveObjectInspectorFactory.writableHiveVarcharObjectInspector;
+    ObjectInspector valueOI1 = PrimitiveObjectInspectorFactory.writableHiveVarcharObjectInspector;
+    ObjectInspector[] arguments = { valueOI0, valueOI1 };
+
+    try {
+      udf.initialize(arguments);
+      assertTrue("soundex test. UDFArgumentLengthException is expected", false);
+    } catch (UDFArgumentLengthException e) {
+      assertEquals("soundex test", "soundex requires 1 argument, got 2", e.getMessage());
+    }
+  }
+
+  private void runAndVerify(String str0, String expResult, GenericUDF udf) throws HiveException {
+    DeferredObject valueObj0 = new DeferredJavaObject(str0 != null ? new Text(str0) : null);
+    DeferredObject[] args = { valueObj0 };
+    Text output = (Text) udf.evaluate(args);
+    if (expResult == null) {
+      assertNull("soundex test ", output);
+    } else {
+      assertNotNull("soundex test", output);
+      assertEquals("soundex test", expResult, output.toString());
+    }
+  }
+}
diff --git a/ql/src/test/queries/clientpositive/udf_soundex.q b/ql/src/test/queries/clientpositive/udf_soundex.q
new file mode 100644
index 0000000..c600084
--- /dev/null
+++ b/ql/src/test/queries/clientpositive/udf_soundex.q
@@ -0,0 +1,17 @@
+DESCRIBE FUNCTION soundex;
+DESC FUNCTION EXTENDED soundex;
+
+explain select soundex('Miller');
+
+select
+soundex('Miller'),
+soundex('miler'),
+soundex('myller'),
+soundex('muller'),
+soundex('m'),
+soundex('mu'),
+soundex('mul'),
+soundex('Peterson'),
+soundex('Pittersen'),
+soundex(''),
+soundex(cast(null as string));
\ No newline at end of file
diff --git a/ql/src/test/results/clientpositive/show_functions.q.out b/ql/src/test/results/clientpositive/show_functions.q.out
index d4b0650..5659af5 100644
--- a/ql/src/test/results/clientpositive/show_functions.q.out
+++ b/ql/src/test/results/clientpositive/show_functions.q.out
@@ -168,6 +168,7 @@ sign
 sin
 size
 sort_array
+soundex
 space
 split
 sqrt
diff --git a/ql/src/test/results/clientpositive/udf_soundex.q.out b/ql/src/test/results/clientpositive/udf_soundex.q.out
new file mode 100644
index 0000000..9895a90
--- /dev/null
+++ b/ql/src/test/results/clientpositive/udf_soundex.q.out
@@ -0,0 +1,67 @@
+PREHOOK: query: DESCRIBE FUNCTION soundex
+PREHOOK: type: DESCFUNCTION
+POSTHOOK: query: DESCRIBE FUNCTION soundex
+POSTHOOK: type: DESCFUNCTION
+soundex(string) - Returns soundex code of the string.
+PREHOOK: query: DESC FUNCTION EXTENDED soundex
+PREHOOK: type: DESCFUNCTION
+POSTHOOK: query: DESC FUNCTION EXTENDED soundex
+POSTHOOK: type: DESCFUNCTION
+soundex(string) - Returns soundex code of the string.
+The soundex code consist of the first letter of the name followed by three digits.
+Example:
+ > SELECT soundex('Miller');
+ M460
+PREHOOK: query: explain select soundex('Miller')
+PREHOOK: type: QUERY
+POSTHOOK: query: explain select soundex('Miller')
+POSTHOOK: type: QUERY
+STAGE DEPENDENCIES:
+  Stage-0 is a root stage
+
+STAGE PLANS:
+  Stage: Stage-0
+    Fetch Operator
+      limit: -1
+      Processor Tree:
+        TableScan
+          alias: _dummy_table
+          Row Limit Per Split: 1
+          Statistics: Num rows: 0 Data size: 1 Basic stats: PARTIAL Column stats: COMPLETE
+          Select Operator
+            expressions: 'M460' (type: string)
+            outputColumnNames: _col0
+            Statistics: Num rows: 0 Data size: 1 Basic stats: PARTIAL Column stats: COMPLETE
+            ListSink
+
+PREHOOK: query: select
+soundex('Miller'),
+soundex('miler'),
+soundex('myller'),
+soundex('muller'),
+soundex('m'),
+soundex('mu'),
+soundex('mul'),
+soundex('Peterson'),
+soundex('Pittersen'),
+soundex(''),
+soundex(cast(null as string))
+PREHOOK: type: QUERY
+PREHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+POSTHOOK: query: select
+soundex('Miller'),
+soundex('miler'),
+soundex('myller'),
+soundex('muller'),
+soundex('m'),
+soundex('mu'),
+soundex('mul'),
+soundex('Peterson'),
+soundex('Pittersen'),
+soundex(''),
+soundex(cast(null as string))
+POSTHOOK: type: QUERY
+POSTHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+M460	M460	M460	M460	M000	M000	M400	P362	P362		NULL
-- 
1.7.9.5

