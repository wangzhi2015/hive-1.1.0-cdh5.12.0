From a35dad1c962eaedafc626b7537973519ad460086 Mon Sep 17 00:00:00 2001
From: Eugene Koifman <ekoifman@hortonworks.com>
Date: Tue, 28 Apr 2015 16:07:44 -0700
Subject: [PATCH 0139/1164] HIVE-10481 - ACID table update finishes but values
 not really updated if column names are not all
 lower case

---
 .../ql/parse/UpdateDeleteSemanticAnalyzer.java     |   13 +++++++++++--
 .../apache/hadoop/hive/ql/TestTxnCommands2.java    |   14 ++++++++++++++
 2 files changed, 25 insertions(+), 2 deletions(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/UpdateDeleteSemanticAnalyzer.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/UpdateDeleteSemanticAnalyzer.java
index 4eedb14..c90d22b 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/UpdateDeleteSemanticAnalyzer.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/UpdateDeleteSemanticAnalyzer.java
@@ -189,7 +189,7 @@ private void reparseAndSuperAnalyze(ASTNode tree) throws SemanticException {
 
         addSetRCols((ASTNode) assignment.getChildren().get(1), setRCols);
 
-        String columnName = colName.getText();
+        String columnName = normalizeColName(colName.getText());
 
         // Make sure this isn't one of the partitioning columns, that's not supported.
         if (partCols != null) {
@@ -393,11 +393,20 @@ private void addSetRCols(ASTNode node, Set<String> setRCols) {
       ASTNode colName = (ASTNode)node.getChildren().get(0);
       assert colName.getToken().getType() == HiveParser.Identifier :
           "Expected column name";
-      setRCols.add(colName.getText());
+      setRCols.add(normalizeColName(colName.getText()));
     } else if (node.getChildren() != null) {
       for (Node n : node.getChildren()) {
         addSetRCols((ASTNode)n, setRCols);
       }
     }
   }
+
+  /**
+   * Column names are stored in metastore in lower case, regardless of the CREATE TABLE statement.
+   * Unfortunately there is no single place that normalizes the input query.
+   * @param colName not null
+   */
+  private static String normalizeColName(String colName) {
+    return colName.toLowerCase();
+  }
 }
diff --git a/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java b/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java
index 06d2ca2..ac5ae2a 100644
--- a/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java
+++ b/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands2.java
@@ -58,6 +58,7 @@ public String toString() {
 
   @Before
   public void setUp() throws Exception {
+    tearDown();
     hiveConf = new HiveConf(this.getClass());
     hiveConf.set(HiveConf.ConfVars.PREEXECHOOKS.varname, "");
     hiveConf.set(HiveConf.ConfVars.POSTEXECHOOKS.varname, "");
@@ -108,6 +109,19 @@ public void testNonAcidInsert() throws Exception {
     List<String> rs1 = runStatementOnDriver("select a,b from " + Table.NONACIDORCTBL);
   }
   @Test
+  public void testUpdateMixedCase() throws Exception {
+    int[][] tableData = {{1,2},{3,3},{5,3}};
+    runStatementOnDriver("insert into " + Table.ACIDTBL + "(a,b) " + makeValuesClause(tableData));
+    runStatementOnDriver("update " + Table.ACIDTBL + " set B = 7 where A=1");
+    List<String> rs = runStatementOnDriver("select a,b from " + Table.ACIDTBL + " order by a,b");
+    int[][] updatedData = {{1,7},{3,3},{5,3}};
+    Assert.assertEquals("Update failed", stringifyValues(updatedData), rs);
+    runStatementOnDriver("update " + Table.ACIDTBL + " set B = B + 1 where A=1");
+    List<String> rs2 = runStatementOnDriver("select a,b from " + Table.ACIDTBL + " order by a,b");
+    int[][] updatedData2 = {{1,8},{3,3},{5,3}};
+    Assert.assertEquals("Update failed", stringifyValues(updatedData2), rs2);
+  }
+  @Test
   public void testDeleteIn() throws Exception {
     int[][] tableData = {{1,2},{3,2},{5,2},{1,3},{3,3},{5,3}};
     runStatementOnDriver("insert into " + Table.ACIDTBL + "(a,b) " + makeValuesClause(tableData));
-- 
1.7.9.5

