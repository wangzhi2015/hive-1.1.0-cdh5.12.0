From 917a49f0a8bd9ea159e384653e0fb90b12696d8c Mon Sep 17 00:00:00 2001
From: Jimmy Xiang <jxiang@cloudera.com>
Date: Wed, 19 Aug 2015 18:04:49 -0700
Subject: [PATCH 0240/1164] CDH-30546: HIVE-11620: Fix several qtest output
 order (Jimmy, reviewed by Chao)

---
 .../queries/clientpositive/selectDistinctStar.q    |    2 +
 .../clientpositive/unionall_unbalancedppd.q        |    3 +
 .../queries/clientpositive/vector_cast_constant.q  |    4 +-
 .../clientpositive/selectDistinctStar.q.out        |   68 +++---
 .../spark/vector_cast_constant.q.java1.7.out       |   41 ++--
 .../clientpositive/tez/selectDistinctStar.q.out    |   92 +++++----
 .../tez/vector_cast_constant.q.java1.7.out         |  216 ++++++++++++++++++++
 .../clientpositive/unionall_unbalancedppd.q.out    |   14 +-
 .../vector_cast_constant.q.java1.7.out             |   32 ++-
 9 files changed, 370 insertions(+), 102 deletions(-)
 create mode 100644 ql/src/test/results/clientpositive/tez/vector_cast_constant.q.java1.7.out

diff --git a/ql/src/test/queries/clientpositive/selectDistinctStar.q b/ql/src/test/queries/clientpositive/selectDistinctStar.q
index e06f167..f34d07a 100644
--- a/ql/src/test/queries/clientpositive/selectDistinctStar.q
+++ b/ql/src/test/queries/clientpositive/selectDistinctStar.q
@@ -1,5 +1,7 @@
 explain select distinct src.* from src;
 
+-- SORT_QUERY_RESULTS
+
 select distinct src.* from src;
 
 select distinct * from src;
diff --git a/ql/src/test/queries/clientpositive/unionall_unbalancedppd.q b/ql/src/test/queries/clientpositive/unionall_unbalancedppd.q
index 0825c2d..ee9fdef 100644
--- a/ql/src/test/queries/clientpositive/unionall_unbalancedppd.q
+++ b/ql/src/test/queries/clientpositive/unionall_unbalancedppd.q
@@ -1,4 +1,7 @@
 set hive.optimize.ppd=true;
+
+-- SORT_QUERY_RESULTS
+
 drop table if exists union_all_bug_test_1;
 drop table if exists union_all_bug_test_2;
 create table if not exists union_all_bug_test_1
diff --git a/ql/src/test/queries/clientpositive/vector_cast_constant.q b/ql/src/test/queries/clientpositive/vector_cast_constant.q
index 890fcb4..5f9094b 100644
--- a/ql/src/test/queries/clientpositive/vector_cast_constant.q
+++ b/ql/src/test/queries/clientpositive/vector_cast_constant.q
@@ -42,11 +42,11 @@ EXPLAIN SELECT
   AVG(CAST(50 AS INT)) AS `avg_int_ok`,
   AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
   AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
-  FROM over1korc GROUP BY i LIMIT 10;
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10;
 
 SELECT 
   i,
   AVG(CAST(50 AS INT)) AS `avg_int_ok`,
   AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
   AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
-  FROM over1korc GROUP BY i LIMIT 10;
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10;
diff --git a/ql/src/test/results/clientpositive/selectDistinctStar.q.out b/ql/src/test/results/clientpositive/selectDistinctStar.q.out
index 9a27536..d18d151 100644
--- a/ql/src/test/results/clientpositive/selectDistinctStar.q.out
+++ b/ql/src/test/results/clientpositive/selectDistinctStar.q.out
@@ -47,11 +47,15 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-PREHOOK: query: select distinct src.* from src
+PREHOOK: query: -- SORT_QUERY_RESULTS
+
+select distinct src.* from src
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
 #### A masked pattern was here ####
-POSTHOOK: query: select distinct src.* from src
+POSTHOOK: query: -- SORT_QUERY_RESULTS
+
+select distinct src.* from src
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
@@ -1406,21 +1410,6 @@ POSTHOOK: Input: default@src1
 	val_27
 	val_409
 	val_484
-128	
-146	val_146
-150	val_150
-213	val_213
-224	
-238	val_238
-255	val_255
-273	val_273
-278	val_278
-311	val_311
-369	
-401	val_401
-406	val_406
-66	val_66
-98	val_98
 0	val_0
 10	val_10
 100	val_100
@@ -1438,6 +1427,7 @@ POSTHOOK: Input: default@src1
 120	val_120
 125	val_125
 126	val_126
+128	
 128	val_128
 129	val_129
 131	val_131
@@ -1449,9 +1439,11 @@ POSTHOOK: Input: default@src1
 143	val_143
 145	val_145
 146	val_146
+146	val_146
 149	val_149
 15	val_15
 150	val_150
+150	val_150
 152	val_152
 153	val_153
 155	val_155
@@ -1504,6 +1496,7 @@ POSTHOOK: Input: default@src1
 208	val_208
 209	val_209
 213	val_213
+213	val_213
 214	val_214
 216	val_216
 217	val_217
@@ -1512,6 +1505,7 @@ POSTHOOK: Input: default@src1
 221	val_221
 222	val_222
 223	val_223
+224	
 224	val_224
 226	val_226
 228	val_228
@@ -1521,6 +1515,7 @@ POSTHOOK: Input: default@src1
 235	val_235
 237	val_237
 238	val_238
+238	val_238
 239	val_239
 24	val_24
 241	val_241
@@ -1531,6 +1526,7 @@ POSTHOOK: Input: default@src1
 249	val_249
 252	val_252
 255	val_255
+255	val_255
 256	val_256
 257	val_257
 258	val_258
@@ -1543,10 +1539,12 @@ POSTHOOK: Input: default@src1
 27	val_27
 272	val_272
 273	val_273
+273	val_273
 274	val_274
 275	val_275
 277	val_277
 278	val_278
+278	val_278
 28	val_28
 280	val_280
 281	val_281
@@ -1571,6 +1569,7 @@ POSTHOOK: Input: default@src1
 309	val_309
 310	val_310
 311	val_311
+311	val_311
 315	val_315
 316	val_316
 317	val_317
@@ -1605,6 +1604,7 @@ POSTHOOK: Input: default@src1
 366	val_366
 367	val_367
 368	val_368
+369	
 369	val_369
 37	val_37
 373	val_373
@@ -1627,10 +1627,12 @@ POSTHOOK: Input: default@src1
 4	val_4
 400	val_400
 401	val_401
+401	val_401
 402	val_402
 403	val_403
 404	val_404
 406	val_406
+406	val_406
 407	val_407
 409	val_409
 41	val_41
@@ -1707,6 +1709,7 @@ POSTHOOK: Input: default@src1
 64	val_64
 65	val_65
 66	val_66
+66	val_66
 67	val_67
 69	val_69
 70	val_70
@@ -1730,6 +1733,7 @@ POSTHOOK: Input: default@src1
 96	val_96
 97	val_97
 98	val_98
+98	val_98
 PREHOOK: query: select distinct * from src join src1 on src.key=src1.key
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -3837,21 +3841,6 @@ POSTHOOK: Input: default@src1
 	val_27
 	val_409
 	val_484
-128	
-146	val_146
-150	val_150
-213	val_213
-224	
-238	val_238
-255	val_255
-273	val_273
-278	val_278
-311	val_311
-369	
-401	val_401
-406	val_406
-66	val_66
-98	val_98
 0	val_0
 10	val_10
 100	val_100
@@ -3869,6 +3858,7 @@ POSTHOOK: Input: default@src1
 120	val_120
 125	val_125
 126	val_126
+128	
 128	val_128
 129	val_129
 131	val_131
@@ -3880,9 +3870,11 @@ POSTHOOK: Input: default@src1
 143	val_143
 145	val_145
 146	val_146
+146	val_146
 149	val_149
 15	val_15
 150	val_150
+150	val_150
 152	val_152
 153	val_153
 155	val_155
@@ -3935,6 +3927,7 @@ POSTHOOK: Input: default@src1
 208	val_208
 209	val_209
 213	val_213
+213	val_213
 214	val_214
 216	val_216
 217	val_217
@@ -3943,6 +3936,7 @@ POSTHOOK: Input: default@src1
 221	val_221
 222	val_222
 223	val_223
+224	
 224	val_224
 226	val_226
 228	val_228
@@ -3952,6 +3946,7 @@ POSTHOOK: Input: default@src1
 235	val_235
 237	val_237
 238	val_238
+238	val_238
 239	val_239
 24	val_24
 241	val_241
@@ -3962,6 +3957,7 @@ POSTHOOK: Input: default@src1
 249	val_249
 252	val_252
 255	val_255
+255	val_255
 256	val_256
 257	val_257
 258	val_258
@@ -3974,10 +3970,12 @@ POSTHOOK: Input: default@src1
 27	val_27
 272	val_272
 273	val_273
+273	val_273
 274	val_274
 275	val_275
 277	val_277
 278	val_278
+278	val_278
 28	val_28
 280	val_280
 281	val_281
@@ -4002,6 +4000,7 @@ POSTHOOK: Input: default@src1
 309	val_309
 310	val_310
 311	val_311
+311	val_311
 315	val_315
 316	val_316
 317	val_317
@@ -4036,6 +4035,7 @@ POSTHOOK: Input: default@src1
 366	val_366
 367	val_367
 368	val_368
+369	
 369	val_369
 37	val_37
 373	val_373
@@ -4058,10 +4058,12 @@ POSTHOOK: Input: default@src1
 4	val_4
 400	val_400
 401	val_401
+401	val_401
 402	val_402
 403	val_403
 404	val_404
 406	val_406
+406	val_406
 407	val_407
 409	val_409
 41	val_41
@@ -4138,6 +4140,7 @@ POSTHOOK: Input: default@src1
 64	val_64
 65	val_65
 66	val_66
+66	val_66
 67	val_67
 69	val_69
 70	val_70
@@ -4161,6 +4164,7 @@ POSTHOOK: Input: default@src1
 96	val_96
 97	val_97
 98	val_98
+98	val_98
 PREHOOK: query: select distinct * from src join src1 on src.key=src1.key
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
diff --git a/ql/src/test/results/clientpositive/spark/vector_cast_constant.q.java1.7.out b/ql/src/test/results/clientpositive/spark/vector_cast_constant.q.java1.7.out
index 609826c..2f90df6 100644
--- a/ql/src/test/results/clientpositive/spark/vector_cast_constant.q.java1.7.out
+++ b/ql/src/test/results/clientpositive/spark/vector_cast_constant.q.java1.7.out
@@ -106,14 +106,14 @@ PREHOOK: query: EXPLAIN SELECT
   AVG(CAST(50 AS INT)) AS `avg_int_ok`,
   AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
   AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
-  FROM over1korc GROUP BY i LIMIT 10
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
 PREHOOK: type: QUERY
 POSTHOOK: query: EXPLAIN SELECT 
   i,
   AVG(CAST(50 AS INT)) AS `avg_int_ok`,
   AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
   AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
-  FROM over1korc GROUP BY i LIMIT 10
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
 POSTHOOK: type: QUERY
 STAGE DEPENDENCIES:
   Stage-1 is a root stage
@@ -124,6 +124,7 @@ STAGE PLANS:
     Spark
       Edges:
         Reducer 2 <- Map 1 (GROUP, 2)
+        Reducer 3 <- Reducer 2 (SORT, 1)
 #### A masked pattern was here ####
       Vertices:
         Map 1 
@@ -156,6 +157,17 @@ STAGE PLANS:
                 mode: mergepartial
                 outputColumnNames: _col0, _col1, _col2, _col3
                 Statistics: Num rows: 524 Data size: 155436 Basic stats: COMPLETE Column stats: NONE
+                Reduce Output Operator
+                  key expressions: _col0 (type: int)
+                  sort order: +
+                  Statistics: Num rows: 524 Data size: 155436 Basic stats: COMPLETE Column stats: NONE
+                  value expressions: _col1 (type: double), _col2 (type: double), _col3 (type: decimal(14,4))
+        Reducer 3 
+            Reduce Operator Tree:
+              Select Operator
+                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: double), VALUE._col1 (type: double), VALUE._col2 (type: decimal(14,4))
+                outputColumnNames: _col0, _col1, _col2, _col3
+                Statistics: Num rows: 524 Data size: 155436 Basic stats: COMPLETE Column stats: NONE
                 Limit
                   Number of rows: 10
                   Statistics: Num rows: 10 Data size: 2960 Basic stats: COMPLETE Column stats: NONE
@@ -166,6 +178,7 @@ STAGE PLANS:
                         input format: org.apache.hadoop.mapred.TextInputFormat
                         output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                         serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
+            Execution mode: vectorized
 
   Stage: Stage-0
     Fetch Operator
@@ -178,7 +191,7 @@ PREHOOK: query: SELECT
   AVG(CAST(50 AS INT)) AS `avg_int_ok`,
   AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
   AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
-  FROM over1korc GROUP BY i LIMIT 10
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
 PREHOOK: type: QUERY
 PREHOOK: Input: default@over1korc
 #### A masked pattern was here ####
@@ -187,17 +200,17 @@ POSTHOOK: query: SELECT
   AVG(CAST(50 AS INT)) AS `avg_int_ok`,
   AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
   AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
-  FROM over1korc GROUP BY i LIMIT 10
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@over1korc
 #### A masked pattern was here ####
-65759	50.0	50.0	50
-65617	50.0	50.0	50
-65715	50.0	50.0	50
-65769	50.0	50.0	50
-65611	50.0	50.0	50
-65693	50.0	50.0	50
-65601	50.0	50.0	50
-65679	50.0	50.0	50
-65681	50.0	50.0	50
-65615	50.0	50.0	50
+65536	50.0	50.0	50
+65537	50.0	50.0	50
+65538	50.0	50.0	50
+65539	50.0	50.0	50
+65540	50.0	50.0	50
+65541	50.0	50.0	50
+65542	50.0	50.0	50
+65543	50.0	50.0	50
+65544	50.0	50.0	50
+65545	50.0	50.0	50
diff --git a/ql/src/test/results/clientpositive/tez/selectDistinctStar.q.out b/ql/src/test/results/clientpositive/tez/selectDistinctStar.q.out
index f387cd0..2f46f3b 100644
--- a/ql/src/test/results/clientpositive/tez/selectDistinctStar.q.out
+++ b/ql/src/test/results/clientpositive/tez/selectDistinctStar.q.out
@@ -53,11 +53,15 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-PREHOOK: query: select distinct src.* from src
+PREHOOK: query: -- SORT_QUERY_RESULTS
+
+select distinct src.* from src
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
 #### A masked pattern was here ####
-POSTHOOK: query: select distinct src.* from src
+POSTHOOK: query: -- SORT_QUERY_RESULTS
+
+select distinct src.* from src
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
@@ -1411,6 +1415,13 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 POSTHOOK: Input: default@src1
 #### A masked pattern was here ####
+	
+	val_165
+	val_193
+	val_265
+	val_27
+	val_409
+	val_484
 0	val_0
 10	val_10
 100	val_100
@@ -1428,6 +1439,7 @@ POSTHOOK: Input: default@src1
 120	val_120
 125	val_125
 126	val_126
+128	
 128	val_128
 129	val_129
 131	val_131
@@ -1439,9 +1451,11 @@ POSTHOOK: Input: default@src1
 143	val_143
 145	val_145
 146	val_146
+146	val_146
 149	val_149
 15	val_15
 150	val_150
+150	val_150
 152	val_152
 153	val_153
 155	val_155
@@ -1494,6 +1508,7 @@ POSTHOOK: Input: default@src1
 208	val_208
 209	val_209
 213	val_213
+213	val_213
 214	val_214
 216	val_216
 217	val_217
@@ -1502,6 +1517,7 @@ POSTHOOK: Input: default@src1
 221	val_221
 222	val_222
 223	val_223
+224	
 224	val_224
 226	val_226
 228	val_228
@@ -1511,6 +1527,7 @@ POSTHOOK: Input: default@src1
 235	val_235
 237	val_237
 238	val_238
+238	val_238
 239	val_239
 24	val_24
 241	val_241
@@ -1521,6 +1538,7 @@ POSTHOOK: Input: default@src1
 249	val_249
 252	val_252
 255	val_255
+255	val_255
 256	val_256
 257	val_257
 258	val_258
@@ -1533,10 +1551,12 @@ POSTHOOK: Input: default@src1
 27	val_27
 272	val_272
 273	val_273
+273	val_273
 274	val_274
 275	val_275
 277	val_277
 278	val_278
+278	val_278
 28	val_28
 280	val_280
 281	val_281
@@ -1561,6 +1581,7 @@ POSTHOOK: Input: default@src1
 309	val_309
 310	val_310
 311	val_311
+311	val_311
 315	val_315
 316	val_316
 317	val_317
@@ -1595,6 +1616,7 @@ POSTHOOK: Input: default@src1
 366	val_366
 367	val_367
 368	val_368
+369	
 369	val_369
 37	val_37
 373	val_373
@@ -1617,10 +1639,12 @@ POSTHOOK: Input: default@src1
 4	val_4
 400	val_400
 401	val_401
+401	val_401
 402	val_402
 403	val_403
 404	val_404
 406	val_406
+406	val_406
 407	val_407
 409	val_409
 41	val_41
@@ -1697,6 +1721,7 @@ POSTHOOK: Input: default@src1
 64	val_64
 65	val_65
 66	val_66
+66	val_66
 67	val_67
 69	val_69
 70	val_70
@@ -1720,27 +1745,6 @@ POSTHOOK: Input: default@src1
 96	val_96
 97	val_97
 98	val_98
-	
-	val_165
-	val_193
-	val_265
-	val_27
-	val_409
-	val_484
-128	
-146	val_146
-150	val_150
-213	val_213
-224	
-238	val_238
-255	val_255
-273	val_273
-278	val_278
-311	val_311
-369	
-401	val_401
-406	val_406
-66	val_66
 98	val_98
 PREHOOK: query: select distinct * from src join src1 on src.key=src1.key
 PREHOOK: type: QUERY
@@ -3854,6 +3858,13 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 POSTHOOK: Input: default@src1
 #### A masked pattern was here ####
+	
+	val_165
+	val_193
+	val_265
+	val_27
+	val_409
+	val_484
 0	val_0
 10	val_10
 100	val_100
@@ -3871,6 +3882,7 @@ POSTHOOK: Input: default@src1
 120	val_120
 125	val_125
 126	val_126
+128	
 128	val_128
 129	val_129
 131	val_131
@@ -3882,9 +3894,11 @@ POSTHOOK: Input: default@src1
 143	val_143
 145	val_145
 146	val_146
+146	val_146
 149	val_149
 15	val_15
 150	val_150
+150	val_150
 152	val_152
 153	val_153
 155	val_155
@@ -3937,6 +3951,7 @@ POSTHOOK: Input: default@src1
 208	val_208
 209	val_209
 213	val_213
+213	val_213
 214	val_214
 216	val_216
 217	val_217
@@ -3945,6 +3960,7 @@ POSTHOOK: Input: default@src1
 221	val_221
 222	val_222
 223	val_223
+224	
 224	val_224
 226	val_226
 228	val_228
@@ -3954,6 +3970,7 @@ POSTHOOK: Input: default@src1
 235	val_235
 237	val_237
 238	val_238
+238	val_238
 239	val_239
 24	val_24
 241	val_241
@@ -3964,6 +3981,7 @@ POSTHOOK: Input: default@src1
 249	val_249
 252	val_252
 255	val_255
+255	val_255
 256	val_256
 257	val_257
 258	val_258
@@ -3976,10 +3994,12 @@ POSTHOOK: Input: default@src1
 27	val_27
 272	val_272
 273	val_273
+273	val_273
 274	val_274
 275	val_275
 277	val_277
 278	val_278
+278	val_278
 28	val_28
 280	val_280
 281	val_281
@@ -4004,6 +4024,7 @@ POSTHOOK: Input: default@src1
 309	val_309
 310	val_310
 311	val_311
+311	val_311
 315	val_315
 316	val_316
 317	val_317
@@ -4038,6 +4059,7 @@ POSTHOOK: Input: default@src1
 366	val_366
 367	val_367
 368	val_368
+369	
 369	val_369
 37	val_37
 373	val_373
@@ -4060,10 +4082,12 @@ POSTHOOK: Input: default@src1
 4	val_4
 400	val_400
 401	val_401
+401	val_401
 402	val_402
 403	val_403
 404	val_404
 406	val_406
+406	val_406
 407	val_407
 409	val_409
 41	val_41
@@ -4140,6 +4164,7 @@ POSTHOOK: Input: default@src1
 64	val_64
 65	val_65
 66	val_66
+66	val_66
 67	val_67
 69	val_69
 70	val_70
@@ -4163,27 +4188,6 @@ POSTHOOK: Input: default@src1
 96	val_96
 97	val_97
 98	val_98
-	
-	val_165
-	val_193
-	val_265
-	val_27
-	val_409
-	val_484
-128	
-146	val_146
-150	val_150
-213	val_213
-224	
-238	val_238
-255	val_255
-273	val_273
-278	val_278
-311	val_311
-369	
-401	val_401
-406	val_406
-66	val_66
 98	val_98
 PREHOOK: query: select distinct * from src join src1 on src.key=src1.key
 PREHOOK: type: QUERY
diff --git a/ql/src/test/results/clientpositive/tez/vector_cast_constant.q.java1.7.out b/ql/src/test/results/clientpositive/tez/vector_cast_constant.q.java1.7.out
new file mode 100644
index 0000000..ac8e02b
--- /dev/null
+++ b/ql/src/test/results/clientpositive/tez/vector_cast_constant.q.java1.7.out
@@ -0,0 +1,216 @@
+PREHOOK: query: -- JAVA_VERSION_SPECIFIC_OUTPUT
+
+DROP TABLE over1k
+PREHOOK: type: DROPTABLE
+POSTHOOK: query: -- JAVA_VERSION_SPECIFIC_OUTPUT
+
+DROP TABLE over1k
+POSTHOOK: type: DROPTABLE
+PREHOOK: query: DROP TABLE over1korc
+PREHOOK: type: DROPTABLE
+POSTHOOK: query: DROP TABLE over1korc
+POSTHOOK: type: DROPTABLE
+PREHOOK: query: -- data setup
+CREATE TABLE over1k(t tinyint,
+           si smallint,
+           i int,
+           b bigint,
+           f float,
+           d double,
+           bo boolean,
+           s string,
+           ts timestamp,
+           dec decimal(4,2),
+           bin binary)
+ROW FORMAT DELIMITED FIELDS TERMINATED BY '|'
+STORED AS TEXTFILE
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@over1k
+POSTHOOK: query: -- data setup
+CREATE TABLE over1k(t tinyint,
+           si smallint,
+           i int,
+           b bigint,
+           f float,
+           d double,
+           bo boolean,
+           s string,
+           ts timestamp,
+           dec decimal(4,2),
+           bin binary)
+ROW FORMAT DELIMITED FIELDS TERMINATED BY '|'
+STORED AS TEXTFILE
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@over1k
+PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/over1k' OVERWRITE INTO TABLE over1k
+PREHOOK: type: LOAD
+#### A masked pattern was here ####
+PREHOOK: Output: default@over1k
+POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/over1k' OVERWRITE INTO TABLE over1k
+POSTHOOK: type: LOAD
+#### A masked pattern was here ####
+POSTHOOK: Output: default@over1k
+PREHOOK: query: CREATE TABLE over1korc(t tinyint,
+           si smallint,
+           i int,
+           b bigint,
+           f float,
+           d double,
+           bo boolean,
+           s string,
+           ts timestamp,
+           dec decimal(4,2),
+           bin binary)
+STORED AS ORC
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@over1korc
+POSTHOOK: query: CREATE TABLE over1korc(t tinyint,
+           si smallint,
+           i int,
+           b bigint,
+           f float,
+           d double,
+           bo boolean,
+           s string,
+           ts timestamp,
+           dec decimal(4,2),
+           bin binary)
+STORED AS ORC
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@over1korc
+PREHOOK: query: INSERT INTO TABLE over1korc SELECT * FROM over1k
+PREHOOK: type: QUERY
+PREHOOK: Input: default@over1k
+PREHOOK: Output: default@over1korc
+POSTHOOK: query: INSERT INTO TABLE over1korc SELECT * FROM over1k
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@over1k
+POSTHOOK: Output: default@over1korc
+POSTHOOK: Lineage: over1korc.b SIMPLE [(over1k)over1k.FieldSchema(name:b, type:bigint, comment:null), ]
+POSTHOOK: Lineage: over1korc.bin SIMPLE [(over1k)over1k.FieldSchema(name:bin, type:binary, comment:null), ]
+POSTHOOK: Lineage: over1korc.bo SIMPLE [(over1k)over1k.FieldSchema(name:bo, type:boolean, comment:null), ]
+POSTHOOK: Lineage: over1korc.d SIMPLE [(over1k)over1k.FieldSchema(name:d, type:double, comment:null), ]
+POSTHOOK: Lineage: over1korc.dec SIMPLE [(over1k)over1k.FieldSchema(name:dec, type:decimal(4,2), comment:null), ]
+POSTHOOK: Lineage: over1korc.f SIMPLE [(over1k)over1k.FieldSchema(name:f, type:float, comment:null), ]
+POSTHOOK: Lineage: over1korc.i SIMPLE [(over1k)over1k.FieldSchema(name:i, type:int, comment:null), ]
+POSTHOOK: Lineage: over1korc.s SIMPLE [(over1k)over1k.FieldSchema(name:s, type:string, comment:null), ]
+POSTHOOK: Lineage: over1korc.si SIMPLE [(over1k)over1k.FieldSchema(name:si, type:smallint, comment:null), ]
+POSTHOOK: Lineage: over1korc.t SIMPLE [(over1k)over1k.FieldSchema(name:t, type:tinyint, comment:null), ]
+POSTHOOK: Lineage: over1korc.ts SIMPLE [(over1k)over1k.FieldSchema(name:ts, type:timestamp, comment:null), ]
+PREHOOK: query: EXPLAIN SELECT 
+  i,
+  AVG(CAST(50 AS INT)) AS `avg_int_ok`,
+  AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
+  AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
+PREHOOK: type: QUERY
+POSTHOOK: query: EXPLAIN SELECT 
+  i,
+  AVG(CAST(50 AS INT)) AS `avg_int_ok`,
+  AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
+  AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
+POSTHOOK: type: QUERY
+STAGE DEPENDENCIES:
+  Stage-1 is a root stage
+  Stage-0 depends on stages: Stage-1
+
+STAGE PLANS:
+  Stage: Stage-1
+    Tez
+      Edges:
+        Reducer 2 <- Map 1 (SIMPLE_EDGE)
+        Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
+#### A masked pattern was here ####
+      Vertices:
+        Map 1 
+            Map Operator Tree:
+                TableScan
+                  alias: over1korc
+                  Statistics: Num rows: 1049 Data size: 311170 Basic stats: COMPLETE Column stats: NONE
+                  Select Operator
+                    expressions: i (type: int)
+                    outputColumnNames: _col0
+                    Statistics: Num rows: 1049 Data size: 311170 Basic stats: COMPLETE Column stats: NONE
+                    Group By Operator
+                      aggregations: avg(50), avg(50.0), avg(50)
+                      keys: _col0 (type: int)
+                      mode: hash
+                      outputColumnNames: _col0, _col1, _col2, _col3
+                      Statistics: Num rows: 1049 Data size: 311170 Basic stats: COMPLETE Column stats: NONE
+                      Reduce Output Operator
+                        key expressions: _col0 (type: int)
+                        sort order: +
+                        Map-reduce partition columns: _col0 (type: int)
+                        Statistics: Num rows: 1049 Data size: 311170 Basic stats: COMPLETE Column stats: NONE
+                        value expressions: _col1 (type: struct<count:bigint,sum:double,input:int>), _col2 (type: struct<count:bigint,sum:double,input:double>), _col3 (type: struct<count:bigint,sum:decimal(12,0),input:decimal(10,0)>)
+            Execution mode: vectorized
+        Reducer 2 
+            Reduce Operator Tree:
+              Group By Operator
+                aggregations: avg(VALUE._col0), avg(VALUE._col1), avg(VALUE._col2)
+                keys: KEY._col0 (type: int)
+                mode: mergepartial
+                outputColumnNames: _col0, _col1, _col2, _col3
+                Statistics: Num rows: 524 Data size: 155436 Basic stats: COMPLETE Column stats: NONE
+                Reduce Output Operator
+                  key expressions: _col0 (type: int)
+                  sort order: +
+                  Statistics: Num rows: 524 Data size: 155436 Basic stats: COMPLETE Column stats: NONE
+                  value expressions: _col1 (type: double), _col2 (type: double), _col3 (type: decimal(14,4))
+        Reducer 3 
+            Reduce Operator Tree:
+              Select Operator
+                expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: double), VALUE._col1 (type: double), VALUE._col2 (type: decimal(14,4))
+                outputColumnNames: _col0, _col1, _col2, _col3
+                Statistics: Num rows: 524 Data size: 155436 Basic stats: COMPLETE Column stats: NONE
+                Limit
+                  Number of rows: 10
+                  Statistics: Num rows: 10 Data size: 2960 Basic stats: COMPLETE Column stats: NONE
+                  File Output Operator
+                    compressed: false
+                    Statistics: Num rows: 10 Data size: 2960 Basic stats: COMPLETE Column stats: NONE
+                    table:
+                        input format: org.apache.hadoop.mapred.TextInputFormat
+                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
+            Execution mode: vectorized
+
+  Stage: Stage-0
+    Fetch Operator
+      limit: 10
+      Processor Tree:
+        ListSink
+
+PREHOOK: query: SELECT 
+  i,
+  AVG(CAST(50 AS INT)) AS `avg_int_ok`,
+  AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
+  AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
+PREHOOK: type: QUERY
+PREHOOK: Input: default@over1korc
+#### A masked pattern was here ####
+POSTHOOK: query: SELECT 
+  i,
+  AVG(CAST(50 AS INT)) AS `avg_int_ok`,
+  AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
+  AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@over1korc
+#### A masked pattern was here ####
+65536	50.0	50.0	50
+65537	50.0	50.0	50
+65538	50.0	50.0	50
+65539	50.0	50.0	50
+65540	50.0	50.0	50
+65541	50.0	50.0	50
+65542	50.0	50.0	50
+65543	50.0	50.0	50
+65544	50.0	50.0	50
+65545	50.0	50.0	50
diff --git a/ql/src/test/results/clientpositive/unionall_unbalancedppd.q.out b/ql/src/test/results/clientpositive/unionall_unbalancedppd.q.out
index cbe532b..fcfced2 100644
--- a/ql/src/test/results/clientpositive/unionall_unbalancedppd.q.out
+++ b/ql/src/test/results/clientpositive/unionall_unbalancedppd.q.out
@@ -1,6 +1,10 @@
-PREHOOK: query: drop table if exists union_all_bug_test_1
+PREHOOK: query: -- SORT_QUERY_RESULTS
+
+drop table if exists union_all_bug_test_1
 PREHOOK: type: DROPTABLE
-POSTHOOK: query: drop table if exists union_all_bug_test_1
+POSTHOOK: query: -- SORT_QUERY_RESULTS
+
+drop table if exists union_all_bug_test_1
 POSTHOOK: type: DROPTABLE
 PREHOOK: query: drop table if exists union_all_bug_test_2
 PREHOOK: type: DROPTABLE
@@ -282,9 +286,9 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@union_all_bug_test_1
 POSTHOOK: Input: default@union_all_bug_test_2
 #### A masked pattern was here ####
-1
 0
 0
+1
 PREHOOK: query: SELECT f1
 FROM (
 
@@ -325,10 +329,10 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@union_all_bug_test_1
 POSTHOOK: Input: default@union_all_bug_test_2
 #### A masked pattern was here ####
-1
 0
-1
 0
+1
+1
 PREHOOK: query: SELECT f1
 FROM (
 
diff --git a/ql/src/test/results/clientpositive/vector_cast_constant.q.java1.7.out b/ql/src/test/results/clientpositive/vector_cast_constant.q.java1.7.out
index 789e6c2..9edd6f1 100644
--- a/ql/src/test/results/clientpositive/vector_cast_constant.q.java1.7.out
+++ b/ql/src/test/results/clientpositive/vector_cast_constant.q.java1.7.out
@@ -106,18 +106,19 @@ PREHOOK: query: EXPLAIN SELECT
   AVG(CAST(50 AS INT)) AS `avg_int_ok`,
   AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
   AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
-  FROM over1korc GROUP BY i LIMIT 10
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
 PREHOOK: type: QUERY
 POSTHOOK: query: EXPLAIN SELECT 
   i,
   AVG(CAST(50 AS INT)) AS `avg_int_ok`,
   AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
   AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
-  FROM over1korc GROUP BY i LIMIT 10
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
 POSTHOOK: type: QUERY
 STAGE DEPENDENCIES:
   Stage-1 is a root stage
-  Stage-0 depends on stages: Stage-1
+  Stage-2 depends on stages: Stage-1
+  Stage-0 depends on stages: Stage-2
 
 STAGE PLANS:
   Stage: Stage-1
@@ -150,6 +151,27 @@ STAGE PLANS:
           mode: mergepartial
           outputColumnNames: _col0, _col1, _col2, _col3
           Statistics: Num rows: 524 Data size: 155436 Basic stats: COMPLETE Column stats: NONE
+          File Output Operator
+            compressed: false
+            table:
+                input format: org.apache.hadoop.mapred.SequenceFileInputFormat
+                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
+                serde: org.apache.hadoop.hive.serde2.lazybinary.LazyBinarySerDe
+
+  Stage: Stage-2
+    Map Reduce
+      Map Operator Tree:
+          TableScan
+            Reduce Output Operator
+              key expressions: _col0 (type: int)
+              sort order: +
+              Statistics: Num rows: 524 Data size: 155436 Basic stats: COMPLETE Column stats: NONE
+              value expressions: _col1 (type: double), _col2 (type: double), _col3 (type: decimal(14,4))
+      Reduce Operator Tree:
+        Select Operator
+          expressions: KEY.reducesinkkey0 (type: int), VALUE._col0 (type: double), VALUE._col1 (type: double), VALUE._col2 (type: decimal(14,4))
+          outputColumnNames: _col0, _col1, _col2, _col3
+          Statistics: Num rows: 524 Data size: 155436 Basic stats: COMPLETE Column stats: NONE
           Limit
             Number of rows: 10
             Statistics: Num rows: 10 Data size: 2960 Basic stats: COMPLETE Column stats: NONE
@@ -172,7 +194,7 @@ PREHOOK: query: SELECT
   AVG(CAST(50 AS INT)) AS `avg_int_ok`,
   AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
   AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
-  FROM over1korc GROUP BY i LIMIT 10
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
 PREHOOK: type: QUERY
 PREHOOK: Input: default@over1korc
 #### A masked pattern was here ####
@@ -181,7 +203,7 @@ POSTHOOK: query: SELECT
   AVG(CAST(50 AS INT)) AS `avg_int_ok`,
   AVG(CAST(50 AS DOUBLE)) AS `avg_double_ok`,
   AVG(CAST(50 AS DECIMAL)) AS `avg_decimal_ok`
-  FROM over1korc GROUP BY i LIMIT 10
+  FROM over1korc GROUP BY i ORDER BY i LIMIT 10
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@over1korc
 #### A masked pattern was here ####
-- 
1.7.9.5

