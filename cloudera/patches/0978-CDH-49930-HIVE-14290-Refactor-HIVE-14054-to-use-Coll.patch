From 21937b17d04e32948d0ba4d2743f4273ee8262d7 Mon Sep 17 00:00:00 2001
From: Peter Slawski <petersla@amazon.com>
Date: Mon, 20 Jun 2016 10:18:25 -0700
Subject: [PATCH 0978/1164] CDH-49930 : HIVE-14290: Refactor HIVE-14054 to use
 Collections#newSetFromMap (Peter Slawski via
 Ashutosh Chauhan)

Change-Id: Id21faaeba298bea7df5b62f1f4fb3f9caf6625d6
Signed-off-by: Ashutosh Chauhan <hashutosh@apache.org>
---
 .../hive/ql/metadata/HiveMetaStoreChecker.java     |   16 +++++-----------
 1 file changed, 5 insertions(+), 11 deletions(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/metadata/HiveMetaStoreChecker.java b/ql/src/java/org/apache/hadoop/hive/ql/metadata/HiveMetaStoreChecker.java
index ee8a705..00857ae 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/metadata/HiveMetaStoreChecker.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/metadata/HiveMetaStoreChecker.java
@@ -379,9 +379,7 @@ private String getPartitionName(Path tablePath, Path partitionPath) {
   private void checkPartitionDirs(Path basePath, Set<Path> allDirs, int maxDepth) throws IOException, HiveException {
     ConcurrentLinkedQueue<Path> basePaths = new ConcurrentLinkedQueue<>();
     basePaths.add(basePath);
-    // we only use the keySet of ConcurrentHashMap
-    // Neither the key nor the value can be null.
-    Map<Path, Object> dirSet = new ConcurrentHashMap<>();
+    Set<Path> dirSet = Collections.newSetFromMap(new ConcurrentHashMap<Path, Boolean>());    
     // Here we just reuse the THREAD_COUNT configuration for
     // HIVE_MOVE_FILES_THREAD_COUNT
     final ExecutorService pool = conf.getInt(ConfVars.HIVE_MOVE_FILES_THREAD_COUNT.varname, 25) > 0 ? Executors
@@ -398,12 +396,12 @@ private void checkPartitionDirs(Path basePath, Set<Path> allDirs, int maxDepth)
     if (pool != null) {
       pool.shutdown();
     }
-    allDirs.addAll(dirSet.keySet());
+    allDirs.addAll(dirSet);
   }
 
   // process the basePaths in parallel and then the next level of basePaths
   private void checkPartitionDirs(final ExecutorService pool,
-      final ConcurrentLinkedQueue<Path> basePaths, final Map<Path, Object> allDirs,
+      final ConcurrentLinkedQueue<Path> basePaths, final Set<Path> allDirs,
       final FileSystem fs, final int depth, final int maxDepth) throws IOException, HiveException {
     final ConcurrentLinkedQueue<Path> nextLevel = new ConcurrentLinkedQueue<>();
     if (null == pool) {
@@ -439,9 +437,7 @@ private void checkPartitionDirs(final ExecutorService pool,
             }
           }
         } else {
-          // true is just a boolean object place holder because neither the
-          // key nor the value can be null.
-          allDirs.put(path, true);
+          allDirs.add(path);
         }
       }
     } else {
@@ -485,9 +481,7 @@ public Void call() throws Exception {
                 }
               }
             } else {
-              // true is just a boolean object place holder because neither the
-              // key nor the value can be null.
-              allDirs.put(path, true);
+              allDirs.add(path);
             }
             return null;
           }
-- 
1.7.9.5

