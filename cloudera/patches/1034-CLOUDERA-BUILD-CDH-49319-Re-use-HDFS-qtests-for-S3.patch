From 12483d3d9aaf938d3f4c004ce65b920b0108559d Mon Sep 17 00:00:00 2001
From: Miklos Csanady <miklos.csanady@cloudera.com>
Date: Mon, 13 Mar 2017 14:37:58 +0100
Subject: [PATCH 1034/1164] CLOUDERA-BUILD: CDH-49319: Re-use HDFS qtests for
 S3

Change-Id: I184c0262a43aa5452663dc08177168d274be9d16
---
 .../hadoop/hive/cli/TestBlobstoreCliDriver.java    |   64 -----
 .../hive/cli/TestBlobstoreNegativeCliDriver.java   |   64 -----
 .../resources/core-blobstore/blobstore-conf.xml    |   14 +
 .../test/resources/core-blobstore/hive-site.xml    |  290 ++++++++++++++++++++
 .../src/test/resources/core-blobstore/tez-site.xml |    6 +
 .../resources/hdfs-blobstore/blobstore-conf.xml    |   22 ++
 .../test/resources/hdfs-blobstore/hive-site.xml    |  271 ++++++++++++++++++
 .../src/test/resources/hdfs-blobstore/tez-site.xml |    6 +
 .../src/test/resources/hive-site.xml               |  290 --------------------
 .../test/resources/testconfiguration.properties    |    2 -
 .../hive-blobstore/src/test/resources/tez-site.xml |    6 -
 .../hadoop/hive/cli/TestBlobstoreCliDriver.java    |   64 +++++
 .../hive/cli/TestBlobstoreNegativeCliDriver.java   |   64 +++++
 .../hive/cli/TestHdfsBlobstoreCliDriver.java       |   64 +++++
 .../test/resources/testconfiguration.properties    |  146 ++++++++++
 .../control/AbstractCoreBlobstoreCliDriver.java    |    7 +-
 .../apache/hadoop/hive/cli/control/CliConfigs.java |   26 +-
 .../hive/cli/control/CoreBlobstoreCliDriver.java   |    5 +
 .../control/CoreBlobstoreNegativeCliDriver.java    |    5 +
 .../hive/cli/control/HdfsBlobstoreCliDriver.java   |   43 +++
 .../java/org/apache/hadoop/hive/ql/QTestUtil.java  |   87 +++---
 21 files changed, 1076 insertions(+), 470 deletions(-)
 delete mode 100644 itests/hive-blobstore/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreCliDriver.java
 delete mode 100644 itests/hive-blobstore/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreNegativeCliDriver.java
 create mode 100644 itests/hive-blobstore/src/test/resources/core-blobstore/blobstore-conf.xml
 create mode 100644 itests/hive-blobstore/src/test/resources/core-blobstore/hive-site.xml
 create mode 100644 itests/hive-blobstore/src/test/resources/core-blobstore/tez-site.xml
 create mode 100644 itests/hive-blobstore/src/test/resources/hdfs-blobstore/blobstore-conf.xml
 create mode 100644 itests/hive-blobstore/src/test/resources/hdfs-blobstore/hive-site.xml
 create mode 100644 itests/hive-blobstore/src/test/resources/hdfs-blobstore/tez-site.xml
 delete mode 100644 itests/hive-blobstore/src/test/resources/hive-site.xml
 delete mode 100644 itests/hive-blobstore/src/test/resources/testconfiguration.properties
 delete mode 100644 itests/hive-blobstore/src/test/resources/tez-site.xml
 create mode 100644 itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreCliDriver.java
 create mode 100644 itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreNegativeCliDriver.java
 create mode 100644 itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestHdfsBlobstoreCliDriver.java
 create mode 100644 itests/util/src/main/java/org/apache/hadoop/hive/cli/control/HdfsBlobstoreCliDriver.java

diff --git a/itests/hive-blobstore/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreCliDriver.java b/itests/hive-blobstore/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreCliDriver.java
deleted file mode 100644
index 4aee385..0000000
--- a/itests/hive-blobstore/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreCliDriver.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.hadoop.hive.cli;
-
-import java.io.File;
-import java.util.List;
-
-import org.apache.hadoop.hive.cli.control.CliAdapter;
-import org.apache.hadoop.hive.cli.control.CliConfigs;
-import org.junit.ClassRule;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.TestRule;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class TestBlobstoreCliDriver {
-
-  static CliAdapter adapter = new CliConfigs.BlobstoreCliConfig().getCliAdapter();
-
-  @Parameters(name = "{0}")
-  public static List<Object[]> getParameters() throws Exception {
-    return adapter.getParameters();
-  }
-
-  @ClassRule
-  public static TestRule cliClassRule = adapter.buildClassRule();
-
-  @Rule
-  public TestRule cliTestRule = adapter.buildTestRule();
-
-  private String name;
-  private File qfile;
-
-  public TestBlobstoreCliDriver(String name, File qfile) {
-    this.name = name;
-    this.qfile = qfile;
-  }
-
-  @Test
-  public void testCliDriver() throws Exception {
-    adapter.runTest(name, qfile);
-  }
-
-}
diff --git a/itests/hive-blobstore/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreNegativeCliDriver.java b/itests/hive-blobstore/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreNegativeCliDriver.java
deleted file mode 100644
index 90f1b47..0000000
--- a/itests/hive-blobstore/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreNegativeCliDriver.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.apache.hadoop.hive.cli;
-
-import java.io.File;
-import java.util.List;
-
-import org.apache.hadoop.hive.cli.control.CliAdapter;
-import org.apache.hadoop.hive.cli.control.CliConfigs;
-import org.junit.ClassRule;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.TestRule;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class TestBlobstoreNegativeCliDriver {
-
-  static CliAdapter adapter = new CliConfigs.BlobstoreNegativeCliConfig().getCliAdapter();
-
-  @Parameters(name = "{0}")
-  public static List<Object[]> getParameters() throws Exception {
-    return adapter.getParameters();
-  }
-
-  @ClassRule
-  public static TestRule cliClassRule = adapter.buildClassRule();
-
-  @Rule
-  public TestRule cliTestRule = adapter.buildTestRule();
-
-  private String name;
-  private File qfile;
-
-  public TestBlobstoreNegativeCliDriver(String name, File qfile) {
-    this.name = name;
-    this.qfile = qfile;
-  }
-
-  @Test
-  public void testCliDriver() throws Exception {
-    adapter.runTest(name, qfile);
-  }
-
-}
diff --git a/itests/hive-blobstore/src/test/resources/core-blobstore/blobstore-conf.xml b/itests/hive-blobstore/src/test/resources/core-blobstore/blobstore-conf.xml
new file mode 100644
index 0000000..44c5056
--- /dev/null
+++ b/itests/hive-blobstore/src/test/resources/core-blobstore/blobstore-conf.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+# Copy this file to blobstore-conf.xml
+# update the properties + credentials according to the blobstore being tested
+
+# The following is an example template file for s3a
+-->
+<configuration>
+  <property>
+    <name>test.blobstore.path</name>
+    <value>s3a://cloudera-dev-hive-on-s3/core-blobstore-path/</value>
+  </property>
+</configuration>
diff --git a/itests/hive-blobstore/src/test/resources/core-blobstore/hive-site.xml b/itests/hive-blobstore/src/test/resources/core-blobstore/hive-site.xml
new file mode 100644
index 0000000..406b3b8
--- /dev/null
+++ b/itests/hive-blobstore/src/test/resources/core-blobstore/hive-site.xml
@@ -0,0 +1,290 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+
+<configuration>
+  <property>
+    <name>hive.in.test</name>
+    <value>true</value>
+    <description>Internal marker for test. Used for masking env-dependent values</description>
+  </property>
+
+  <!-- Hive Configuration can either be stored in this file or in the hadoop configuration files  -->
+  <!-- that are implied by Hadoop setup variables.                                                -->
+  <!-- Aside from Hadoop setup variables - this file is provided as a convenience so that Hive    -->
+  <!-- users do not have to edit hadoop configuration files (that may be managed as a centralized -->
+  <!-- resource).                                                                                 -->
+
+  <!-- Hive Execution Parameters -->
+  <property>
+    <name>hadoop.tmp.dir</name>
+    <value>${test.tmp.dir}/hadoop-tmp</value>
+    <description>A base for other temporary directories.</description>
+  </property>
+
+  <!--
+  <property>
+    <name>hive.exec.reducers.max</name>
+    <value>1</value>
+    <description>maximum number of reducers</description>
+  </property>
+  -->
+
+  <property>
+    <name>hive.exec.scratchdir</name>
+    <value>${test.tmp.dir}/scratchdir</value>
+    <description>Scratch space for Hive jobs</description>
+  </property>
+
+  <property>
+    <name>hive.exec.local.scratchdir</name>
+    <value>${test.tmp.dir}/localscratchdir/</value>
+    <description>Local scratch space for Hive jobs</description>
+  </property>
+
+  <property>
+    <name>local.tmp.dir</name>
+    <value>file:///${env:PWD}/target/tmp</value>
+  </property>
+
+  <property>
+    <name>datanucleus.schema.autoCreateAll</name>
+    <value>true</value>
+  </property>
+
+  <property>
+    <name>hive.metastore.schema.verification</name>
+    <value>false</value>
+  </property>
+
+  <property>
+    <name>javax.jdo.option.ConnectionURL</name>
+    <value>jdbc:derby:;databaseName=${test.tmp.dir}/junit_metastore_db;create=true</value>
+  </property>
+
+  <property>
+    <name>hive.stats.dbconnectionstring</name>
+    <value>jdbc:derby:;databaseName=${test.tmp.dir}/TempStatsStore;create=true</value>
+  </property>
+
+  <property>
+    <name>javax.jdo.option.ConnectionDriverName</name>
+    <value>org.apache.derby.jdbc.EmbeddedDriver</value>
+  </property>
+
+  <property>
+    <name>javax.jdo.option.ConnectionUserName</name>
+    <value>APP</value>
+  </property>
+
+  <property>
+    <name>javax.jdo.option.ConnectionPassword</name>
+    <value>mine</value>
+  </property>
+
+  <property>
+    <!--  this should eventually be deprecated since the metastore should supply this -->
+    <name>hive.metastore.warehouse.dir</name>
+    <value>${test.warehouse.dir}</value>
+    <description></description>
+  </property>
+
+  <property>
+    <name>hive.metastore.metadb.dir</name>
+    <value>file://${test.tmp.dir}/metadb/</value>
+    <description>
+      Required by metastore server or if the uris argument below is not supplied
+    </description>
+  </property>
+
+  <property>
+    <name>test.log.dir</name>
+    <value>${test.tmp.dir}/log/</value>
+    <description></description>
+  </property>
+
+  <property>
+    <name>test.data.files</name>
+    <value>${hive.root}/data/files</value>
+    <description></description>
+  </property>
+
+  <property>
+    <name>test.data.scripts</name>
+    <value>${basedir}/src/test/data/scripts</value>
+    <description></description>
+  </property>
+
+  <property>
+    <name>hive.jar.path</name>
+    <value>${maven.local.repository}/org/apache/hive/hive-exec/${hive.version}/hive-exec-${hive.version}.jar</value>
+    <description></description>
+  </property>
+
+  <property>
+    <name>hive.metastore.rawstore.impl</name>
+    <value>org.apache.hadoop.hive.metastore.ObjectStore</value>
+    <description>Name of the class that implements org.apache.hadoop.hive.metastore.rawstore interface. This class is used to store and retrieval of raw metadata objects such as table, database</description>
+  </property>
+
+  <property>
+    <name>hive.querylog.location</name>
+    <value>${test.tmp.dir}/tmp</value>
+    <description>Location of the structured hive logs</description>
+  </property>
+
+  <property>
+    <name>hive.exec.pre.hooks</name>
+    <value>org.apache.hadoop.hive.ql.hooks.PreExecutePrinter, org.apache.hadoop.hive.ql.hooks.EnforceReadOnlyTables</value>
+    <description>Pre Execute Hook for Tests</description>
+  </property>
+
+  <property>
+    <name>hive.exec.post.hooks</name>
+    <value>org.apache.hadoop.hive.ql.hooks.PostExecutePrinter</value>
+    <description>Post Execute Hook for Tests</description>
+  </property>
+
+  <property>
+    <name>hive.support.concurrency</name>
+    <value>true</value>
+    <description>Whether hive supports concurrency or not. A zookeeper instance must be up and running for the default hive lock manager to support read-write locks.</description>
+  </property>
+
+  <property>
+    <key>hive.unlock.numretries</key>
+    <value>2</value>
+    <description>The number of times you want to retry to do one unlock</description>
+  </property>
+
+  <property>
+    <key>hive.lock.sleep.between.retries</key>
+    <value>2</value>
+    <description>The sleep time (in seconds) between various retries</description>
+  </property>
+
+  <property>
+    <name>fs.pfile.impl</name>
+    <value>org.apache.hadoop.fs.ProxyLocalFileSystem</value>
+    <description>A proxy for local file system used for cross file system testing</description>
+  </property>
+
+  <property>
+    <name>hive.exec.mode.local.auto</name>
+    <value>false</value>
+    <description>
+      Let hive determine whether to run in local mode automatically
+      Disabling this for tests so that minimr is not affected
+    </description>
+  </property>
+
+  <property>
+    <name>hive.auto.convert.join</name>
+    <value>false</value>
+    <description>Whether Hive enable the optimization about converting common join into mapjoin based on the input file size</description>
+  </property>
+
+  <property>
+    <name>hive.ignore.mapjoin.hint</name>
+    <value>false</value>
+    <description>Whether Hive ignores the mapjoin hint</description>
+  </property>
+
+  <property>
+    <name>hive.input.format</name>
+    <value>org.apache.hadoop.hive.ql.io.CombineHiveInputFormat</value>
+    <description>The default input format, if it is not specified, the system assigns it. It is set to HiveInputFormat for hadoop versions 17, 18 and 19, whereas it is set to CombineHiveInputFormat for hadoop 20. The user can always overwrite it - if there is a bug in CombineHiveInputFormat, it can always be manually set to HiveInputFormat. </description>
+  </property>
+
+  <property>
+    <name>hive.default.rcfile.serde</name>
+    <value>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</value>
+    <description>The default SerDe hive will use for the rcfile format</description>
+  </property>
+
+  <property>
+    <name>hive.stats.key.prefix.reserve.length</name>
+    <value>0</value>
+  </property>
+
+  <property>
+    <name>hive.conf.restricted.list</name>
+    <value>dummy.config.value</value>
+    <description>Using dummy config value above because you cannot override config with empty value</description>
+  </property>
+
+  <property>
+    <name>hive.exec.submit.local.task.via.child</name>
+    <value>false</value>
+  </property>
+
+  <property>
+    <name>hive.optimize.sort.dynamic.partition</name>
+    <value>true</value>
+  </property>
+
+  <property>
+    <name>hive.dummyparam.test.server.specific.config.override</name>
+    <value>from.hive-site.xml</value>
+    <description>Using dummy param to test server specific configuration</description>
+  </property>
+
+  <property>
+    <name>hive.dummyparam.test.server.specific.config.hivesite</name>
+    <value>from.hive-site.xml</value>
+    <description>Using dummy param to test server specific configuration</description>
+  </property>
+
+  <property>
+    <name>hive.fetch.task.conversion</name>
+    <value>minimal</value>
+  </property>
+
+  <property>
+    <name>hive.users.in.admin.role</name>
+    <value>hive_admin_user</value>
+  </property>
+
+  <!--
+    The following 3 properties are used for testing blobstore changes on the local filesystem.
+    If tests are required to run on an real Blobstore system, then create the blobstore-conf.xml.
+  -->
+  <property>
+    <name>fs.pblob.impl</name>
+    <value>org.apache.hadoop.fs.ProxyLocalFileSystem</value>
+  </property>
+
+  <property>
+    <name>hive.blobstore.supported.schemes</name>
+    <value>pblob,s3a,s3c,s3</value>
+  </property>
+
+  <property>
+    <name>test.blobstore.path</name>
+    <value>pblob:${system:test.tmp.dir}/bucket</value>
+  </property>
+
+  <!--
+  To run these tests:
+  # Create a file blobstore-conf.xml  - DO NOT ADD TO REVISION CONTROL
+  # Add the credentials for the service you are testing against
+  -->
+  <include xmlns="http://www.w3.org/2001/XInclude" href="blobstore-conf.xml">
+    <fallback/>
+  </include>
+</configuration>
diff --git a/itests/hive-blobstore/src/test/resources/core-blobstore/tez-site.xml b/itests/hive-blobstore/src/test/resources/core-blobstore/tez-site.xml
new file mode 100644
index 0000000..940f390
--- /dev/null
+++ b/itests/hive-blobstore/src/test/resources/core-blobstore/tez-site.xml
@@ -0,0 +1,6 @@
+<configuration>
+  <property>
+    <name>tez.am.dag.scheduler.class</name>
+    <value>org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled</value>
+  </property>
+</configuration>
diff --git a/itests/hive-blobstore/src/test/resources/hdfs-blobstore/blobstore-conf.xml b/itests/hive-blobstore/src/test/resources/hdfs-blobstore/blobstore-conf.xml
new file mode 100644
index 0000000..288b81e
--- /dev/null
+++ b/itests/hive-blobstore/src/test/resources/hdfs-blobstore/blobstore-conf.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+# Copy this file to blobstore-conf.xml
+# update the properties + credentials according to the blobstore being tested
+
+# The following is an example template file for s3a
+-->
+<configuration>
+  <property>
+    <name>test.blobstore.path</name>
+    <value>s3a://cloudera-dev-hive-on-s3/core-blobstore-path/</value>
+  </property>
+  <property>
+    <name>hive.blobstore.optimizations.enabled</name>
+    <value>false</value>
+  </property>
+  <property>
+    <name>additional.plan.masks</name>
+    <value>s3.*</value>
+  </property>
+</configuration>
diff --git a/itests/hive-blobstore/src/test/resources/hdfs-blobstore/hive-site.xml b/itests/hive-blobstore/src/test/resources/hdfs-blobstore/hive-site.xml
new file mode 100644
index 0000000..73cc747
--- /dev/null
+++ b/itests/hive-blobstore/src/test/resources/hdfs-blobstore/hive-site.xml
@@ -0,0 +1,271 @@
+<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
+<!--
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+-->
+
+<configuration>
+  <property>
+    <name>hive.in.test</name>
+    <value>true</value>
+    <description>Internal marker for test. Used for masking env-dependent values</description>
+  </property>
+
+  <!-- Hive Configuration can either be stored in this file or in the hadoop configuration files  -->
+  <!-- that are implied by Hadoop setup variables.                                                -->
+  <!-- Aside from Hadoop setup variables - this file is provided as a convenience so that Hive    -->
+  <!-- users do not have to edit hadoop configuration files (that may be managed as a centralized -->
+  <!-- resource).                                                                                 -->
+
+  <!-- Hive Execution Parameters -->
+  <property>
+    <name>hadoop.tmp.dir</name>
+    <value>${test.tmp.dir}/hadoop-tmp</value>
+    <description>A base for other temporary directories.</description>
+  </property>
+
+  <!--
+  <property>
+    <name>hive.exec.reducers.max</name>
+    <value>1</value>
+    <description>maximum number of reducers</description>
+  </property>
+  -->
+
+  <property>
+    <name>hive.exec.scratchdir</name>
+    <value>${test.tmp.dir}/scratchdir</value>
+    <description>Scratch space for Hive jobs</description>
+  </property>
+
+  <property>
+    <name>hive.exec.local.scratchdir</name>
+    <value>${test.tmp.dir}/localscratchdir/</value>
+    <description>Local scratch space for Hive jobs</description>
+  </property>
+
+  <property>
+    <name>local.tmp.dir</name>
+    <value>file:///${env:PWD}/target/tmp</value>
+  </property>
+
+  <property>
+    <name>datanucleus.schema.autoCreateAll</name>
+    <value>true</value>
+  </property>
+
+  <property>
+    <name>hive.metastore.schema.verification</name>
+    <value>false</value>
+  </property>
+
+  <property>
+    <name>javax.jdo.option.ConnectionURL</name>
+    <value>jdbc:derby:;databaseName=${test.tmp.dir}/junit_metastore_db;create=true</value>
+  </property>
+
+  <property>
+    <name>hive.stats.dbconnectionstring</name>
+    <value>jdbc:derby:;databaseName=${test.tmp.dir}/TempStatsStore;create=true</value>
+  </property>
+
+  <property>
+    <name>javax.jdo.option.ConnectionDriverName</name>
+    <value>org.apache.derby.jdbc.EmbeddedDriver</value>
+  </property>
+
+  <property>
+    <name>javax.jdo.option.ConnectionUserName</name>
+    <value>APP</value>
+  </property>
+
+  <property>
+    <name>javax.jdo.option.ConnectionPassword</name>
+    <value>mine</value>
+  </property>
+
+  <property>
+    <!--  this should eventually be deprecated since the metastore should supply this -->
+    <name>hive.metastore.warehouse.dir</name>
+    <value>${test.warehouse.dir}</value>
+    <description></description>
+  </property>
+
+  <property>
+    <name>hive.metastore.metadb.dir</name>
+    <value>file://${test.tmp.dir}/metadb/</value>
+    <description>
+      Required by metastore server or if the uris argument below is not supplied
+    </description>
+  </property>
+
+  <property>
+    <name>test.log.dir</name>
+    <value>${test.tmp.dir}/log/</value>
+    <description></description>
+  </property>
+
+  <property>
+    <name>test.data.files</name>
+    <value>${hive.root}/data/files</value>
+    <description></description>
+  </property>
+
+  <property>
+    <name>test.data.scripts</name>
+    <value>${hive.root}/data/scripts</value>
+    <description></description>
+  </property>
+
+  <property>
+    <name>hive.jar.path</name>
+    <value>${maven.local.repository}/org/apache/hive/hive-exec/${hive.version}/hive-exec-${hive.version}.jar</value>
+    <description></description>
+  </property>
+
+  <property>
+    <name>hive.metastore.rawstore.impl</name>
+    <value>org.apache.hadoop.hive.metastore.ObjectStore</value>
+    <description>Name of the class that implements org.apache.hadoop.hive.metastore.rawstore interface. This class is used to store and retrieval of raw metadata objects such as table, database</description>
+  </property>
+
+  <property>
+    <name>hive.querylog.location</name>
+    <value>${test.tmp.dir}/tmp</value>
+    <description>Location of the structured hive logs</description>
+  </property>
+
+  <property>
+    <name>hive.exec.pre.hooks</name>
+    <value>org.apache.hadoop.hive.ql.hooks.PreExecutePrinter, org.apache.hadoop.hive.ql.hooks.EnforceReadOnlyTables</value>
+    <description>Pre Execute Hook for Tests</description>
+  </property>
+
+  <property>
+    <name>hive.exec.post.hooks</name>
+    <value>org.apache.hadoop.hive.ql.hooks.PostExecutePrinter</value>
+    <description>Post Execute Hook for Tests</description>
+  </property>
+
+  <property>
+    <name>hive.support.concurrency</name>
+    <value>true</value>
+    <description>Whether hive supports concurrency or not. A zookeeper instance must be up and running for the default hive lock manager to support read-write locks.</description>
+  </property>
+
+  <property>
+    <key>hive.unlock.numretries</key>
+    <value>2</value>
+    <description>The number of times you want to retry to do one unlock</description>
+  </property>
+
+  <property>
+    <key>hive.lock.sleep.between.retries</key>
+    <value>2</value>
+    <description>The sleep time (in seconds) between various retries</description>
+  </property>
+
+  <property>
+    <name>fs.pfile.impl</name>
+    <value>org.apache.hadoop.fs.ProxyLocalFileSystem</value>
+    <description>A proxy for local file system used for cross file system testing</description>
+  </property>
+
+  <property>
+    <name>hive.exec.mode.local.auto</name>
+    <value>false</value>
+    <description>
+      Let hive determine whether to run in local mode automatically
+      Disabling this for tests so that minimr is not affected
+    </description>
+  </property>
+
+  <property>
+    <name>hive.auto.convert.join</name>
+    <value>false</value>
+    <description>Whether Hive enable the optimization about converting common join into mapjoin based on the input file size</description>
+  </property>
+
+  <property>
+    <name>hive.ignore.mapjoin.hint</name>
+    <value>false</value>
+    <description>Whether Hive ignores the mapjoin hint</description>
+  </property>
+
+  <property>
+    <name>hive.input.format</name>
+    <value>org.apache.hadoop.hive.ql.io.CombineHiveInputFormat</value>
+    <description>The default input format, if it is not specified, the system assigns it. It is set to HiveInputFormat for hadoop versions 17, 18 and 19, whereas it is set to CombineHiveInputFormat for hadoop 20. The user can always overwrite it - if there is a bug in CombineHiveInputFormat, it can always be manually set to HiveInputFormat. </description>
+  </property>
+
+  <property>
+    <name>hive.default.rcfile.serde</name>
+    <value>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</value>
+    <description>The default SerDe hive will use for the rcfile format</description>
+  </property>
+
+  <property>
+    <name>hive.stats.key.prefix.reserve.length</name>
+    <value>0</value>
+  </property>
+
+  <property>
+    <name>hive.conf.restricted.list</name>
+    <value>dummy.config.value</value>
+    <description>Using dummy config value above because you cannot override config with empty value</description>
+  </property>
+
+  <property>
+    <name>hive.exec.submit.local.task.via.child</name>
+    <value>false</value>
+  </property>
+
+  <property>
+    <name>hive.optimize.sort.dynamic.partition</name>
+    <value>true</value>
+  </property>
+
+  <property>
+    <name>hive.dummyparam.test.server.specific.config.override</name>
+    <value>from.hive-site.xml</value>
+    <description>Using dummy param to test server specific configuration</description>
+  </property>
+
+  <property>
+    <name>hive.dummyparam.test.server.specific.config.hivesite</name>
+    <value>from.hive-site.xml</value>
+    <description>Using dummy param to test server specific configuration</description>
+  </property>
+
+  <property>
+    <name>hive.fetch.task.conversion</name>
+    <value>minimal</value>
+  </property>
+
+  <property>
+    <name>hive.users.in.admin.role</name>
+    <value>hive_admin_user</value>
+  </property>
+
+  <!--
+  To run these tests:
+  # Create a file blobstore-conf.xml  - DO NOT ADD TO REVISION CONTROL
+  # Add the credentials for the service you are testing against
+  -->
+  <include xmlns="http://www.w3.org/2001/XInclude" href="blobstore-conf.xml">
+    <fallback/>
+  </include>
+</configuration>
diff --git a/itests/hive-blobstore/src/test/resources/hdfs-blobstore/tez-site.xml b/itests/hive-blobstore/src/test/resources/hdfs-blobstore/tez-site.xml
new file mode 100644
index 0000000..940f390
--- /dev/null
+++ b/itests/hive-blobstore/src/test/resources/hdfs-blobstore/tez-site.xml
@@ -0,0 +1,6 @@
+<configuration>
+  <property>
+    <name>tez.am.dag.scheduler.class</name>
+    <value>org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled</value>
+  </property>
+</configuration>
diff --git a/itests/hive-blobstore/src/test/resources/hive-site.xml b/itests/hive-blobstore/src/test/resources/hive-site.xml
deleted file mode 100644
index 406b3b8..0000000
--- a/itests/hive-blobstore/src/test/resources/hive-site.xml
+++ /dev/null
@@ -1,290 +0,0 @@
-<?xml version="1.0"?>
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-<!--
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
--->
-
-<configuration>
-  <property>
-    <name>hive.in.test</name>
-    <value>true</value>
-    <description>Internal marker for test. Used for masking env-dependent values</description>
-  </property>
-
-  <!-- Hive Configuration can either be stored in this file or in the hadoop configuration files  -->
-  <!-- that are implied by Hadoop setup variables.                                                -->
-  <!-- Aside from Hadoop setup variables - this file is provided as a convenience so that Hive    -->
-  <!-- users do not have to edit hadoop configuration files (that may be managed as a centralized -->
-  <!-- resource).                                                                                 -->
-
-  <!-- Hive Execution Parameters -->
-  <property>
-    <name>hadoop.tmp.dir</name>
-    <value>${test.tmp.dir}/hadoop-tmp</value>
-    <description>A base for other temporary directories.</description>
-  </property>
-
-  <!--
-  <property>
-    <name>hive.exec.reducers.max</name>
-    <value>1</value>
-    <description>maximum number of reducers</description>
-  </property>
-  -->
-
-  <property>
-    <name>hive.exec.scratchdir</name>
-    <value>${test.tmp.dir}/scratchdir</value>
-    <description>Scratch space for Hive jobs</description>
-  </property>
-
-  <property>
-    <name>hive.exec.local.scratchdir</name>
-    <value>${test.tmp.dir}/localscratchdir/</value>
-    <description>Local scratch space for Hive jobs</description>
-  </property>
-
-  <property>
-    <name>local.tmp.dir</name>
-    <value>file:///${env:PWD}/target/tmp</value>
-  </property>
-
-  <property>
-    <name>datanucleus.schema.autoCreateAll</name>
-    <value>true</value>
-  </property>
-
-  <property>
-    <name>hive.metastore.schema.verification</name>
-    <value>false</value>
-  </property>
-
-  <property>
-    <name>javax.jdo.option.ConnectionURL</name>
-    <value>jdbc:derby:;databaseName=${test.tmp.dir}/junit_metastore_db;create=true</value>
-  </property>
-
-  <property>
-    <name>hive.stats.dbconnectionstring</name>
-    <value>jdbc:derby:;databaseName=${test.tmp.dir}/TempStatsStore;create=true</value>
-  </property>
-
-  <property>
-    <name>javax.jdo.option.ConnectionDriverName</name>
-    <value>org.apache.derby.jdbc.EmbeddedDriver</value>
-  </property>
-
-  <property>
-    <name>javax.jdo.option.ConnectionUserName</name>
-    <value>APP</value>
-  </property>
-
-  <property>
-    <name>javax.jdo.option.ConnectionPassword</name>
-    <value>mine</value>
-  </property>
-
-  <property>
-    <!--  this should eventually be deprecated since the metastore should supply this -->
-    <name>hive.metastore.warehouse.dir</name>
-    <value>${test.warehouse.dir}</value>
-    <description></description>
-  </property>
-
-  <property>
-    <name>hive.metastore.metadb.dir</name>
-    <value>file://${test.tmp.dir}/metadb/</value>
-    <description>
-      Required by metastore server or if the uris argument below is not supplied
-    </description>
-  </property>
-
-  <property>
-    <name>test.log.dir</name>
-    <value>${test.tmp.dir}/log/</value>
-    <description></description>
-  </property>
-
-  <property>
-    <name>test.data.files</name>
-    <value>${hive.root}/data/files</value>
-    <description></description>
-  </property>
-
-  <property>
-    <name>test.data.scripts</name>
-    <value>${basedir}/src/test/data/scripts</value>
-    <description></description>
-  </property>
-
-  <property>
-    <name>hive.jar.path</name>
-    <value>${maven.local.repository}/org/apache/hive/hive-exec/${hive.version}/hive-exec-${hive.version}.jar</value>
-    <description></description>
-  </property>
-
-  <property>
-    <name>hive.metastore.rawstore.impl</name>
-    <value>org.apache.hadoop.hive.metastore.ObjectStore</value>
-    <description>Name of the class that implements org.apache.hadoop.hive.metastore.rawstore interface. This class is used to store and retrieval of raw metadata objects such as table, database</description>
-  </property>
-
-  <property>
-    <name>hive.querylog.location</name>
-    <value>${test.tmp.dir}/tmp</value>
-    <description>Location of the structured hive logs</description>
-  </property>
-
-  <property>
-    <name>hive.exec.pre.hooks</name>
-    <value>org.apache.hadoop.hive.ql.hooks.PreExecutePrinter, org.apache.hadoop.hive.ql.hooks.EnforceReadOnlyTables</value>
-    <description>Pre Execute Hook for Tests</description>
-  </property>
-
-  <property>
-    <name>hive.exec.post.hooks</name>
-    <value>org.apache.hadoop.hive.ql.hooks.PostExecutePrinter</value>
-    <description>Post Execute Hook for Tests</description>
-  </property>
-
-  <property>
-    <name>hive.support.concurrency</name>
-    <value>true</value>
-    <description>Whether hive supports concurrency or not. A zookeeper instance must be up and running for the default hive lock manager to support read-write locks.</description>
-  </property>
-
-  <property>
-    <key>hive.unlock.numretries</key>
-    <value>2</value>
-    <description>The number of times you want to retry to do one unlock</description>
-  </property>
-
-  <property>
-    <key>hive.lock.sleep.between.retries</key>
-    <value>2</value>
-    <description>The sleep time (in seconds) between various retries</description>
-  </property>
-
-  <property>
-    <name>fs.pfile.impl</name>
-    <value>org.apache.hadoop.fs.ProxyLocalFileSystem</value>
-    <description>A proxy for local file system used for cross file system testing</description>
-  </property>
-
-  <property>
-    <name>hive.exec.mode.local.auto</name>
-    <value>false</value>
-    <description>
-      Let hive determine whether to run in local mode automatically
-      Disabling this for tests so that minimr is not affected
-    </description>
-  </property>
-
-  <property>
-    <name>hive.auto.convert.join</name>
-    <value>false</value>
-    <description>Whether Hive enable the optimization about converting common join into mapjoin based on the input file size</description>
-  </property>
-
-  <property>
-    <name>hive.ignore.mapjoin.hint</name>
-    <value>false</value>
-    <description>Whether Hive ignores the mapjoin hint</description>
-  </property>
-
-  <property>
-    <name>hive.input.format</name>
-    <value>org.apache.hadoop.hive.ql.io.CombineHiveInputFormat</value>
-    <description>The default input format, if it is not specified, the system assigns it. It is set to HiveInputFormat for hadoop versions 17, 18 and 19, whereas it is set to CombineHiveInputFormat for hadoop 20. The user can always overwrite it - if there is a bug in CombineHiveInputFormat, it can always be manually set to HiveInputFormat. </description>
-  </property>
-
-  <property>
-    <name>hive.default.rcfile.serde</name>
-    <value>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</value>
-    <description>The default SerDe hive will use for the rcfile format</description>
-  </property>
-
-  <property>
-    <name>hive.stats.key.prefix.reserve.length</name>
-    <value>0</value>
-  </property>
-
-  <property>
-    <name>hive.conf.restricted.list</name>
-    <value>dummy.config.value</value>
-    <description>Using dummy config value above because you cannot override config with empty value</description>
-  </property>
-
-  <property>
-    <name>hive.exec.submit.local.task.via.child</name>
-    <value>false</value>
-  </property>
-
-  <property>
-    <name>hive.optimize.sort.dynamic.partition</name>
-    <value>true</value>
-  </property>
-
-  <property>
-    <name>hive.dummyparam.test.server.specific.config.override</name>
-    <value>from.hive-site.xml</value>
-    <description>Using dummy param to test server specific configuration</description>
-  </property>
-
-  <property>
-    <name>hive.dummyparam.test.server.specific.config.hivesite</name>
-    <value>from.hive-site.xml</value>
-    <description>Using dummy param to test server specific configuration</description>
-  </property>
-
-  <property>
-    <name>hive.fetch.task.conversion</name>
-    <value>minimal</value>
-  </property>
-
-  <property>
-    <name>hive.users.in.admin.role</name>
-    <value>hive_admin_user</value>
-  </property>
-
-  <!--
-    The following 3 properties are used for testing blobstore changes on the local filesystem.
-    If tests are required to run on an real Blobstore system, then create the blobstore-conf.xml.
-  -->
-  <property>
-    <name>fs.pblob.impl</name>
-    <value>org.apache.hadoop.fs.ProxyLocalFileSystem</value>
-  </property>
-
-  <property>
-    <name>hive.blobstore.supported.schemes</name>
-    <value>pblob,s3a,s3c,s3</value>
-  </property>
-
-  <property>
-    <name>test.blobstore.path</name>
-    <value>pblob:${system:test.tmp.dir}/bucket</value>
-  </property>
-
-  <!--
-  To run these tests:
-  # Create a file blobstore-conf.xml  - DO NOT ADD TO REVISION CONTROL
-  # Add the credentials for the service you are testing against
-  -->
-  <include xmlns="http://www.w3.org/2001/XInclude" href="blobstore-conf.xml">
-    <fallback/>
-  </include>
-</configuration>
diff --git a/itests/hive-blobstore/src/test/resources/testconfiguration.properties b/itests/hive-blobstore/src/test/resources/testconfiguration.properties
deleted file mode 100644
index 1db1510..0000000
--- a/itests/hive-blobstore/src/test/resources/testconfiguration.properties
+++ /dev/null
@@ -1,2 +0,0 @@
-include.query.files=
-exclude.query.files=
diff --git a/itests/hive-blobstore/src/test/resources/tez-site.xml b/itests/hive-blobstore/src/test/resources/tez-site.xml
deleted file mode 100644
index 940f390..0000000
--- a/itests/hive-blobstore/src/test/resources/tez-site.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<configuration>
-  <property>
-    <name>tez.am.dag.scheduler.class</name>
-    <value>org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled</value>
-  </property>
-</configuration>
diff --git a/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreCliDriver.java b/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreCliDriver.java
new file mode 100644
index 0000000..4aee385
--- /dev/null
+++ b/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreCliDriver.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.hadoop.hive.cli;
+
+import java.io.File;
+import java.util.List;
+
+import org.apache.hadoop.hive.cli.control.CliAdapter;
+import org.apache.hadoop.hive.cli.control.CliConfigs;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TestRule;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
+
+@RunWith(Parameterized.class)
+public class TestBlobstoreCliDriver {
+
+  static CliAdapter adapter = new CliConfigs.BlobstoreCliConfig().getCliAdapter();
+
+  @Parameters(name = "{0}")
+  public static List<Object[]> getParameters() throws Exception {
+    return adapter.getParameters();
+  }
+
+  @ClassRule
+  public static TestRule cliClassRule = adapter.buildClassRule();
+
+  @Rule
+  public TestRule cliTestRule = adapter.buildTestRule();
+
+  private String name;
+  private File qfile;
+
+  public TestBlobstoreCliDriver(String name, File qfile) {
+    this.name = name;
+    this.qfile = qfile;
+  }
+
+  @Test
+  public void testCliDriver() throws Exception {
+    adapter.runTest(name, qfile);
+  }
+
+}
diff --git a/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreNegativeCliDriver.java b/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreNegativeCliDriver.java
new file mode 100644
index 0000000..90f1b47
--- /dev/null
+++ b/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestBlobstoreNegativeCliDriver.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.hadoop.hive.cli;
+
+import java.io.File;
+import java.util.List;
+
+import org.apache.hadoop.hive.cli.control.CliAdapter;
+import org.apache.hadoop.hive.cli.control.CliConfigs;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TestRule;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
+
+@RunWith(Parameterized.class)
+public class TestBlobstoreNegativeCliDriver {
+
+  static CliAdapter adapter = new CliConfigs.BlobstoreNegativeCliConfig().getCliAdapter();
+
+  @Parameters(name = "{0}")
+  public static List<Object[]> getParameters() throws Exception {
+    return adapter.getParameters();
+  }
+
+  @ClassRule
+  public static TestRule cliClassRule = adapter.buildClassRule();
+
+  @Rule
+  public TestRule cliTestRule = adapter.buildTestRule();
+
+  private String name;
+  private File qfile;
+
+  public TestBlobstoreNegativeCliDriver(String name, File qfile) {
+    this.name = name;
+    this.qfile = qfile;
+  }
+
+  @Test
+  public void testCliDriver() throws Exception {
+    adapter.runTest(name, qfile);
+  }
+
+}
diff --git a/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestHdfsBlobstoreCliDriver.java b/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestHdfsBlobstoreCliDriver.java
new file mode 100644
index 0000000..632000f
--- /dev/null
+++ b/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestHdfsBlobstoreCliDriver.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.hadoop.hive.cli;
+
+import java.io.File;
+import java.util.List;
+
+import org.apache.hadoop.hive.cli.control.CliAdapter;
+import org.apache.hadoop.hive.cli.control.CliConfigs;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TestRule;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
+
+@RunWith(Parameterized.class)
+public class TestHdfsBlobstoreCliDriver {
+
+  static CliAdapter adapter = new CliConfigs.HdfsBlobstoreCliConfig().getCliAdapter();
+
+  @Parameters(name = "{0}")
+  public static List<Object[]> getParameters() throws Exception {
+    return adapter.getParameters();
+  }
+
+  @ClassRule
+  public static TestRule cliClassRule = adapter.buildClassRule();
+
+  @Rule
+  public TestRule cliTestRule = adapter.buildTestRule();
+
+  private String name;
+  private File qfile;
+
+  public TestHdfsBlobstoreCliDriver(String name, File qfile) {
+    this.name = name;
+    this.qfile = qfile;
+  }
+
+  @Test
+  public void testCliDriver() throws Exception {
+    adapter.runTest(name, qfile);
+  }
+
+}
diff --git a/itests/src/test/resources/testconfiguration.properties b/itests/src/test/resources/testconfiguration.properties
index c1fa54a..808512e 100644
--- a/itests/src/test/resources/testconfiguration.properties
+++ b/itests/src/test/resources/testconfiguration.properties
@@ -1121,3 +1121,149 @@ spark.query.negative.files=groupby2_map_skew_multi_distinct.q,\
   groupby3_map_skew_multi_distinct.q,\
   groupby3_multi_distinct.q,\
   groupby_grouping_sets7.q
+
+hdfs.blobstore.query.files=add_part_exist.q,\
+  add_part_multiple.q,\
+  alter_change_db_location.q,\
+  alter_char1.q,\
+  alter_char2.q,\
+  add_part_exist.q,\
+  alter_concatenate_indexed_table.q,\
+  alter_db_owner.q,\
+  alter_file_format.q,\
+  alter_index.q,\
+  alter_merge.q,\
+  alter_merge_2.q,\
+  alter_merge_2_orc.q,\
+  alter_merge_3.q,\
+  alter_merge_orc.q,\
+  alter_merge_stats.q,\
+  alter_merge_stats_orc.q,\
+  alter_numbuckets_partitioned_table.q,\
+  alter_numbuckets_partitioned_table2.q,\
+  alter_numbuckets_partitioned_table2_h23.q,\
+  alter_numbuckets_partitioned_table_h23.q,\
+  alter_partition_change_col.q,\
+  alter_partition_clusterby_sortby.q,\
+  alter_partition_coltype.q,\
+  alter_partition_format_loc.q,\
+  alter_partition_protect_mode.q,\
+  alter_partition_update_status.q,\
+  alter_partition_with_whitelist.q,\
+  alter_rename_partition.q,\
+  alter_rename_table.q,\
+  alter_skewed_table.q,\
+  alter_table_cascade.q,\
+  alter_table_invalidate_column_stats.q,\
+  alter_table_location.q,\
+  alter_table_not_sorted.q,\
+  alter_table_partition_drop.q,\
+  alter_table_serde.q,\
+  alter_table_serde2.q,\
+  alter_table_update_status.q,\
+  alter_varchar1.q,\
+  alter_varchar2.q,\
+  alter_view_as_select.q,\
+  alter_view_rename.q,\
+  analyze_tbl_part.q,\
+  bucket1.q,\
+  bucket2.q,\
+  bucket3.q,\
+  bucket6.q,\
+  bucket_groupby.q,\
+  bucket_if_with_path_filter.q,\
+  bucket_map_join_1.q,\
+  bucket_map_join_2.q,\
+  bucket_map_join_spark1.q,\
+  bucket_map_join_spark2.q,\
+  bucket_map_join_spark3.q,\
+  bucket_map_join_spark4.q,\
+  bucketcontext_1.q,\
+  bucketcontext_2.q,\
+  bucketcontext_3.q,\
+  bucketcontext_4.q,\
+  bucketcontext_5.q,\
+  bucketcontext_6.q,\
+  bucketcontext_7.q,\
+  bucketcontext_8.q,\
+  bucketizedhiveinputformat_auto.q,\
+  bucketmapjoin10.q,\
+  bucketmapjoin11.q,\
+  bucketmapjoin12.q,\
+  bucketmapjoin13.q,\
+  bucketmapjoin6.q,\
+  bucketmapjoin7.q,\
+  bucketmapjoin8.q,\
+  bucketmapjoin9.q,\
+  bucketmapjoin_negative3.q,\
+  bucketsortoptimize_insert_1.q,\
+  bucketsortoptimize_insert_2.q,\
+  bucketsortoptimize_insert_3.q,\
+  bucketsortoptimize_insert_4.q,\
+  bucketsortoptimize_insert_5.q,\
+  bucketsortoptimize_insert_6.q,\
+  bucketsortoptimize_insert_7.q,\
+  bucketsortoptimize_insert_8.q,\
+  create_1.q,\
+  create_big_view.q,\
+  create_default_prop.q,\
+  create_escape.q,\
+  create_func1.q,\
+  create_genericudaf.q,\
+  create_genericudf.q,\
+  create_insert_outputformat.q,\
+  create_like.q,\
+  create_like2.q,\
+  create_like_tbl_props.q,\
+  create_like_view.q,\
+  create_merge_compressed.q,\
+  create_nested_type.q,\
+  create_or_replace_view.q,\
+  create_struct_table.q,\
+  create_udaf.q,\
+  create_union_table.q,\
+  create_view_defaultformats.q,\
+  create_view_partitioned.q,\
+  create_view_translate.q,\
+  ctas_char.q,\
+  ctas_colname.q,\
+  ctas_date.q,\
+  ctas_hadoop20.q,\
+  ctas_uses_database_location.q,\
+  ctas_uses_table_location.q,\
+  ctas_varchar.q,\
+  insert0.q,\
+  insert1.q,\
+  insert1_overwrite_partitions.q,\
+  insert2.q,\
+  insert2_overwrite_partitions.q,\
+  insert_acid_dynamic_partition.q,\
+  insert_acid_not_bucketed.q,\
+  insert_compressed.q,\
+  insert_into1.q,\
+  insert_into2.q,\
+  insert_into3.q,\
+  insert_into4.q,\
+  insert_into5.q,\
+  insert_into_with_schema.q,\
+  insert_non_utf8_encoding_table.q,\
+  insert_nonacid_from_acid.q,\
+  insert_orig_table.q,\
+  insert_overwrite_directory.q,\
+  insert_overwrite_directory2.q,\
+  insert_overwrite_local_directory_1.q,\
+  insert_update_delete.q,\
+  insert_values_acid_not_bucketed.q,\
+  insert_values_dynamic_partitioned.q,\
+  insert_values_non_partitioned.q,\
+  insert_values_nonascii.q,\
+  insert_values_orig_table.q,\
+  insert_values_partitioned.q,\
+  insert_values_tmp_table.q,\
+  insertexternal1.q,\
+  insertoverwrite_bucket.q,\
+  msck_repair_0.q,\
+  msck_repair_1.q,\
+  msck_repair_2.q,\
+  msck_repair_3.q,\
+  msck_repair_batchsize.q 
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/AbstractCoreBlobstoreCliDriver.java b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/AbstractCoreBlobstoreCliDriver.java
index f43951e..e16f88c 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/AbstractCoreBlobstoreCliDriver.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/AbstractCoreBlobstoreCliDriver.java
@@ -39,7 +39,7 @@
 public abstract class AbstractCoreBlobstoreCliDriver extends CliAdapter {
 
   protected static QTestUtil qt;
-  private static final String HCONF_TEST_BLOBSTORE_PATH = "test.blobstore.path";
+  protected static final String HCONF_TEST_BLOBSTORE_PATH = "test.blobstore.path";
   private static final String HCONF_TEST_BLOBSTORE_PATH_UNIQUE = HCONF_TEST_BLOBSTORE_PATH + ".unique";
   private static String testBlobstorePathUnique;
 
@@ -174,6 +174,11 @@ private void setupUniqueTestPath() {
         + "-" + String.format("%03d", (int)(Math.random() * 999));
     testBlobstorePathUnique = testBlobstorePath + uid;
 
+    maskAdditionalPatterns();
     qt.addPatternWithMaskComment(testBlobstorePathUnique, String.format("### %s ###", HCONF_TEST_BLOBSTORE_PATH));
   }
+
+  protected void maskAdditionalPatterns() {
+    // Implement me
+  }
 }
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java
index 4e520bc..59fb293 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java
@@ -476,7 +476,29 @@ public BlobstoreCliConfig() {
         setInitScript("blobstore_test_init.q");
         setCleanupScript("blobstore_test_cleanup.q");
 
-        setHiveConfDir("itests/hive-blobstore/src/test/resources");
+        setHiveConfDir("itests/hive-blobstore/src/test/resources/core-blobstore");
+        setClusterType(MiniClusterType.none);
+      } catch (Exception e) {
+        throw new RuntimeException("can't construct cliconfig", e);
+      }
+    }
+  }
+
+  public static class HdfsBlobstoreCliConfig extends AbstractCliConfig {
+    public HdfsBlobstoreCliConfig() {
+      super(HdfsBlobstoreCliDriver.class);
+      try {
+        setQueryDir("ql/src/test/queries/clientpositive");
+
+        includesFrom(testConfigProps, "hdfs.blobstore.query.files");
+
+        setResultsDir("ql/src/test/results/clientpositive");
+        setLogDir("itests/hive-blobstore/target/qfile-results/clientpositive");
+
+        setInitScript("q_test_init.sql");
+        setCleanupScript("q_test_cleanup.sql");
+
+        setHiveConfDir("itests/hive-blobstore/src/test/resources/hdfs-blobstore");
         setClusterType(MiniClusterType.none);
       } catch (Exception e) {
         throw new RuntimeException("can't construct cliconfig", e);
@@ -496,7 +518,7 @@ public BlobstoreNegativeCliConfig() {
         setInitScript("blobstore_test_init.q");
         setCleanupScript("blobstore_test_cleanup.q");
 
-        setHiveConfDir("itests/hive-blobstore/src/test/resources");
+        setHiveConfDir("itests/hive-blobstore/src/test/resources/core-blobstore");
         setClusterType(MiniClusterType.none);
       } catch (Exception e) {
         throw new RuntimeException("can't construct cliconfig", e);
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBlobstoreCliDriver.java b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBlobstoreCliDriver.java
index 42b2276..46a700e 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBlobstoreCliDriver.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBlobstoreCliDriver.java
@@ -26,4 +26,9 @@ public CoreBlobstoreCliDriver(AbstractCliConfig testCliConfig) {
   public void runTest(String tname, String fname, String fpath) throws Exception {
     super.runTestHelper(tname, fname, fpath, true);
   }
+
+  @Override
+  protected void maskAdditionalPatterns() {
+    qt.addPatternWithMaskComment("(pblob|s3.?|swift|wasb.?).*hive-staging.*", "### BLOBSTORE_STAGING_PATH ###");
+  }
 }
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBlobstoreNegativeCliDriver.java b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBlobstoreNegativeCliDriver.java
index b63a71f..2c55bda 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBlobstoreNegativeCliDriver.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreBlobstoreNegativeCliDriver.java
@@ -26,4 +26,9 @@ public CoreBlobstoreNegativeCliDriver(AbstractCliConfig testCliConfig) {
   public void runTest(String tname, String fname, String fpath) throws Exception {
     super.runTestHelper(tname, fname, fpath, false);
   }
+
+  @Override
+  protected void maskAdditionalPatterns() {
+    qt.addPatternWithMaskComment("(pblob|s3.?|swift|wasb.?).*hive-staging.*", "### BLOBSTORE_STAGING_PATH ###");
+  }
 }
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/HdfsBlobstoreCliDriver.java b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/HdfsBlobstoreCliDriver.java
new file mode 100644
index 0000000..5c25880
--- /dev/null
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/HdfsBlobstoreCliDriver.java
@@ -0,0 +1,43 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hive.cli.control;
+
+import org.apache.hadoop.hive.conf.HiveConf;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+
+
+public class HdfsBlobstoreCliDriver extends AbstractCoreBlobstoreCliDriver {
+
+  public HdfsBlobstoreCliDriver(AbstractCliConfig testCliConfig) {
+    super(testCliConfig);
+  }
+
+  @Override
+  @BeforeClass
+  public void beforeClass() {
+    super.beforeClass();
+    qt.getConf().set(HiveConf.ConfVars.METASTOREWAREHOUSE.varname, qt.getConf().get(HCONF_TEST_BLOBSTORE_PATH));
+  }
+
+  @Override
+  public void runTest(String tname, String fname, String fpath) throws Exception {
+    super.runTestHelper(tname, fname, fpath, true);
+  }
+}
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java b/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java
index 1bd471b..0d78986 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java
@@ -65,6 +65,7 @@
 import java.util.regex.Pattern;
 
 import com.google.common.base.Preconditions;
+import com.google.common.collect.Lists;
 import junit.framework.TestSuite;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
@@ -120,6 +121,7 @@
 
 import com.google.common.collect.ImmutableList;
 import org.junit.Assert;
+import parquet.Strings;
 
 /**
  * QTestUtil.
@@ -141,6 +143,7 @@
 
   private static final String TEST_TMP_DIR_PROPERTY = "test.tmp.dir"; // typically target/tmp
   private static final String BUILD_DIR_PROPERTY = "build.dir"; // typically target
+  private static final String ADDITIONAL_PLAN_MASKS = "additional.plan.masks";
 
   private String testWarehouse;
   private final String testFiles;
@@ -172,6 +175,7 @@
   private QTestSetup setup = null;
   private SparkSession sparkSession = null;
   private boolean isSessionStateStarted = false;
+  private Pattern[] planMask;
   private static final String javaVersion = getJavaVersion();
 
   private final String initScript;
@@ -484,7 +488,7 @@ public QTestUtil(String outDir, String logDir, MiniClusterType clusterType,
     qSortNHashQuerySet = new HashSet<String>();
     qJavaVersionSpecificOutput = new HashSet<String>();
     this.clusterType = clusterType;
-
+    this.planMask = buildPlanMask(Strings.isNullOrEmpty(this.conf.get(ADDITIONAL_PLAN_MASKS)) ? Lists.<String>newArrayList() : Lists.newArrayList(this.conf.get(ADDITIONAL_PLAN_MASKS).split(",")));
     HadoopShims shims = ShimLoader.getHadoopShims();
 
     setupFileSystem(shims);
@@ -519,6 +523,46 @@ public QTestUtil(String outDir, String logDir, MiniClusterType clusterType,
     init();
   }
 
+  private Pattern[] buildPlanMask(List<String> additionalPlanMasks) {
+    List<String> planMasks = Lists.newArrayList(
+      ".*file:.*",
+      ".*pfile:.*",
+      ".*hdfs:.*",
+      ".*/tmp/.*",
+      ".*invalidscheme:.*",
+      ".*lastUpdateTime.*",
+      ".*lastAccessTime.*",
+      ".*lastModifiedTime.*",
+      ".*[Oo]wner.*",
+      ".*CreateTime.*",
+      ".*LastAccessTime.*",
+      ".*Location.*",
+      ".*LOCATION '.*",
+      ".*transient_lastDdlTime.*",
+      ".*last_modified_.*",
+      ".*at org.*",
+      ".*at sun.*",
+      ".*at java.*",
+      ".*at junit.*",
+      ".*Caused by:.*",
+      ".*LOCK_QUERYID:.*",
+      ".*LOCK_TIME:.*",
+      ".*grantTime.*",
+      ".*[.][.][.] [0-9]* more.*",
+      ".*job_[0-9_]*.*",
+      ".*job_local[0-9_]*.*",
+      ".*USING 'java -cp.*",
+      "^Deleted.*",
+      ".*DagName:.*",
+      ".*Input:.*/data/files/.*",
+      ".*Output:.*/data/files/.*",
+      ".*total number of created files now is.*",
+      ".*.hive-staging.*",
+      "org\\.apache\\.hadoop\\.hive\\.metastore\\.model\\.MConstraint@([0-9]|[a-z])*");
+    planMasks.addAll(additionalPlanMasks);
+    return toPattern(planMasks.toArray(new String[]{}));
+  }
+
   private void setupFileSystem(HadoopShims shims) throws IOException {
 
     if (fsType == FsType.local) {
@@ -1674,52 +1718,13 @@ private void maskPatterns(Pattern[] patterns, String fname) throws Exception {
     out.close();
   }
 
-  private final Pattern[] planMask = toPattern(new String[] {
-      ".*file:.*",
-      ".*pfile:.*",
-      ".*hdfs:.*",
-      ".*/tmp/.*",
-      ".*invalidscheme:.*",
-      ".*lastUpdateTime.*",
-      ".*lastAccessTime.*",
-      ".*lastModifiedTime.*",
-      ".*[Oo]wner.*",
-      ".*CreateTime.*",
-      ".*LastAccessTime.*",
-      ".*Location.*",
-      ".*LOCATION '.*",
-      ".*transient_lastDdlTime.*",
-      ".*last_modified_.*",
-      ".*at org.*",
-      ".*at sun.*",
-      ".*at java.*",
-      ".*at junit.*",
-      ".*Caused by:.*",
-      ".*LOCK_QUERYID:.*",
-      ".*LOCK_TIME:.*",
-      ".*grantTime.*",
-      ".*[.][.][.] [0-9]* more.*",
-      ".*job_[0-9_]*.*",
-      ".*job_local[0-9_]*.*",
-      ".*USING 'java -cp.*",
-      "^Deleted.*",
-      ".*DagName:.*",
-      ".*Input:.*/data/files/.*",
-      ".*Output:.*/data/files/.*",
-      ".*total number of created files now is.*",
-      ".*.hive-staging.*",
-      "org\\.apache\\.hadoop\\.hive\\.metastore\\.model\\.MConstraint@([0-9]|[a-z])*"
-  });
-
   private final Pattern[] partialReservedPlanMask = toPattern(new String[] {
       "data/warehouse/(.*?/)+\\.hive-staging"  // the directory might be db/table/partition
       //TODO: add more expected test result here
   });
 
   /* This list may be modified by specific cli drivers to mask strings that change on every test */
-  private List<Pair<Pattern, String>> patternsWithMaskComments = new ArrayList<Pair<Pattern, String>>() {{
-    add(toPatternPair("(pblob|s3.?|swift|wasb.?).*hive-staging.*","### BLOBSTORE_STAGING_PATH ###"));
-  }};
+  private List<Pair<Pattern, String>> patternsWithMaskComments = new ArrayList<Pair<Pattern, String>>();
 
   private Pair<Pattern, String> toPatternPair(String patternStr, String maskComment) {
     return ImmutablePair.of(Pattern.compile(patternStr), maskComment);
-- 
1.7.9.5

