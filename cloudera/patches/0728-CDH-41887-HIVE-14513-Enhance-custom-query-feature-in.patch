From 25aea205d6519a15179cf8cfd218a5932d612954 Mon Sep 17 00:00:00 2001
From: ctang <ctang@cloudera.com>
Date: Fri, 12 Aug 2016 11:30:20 -0400
Subject: [PATCH 0728/1164] CDH-41887 HIVE-14513: Enhance custom query feature
 in LDAP atn to support resultset of ldap groups
 (Naveen Gangam, via Chaoyu Tang)

Change-Id: Ie0d02273f2e5aabc0fba814b48b67c6df55cf176
---
 .../auth/LdapAuthenticationProviderImpl.java       |   17 ++-
 .../auth/TestLdapAtnProviderWithMiniDS.java        |  111 ++++++++++++++++++--
 2 files changed, 120 insertions(+), 8 deletions(-)

diff --git a/service/src/java/org/apache/hive/service/auth/LdapAuthenticationProviderImpl.java b/service/src/java/org/apache/hive/service/auth/LdapAuthenticationProviderImpl.java
index 146f4a7..618c42a 100644
--- a/service/src/java/org/apache/hive/service/auth/LdapAuthenticationProviderImpl.java
+++ b/service/src/java/org/apache/hive/service/auth/LdapAuthenticationProviderImpl.java
@@ -595,7 +595,13 @@ public static String findUserDNByPattern(DirContext ctx, String userName)
 
     SearchControls searchControls = new SearchControls();
     List<String> list             = new ArrayList<String>();
-    String[] returnAttributes     = new String[0]; //empty set
+    String[] returnAttributes;
+    if (groupMembership_attr != null) {
+      // retrieve the attributes that are meant to desginate user DNs
+      returnAttributes = new String[] { groupMembership_attr };
+    } else {
+      returnAttributes = new String[0]; //empty set
+    }
 
     searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);
     searchControls.setReturningAttributes(returnAttributes);
@@ -605,6 +611,14 @@ public static String findUserDNByPattern(DirContext ctx, String userName)
     SearchResult searchResult = null;
     while(results.hasMoreElements()) {
       searchResult = results.nextElement();
+      if (groupMembership_attr != null) {
+        Attribute userAttribute = searchResult.getAttributes().get(groupMembership_attr);
+        if (userAttribute != null) {
+          list.add((String)userAttribute.get());
+          continue;
+        }
+      }
+
       list.add(searchResult.getNameInNamespace());
       LOG.debug("LDAPAtn:executeLDAPQuery()::Return set size " + list.get(list.size() - 1));
     }
@@ -633,5 +647,4 @@ public static String extractBaseDN(String dn) {
     }
     return null;
   }
-
 }
diff --git a/service/src/test/org/apache/hive/service/auth/TestLdapAtnProviderWithMiniDS.java b/service/src/test/org/apache/hive/service/auth/TestLdapAtnProviderWithMiniDS.java
index 066f60e..31a063d 100644
--- a/service/src/test/org/apache/hive/service/auth/TestLdapAtnProviderWithMiniDS.java
+++ b/service/src/test/org/apache/hive/service/auth/TestLdapAtnProviderWithMiniDS.java
@@ -123,8 +123,8 @@
       "objectClass: ExtensibleObject",
       "givenName: Group2",
       "ou: Groups",
-      "cn: group1",
-      "sn: group1",
+      "cn: group2",
+      "sn: group2",
       "member: uid=user2,ou=People,dc=example,dc=com",
 
       "dn: cn=group3,ou=Groups,dc=example,dc=com",
@@ -859,14 +859,14 @@ public void testCustomQueryPositive() throws Exception {
                        + USER1.getUID() + ")(uid=" + USER4.getUID() + ")))");
     initLdapAtn(ldapProperties);
 
-      user = USER1.getDN();
+    user = USER1.getDN();
     try {
       ldapProvider.Authenticate(user, USER1.getPassword());
       assertTrue("testCustomQueryPositive: Authentication succeeded for " + user + " as expected", true);
 
-     user = USER1.getUID();
-       ldapProvider.Authenticate(user, USER1.getPassword());
-       assertTrue("testCustomQueryPositive: Authentication succeeded for " + user + " as expected", true);
+      user = USER1.getUID();
+      ldapProvider.Authenticate(user, USER1.getPassword());
+      assertTrue("testCustomQueryPositive: Authentication succeeded for " + user + " as expected", true);
 
       user = USER4.getDN();
       ldapProvider.Authenticate(user, USER4.getPassword());
@@ -903,6 +903,105 @@ public void testCustomQueryNegative() throws Exception {
     }
   }
 
+  /**
+   Test to test the LDAP Atn to use a custom LDAP query that returns
+   a) A set of group DNs
+   b) A combination of group(s) DN and user DN
+   LDAP atn is expected to extract the members of the group using the attribute value for
+   "hive.server2.authentication.ldap.groupMembershipKey"
+   */
+  @Test
+  public void testCustomQueryWithGroupsPositive() throws Exception {
+    String user;
+    Map<String, String> ldapProperties = new HashMap<String, String>();
+    ldapProperties.put("hive.server2.authentication.ldap.baseDN", "dc=example,dc=com");
+    ldapProperties.put("hive.server2.authentication.ldap.userDNPattern", "cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com");
+    ldapProperties.put("hive.server2.authentication.ldap.customLDAPQuery",
+                         "(&(objectClass=groupOfNames)(|(cn=group1)(cn=group2)))");
+    initLdapAtn(ldapProperties);
+
+    user = USER1.getDN();
+    try {
+      ldapProvider.Authenticate(user, USER1.getPassword());
+      assertTrue("testCustomQueryWithGroupsPositive: Authentication succeeded for " + user + " as expected", true);
+
+       user = USER2.getUID();
+       ldapProvider.Authenticate(user, USER2.getPassword());
+       assertTrue("testCustomQueryWithGroupsPositive: Authentication succeeded for " + user + " as expected", true);
+    } catch (AuthenticationException e) {
+      Assert.fail("testCustomQueryWithGroupsPositive: Authentication failed for " + user + ",user expected to pass custom LDAP Query");
+    }
+
+    /* the following test uses a query that returns a group and a user entry.
+       the ldap atn should use the groupMembershipKey to identify the users for the returned group
+       and the authentication should succeed for the users of that group as well as the lone user4 in this case
+    */
+    ldapProperties.put("hive.server2.authentication.ldap.baseDN", "dc=example,dc=com");
+    ldapProperties.put("hive.server2.authentication.ldap.userDNPattern", "cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com");
+    // following query should return group1 and user2
+    ldapProperties.put("hive.server2.authentication.ldap.customLDAPQuery",
+                         "(|(&(objectClass=groupOfNames)(cn=group1))(&(objectClass=person)(sn=user4)))");
+    initLdapAtn(ldapProperties);
+
+    user = USER1.getUID();
+    try {
+      ldapProvider.Authenticate(user, USER1.getPassword());
+      assertTrue("testCustomQueryWithGroupsPositive: Authentication succeeded for " + user + " as expected", true);
+
+       user = USER4.getUID();
+       ldapProvider.Authenticate(user, USER4.getPassword());
+       assertTrue("testCustomQueryWithGroupsPositive: Authentication succeeded for " + user + " as expected", true);
+    } catch (AuthenticationException e) {
+      Assert.fail("testCustomQueryWithGroupsPositive: Authentication failed for " + user + ",user expected to pass custom LDAP Query");
+    }
+
+    ldapProperties.put("hive.server2.authentication.ldap.baseDN", "dc=example,dc=com");
+    ldapProperties.put("hive.server2.authentication.ldap.userDNPattern", "cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com");
+    ldapProperties.put("hive.server2.authentication.ldap.groupMembershipKey", "uniqueMember");
+    ldapProperties.put("hive.server2.authentication.ldap.customLDAPQuery",
+                         "(&(objectClass=groupOfUniqueNames)(cn=group4))");
+    initLdapAtn(ldapProperties);
+
+    user = USER4.getDN();
+    try {
+      ldapProvider.Authenticate(user, USER4.getPassword());
+      assertTrue("testCustomQueryWithGroupsPositive: Authentication succeeded for " + user + " as expected", true);
+
+      user = USER4.getUID();
+      ldapProvider.Authenticate(user, USER4.getPassword());
+      assertTrue("testCustomQueryWithGroupsPositive: Authentication succeeded for " + user + " as expected", true);
+    } catch (AuthenticationException e) {
+      Assert.fail("testCustomQueryWithGroupsPositive: Authentication failed for " + user + ",user expected to pass custom LDAP Query");
+    }
+  }
+
+  @Test
+  public void testCustomQueryWithGroupsNegative() throws Exception {
+    String user;
+    Map<String, String> ldapProperties = new HashMap<String, String>();
+    ldapProperties.put("hive.server2.authentication.ldap.baseDN", "dc=example,dc=com");
+    ldapProperties.put("hive.server2.authentication.ldap.userDNPattern", "cn=%s,ou=People,dc=example,dc=com:uid=%s,ou=People,dc=example,dc=com");
+    ldapProperties.put("hive.server2.authentication.ldap.customLDAPQuery",
+                         "(&(objectClass=groupOfNames)(|(cn=group1)(cn=group2)))");
+    initLdapAtn(ldapProperties);
+
+    user = USER3.getDN();
+    try {
+      ldapProvider.Authenticate(user, USER3.getPassword());
+      Assert.fail("testCustomQueryNegative: Authentication succeeded for " + user + ",user expected to fail custom LDAP Query");
+    } catch (AuthenticationException e) {
+      assertTrue("testCustomQueryNegative: Authentication failed for " + user + " as expected", true);
+    }
+
+    try {
+      user = USER3.getUID();
+      ldapProvider.Authenticate(user, USER3.getPassword());
+      Assert.fail("testCustomQueryNegative: Authentication succeeded for " + user + ",user expected to fail custom LDAP Query");
+    } catch (AuthenticationException e) {
+      assertTrue("testCustomQueryNegative: Authentication failed for " + user + " as expected", true);
+    }
+  }
+
   @Test
   public void testGroupFilterPositiveWithCustomGUID() throws Exception {
     String user;
-- 
1.7.9.5

