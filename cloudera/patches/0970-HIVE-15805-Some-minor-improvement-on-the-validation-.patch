From 25ea3c4ac4560ff642e2eda5b41d61c10e447c96 Mon Sep 17 00:00:00 2001
From: Aihua Xu <aihuaxu@apache.org>
Date: Fri, 3 Feb 2017 17:20:59 -0500
Subject: [PATCH 0970/1164] HIVE-15805: Some minor improvement on the
 validation tool (Aihua Xu, reviewed by Yongzhi
 Chen)

Change-Id: I3ea26c4ba37382665cd213a6101beefb8839c761
---
 .../org/apache/hive/beeline/HiveSchemaTool.java    |  184 ++++++++++----------
 .../org/apache/hive/beeline/TestSchemaTool.java    |   10 +-
 2 files changed, 97 insertions(+), 97 deletions(-)

diff --git a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
index 05c8f36..19e383f 100644
--- a/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
+++ b/beeline/src/java/org/apache/hive/beeline/HiveSchemaTool.java
@@ -41,7 +41,8 @@
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.io.output.NullOutputStream;
-import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -70,6 +71,7 @@
   private boolean dryRun = false;
   private boolean verbose = false;
   private String dbOpts = null;
+  private URI[] validationServers = null; // The list of servers the database/partition/table can locate on
   private final HiveConf hiveConf;
   private final String dbType;
   private final MetaStoreSchemaInfo metaStoreSchemaInfo;
@@ -120,6 +122,16 @@ public void setDbOpts(String dbOpts) {
     this.dbOpts = dbOpts;
   }
 
+  public void setValidationServers(String servers) {
+    if(StringUtils.isNotEmpty(servers)) {
+      String[] strServers = servers.split(",");
+      this.validationServers = new URI[strServers.length];
+      for (int i = 0; i < validationServers.length; i++) {
+        validationServers[i] = new Path(strServers[i]).toUri();
+      }
+    }
+  }
+
   private static void printAndExit(Options cmdLineOptions) {
     HelpFormatter formatter = new HelpFormatter();
     formatter.printHelp("schemaTool", cmdLineOptions);
@@ -181,12 +193,12 @@ private String getMetaStoreSchemaVersion(Connection metastoreConn,
     }
   }
 
-  boolean validateLocations(Connection conn, String defaultLocPrefix) throws HiveMetaException {
+  boolean validateLocations(Connection conn, URI[] defaultServers) throws HiveMetaException {
     System.out.println("Validating database/table/partition locations");
     boolean rtn;
-    rtn = checkMetaStoreDBLocation(conn, defaultLocPrefix);
-    rtn = checkMetaStoreTableLocation(conn, defaultLocPrefix) && rtn;
-    rtn = checkMetaStorePartitionLocation(conn, defaultLocPrefix) && rtn;
+    rtn = checkMetaStoreDBLocation(conn, defaultServers);
+    rtn = checkMetaStoreTableLocation(conn, defaultServers) && rtn;
+    rtn = checkMetaStorePartitionLocation(conn, defaultServers) && rtn;
     System.out.println((rtn ? "Succeeded" : "Failed") + " in database/table/partition location validation");
     return rtn;
   }
@@ -196,10 +208,8 @@ private String getNameOrID(ResultSet res, int nameInx, int idInx) throws SQLExce
     return  (itemName == null || itemName.isEmpty()) ? "ID: " + res.getString(idInx) : "Name: " + itemName;
   }
 
-  // read schema version from metastore
-  private boolean checkMetaStoreDBLocation(Connection conn, String locHeader)
+  private boolean checkMetaStoreDBLocation(Connection conn, URI[] defaultServers)
       throws HiveMetaException {
-    String defaultPrefix = locHeader;
     String dbLoc;
     boolean isValid = true;
     int numOfInvalid = 0;
@@ -213,33 +223,11 @@ private boolean checkMetaStoreDBLocation(Connection conn, String locHeader)
         ResultSet res = stmt.executeQuery(dbLoc)) {
       while (res.next()) {
         String locValue = res.getString(3);
-        if (locValue == null) {
-          System.err.println("NULL Location for DB with " + getNameOrID(res,2,1));
+        String dbName = getNameOrID(res,2,1);
+        if (!checkLocation("Database " + dbName, locValue, defaultServers)) {
           numOfInvalid++;
-        } else {
-          URI currentUri = null;
-          try {
-            currentUri = new Path(locValue).toUri();
-          } catch (Exception pe) {
-            System.err.println("Invalid Location for DB with " + getNameOrID(res,2,1));
-            System.err.println(pe.getMessage());
-            numOfInvalid++;
-            continue;
-          }
-
-          if (currentUri.getScheme() == null || currentUri.getScheme().isEmpty()) {
-            System.err.println("Missing Location scheme for DB with " + getNameOrID(res,2,1));
-            System.err.println("The Location is: " + locValue);
-            numOfInvalid++;
-          } else if (defaultPrefix != null && !defaultPrefix.isEmpty() && locValue.substring(0,defaultPrefix.length())
-              .compareToIgnoreCase(defaultPrefix) != 0) {
-            System.err.println("Mismatch root Location for DB with " + getNameOrID(res,2,1));
-            System.err.println("The Location is: " + locValue);
-            numOfInvalid++;
-          }
         }
       }
-
     } catch (SQLException e) {
       throw new HiveMetaException("Failed to get DB Location Info.", e);
     }
@@ -250,9 +238,8 @@ private boolean checkMetaStoreDBLocation(Connection conn, String locHeader)
     return isValid;
   }
 
-  private boolean checkMetaStoreTableLocation(Connection conn, String locHeader)
+  private boolean checkMetaStoreTableLocation(Connection conn, URI[] defaultServers)
       throws HiveMetaException {
-    String defaultPrefix = locHeader;
     String tabLoc, tabIDRange;
     boolean isValid = true;
     int numOfInvalid = 0;
@@ -290,33 +277,10 @@ private boolean checkMetaStoreTableLocation(Connection conn, String locHeader)
         res = pStmt.executeQuery();
         while (res.next()) {
           String locValue = res.getString(3);
-          if (locValue == null) {
-            System.err.println("In DB with " + getNameOrID(res,5,4));
-            System.err.println("NULL Location for TABLE with " + getNameOrID(res,2,1));
+          String entity = "Database " + getNameOrID(res, 5, 4) +
+              ", Table "  + getNameOrID(res,2,1);
+          if (!checkLocation(entity, locValue, defaultServers)) {
             numOfInvalid++;
-          } else {
-            URI currentUri = null;
-            try {
-              currentUri = new Path(locValue).toUri();
-            } catch (Exception pe) {
-              System.err.println("In DB with " + getNameOrID(res,5,4));
-              System.err.println("Invalid location for Table with " + getNameOrID(res,2,1));
-              System.err.println(pe.getMessage());
-              numOfInvalid++;
-              continue;
-            }
-            if (currentUri.getScheme() == null || currentUri.getScheme().isEmpty()) {
-              System.err.println("In DB with " + getNameOrID(res,5,4));
-              System.err.println("Missing Location scheme for Table with " + getNameOrID(res,2,1));
-              System.err.println("The Location is: " + locValue);
-              numOfInvalid++;
-            } else if(defaultPrefix != null && !defaultPrefix.isEmpty() && locValue.substring(0,defaultPrefix.length())
-                .compareToIgnoreCase(defaultPrefix) != 0) {
-              System.err.println("In DB with " + getNameOrID(res,5,4));
-              System.err.println("Mismatch root Location for Table with " + getNameOrID(res,2,1));
-              System.err.println("The Location is: " + locValue);
-              numOfInvalid++;
-            }
           }
         }
         res.close();
@@ -335,9 +299,8 @@ private boolean checkMetaStoreTableLocation(Connection conn, String locHeader)
     return isValid;
   }
 
-  private boolean checkMetaStorePartitionLocation(Connection conn, String locHeader)
+  private boolean checkMetaStorePartitionLocation(Connection conn, URI[] defaultServers)
       throws HiveMetaException {
-    String defaultPrefix = locHeader;
     String partLoc, partIDRange;
     boolean isValid = true;
     int numOfInvalid = 0;
@@ -377,33 +340,11 @@ private boolean checkMetaStorePartitionLocation(Connection conn, String locHeade
         res = pStmt.executeQuery();
         while (res.next()) {
           String locValue = res.getString(3);
-          if (locValue == null) {
-            System.err.println("In DB with " + getNameOrID(res,7,6) + ", TABLE with " + getNameOrID(res,5,4));
-            System.err.println("NULL Location for PARTITION with " + getNameOrID(res,2,1));
+          String entity = "Database " + getNameOrID(res,7,6) +
+              ", Table "  + getNameOrID(res,5,4) +
+              ", Partition " + getNameOrID(res,2,1);
+          if (!checkLocation(entity, locValue, defaultServers)) {
             numOfInvalid++;
-          } else {
-            URI currentUri = null;
-            try {
-              currentUri = new Path(locValue).toUri();
-            } catch (Exception pe) {
-              System.err.println("In DB with " + getNameOrID(res,7,6) + ", TABLE with " + getNameOrID(res,5,4));
-              System.err.println("Invalid location for PARTITON with " + getNameOrID(res,2,1));
-              System.err.println(pe.getMessage());
-              numOfInvalid++;
-              continue;
-            }
-            if (currentUri.getScheme() == null || currentUri.getScheme().isEmpty()) {
-              System.err.println("In DB with " + getNameOrID(res,7,6) + ", TABLE with " + getNameOrID(res,5,4));
-              System.err.println("Missing Location scheme for PARTITON with " + getNameOrID(res,2,1));
-              System.err.println("The Location is: " + locValue);
-              numOfInvalid++;
-            } else if (defaultPrefix != null && !defaultPrefix.isEmpty() && locValue.substring(0,defaultPrefix.length())
-                .compareToIgnoreCase(defaultPrefix) != 0) {
-              System.err.println("In DB with " + getNameOrID(res,7,6) + ", TABLE with " + getNameOrID(res,5,4));
-              System.err.println("Mismatch root Location for PARTITON with " + getNameOrID(res,2,1));
-              System.err.println("The Location is: " + locValue);
-              numOfInvalid++;
-            }
           }
         }
         res.close();
@@ -420,6 +361,54 @@ private boolean checkMetaStorePartitionLocation(Connection conn, String locHeade
     return isValid;
   }
 
+  /**
+   * Check if the location is valid for the given entity
+   * @param entity          the entity to represent a database, partition or table
+   * @param entityLocation  the location
+   * @param defaultServers  a list of the servers that the location needs to match.
+   *                        The location host needs to match one of the given servers.
+   *                        If empty, then no check against such list.
+   * @return true if the location is valid
+   */
+  private boolean checkLocation(
+      String entity,
+      String entityLocation,
+      URI[] defaultServers) {
+    boolean isValid = true;
+    if (entityLocation == null) {
+      System.err.println(entity + ", error: empty location");
+      isValid = false;
+    } else {
+      try {
+        URI currentUri = new Path(entityLocation).toUri();
+        String scheme = currentUri.getScheme();
+        if (StringUtils.isEmpty(scheme)) {
+          System.err.println(entity + ", location: "+ entityLocation + ", error: missing location scheme");
+          isValid = false;
+        } else if (ArrayUtils.isNotEmpty(defaultServers) && currentUri.getAuthority() != null) {
+          String authority = currentUri.getAuthority();
+          boolean matchServer = false;
+          for(URI server : defaultServers) {
+            if (StringUtils.equalsIgnoreCase(server.getScheme(), scheme) &&
+                StringUtils.equalsIgnoreCase(server.getAuthority(), authority)) {
+              matchServer = true;
+              break;
+            }
+          }
+          if (!matchServer) {
+            System.err.println(entity + ", location: " + entityLocation + ", error: mismatched server");
+            isValid = false;
+          }
+        }
+      } catch (Exception pe) {
+        System.err.println(entity + ", error: invalid location " + pe.getMessage());
+        isValid =false;
+      }
+    }
+
+    return isValid;
+  }
+
   // test the connection metastore using the config property
   private void testConnectionToMetastore() throws HiveMetaException {
     Connection conn = getConnectionToMetastore(true);
@@ -551,7 +540,7 @@ public void doValidate() throws HiveMetaException {
       validateSchemaVersions(conn);
       validateSequences(conn);
       validateSchemaTables(conn);
-      validateLocations(conn, null);
+      validateLocations(conn, this.validationServers);
       validateColumnNullValues(conn);
     } finally {
       if (conn != null) {
@@ -605,9 +594,12 @@ boolean validateSequences(Connection conn) throws HiveMetaException {
              long maxId = res.getLong(1);
              if (maxId > 0) {
                ResultSet resSeq = stmt.executeQuery(seqQuery);
-               if (!resSeq.next() || resSeq.getLong(1) < maxId) {
+               if (!resSeq.next()) {
+                 isValid = false;
+                 System.err.println("Missing SEQUENCE_NAME " + seqName + " from SEQUENCE_TABLE");
+               } else if (resSeq.getLong(1) < maxId) {
                  isValid = false;
-                 System.err.println("Incorrect sequence number: table - " + tableName);
+                 System.err.println("NEXT_VAL for " + seqName + " in SEQUENCE_TABLE < max("+ tableKey + ") in " + tableName);
                }
              }
           }
@@ -749,7 +741,7 @@ boolean validateColumnNullValues(Connection conn) throws HiveMetaException {
          String tableName = res.getString("TBL_NAME");
          String tableType = res.getString("TBL_TYPE");
          isValid = false;
-         System.err.println("Value of SD_ID in TBLS should not be NULL: hive table - " + tableName + " tableId - " + tableId + " tableType - " + tableType);
+         System.err.println("SD_ID in TBLS should not be NULL for Table Name=" + tableName + ", Table ID=" + tableId + ", Table Type=" + tableType);
       }
 
       System.out.println((isValid ? "Succeeded" : "Failed") + " in column validation for incorrect NULL values");
@@ -903,7 +895,9 @@ private static void initOptions(Options cmdLineOptions) {
                 .create("dbOpts");
     Option dryRunOpt = new Option("dryRun", "list SQL scripts (no execute)");
     Option verboseOpt = new Option("verbose", "only print SQL statements");
-
+    Option serversOpt = OptionBuilder.withArgName("serverList")
+        .hasArgs().withDescription("a comma-separated list of servers used in location validation")
+        .create("servers");
     cmdLineOptions.addOption(help);
     cmdLineOptions.addOption(dryRunOpt);
     cmdLineOptions.addOption(userNameOpt);
@@ -911,6 +905,7 @@ private static void initOptions(Options cmdLineOptions) {
     cmdLineOptions.addOption(dbTypeOpt);
     cmdLineOptions.addOption(verboseOpt);
     cmdLineOptions.addOption(dbOpts);
+    cmdLineOptions.addOption(serversOpt);
     cmdLineOptions.addOptionGroup(optGroup);
   }
 
@@ -970,6 +965,9 @@ public static void main(String[] args) {
       if (line.hasOption("dbOpts")) {
         schemaTool.setDbOpts(line.getOptionValue("dbOpts"));
       }
+      if (line.hasOption("validate") && line.hasOption("servers")) {
+        schemaTool.setValidationServers(line.getOptionValue("servers"));
+      }
       if (line.hasOption("info")) {
         schemaTool.showInfo();
       } else if (line.hasOption("upgradeSchema")) {
diff --git a/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestSchemaTool.java b/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestSchemaTool.java
index d8769c9..ea1106f 100644
--- a/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestSchemaTool.java
+++ b/itests/hive-unit/src/test/java/org/apache/hive/beeline/TestSchemaTool.java
@@ -25,6 +25,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.PrintStream;
+import java.net.URI;
 import java.sql.Connection;
 import java.util.Random;
 
@@ -600,11 +601,12 @@ public void testPostgresFilter() throws Exception {
    */
   public void testValidateLocations() throws Exception {
     schemaTool.doInit();
-    String defaultRoot = "hdfs://myhost.com:8020";
+    URI defaultRoot = new URI("hdfs://myhost.com:8020");
+    URI defaultRoot2 = new URI("s3://myhost2.com:8888");
     //check empty DB
     boolean isValid = schemaTool.validateLocations(conn, null);
     assertTrue(isValid);
-    isValid = schemaTool.validateLocations(conn, defaultRoot);
+    isValid = schemaTool.validateLocations(conn, new URI[] {defaultRoot,defaultRoot2});
     assertTrue(isValid);
 
  // Test valid case
@@ -622,7 +624,7 @@ public void testValidateLocations() throws Exception {
     schemaTool.runBeeLine(scriptFile.getPath());
     isValid = schemaTool.validateLocations(conn, null);
     assertTrue(isValid);
-    isValid = schemaTool.validateLocations(conn, defaultRoot);
+    isValid = schemaTool.validateLocations(conn, new URI[] {defaultRoot, defaultRoot2});
     assertTrue(isValid);
     scripts = new String[] {
         "delete from PARTITIONS",
@@ -643,7 +645,7 @@ public void testValidateLocations() throws Exception {
     schemaTool.runBeeLine(scriptFile.getPath());
     isValid = schemaTool.validateLocations(conn, null);
     assertFalse(isValid);
-    isValid = schemaTool.validateLocations(conn, defaultRoot);
+    isValid = schemaTool.validateLocations(conn, new URI[] {defaultRoot, defaultRoot2});
     assertFalse(isValid);
   }
 
-- 
1.7.9.5

