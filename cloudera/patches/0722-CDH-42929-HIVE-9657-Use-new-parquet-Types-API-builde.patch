From 7712aff607af118eee1e178a18438033e859f657 Mon Sep 17 00:00:00 2001
From: Brock Noland <brock@apache.org>
Date: Thu, 5 Mar 2015 18:41:39 +0000
Subject: [PATCH 0722/1164] CDH-42929: HIVE-9657 - Use new parquet Types API
 builder to construct data types (Ferdinand Xu via
 Brock)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1664450 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit e2dbc52060b3efe7862e226b18162f15e77037ec)

Change-Id: I288ac05bbaba1621c00e6fa7bdfbd7504345552a
---
 .../ql/io/parquet/convert/HiveSchemaConverter.java |   20 +++++++++++---------
 1 file changed, 11 insertions(+), 9 deletions(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/convert/HiveSchemaConverter.java b/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/convert/HiveSchemaConverter.java
index e5bd70c..67cbfd5 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/convert/HiveSchemaConverter.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/convert/HiveSchemaConverter.java
@@ -58,26 +58,28 @@ private static Type convertType(final String name, final TypeInfo typeInfo) {
     return convertType(name, typeInfo, Repetition.OPTIONAL);
   }
 
-  private static Type convertType(final String name, final TypeInfo typeInfo, final Repetition repetition) {
+  private static Type convertType(final String name, final TypeInfo typeInfo,
+                                  final Repetition repetition) {
     if (typeInfo.getCategory().equals(Category.PRIMITIVE)) {
       if (typeInfo.equals(TypeInfoFactory.stringTypeInfo)) {
-        return new PrimitiveType(repetition, PrimitiveTypeName.BINARY, name, OriginalType.UTF8);
+        return Types.primitive(PrimitiveTypeName.BINARY, repetition).as(OriginalType.UTF8)
+          .named(name);
       } else if (typeInfo.equals(TypeInfoFactory.intTypeInfo) ||
           typeInfo.equals(TypeInfoFactory.shortTypeInfo) ||
           typeInfo.equals(TypeInfoFactory.byteTypeInfo)) {
-        return new PrimitiveType(repetition, PrimitiveTypeName.INT32, name);
+        return Types.primitive(PrimitiveTypeName.INT32, repetition).named(name);
       } else if (typeInfo.equals(TypeInfoFactory.longTypeInfo)) {
-        return new PrimitiveType(repetition, PrimitiveTypeName.INT64, name);
+        return Types.primitive(PrimitiveTypeName.INT64, repetition).named(name);
       } else if (typeInfo.equals(TypeInfoFactory.doubleTypeInfo)) {
-        return new PrimitiveType(repetition, PrimitiveTypeName.DOUBLE, name);
+        return Types.primitive(PrimitiveTypeName.DOUBLE, repetition).named(name);
       } else if (typeInfo.equals(TypeInfoFactory.floatTypeInfo)) {
-        return new PrimitiveType(repetition, PrimitiveTypeName.FLOAT, name);
+        return Types.primitive(PrimitiveTypeName.FLOAT, repetition).named(name);
       } else if (typeInfo.equals(TypeInfoFactory.booleanTypeInfo)) {
-        return new PrimitiveType(repetition, PrimitiveTypeName.BOOLEAN, name);
+        return Types.primitive(PrimitiveTypeName.BOOLEAN, repetition).named(name);
       } else if (typeInfo.equals(TypeInfoFactory.binaryTypeInfo)) {
-        return new PrimitiveType(repetition, PrimitiveTypeName.BINARY, name);
+        return Types.primitive(PrimitiveTypeName.BINARY, repetition).named(name);
       } else if (typeInfo.equals(TypeInfoFactory.timestampTypeInfo)) {
-        return new PrimitiveType(repetition, PrimitiveTypeName.INT96, name);
+        return Types.primitive(PrimitiveTypeName.INT96, repetition).named(name);
       } else if (typeInfo.equals(TypeInfoFactory.voidTypeInfo)) {
         throw new UnsupportedOperationException("Void type not implemented");
       } else if (typeInfo.getTypeName().toLowerCase().startsWith(
-- 
1.7.9.5

