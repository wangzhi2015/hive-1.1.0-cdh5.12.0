From bc36b1988b7a1ec3f1d79f6b270f7fe7c99f4464 Mon Sep 17 00:00:00 2001
From: Siddharth Seth <sseth@apache.org>
Date: Wed, 19 Oct 2016 19:07:20 -0700
Subject: [PATCH 0888/1164] HIVE-15008 : Cleanup local workDir when MiniHS2
 starts up in FS_ONLY mode. (Siddharth Seth,
 reviewed by Prasanth Jayachandran)

Change-Id: I41d4b4e76d683057dd5aea4ef2bb6d0face48b03
---
 .../java/org/apache/hive/jdbc/miniHS2/MiniHS2.java |   58 +++++++++++++++-----
 .../org/apache/hive/jdbc/TestJdbcWithMiniHS2.java  |   10 ++++
 .../test/java/org/apache/hive/jdbc/TestSSL.java    |    9 ++-
 3 files changed, 63 insertions(+), 14 deletions(-)

diff --git a/itests/hive-unit/src/main/java/org/apache/hive/jdbc/miniHS2/MiniHS2.java b/itests/hive-unit/src/main/java/org/apache/hive/jdbc/miniHS2/MiniHS2.java
index 5502f9b..bbdb992 100644
--- a/itests/hive-unit/src/main/java/org/apache/hive/jdbc/miniHS2/MiniHS2.java
+++ b/itests/hive-unit/src/main/java/org/apache/hive/jdbc/miniHS2/MiniHS2.java
@@ -19,12 +19,13 @@
 package org.apache.hive.jdbc.miniHS2;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.TimeoutException;
-import java.util.concurrent.atomic.AtomicLong;
 
+import com.google.common.base.Preconditions;
 import org.apache.commons.io.FileUtils;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
@@ -43,10 +44,13 @@
 import org.apache.hive.service.cli.thrift.ThriftCLIServiceClient;
 import org.apache.hive.service.cli.thrift.ThriftHttpCLIService;
 import org.apache.hive.service.server.HiveServer2;
-
-import com.google.common.io.Files;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class MiniHS2 extends AbstractHiveService {
+
+  private static final Logger LOG = LoggerFactory.getLogger(MiniHS2.class);
+
   public static final String HS2_BINARY_MODE = "binary";
   public static final String HS2_HTTP_MODE = "http";
   private static final String driverName = "org.apache.hive.jdbc.HiveDriver";
@@ -55,7 +59,7 @@
   private static final String tmpDir = System.getProperty("test.tmp.dir");
   private HiveServer2 hiveServer2 = null;
   private final File baseDir;
-  private final Path baseDfsDir;
+  private final Path baseFsDir;
   private MiniMrShim mr;
   private MiniDFSShim dfs;
   private FileSystem localFS;
@@ -64,10 +68,12 @@
   private final String serverPrincipal;
   private final String serverKeytab;
   private final boolean isMetastoreRemote;
+  private final boolean cleanupLocalDirOnStartup;
 
   public static class Builder {
     private HiveConf hiveConf = new HiveConf();
     private boolean useMiniMR = false;
+    private boolean cleanupLocalDirOnStartup = true;
     private boolean useMiniKdc = false;
     private String serverPrincipal;
     private String serverKeytab;
@@ -114,6 +120,10 @@ public Builder withHTTPTransport(){
       return this;
     }
 
+    public Builder cleanupLocalDirOnStartup(boolean val) {
+      this.cleanupLocalDirOnStartup = val;
+      return this;
+    }
 
     public MiniHS2 build() throws Exception {
       if (useMiniMR && useMiniKdc) {
@@ -125,7 +135,7 @@ public MiniHS2 build() throws Exception {
         hiveConf.setVar(ConfVars.HIVE_SERVER2_TRANSPORT_MODE, HS2_BINARY_MODE);
       }
       return new MiniHS2(hiveConf, useMiniMR, useMiniKdc, serverPrincipal, serverKeytab,
-          isMetastoreRemote, authType);
+          isMetastoreRemote, authType, cleanupLocalDirOnStartup);
     }
   }
 
@@ -162,16 +172,18 @@ public boolean isUseMiniKdc() {
   }
 
   private MiniHS2(HiveConf hiveConf, boolean useMiniMR, boolean useMiniKdc,
-      String serverPrincipal, String serverKeytab, boolean isMetastoreRemote, String authType) throws Exception {
+      String serverPrincipal, String serverKeytab, boolean isMetastoreRemote, String authType, boolean cleanupLocalDirOnStartup) throws Exception {
     super(hiveConf, "localhost", MetaStoreUtils.findFreePort(), MetaStoreUtils.findFreePort());
     this.useMiniMR = useMiniMR;
     this.useMiniKdc = useMiniKdc;
     this.serverPrincipal = serverPrincipal;
     this.serverKeytab = serverKeytab;
     this.isMetastoreRemote = isMetastoreRemote;
-    baseDir = new File(tmpDir + "/local_base");
+    this.cleanupLocalDirOnStartup = cleanupLocalDirOnStartup;
+    baseDir = getBaseDir();
     localFS = FileSystem.getLocal(hiveConf);
     FileSystem fs;
+
     if (useMiniMR) {
       dfs = ShimLoader.getHadoopShims().getMiniDfs(hiveConf, 4, true, null);
       fs = dfs.getFileSystem();
@@ -179,10 +191,16 @@ private MiniHS2(HiveConf hiveConf, boolean useMiniMR, boolean useMiniKdc,
           fs.getUri().toString(), 1);
       // store the config in system properties
       mr.setupConfiguration(getHiveConf());
-      baseDfsDir =  new Path(new Path(fs.getUri()), "/base");
+      baseFsDir =  new Path(new Path(fs.getUri()), "/base");
     } else {
       fs = FileSystem.getLocal(hiveConf);
-      baseDfsDir = new Path("file://"+ baseDir.toURI().getPath());
+      baseFsDir = new Path("file://"+ baseDir.toURI().getPath());
+      if (cleanupLocalDirOnStartup) {
+        // Cleanup baseFsDir since it can be shared across tests.
+        LOG.info("Attempting to cleanup baseFsDir: {} while setting up MiniHS2", baseDir);
+        Preconditions.checkState(baseFsDir.depth() >= 3); // Avoid "/tmp", directories closer to "/"
+        fs.delete(baseFsDir, true);
+      }
     }
     if (useMiniKdc) {
       hiveConf.setVar(ConfVars.HIVE_SERVER2_KERBEROS_PRINCIPAL, serverPrincipal);
@@ -192,8 +210,8 @@ private MiniHS2(HiveConf hiveConf, boolean useMiniMR, boolean useMiniKdc,
     String metaStoreURL =
         "jdbc:derby:;databaseName=" + baseDir.getAbsolutePath() + File.separator
             + "test_metastore;create=true";
-    fs.mkdirs(baseDfsDir);
-    Path wareHouseDir = new Path(baseDfsDir, "warehouse");
+    fs.mkdirs(baseFsDir);
+    Path wareHouseDir = new Path(baseFsDir, "warehouse");
     // Create warehouse with 777, so that user impersonation has no issues.
     FileSystem.mkdirs(fs, wareHouseDir, FULL_PERM);
 
@@ -207,7 +225,7 @@ private MiniHS2(HiveConf hiveConf, boolean useMiniMR, boolean useMiniKdc,
     hiveConf.setIntVar(ConfVars.HIVE_SERVER2_THRIFT_PORT, getBinaryPort());
     hiveConf.setIntVar(ConfVars.HIVE_SERVER2_THRIFT_HTTP_PORT, getHttpPort());
 
-    Path scratchDir = new Path(baseDfsDir, "scratch");
+    Path scratchDir = new Path(baseFsDir, "scratch");
     // Create root scratchdir with write all, so that user impersonation has no issues.
     Utilities.createDirsWithPermission(hiveConf, scratchDir, WRITE_ALL_PERM, true);
     System.setProperty(HiveConf.ConfVars.SCRATCHDIR.varname, scratchDir.toString());
@@ -223,7 +241,7 @@ public MiniHS2(HiveConf hiveConf) throws Exception {
   }
 
   public MiniHS2(HiveConf hiveConf, boolean useMiniMR) throws Exception {
-    this(hiveConf, useMiniMR, false, null, null, false, "KERBEROS");
+    this(hiveConf, useMiniMR, false, null, null, false, "KERBEROS", true);
   }
 
   public void start(Map<String, String> confOverlay) throws Exception {
@@ -396,4 +414,18 @@ private void waitForStartup() throws Exception {
       break;
     } while (true);
   }
+
+  static File getBaseDir() {
+    File baseDir = new File(tmpDir + "/local_base");
+    return baseDir;
+  }
+
+  public static void cleanupLocalDir() throws IOException {
+    File baseDir = getBaseDir();
+    try {
+      org.apache.hadoop.hive.common.FileUtils.deleteDirectory(baseDir);
+    } catch (FileNotFoundException e) {
+      // Ignore. Safe if it does not exist.
+    }
+  }
 }
diff --git a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java
index 9aa453c..351285e 100644
--- a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java
+++ b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcWithMiniHS2.java
@@ -24,6 +24,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
+import java.io.IOException;
 import java.lang.reflect.Method;
 import java.sql.Connection;
 import java.sql.DriverManager;
@@ -73,6 +74,7 @@
   @BeforeClass
   public static void beforeTest() throws Exception {
     Class.forName(MiniHS2.getJdbcDriverName());
+    MiniHS2.cleanupLocalDir();
     HiveConf conf = new HiveConf();
     conf.setBoolVar(ConfVars.HIVE_SUPPORT_CONCURRENCY, false);
     miniHS2 = new MiniHS2(conf);
@@ -103,6 +105,14 @@ public static void afterTest() throws Exception {
     if (miniHS2.isStarted()) {
       miniHS2.stop();
     }
+    cleanupMiniHS2();
+  }
+
+  private static void cleanupMiniHS2() throws IOException {
+    if (miniHS2 != null) {
+      miniHS2.cleanup();
+    }
+    MiniHS2.cleanupLocalDir();
   }
 
   @Test
diff --git a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java
index e4c48fa..2a65add 100644
--- a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java
+++ b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestSSL.java
@@ -37,6 +37,7 @@
 import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
 import org.apache.hive.jdbc.miniHS2.MiniHS2;
 import org.junit.After;
+import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.Assume;
 import org.junit.Before;
@@ -69,9 +70,15 @@
 
   @BeforeClass
   public static void beforeTest() throws Exception {
+    MiniHS2.cleanupLocalDir();
     Class.forName(MiniHS2.getJdbcDriverName());
   }
 
+  @AfterClass
+  public static void afterClass() throws Exception {
+    MiniHS2.cleanupLocalDir();
+  }
+
   @Before
   public void setUp() throws Exception {
     DriverManager.setLoginTimeout(0);
@@ -79,7 +86,7 @@ public void setUp() throws Exception {
       dataFileDir = System.getProperty("test.data.files");
     }
     dataFileDir = dataFileDir.replace('\\', '/').replace("c:", "");
-    miniHS2 = new MiniHS2(conf);
+    miniHS2 = new MiniHS2.Builder().withConf(conf).cleanupLocalDirOnStartup(false).build();
     confOverlay = new HashMap<String, String>();
   }
 
-- 
1.7.9.5

