From 0cdb96267972f4a7f06da5ca01759d0573cf85b6 Mon Sep 17 00:00:00 2001
From: Jason Dere <jdere@apache.org>
Date: Mon, 9 Feb 2015 22:10:26 +0000
Subject: [PATCH 0310/1164] HIVE-9590: add qtests for ADD_MONTHS UDF
 (Alexander Pivovarov via Jason Dere)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1658591 13f79535-47bb-0310-9956-ffa450edef68
---
 .../hive/ql/udf/generic/GenericUDFAddMonths.java   |   14 +--
 .../ql/udf/generic/TestGenericUDFAddMonths.java    |    1 +
 .../clientnegative/udf_add_months_error_1.q        |    1 +
 .../clientnegative/udf_add_months_error_2.q        |    1 +
 .../test/queries/clientpositive/udf_add_months.q   |   41 +++++++
 .../clientnegative/udf_add_months_error_1.q.out    |    1 +
 .../clientnegative/udf_add_months_error_2.q.out    |    1 +
 .../results/clientpositive/udf_add_months.q.out    |  115 ++++++++++++++++++++
 8 files changed, 168 insertions(+), 7 deletions(-)
 create mode 100644 ql/src/test/queries/clientnegative/udf_add_months_error_1.q
 create mode 100644 ql/src/test/queries/clientnegative/udf_add_months_error_2.q
 create mode 100644 ql/src/test/results/clientnegative/udf_add_months_error_1.q.out
 create mode 100644 ql/src/test/results/clientnegative/udf_add_months_error_2.q.out

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java
index 55943ed..c746a14 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java
@@ -73,11 +73,11 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen
     }
     if (arguments[0].getCategory() != ObjectInspector.Category.PRIMITIVE) {
       throw new UDFArgumentTypeException(0, "Only primitive type arguments are accepted but "
-          + arguments[0].getTypeName() + " is passed. as first arguments");
+          + arguments[0].getTypeName() + " is passed as first arguments");
     }
     if (arguments[1].getCategory() != ObjectInspector.Category.PRIMITIVE) {
       throw new UDFArgumentTypeException(1, "Only primitive type arguments are accepted but "
-          + arguments[2].getTypeName() + " is passed. as second arguments");
+          + arguments[1].getTypeName() + " is passed as second arguments");
     }
     inputType1 = ((PrimitiveObjectInspector) arguments[0]).getPrimitiveCategory();
     ObjectInspector outputOI = PrimitiveObjectInspectorFactory.writableStringObjectInspector;
@@ -100,14 +100,14 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen
           PrimitiveObjectInspectorFactory.writableDateObjectInspector);
       break;
     default:
-      throw new UDFArgumentException(
-          " ADD_MONTHS() only takes STRING/TIMESTAMP/DATEWRITABLE types as first argument, got "
+      throw new UDFArgumentTypeException(0,
+          "ADD_MONTHS() only takes STRING/TIMESTAMP/DATEWRITABLE types as first argument, got "
               + inputType1);
     }
     inputType2 = ((PrimitiveObjectInspector) arguments[1]).getPrimitiveCategory();
     if (inputType2 != PrimitiveCategory.INT) {
-      throw new UDFArgumentException(" ADD_MONTHS() only takes INT types as second argument, got "
-          + inputType2);
+      throw new UDFArgumentTypeException(1,
+          "ADD_MONTHS() only takes INT types as second argument, got " + inputType2);
     }
     intWritableConverter = ObjectInspectorConverters.getConverter(
         (PrimitiveObjectInspector) arguments[1],
@@ -144,7 +144,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
       date = dw.get();
       break;
     default:
-      throw new UDFArgumentException(
+      throw new UDFArgumentTypeException(0,
           "ADD_MONTHS() only takes STRING/TIMESTAMP/DATEWRITABLE types, got " + inputType1);
     }
     int numMonth = toBeAdded.get();
diff --git a/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAddMonths.java b/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAddMonths.java
index 229695a..4ccae97 100644
--- a/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAddMonths.java
+++ b/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAddMonths.java
@@ -46,6 +46,7 @@ public void testAddMonths() throws HiveException {
     runAndVerify("2016-02-29", -12, "2015-02-28", udf);
     runAndVerify("2016-01-29", 1, "2016-02-29", udf);
     runAndVerify("2016-02-29", -1, "2016-01-31", udf);
+    runAndVerify("2014-01-32", 1, "2014-03-01", udf);
   }
 
   private void runAndVerify(String str, int months, String expResult, GenericUDF udf)
diff --git a/ql/src/test/queries/clientnegative/udf_add_months_error_1.q b/ql/src/test/queries/clientnegative/udf_add_months_error_1.q
new file mode 100644
index 0000000..520a3aa
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/udf_add_months_error_1.q
@@ -0,0 +1 @@
+select add_months(14567893456, 3);
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/udf_add_months_error_2.q b/ql/src/test/queries/clientnegative/udf_add_months_error_2.q
new file mode 100644
index 0000000..027ae28
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/udf_add_months_error_2.q
@@ -0,0 +1 @@
+select add_months('2015-02-03', 2.4);
\ No newline at end of file
diff --git a/ql/src/test/queries/clientpositive/udf_add_months.q b/ql/src/test/queries/clientpositive/udf_add_months.q
index f56ea2f..48643ae 100644
--- a/ql/src/test/queries/clientpositive/udf_add_months.q
+++ b/ql/src/test/queries/clientpositive/udf_add_months.q
@@ -1,2 +1,43 @@
 DESCRIBE FUNCTION add_months;
 DESCRIBE FUNCTION EXTENDED add_months;
+
+explain select add_months('2014-01-14', 1);
+
+select
+add_months('2014-01-14', 1),
+add_months('2014-01-31', 1),
+add_months('2014-02-28', -1),
+add_months('2014-02-28', 2),
+add_months('2014-04-30', -2),
+add_months('2015-02-28', 12),
+add_months('2016-02-29', -12),
+add_months('2016-01-29', 1),
+add_months('2016-02-29', -1),
+add_months('2014-01-32', 1),
+add_months('01/14/2014', 1),
+add_months(cast(null as string), 1),
+add_months('2014-01-14', cast(null as int));
+
+select
+add_months('2014-01-14 10:30:00', 1),
+add_months('2014-01-31 10:30:00', 1),
+add_months('2014-02-28 10:30:00', -1),
+add_months('2014-02-28 16:30:00', 2),
+add_months('2014-04-30 10:30:00', -2),
+add_months('2015-02-28 10:30:00', 12),
+add_months('2016-02-29 10:30:00', -12),
+add_months('2016-01-29 10:30:00', 1),
+add_months('2016-02-29 10:30:00', -1),
+add_months('2014-01-32 10:30:00', 1);
+
+select
+add_months(cast('2014-01-14 10:30:00' as timestamp), 1),
+add_months(cast('2014-01-31 10:30:00' as timestamp), 1),
+add_months(cast('2014-02-28 10:30:00' as timestamp), -1),
+add_months(cast('2014-02-28 16:30:00' as timestamp), 2),
+add_months(cast('2014-04-30 10:30:00' as timestamp), -2),
+add_months(cast('2015-02-28 10:30:00' as timestamp), 12),
+add_months(cast('2016-02-29 10:30:00' as timestamp), -12),
+add_months(cast('2016-01-29 10:30:00' as timestamp), 1),
+add_months(cast('2016-02-29 10:30:00' as timestamp), -1),
+add_months(cast(null as timestamp), 1);
\ No newline at end of file
diff --git a/ql/src/test/results/clientnegative/udf_add_months_error_1.q.out b/ql/src/test/results/clientnegative/udf_add_months_error_1.q.out
new file mode 100644
index 0000000..8226ac6
--- /dev/null
+++ b/ql/src/test/results/clientnegative/udf_add_months_error_1.q.out
@@ -0,0 +1 @@
+FAILED: SemanticException [Error 10016]: Line 1:18 Argument type mismatch '14567893456': ADD_MONTHS() only takes STRING/TIMESTAMP/DATEWRITABLE types as first argument, got LONG
diff --git a/ql/src/test/results/clientnegative/udf_add_months_error_2.q.out b/ql/src/test/results/clientnegative/udf_add_months_error_2.q.out
new file mode 100644
index 0000000..f00949e
--- /dev/null
+++ b/ql/src/test/results/clientnegative/udf_add_months_error_2.q.out
@@ -0,0 +1 @@
+FAILED: SemanticException [Error 10016]: Line 1:32 Argument type mismatch '2.4': ADD_MONTHS() only takes INT types as second argument, got DOUBLE
diff --git a/ql/src/test/results/clientpositive/udf_add_months.q.out b/ql/src/test/results/clientpositive/udf_add_months.q.out
index 0d2e438..8c37fc2 100644
--- a/ql/src/test/results/clientpositive/udf_add_months.q.out
+++ b/ql/src/test/results/clientpositive/udf_add_months.q.out
@@ -12,3 +12,118 @@ start_date is a string in the format 'yyyy-MM-dd HH:mm:ss' or 'yyyy-MM-dd'. num_
 Example:
   > SELECT add_months('2009-08-31', 1) FROM src LIMIT 1;
  '2009-09-30'
+PREHOOK: query: explain select add_months('2014-01-14', 1)
+PREHOOK: type: QUERY
+POSTHOOK: query: explain select add_months('2014-01-14', 1)
+POSTHOOK: type: QUERY
+STAGE DEPENDENCIES:
+  Stage-0 is a root stage
+
+STAGE PLANS:
+  Stage: Stage-0
+    Fetch Operator
+      limit: -1
+      Processor Tree:
+        TableScan
+          alias: _dummy_table
+          Row Limit Per Split: 1
+          Statistics: Num rows: 0 Data size: 1 Basic stats: PARTIAL Column stats: COMPLETE
+          Select Operator
+            expressions: '2014-02-14' (type: string)
+            outputColumnNames: _col0
+            Statistics: Num rows: 0 Data size: 1 Basic stats: PARTIAL Column stats: COMPLETE
+            ListSink
+
+PREHOOK: query: select
+add_months('2014-01-14', 1),
+add_months('2014-01-31', 1),
+add_months('2014-02-28', -1),
+add_months('2014-02-28', 2),
+add_months('2014-04-30', -2),
+add_months('2015-02-28', 12),
+add_months('2016-02-29', -12),
+add_months('2016-01-29', 1),
+add_months('2016-02-29', -1),
+add_months('2014-01-32', 1),
+add_months('01/14/2014', 1),
+add_months(cast(null as string), 1),
+add_months('2014-01-14', cast(null as int))
+PREHOOK: type: QUERY
+PREHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+POSTHOOK: query: select
+add_months('2014-01-14', 1),
+add_months('2014-01-31', 1),
+add_months('2014-02-28', -1),
+add_months('2014-02-28', 2),
+add_months('2014-04-30', -2),
+add_months('2015-02-28', 12),
+add_months('2016-02-29', -12),
+add_months('2016-01-29', 1),
+add_months('2016-02-29', -1),
+add_months('2014-01-32', 1),
+add_months('01/14/2014', 1),
+add_months(cast(null as string), 1),
+add_months('2014-01-14', cast(null as int))
+POSTHOOK: type: QUERY
+POSTHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+2014-02-14	2014-02-28	2014-01-31	2014-04-30	2014-02-28	2016-02-29	2015-02-28	2016-02-29	2016-01-31	2014-03-01	NULL	NULL	NULL
+PREHOOK: query: select
+add_months('2014-01-14 10:30:00', 1),
+add_months('2014-01-31 10:30:00', 1),
+add_months('2014-02-28 10:30:00', -1),
+add_months('2014-02-28 16:30:00', 2),
+add_months('2014-04-30 10:30:00', -2),
+add_months('2015-02-28 10:30:00', 12),
+add_months('2016-02-29 10:30:00', -12),
+add_months('2016-01-29 10:30:00', 1),
+add_months('2016-02-29 10:30:00', -1),
+add_months('2014-01-32 10:30:00', 1)
+PREHOOK: type: QUERY
+PREHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+POSTHOOK: query: select
+add_months('2014-01-14 10:30:00', 1),
+add_months('2014-01-31 10:30:00', 1),
+add_months('2014-02-28 10:30:00', -1),
+add_months('2014-02-28 16:30:00', 2),
+add_months('2014-04-30 10:30:00', -2),
+add_months('2015-02-28 10:30:00', 12),
+add_months('2016-02-29 10:30:00', -12),
+add_months('2016-01-29 10:30:00', 1),
+add_months('2016-02-29 10:30:00', -1),
+add_months('2014-01-32 10:30:00', 1)
+POSTHOOK: type: QUERY
+POSTHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+2014-02-14	2014-02-28	2014-01-31	2014-04-30	2014-02-28	2016-02-29	2015-02-28	2016-02-29	2016-01-31	2014-03-01
+PREHOOK: query: select
+add_months(cast('2014-01-14 10:30:00' as timestamp), 1),
+add_months(cast('2014-01-31 10:30:00' as timestamp), 1),
+add_months(cast('2014-02-28 10:30:00' as timestamp), -1),
+add_months(cast('2014-02-28 16:30:00' as timestamp), 2),
+add_months(cast('2014-04-30 10:30:00' as timestamp), -2),
+add_months(cast('2015-02-28 10:30:00' as timestamp), 12),
+add_months(cast('2016-02-29 10:30:00' as timestamp), -12),
+add_months(cast('2016-01-29 10:30:00' as timestamp), 1),
+add_months(cast('2016-02-29 10:30:00' as timestamp), -1),
+add_months(cast(null as timestamp), 1)
+PREHOOK: type: QUERY
+PREHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+POSTHOOK: query: select
+add_months(cast('2014-01-14 10:30:00' as timestamp), 1),
+add_months(cast('2014-01-31 10:30:00' as timestamp), 1),
+add_months(cast('2014-02-28 10:30:00' as timestamp), -1),
+add_months(cast('2014-02-28 16:30:00' as timestamp), 2),
+add_months(cast('2014-04-30 10:30:00' as timestamp), -2),
+add_months(cast('2015-02-28 10:30:00' as timestamp), 12),
+add_months(cast('2016-02-29 10:30:00' as timestamp), -12),
+add_months(cast('2016-01-29 10:30:00' as timestamp), 1),
+add_months(cast('2016-02-29 10:30:00' as timestamp), -1),
+add_months(cast(null as timestamp), 1)
+POSTHOOK: type: QUERY
+POSTHOOK: Input: _dummy_database@_dummy_table
+#### A masked pattern was here ####
+2014-02-14	2014-02-28	2014-01-31	2014-04-30	2014-02-28	2016-02-29	2015-02-28	2016-02-29	2016-01-31	NULL
-- 
1.7.9.5

