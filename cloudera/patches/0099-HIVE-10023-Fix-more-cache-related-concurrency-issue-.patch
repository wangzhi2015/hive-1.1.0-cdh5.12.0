From ba339b098255cc7528acfc9d08c071fbe41aeaab Mon Sep 17 00:00:00 2001
From: Szehon Ho <szehon@apache.org>
Date: Fri, 20 Mar 2015 00:01:01 +0000
Subject: [PATCH 0099/1164] HIVE-10023 : Fix more cache related concurrency
 issue [Spark Branch] (Jimmy Xiang via Szehon)

---
 .../LazyPrimitiveObjectInspectorFactory.java       |   36 ++++++++++++++------
 .../hive/serde2/lazybinary/LazyBinaryUtils.java    |   19 +++++------
 .../LazyBinaryObjectInspectorFactory.java          |   24 ++++++++++---
 .../MetadataListStructObjectInspector.java         |   16 ++++++---
 .../primitive/PrimitiveObjectInspectorFactory.java |   22 ++++++++----
 .../hive/serde2/typeinfo/TypeInfoFactory.java      |   31 +++++++++++------
 .../hadoop/hive/serde2/typeinfo/TypeInfoUtils.java |   16 ++++++---
 7 files changed, 114 insertions(+), 50 deletions(-)

diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyPrimitiveObjectInspectorFactory.java b/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyPrimitiveObjectInspectorFactory.java
index 08fec77..54a5f7a 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyPrimitiveObjectInspectorFactory.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/lazy/objectinspector/primitive/LazyPrimitiveObjectInspectorFactory.java
@@ -19,8 +19,8 @@
 package org.apache.hadoop.hive.serde2.lazy.objectinspector.primitive;
 
 import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.hadoop.hive.serde.serdeConstants;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
@@ -80,12 +80,12 @@ private LazyPrimitiveObjectInspectorFactory() {
 
   // Lazy object inspectors for string/char/varchar will all be cached in the same map.
   // Map key will be list of [typeInfo, isEscaped, escapeChar]
-  private static HashMap<ArrayList<Object>, AbstractPrimitiveLazyObjectInspector> cachedLazyStringTypeOIs =
-      new HashMap<ArrayList<Object>, AbstractPrimitiveLazyObjectInspector>();
+  private static ConcurrentHashMap<ArrayList<Object>, AbstractPrimitiveLazyObjectInspector<?>> cachedLazyStringTypeOIs =
+      new ConcurrentHashMap<ArrayList<Object>, AbstractPrimitiveLazyObjectInspector<?>>();
 
-  private static Map<PrimitiveTypeInfo, AbstractPrimitiveLazyObjectInspector<?>>
+  private static ConcurrentHashMap<PrimitiveTypeInfo, AbstractPrimitiveLazyObjectInspector<?>>
      cachedPrimitiveLazyObjectInspectors =
-    new HashMap<PrimitiveTypeInfo, AbstractPrimitiveLazyObjectInspector<?>>();
+    new ConcurrentHashMap<PrimitiveTypeInfo, AbstractPrimitiveLazyObjectInspector<?>>();
   static {
     cachedPrimitiveLazyObjectInspectors.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BOOLEAN_TYPE_NAME),
         LAZY_BOOLEAN_OBJECT_INSPECTOR);
@@ -157,7 +157,11 @@ private LazyPrimitiveObjectInspectorFactory() {
           "Primitve type " + typeInfo.getPrimitiveCategory() + " should not take parameters");
     }
 
-    cachedPrimitiveLazyObjectInspectors.put(typeInfo, poi);
+    AbstractPrimitiveLazyObjectInspector<?> prev =
+      cachedPrimitiveLazyObjectInspectors.putIfAbsent(typeInfo, poi);
+    if (prev != null) {
+      poi = prev;
+    }
     return poi;
   }
 
@@ -170,7 +174,11 @@ public static LazyStringObjectInspector getLazyStringObjectInspector(boolean esc
         .get(signature);
     if (result == null) {
       result = new LazyStringObjectInspector(escaped, escapeChar);
-      cachedLazyStringTypeOIs.put(signature, result);
+      AbstractPrimitiveLazyObjectInspector<?> prev =
+        cachedLazyStringTypeOIs.putIfAbsent(signature, result);
+      if (prev != null) {
+        result = (LazyStringObjectInspector) prev;
+      }
     }
     return result;
   }
@@ -185,7 +193,11 @@ public static LazyHiveCharObjectInspector getLazyHiveCharObjectInspector(
         .get(signature);
     if (result == null) {
       result = new LazyHiveCharObjectInspector(typeInfo, escaped, escapeChar);
-      cachedLazyStringTypeOIs.put(signature, result);
+      AbstractPrimitiveLazyObjectInspector<?> prev =
+        cachedLazyStringTypeOIs.putIfAbsent(signature, result);
+      if (prev != null) {
+        result = (LazyHiveCharObjectInspector) prev;
+      }
     }
     return result;
   }
@@ -200,7 +212,11 @@ public static LazyHiveVarcharObjectInspector getLazyHiveVarcharObjectInspector(
         .get(signature);
     if (result == null) {
       result = new LazyHiveVarcharObjectInspector(typeInfo, escaped, escapeChar);
-      cachedLazyStringTypeOIs.put(signature, result);
+      AbstractPrimitiveLazyObjectInspector<?> prev =
+        cachedLazyStringTypeOIs.putIfAbsent(signature, result);
+      if (prev != null) {
+        result = (LazyHiveVarcharObjectInspector) prev;
+      }
     }
     return result;
   }
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryUtils.java b/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryUtils.java
index 11e8cf4..f814109 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryUtils.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/LazyBinaryUtils.java
@@ -18,14 +18,10 @@
 package org.apache.hadoop.hive.serde2.lazybinary;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.hive.serde2.ByteStream.Output;
 import org.apache.hadoop.hive.serde2.ByteStream.RandomAccessOutput;
-import org.apache.hadoop.hive.serde2.WriteBuffers;
 import org.apache.hadoop.hive.serde2.io.TimestampWritable;
 import org.apache.hadoop.hive.serde2.lazybinary.objectinspector.LazyBinaryObjectInspectorFactory;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
@@ -37,8 +33,8 @@
 import org.apache.hadoop.hive.serde2.typeinfo.MapTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.StructTypeInfo;
-import org.apache.hadoop.hive.serde2.typeinfo.UnionTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
+import org.apache.hadoop.hive.serde2.typeinfo.UnionTypeInfo;
 import org.apache.hadoop.io.WritableUtils;
 
 /**
@@ -47,8 +43,6 @@
  */
 public final class LazyBinaryUtils {
 
-  private static Log LOG = LogFactory.getLog(LazyBinaryUtils.class.getName());
-
   /**
    * Convert the byte array to an int starting from the given offset. Refer to
    * code by aeden on DZone Snippets:
@@ -423,7 +417,8 @@ public static void writeDouble(RandomAccessOutput byteStream, double d) {
     byteStream.write((byte) (v));
   }
 
-  static HashMap<TypeInfo, ObjectInspector> cachedLazyBinaryObjectInspector = new HashMap<TypeInfo, ObjectInspector>();
+  static ConcurrentHashMap<TypeInfo, ObjectInspector> cachedLazyBinaryObjectInspector =
+      new ConcurrentHashMap<TypeInfo, ObjectInspector>();
 
   /**
    * Returns the lazy binary object inspector that can be used to inspect an
@@ -494,7 +489,11 @@ public static ObjectInspector getLazyBinaryObjectInspectorFromTypeInfo(
         result = null;
       }
       }
-      cachedLazyBinaryObjectInspector.put(typeInfo, result);
+      ObjectInspector prev =
+        cachedLazyBinaryObjectInspector.putIfAbsent(typeInfo, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/objectinspector/LazyBinaryObjectInspectorFactory.java b/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/objectinspector/LazyBinaryObjectInspectorFactory.java
index 1b56c54..e361d9a 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/objectinspector/LazyBinaryObjectInspectorFactory.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/lazybinary/objectinspector/LazyBinaryObjectInspectorFactory.java
@@ -64,7 +64,11 @@ public static LazyBinaryStructObjectInspector getLazyBinaryStructObjectInspector
     if (result == null) {
       result = new LazyBinaryStructObjectInspector(structFieldNames,
           structFieldObjectInspectors, structFieldComments);
-      cachedLazyBinaryStructObjectInspector.put(signature, result);
+      LazyBinaryStructObjectInspector prev =
+        cachedLazyBinaryStructObjectInspector.putIfAbsent(signature, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
@@ -78,7 +82,11 @@ public static LazyBinaryUnionObjectInspector getLazyBinaryUnionObjectInspector(
             .get(signature);
     if (result == null) {
       result = new LazyBinaryUnionObjectInspector(unionFieldObjectInspectors);
-      cachedLazyBinaryUnionObjectInspector.put(signature, result);
+      LazyBinaryUnionObjectInspector prev =
+        cachedLazyBinaryUnionObjectInspector.putIfAbsent(signature, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
@@ -94,7 +102,11 @@ public static LazyBinaryListObjectInspector getLazyBinaryListObjectInspector(
         .get(signature);
     if (result == null) {
       result = new LazyBinaryListObjectInspector(listElementObjectInspector);
-      cachedLazyBinaryListObjectInspector.put(signature, result);
+      LazyBinaryListObjectInspector prev =
+        cachedLazyBinaryListObjectInspector.putIfAbsent(signature, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
@@ -113,7 +125,11 @@ public static LazyBinaryMapObjectInspector getLazyBinaryMapObjectInspector(
     if (result == null) {
       result = new LazyBinaryMapObjectInspector(mapKeyObjectInspector,
           mapValueObjectInspector);
-      cachedLazyBinaryMapObjectInspector.put(signature, result);
+      LazyBinaryMapObjectInspector prev =
+        cachedLazyBinaryMapObjectInspector.putIfAbsent(signature, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/MetadataListStructObjectInspector.java b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/MetadataListStructObjectInspector.java
index 76f5d09..e68325f 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/MetadataListStructObjectInspector.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/MetadataListStructObjectInspector.java
@@ -20,8 +20,8 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.hadoop.hive.serde2.ColumnSet;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
@@ -39,8 +39,8 @@
 public class MetadataListStructObjectInspector extends
     StandardStructObjectInspector {
 
-  static HashMap<List<List<String>>, MetadataListStructObjectInspector>
-      cached = new HashMap<List<List<String>>, MetadataListStructObjectInspector>();
+  static ConcurrentHashMap<List<List<String>>, MetadataListStructObjectInspector>
+      cached = new ConcurrentHashMap<List<List<String>>, MetadataListStructObjectInspector>();
 
   // public static MetadataListStructObjectInspector getInstance(int fields) {
   // return getInstance(ObjectInspectorUtils.getIntegerArray(fields));
@@ -52,7 +52,10 @@ public static MetadataListStructObjectInspector getInstance(
     MetadataListStructObjectInspector result = cached.get(columnNames);
     if (result == null) {
       result = new MetadataListStructObjectInspector(columnNames);
-      cached.put(key, result);
+      MetadataListStructObjectInspector prev = cached.putIfAbsent(key, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
@@ -65,7 +68,10 @@ public static MetadataListStructObjectInspector getInstance(
     MetadataListStructObjectInspector result = cached.get(key);
     if (result == null) {
       result = new MetadataListStructObjectInspector(columnNames, columnComments);
-      cached.put(key, result);
+      MetadataListStructObjectInspector prev = cached.putIfAbsent(key, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java
index f466297..08891fc 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/primitive/PrimitiveObjectInspectorFactory.java
@@ -19,8 +19,8 @@
 package org.apache.hadoop.hive.serde2.objectinspector.primitive;
 
 import java.util.EnumMap;
-import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.hadoop.hive.serde.serdeConstants;
 import org.apache.hadoop.hive.serde2.io.ByteWritable;
@@ -91,8 +91,8 @@
       new WritableHiveDecimalObjectInspector(TypeInfoFactory.decimalTypeInfo);
 
   // Map from PrimitiveTypeInfo to AbstractPrimitiveWritableObjectInspector.
-  private static HashMap<PrimitiveTypeInfo, AbstractPrimitiveWritableObjectInspector> cachedPrimitiveWritableInspectorCache =
-      new HashMap<PrimitiveTypeInfo, AbstractPrimitiveWritableObjectInspector>();
+  private static ConcurrentHashMap<PrimitiveTypeInfo, AbstractPrimitiveWritableObjectInspector> cachedPrimitiveWritableInspectorCache =
+      new ConcurrentHashMap<PrimitiveTypeInfo, AbstractPrimitiveWritableObjectInspector>();
   static {
     cachedPrimitiveWritableInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BOOLEAN_TYPE_NAME),
         writableBooleanObjectInspector);
@@ -175,8 +175,8 @@
       new JavaHiveDecimalObjectInspector(TypeInfoFactory.decimalTypeInfo);
 
   // Map from PrimitiveTypeInfo to AbstractPrimitiveJavaObjectInspector.
-  private static HashMap<PrimitiveTypeInfo, AbstractPrimitiveJavaObjectInspector> cachedPrimitiveJavaInspectorCache =
-      new HashMap<PrimitiveTypeInfo, AbstractPrimitiveJavaObjectInspector>();
+  private static ConcurrentHashMap<PrimitiveTypeInfo, AbstractPrimitiveJavaObjectInspector> cachedPrimitiveJavaInspectorCache =
+      new ConcurrentHashMap<PrimitiveTypeInfo, AbstractPrimitiveJavaObjectInspector>();
   static {
     cachedPrimitiveJavaInspectorCache.put(TypeInfoFactory.getPrimitiveTypeInfo(serdeConstants.BOOLEAN_TYPE_NAME),
         javaBooleanObjectInspector);
@@ -270,7 +270,11 @@ public static AbstractPrimitiveWritableObjectInspector getPrimitiveWritableObjec
       throw new RuntimeException("Failed to create object inspector for " + typeInfo );
     }
 
-    cachedPrimitiveWritableInspectorCache.put(typeInfo, result);
+    AbstractPrimitiveWritableObjectInspector prev =
+      cachedPrimitiveWritableInspectorCache.putIfAbsent(typeInfo, result);
+    if (prev != null) {
+      result = prev;
+    }
     return result;
   }
 
@@ -365,7 +369,11 @@ public static AbstractPrimitiveJavaObjectInspector getPrimitiveJavaObjectInspect
         throw new RuntimeException("Failed to create JavaHiveVarcharObjectInspector for " + typeInfo );
     }
 
-    cachedPrimitiveJavaInspectorCache.put(typeInfo, result);
+    AbstractPrimitiveJavaObjectInspector prev =
+      cachedPrimitiveJavaInspectorCache.putIfAbsent(typeInfo, result);
+    if (prev != null) {
+      result = prev;
+    }
     return result;
   }
 
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoFactory.java b/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoFactory.java
index e5c9f18..48bafae 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoFactory.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoFactory.java
@@ -22,13 +22,10 @@
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hive.common.type.HiveChar;
-import org.apache.hadoop.hive.common.type.HiveVarchar;
 import org.apache.hadoop.hive.common.type.HiveDecimal;
+import org.apache.hadoop.hive.common.type.HiveVarchar;
 import org.apache.hadoop.hive.serde.serdeConstants;
-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveTypeEntry;
 
@@ -40,7 +37,6 @@
  * objects that represents the same type.
  */
 public final class TypeInfoFactory {
-  private static Log LOG = LogFactory.getLog(TypeInfoFactory.class);
 
   private TypeInfoFactory() {
     // prevent instantiation
@@ -111,7 +107,10 @@ public static PrimitiveTypeInfo getPrimitiveTypeInfo(String typeName) {
       throw new RuntimeException("Error creating PrimitiveTypeInfo instance for " + typeName);
     }
 
-    cachedPrimitiveTypeInfo.put(typeName, result);
+    PrimitiveTypeInfo prev = cachedPrimitiveTypeInfo.putIfAbsent(typeName, result);
+    if (prev != null) {
+      result = prev;
+    }
     return result;
   }
 
@@ -199,7 +198,10 @@ public static TypeInfo getStructTypeInfo(List<String> names,
     TypeInfo result = cachedStructTypeInfo.get(signature);
     if (result == null) {
       result = new StructTypeInfo(names, typeInfos);
-      cachedStructTypeInfo.put(signature, result);
+      TypeInfo prev = cachedStructTypeInfo.putIfAbsent(signature, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
@@ -211,7 +213,10 @@ public static TypeInfo getUnionTypeInfo(List<TypeInfo> typeInfos) {
     TypeInfo result = cachedUnionTypeInfo.get(typeInfos);
     if (result == null) {
       result = new UnionTypeInfo(typeInfos);
-      cachedUnionTypeInfo.put(typeInfos, result);
+      TypeInfo prev = cachedUnionTypeInfo.putIfAbsent(typeInfos, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
@@ -222,7 +227,10 @@ public static TypeInfo getListTypeInfo(TypeInfo elementTypeInfo) {
     TypeInfo result = cachedListTypeInfo.get(elementTypeInfo);
     if (result == null) {
       result = new ListTypeInfo(elementTypeInfo);
-      cachedListTypeInfo.put(elementTypeInfo, result);
+      TypeInfo prev = cachedListTypeInfo.putIfAbsent(elementTypeInfo, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
@@ -238,7 +246,10 @@ public static TypeInfo getMapTypeInfo(TypeInfo keyTypeInfo,
     TypeInfo result = cachedMapTypeInfo.get(signature);
     if (result == null) {
       result = new MapTypeInfo(keyTypeInfo, valueTypeInfo);
-      cachedMapTypeInfo.put(signature, result);
+      TypeInfo prev = cachedMapTypeInfo.putIfAbsent(signature, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java b/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java
index 8dffe63..e3a4938 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java
@@ -530,7 +530,7 @@ public static PrimitiveParts parsePrimitiveParts(String typeInfoString) {
     return parser.parsePrimitiveParts();
   }
 
-  static Map<TypeInfo, ObjectInspector> cachedStandardObjectInspector =
+  static ConcurrentHashMap<TypeInfo, ObjectInspector> cachedStandardObjectInspector =
       new ConcurrentHashMap<TypeInfo, ObjectInspector>();
 
   /**
@@ -601,12 +601,16 @@ public static ObjectInspector getStandardWritableObjectInspectorFromTypeInfo(
         result = null;
       }
       }
-      cachedStandardObjectInspector.put(typeInfo, result);
+      ObjectInspector prev =
+        cachedStandardObjectInspector.putIfAbsent(typeInfo, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
 
-  static Map<TypeInfo, ObjectInspector> cachedStandardJavaObjectInspector =
+  static ConcurrentHashMap<TypeInfo, ObjectInspector> cachedStandardJavaObjectInspector =
       new ConcurrentHashMap<TypeInfo, ObjectInspector>();
 
   /**
@@ -678,7 +682,11 @@ public static ObjectInspector getStandardJavaObjectInspectorFromTypeInfo(
         result = null;
       }
       }
-      cachedStandardJavaObjectInspector.put(typeInfo, result);
+      ObjectInspector prev =
+        cachedStandardJavaObjectInspector.putIfAbsent(typeInfo, result);
+      if (prev != null) {
+        result = prev;
+      }
     }
     return result;
   }
-- 
1.7.9.5

