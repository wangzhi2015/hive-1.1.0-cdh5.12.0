From 10d915bf1ce0c9e8edb9ee7dc5ccb0c2c81cd27b Mon Sep 17 00:00:00 2001
From: Peter Vary <pvary@cloudera.com>
Date: Mon, 30 Jan 2017 14:10:25 +0100
Subject: [PATCH 0959/1164] CDH-48190: HIVE-14824. Separate fstype from
 cluster type in QTestUtil. (Siddharth Seth,
 reviewed by Prasanth Jayachandran)

(cherry picked from commit cf72a73708b00b2e585d101258d95eb9cbd3791f)

Change-Id: I2d2e933d8164e979a0e04c26dcf3a5db745511d6
---
 .../hadoop/hive/cli/control/AbstractCliConfig.java |   10 ++
 .../apache/hadoop/hive/cli/control/CliConfigs.java |   12 ++-
 .../hadoop/hive/cli/control/CoreCliDriver.java     |    3 +-
 .../java/org/apache/hadoop/hive/ql/QTestUtil.java  |  101 +++++++++++---------
 4 files changed, 76 insertions(+), 50 deletions(-)

diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/AbstractCliConfig.java b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/AbstractCliConfig.java
index efbd465..03d4075 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/AbstractCliConfig.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/AbstractCliConfig.java
@@ -35,6 +35,7 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.hive.ql.QTestUtil;
+import org.apache.hadoop.hive.ql.QTestUtil.FsType;
 import org.apache.hadoop.hive.ql.QTestUtil.MiniClusterType;
 import com.google.common.base.Splitter;
 import com.google.common.collect.Sets;
@@ -63,6 +64,7 @@
   private String initScript;
   private String hiveConfDir;
   private MiniClusterType clusterType;
+  private FsType fsType;
 
   // FIXME: null value is treated differently on the other end..when those filter will be
   // moved...this may change
@@ -380,6 +382,14 @@ protected void setClusterType(MiniClusterType type) {
     }
   }
 
+  protected FsType getFsType() {
+    return this.fsType;
+  }
+
+  protected void setFsType(FsType fsType) {
+    this.fsType = fsType;
+  }
+
   private String getSysPropValue(String propName) {
     String propValue = System.getProperty(propName);
     if (propValue == null || propValue.trim().length() == 0) {
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java
index aaa1871..cd35cba 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CliConfigs.java
@@ -21,6 +21,7 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 
+import org.apache.hadoop.hive.ql.QTestUtil;
 import org.apache.hadoop.hive.ql.QTestUtil.MiniClusterType;
 import org.apache.hadoop.hive.ql.parse.CoreParseNegative;
 
@@ -146,8 +147,15 @@ public EncryptedHDFSCliConfig() {
         setInitScript("q_test_init_for_encryption.sql");
         setCleanupScript("q_test_cleanup_for_encryption.sql");
 
-        setHiveConfDir("data/conf");
-        setClusterType(MiniClusterType.encrypted);
+
+        setClusterType(MiniClusterType.mr);
+        setFsType(QTestUtil.FsType.encrypted_hdfs);
+        if (getClusterType() == MiniClusterType.tez) {
+          setHiveConfDir("data/conf/tez");
+        } else {
+          setHiveConfDir("data/conf");
+        }
+
       } catch (Exception e) {
         throw new RuntimeException("can't construct cliconfig", e);
       }
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreCliDriver.java b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreCliDriver.java
index 4c997ca..6779088 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreCliDriver.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/CoreCliDriver.java
@@ -60,7 +60,8 @@ public void beforeClass() {
         @Override
         public QTestUtil invokeInternal() throws Exception {
           return new QTestUtil((cliConfig.getResultsDir()), (cliConfig.getLogDir()), miniMR,
-              hiveConfDir, hadoopVer, initScript, cleanupScript);
+              hiveConfDir, hadoopVer, initScript, cleanupScript, false,
+              cliConfig.getFsType());
         }
       }.invoke("QtestUtil instance created", LOG, true);
 
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java b/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java
index 3864701..1e4db78 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java
@@ -143,7 +143,6 @@
 
   private String testWarehouse;
   private final String testFiles;
-  private final boolean useLocalFs;
   private final boolean localMode;
   protected final String outDir;
   protected final String logDir;
@@ -157,6 +156,7 @@
   private static final String SORT_SUFFIX = ".sorted";
   private final HashSet<String> srcTables;
   private final MiniClusterType clusterType;
+  private final FsType fsType;
   private ParseDriver pd;
   protected Hive db;
   protected HiveConf conf;
@@ -268,12 +268,6 @@ public void normalizeNames(File path) throws Exception {
     }
   }
 
-  public QTestUtil(String outDir, String logDir, String initScript, String cleanupScript) throws
-      Exception {
-    this(outDir, logDir, MiniClusterType.none, null, "0.20", initScript, cleanupScript, false,
-        false);
-  }
-
   public String getOutputDirectory() {
     return outDir;
   }
@@ -389,13 +383,31 @@ private void createRemoteDirs() {
     }
   }
 
+
+  public enum FsType {
+    local,
+    hdfs,
+    encrypted_hdfs,
+  }
+
   public enum MiniClusterType {
-    mr,
-    tez,
-    spark,
-    encrypted,
-    miniSparkOnYarn,
-    none;
+
+    mr(FsType.hdfs),
+    tez(FsType.hdfs),
+    spark(FsType.local),
+    miniSparkOnYarn(FsType.hdfs),
+    none(FsType.local);
+
+
+    private final FsType defaultFsType;
+
+    MiniClusterType(FsType defaultFsType) {
+      this.defaultFsType = defaultFsType;
+    }
+
+    public FsType getDefaultFsType() {
+      return defaultFsType;
+    }
 
     public static MiniClusterType valueForString(String type) {
       if (type.equals("miniMR")) {
@@ -404,8 +416,6 @@ public static MiniClusterType valueForString(String type) {
         return tez;
       } else if (type.equals("spark")) {
         return spark;
-      } else if (type.equals("encrypted")) {
-        return encrypted;
       } else if (type.equals("miniSparkOnYarn")) {
         return miniSparkOnYarn;
       } else {
@@ -414,12 +424,6 @@ public static MiniClusterType valueForString(String type) {
     }
   }
 
-  public QTestUtil(String outDir, String logDir, MiniClusterType clusterType, String confDir,
-      String hadoopVer, String initScript, String cleanupScript)
-    throws Exception {
-    this(outDir, logDir, clusterType, confDir, hadoopVer, initScript, cleanupScript, false, false);
-  }
-
   private String getKeyProviderURI() {
     // Use the target directory if it is not specified
     String HIVE_ROOT = AbstractCliConfig.HIVE_ROOT;
@@ -430,14 +434,26 @@ private String getKeyProviderURI() {
   }
 
   public QTestUtil(String outDir, String logDir, MiniClusterType clusterType,
-      String confDir, String hadoopVer, String initScript, String cleanupScript, boolean localMode,
-      boolean useLocalFs)
+                   String confDir, String hadoopVer, String initScript, String cleanupScript)
+      throws Exception {
+    this(outDir, logDir, clusterType, confDir, hadoopVer, initScript, cleanupScript, false, null);
+  }
+
+  public QTestUtil(String outDir, String logDir, MiniClusterType clusterType,
+      String confDir, String hadoopVer, String initScript, String cleanupScript,
+      boolean localMode, FsType fsType)
     throws Exception {
     LOG.info("Setting up QtestUtil with outDir=" + outDir + ", logDir=" + logDir
-                 + ", clusterType=" + clusterType + ", confDir=" + confDir + ", hadoopVer=" + hadoopVer
-                 +", initScript=" + initScript + ", cleanupScript=" + cleanupScript
-                 + ", useHbaseMetaStore=false, withLlapIo=false");
-    this.useLocalFs = useLocalFs;
+        + ", clusterType=" + clusterType + ", confDir=" + confDir + ", hadoopVer=" + hadoopVer
+        + ", initScript=" + initScript + ", cleanupScript=" + cleanupScript
+        + ", useHbaseMetaStore=false, withLlapIo=false"
+        + ", localMode=" + localMode + ", fsType=" + fsType);
+    Preconditions.checkNotNull(clusterType, "ClusterType cannot be null");
+    if (fsType != null) {
+      this.fsType = fsType;
+    } else {
+      this.fsType = clusterType.getDefaultFsType();
+    }
     this.localMode = localMode;
     this.outDir = outDir;
     this.logDir = logDir;
@@ -495,16 +511,12 @@ public QTestUtil(String outDir, String logDir, MiniClusterType clusterType,
 
   private void setupFileSystem(HadoopShims shims) throws IOException {
 
-    if (useLocalFs) {
-      Preconditions
-          .checkState(clusterType == MiniClusterType.tez,
-              "useLocalFs can currently only be set for tez or llap");
-    }
-
-    if (clusterType != MiniClusterType.none && clusterType != MiniClusterType.spark) {
+    if (fsType == FsType.local) {
+      fs = FileSystem.getLocal(conf);
+    } else if (fsType == FsType.hdfs || fsType == FsType.encrypted_hdfs) {
       int numDataNodes = 4;
 
-      if (clusterType == MiniClusterType.encrypted) {
+      if (fsType == FsType.encrypted_hdfs) {
         // Set the security key provider so that the MiniDFS cluster is initialized
         // with encryption
         conf.set(SECURITY_KEY_PROVIDER_URI_NAME, getKeyProviderURI());
@@ -518,16 +530,11 @@ private void setupFileSystem(HadoopShims shims) throws IOException {
 
         LOG.info("key provider is initialized");
       } else {
-        if (!useLocalFs) {
-          dfs = shims.getMiniDfs(conf, numDataNodes, true, null);
-          fs = dfs.getFileSystem();
-        } else {
-          fs = FileSystem.getLocal(conf);
-        }
+        dfs = shims.getMiniDfs(conf, numDataNodes, true, null);
+        fs = dfs.getFileSystem();
       }
     } else {
-      // Setup local file system
-      fs = FileSystem.getLocal(conf);
+      throw new IllegalArgumentException("Unknown or unhandled fsType [" + fsType + "]");
     }
   }
 
@@ -556,7 +563,7 @@ private void setupMiniCluster(HadoopShims shims, String confDir) throws
       }
     } else if (clusterType == MiniClusterType.miniSparkOnYarn) {
       mr = shims.getMiniSparkCluster(conf, 4, uriString, 1);
-    } else if (clusterType == MiniClusterType.mr || clusterType == MiniClusterType.encrypted) {
+    } else if (clusterType == MiniClusterType.mr) {
       mr = shims.getMiniMrCluster(conf, 4, uriString, 1);
     }
   }
@@ -826,7 +833,7 @@ public void clearTablesCreatedDuringTests() throws Exception {
           if(tblObj.isIndexTable()) {
             continue;
           }
-          db.dropTable(dbName, tblName, true, true, clusterType == MiniClusterType.encrypted);
+          db.dropTable(dbName, tblName, true, true, fsType == FsType.encrypted_hdfs);
         } else {
           // this table is defined in srcTables, drop all indexes on it
          List<Index> indexes = db.getIndexes(dbName, tblName, (short)-1);
@@ -1612,7 +1619,7 @@ private void maskPatterns(Pattern[] patterns, String fname) throws Exception {
     boolean partialMaskWasMatched = false;
     Matcher matcher;
     while (null != (line = in.readLine())) {
-      if (clusterType == MiniClusterType.encrypted) {
+      if (fsType == FsType.encrypted_hdfs) {
         for (Pattern pattern : partialReservedPlanMask) {
           matcher = pattern.matcher(line);
           if (matcher.find()) {
@@ -2021,7 +2028,7 @@ public void run() {
     QTestUtil[] qt = new QTestUtil[qfiles.length];
     for (int i = 0; i < qfiles.length; i++) {
       qt[i] = new QTestUtil(resDir, logDir, MiniClusterType.none, null, "0.20",
-           defaultInitScript, defaultCleanupScript, false, false);
+           defaultInitScript, defaultCleanupScript);
       qt[i].addFile(qfiles[i]);
       qt[i].clearTestSideEffects();
     }
-- 
1.7.9.5

