From fd6921c10d965b47d112aaadee6fc8f26b89fc9e Mon Sep 17 00:00:00 2001
From: Brock Noland <brock@apache.org>
Date: Tue, 3 Feb 2015 22:58:59 +0000
Subject: [PATCH 0018/1164] HIVE-8379 - NanoTimeUtils performs some work
 needlessly (Sergio Pena via Brock)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1656945 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 5dbbc258e2bbd1565e721c5ed46fc4a1f08681d4)
---
 .../ql/io/parquet/timestamp/NanoTimeUtils.java     |   19 ++++++++++---------
 1 file changed, 10 insertions(+), 9 deletions(-)

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/timestamp/NanoTimeUtils.java b/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/timestamp/NanoTimeUtils.java
index 9a77dc1..59c9b4a 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/timestamp/NanoTimeUtils.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/timestamp/NanoTimeUtils.java
@@ -16,6 +16,7 @@
 import java.sql.Timestamp;
 import java.util.Calendar;
 import java.util.TimeZone;
+import java.util.concurrent.TimeUnit;
 
 import jodd.datetime.JDateTime;
 
@@ -24,9 +25,9 @@
  * This utilizes the Jodd library.
  */
 public class NanoTimeUtils {
-   static final long NANOS_PER_SECOND = 1000000000;
-   static final long SECONDS_PER_MINUTE = 60;
-   static final long MINUTES_PER_HOUR = 60;
+   static final long NANOS_PER_HOUR = TimeUnit.HOURS.toNanos(1);
+   static final long NANOS_PER_MINUTE = TimeUnit.MINUTES.toNanos(1);
+   static final long NANOS_PER_SECOND = TimeUnit.SECONDS.toNanos(1);
 
    private static final ThreadLocal<Calendar> parquetGMTCalendar = new ThreadLocal<Calendar>();
    private static final ThreadLocal<Calendar> parquetLocalCalendar = new ThreadLocal<Calendar>();
@@ -63,8 +64,8 @@ public static NanoTime getNanoTime(Timestamp ts, boolean skipConversion) {
      long minute = calendar.get(Calendar.MINUTE);
      long second = calendar.get(Calendar.SECOND);
      long nanos = ts.getNanos();
-     long nanosOfDay = nanos + NANOS_PER_SECOND * second + NANOS_PER_SECOND * SECONDS_PER_MINUTE * minute +
-         NANOS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR * hour;
+     long nanosOfDay = nanos + NANOS_PER_SECOND * second + NANOS_PER_MINUTE * minute +
+         NANOS_PER_HOUR * hour;
 
      return new NanoTime(days, nanosOfDay);
    }
@@ -80,10 +81,10 @@ public static Timestamp getTimestamp(NanoTime nt, boolean skipConversion) {
      calendar.set(Calendar.DAY_OF_MONTH, jDateTime.getDay());
 
      long remainder = nanosOfDay;
-     int hour = (int) (remainder / (NANOS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR));
-     remainder = remainder % (NANOS_PER_SECOND * SECONDS_PER_MINUTE * MINUTES_PER_HOUR);
-     int minutes = (int) (remainder / (NANOS_PER_SECOND * SECONDS_PER_MINUTE));
-     remainder = remainder % (NANOS_PER_SECOND * SECONDS_PER_MINUTE);
+     int hour = (int) (remainder / (NANOS_PER_HOUR));
+     remainder = remainder % (NANOS_PER_HOUR);
+     int minutes = (int) (remainder / (NANOS_PER_MINUTE));
+     remainder = remainder % (NANOS_PER_MINUTE);
      int seconds = (int) (remainder / (NANOS_PER_SECOND));
      long nanos = remainder % NANOS_PER_SECOND;
 
-- 
1.7.9.5

