PREHOOK: query: create table table1 (id int, val string, val1 string, dimid int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@table1
POSTHOOK: query: create table table1 (id int, val string, val1 string, dimid int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@table1
PREHOOK: query: insert into table1 values (1, 't1val01', 'val101', 100), (2, 't1val02', 'val102', 200), (3, 't1val03', 'val103', 103), (3, 't1val01', 'val104', 100), (2, 't1val05', 'val105', 200), (3, 't1val01', 'val106', 103), (1, 't1val07', 'val107', 200), (2, 't1val01', 'val108', 200), (3, 't1val09', 'val109', 103), (4,'t1val01', 'val110', 200)
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__1
PREHOOK: Output: default@table1
POSTHOOK: query: insert into table1 values (1, 't1val01', 'val101', 100), (2, 't1val02', 'val102', 200), (3, 't1val03', 'val103', 103), (3, 't1val01', 'val104', 100), (2, 't1val05', 'val105', 200), (3, 't1val01', 'val106', 103), (1, 't1val07', 'val107', 200), (2, 't1val01', 'val108', 200), (3, 't1val09', 'val109', 103), (4,'t1val01', 'val110', 200)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__1
POSTHOOK: Output: default@table1
POSTHOOK: Lineage: table1.dimid EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col4, type:string, comment:), ]
POSTHOOK: Lineage: table1.id EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: table1.val SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
POSTHOOK: Lineage: table1.val1 SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col3, type:string, comment:), ]
PREHOOK: query: create table table2 (id int, val2 string)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@table2
POSTHOOK: query: create table table2 (id int, val2 string)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@table2
PREHOOK: query: insert into table2 values (1, 't2val201'), (2, 't2val202'), (3, 't2val203')
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__2
PREHOOK: Output: default@table2
POSTHOOK: query: insert into table2 values (1, 't2val201'), (2, 't2val202'), (3, 't2val203')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__2
POSTHOOK: Output: default@table2
POSTHOOK: Lineage: table2.id EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: table2.val2 SIMPLE [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: create table table3 (id int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@table3
POSTHOOK: query: create table table3 (id int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@table3
PREHOOK: query: insert into table3 values (100), (100), (101), (102), (103)
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__3
PREHOOK: Output: default@table3
POSTHOOK: query: insert into table3 values (100), (100), (101), (102), (103)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__3
POSTHOOK: Output: default@table3
POSTHOOK: Lineage: table3.id EXPRESSION [(values__tmp__table__3)values__tmp__table__3.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
PREHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id where table1.val = 't1val01'
PREHOOK: type: QUERY
POSTHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id where table1.val = 't1val01'
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: table1
                  Statistics: Num rows: 10 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: ((val = 't1val01') and dimid is not null) (type: boolean)
                    Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), val1 (type: string), dimid (type: int)
                      outputColumnNames: _col0, _col2, _col3
                      Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col3 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col3 (type: int)
                        Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col2 (type: string)
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: table3
                  Statistics: Num rows: 5 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int)
                      outputColumnNames: _col0
                      Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: _col0 (type: int)
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          sort order: +
                          Map-reduce partition columns: _col0 (type: int)
                          Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
        Reducer 2 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col3 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col2
                Statistics: Num rows: 3 Data size: 66 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: int), 't1val01' (type: string), _col2 (type: string)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 3 Data size: 66 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 66 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id where table1.val = 't1val01' order by table1.id, table1.val, table1.val1
PREHOOK: type: QUERY
PREHOOK: Input: default@table1
PREHOOK: Input: default@table3
#### A masked pattern was here ####
POSTHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id where table1.val = 't1val01' order by table1.id, table1.val, table1.val1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@table1
POSTHOOK: Input: default@table3
#### A masked pattern was here ####
1	t1val01	val101
3	t1val01	val104
3	t1val01	val106
PREHOOK: query: explain select table1.id, table1.val, table2.val2 from table1 inner join table2 on table1.val = 't1val01' and table1.id = table2.id left semi join table3 on table1.dimid = table3.id
PREHOOK: type: QUERY
POSTHOOK: query: explain select table1.id, table1.val, table2.val2 from table1 inner join table2 on table1.val = 't1val01' and table1.id = table2.id left semi join table3 on table1.dimid = table3.id
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Map 5 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: table1
                  Statistics: Num rows: 10 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (((val = 't1val01') and id is not null) and dimid is not null) (type: boolean)
                    Statistics: Num rows: 2 Data size: 40 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: id (type: int)
                      sort order: +
                      Map-reduce partition columns: id (type: int)
                      Statistics: Num rows: 2 Data size: 40 Basic stats: COMPLETE Column stats: NONE
                      value expressions: dimid (type: int)
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: table2
                  Statistics: Num rows: 3 Data size: 30 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 2 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: id (type: int)
                      sort order: +
                      Map-reduce partition columns: id (type: int)
                      Statistics: Num rows: 2 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                      value expressions: val2 (type: string)
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: table3
                  Statistics: Num rows: 5 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int)
                      outputColumnNames: id
                      Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: id (type: int)
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          sort order: +
                          Map-reduce partition columns: _col0 (type: int)
                          Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
        Reducer 2 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 id (type: int)
                  1 id (type: int)
                outputColumnNames: _col0, _col3, _col8
                Statistics: Num rows: 2 Data size: 44 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col3 (type: int)
                  sort order: +
                  Map-reduce partition columns: _col3 (type: int)
                  Statistics: Num rows: 2 Data size: 44 Basic stats: COMPLETE Column stats: NONE
                  value expressions: _col0 (type: int), _col8 (type: string)
        Reducer 3 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col3 (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0, _col8
                Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: int), 't1val01' (type: string), _col8 (type: string)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select table1.id, table1.val, table2.val2 from table1 inner join table2 on table1.val = 't1val01' and table1.id = table2.id left semi join table3 on table1.dimid = table3.id order by table1.id, table1.val, table2.val2
PREHOOK: type: QUERY
PREHOOK: Input: default@table1
PREHOOK: Input: default@table2
PREHOOK: Input: default@table3
#### A masked pattern was here ####
POSTHOOK: query: select table1.id, table1.val, table2.val2 from table1 inner join table2 on table1.val = 't1val01' and table1.id = table2.id left semi join table3 on table1.dimid = table3.id order by table1.id, table1.val, table2.val2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@table1
POSTHOOK: Input: default@table2
POSTHOOK: Input: default@table3
#### A masked pattern was here ####
1	t1val01	t2val201
3	t1val01	t2val203
3	t1val01	t2val203
PREHOOK: query: explain select table1.id, table1.val, table2.val2 from table1 left semi join table3 on table1.dimid = table3.id inner join table2 on table1.val = 't1val01' and table1.id = table2.id
PREHOOK: type: QUERY
POSTHOOK: query: explain select table1.id, table1.val, table2.val2 from table1 left semi join table3 on table1.dimid = table3.id inner join table2 on table1.val = 't1val01' and table1.id = table2.id
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
        Reducer 3 <- Map 5 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: table1
                  Statistics: Num rows: 10 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: ((dimid is not null and (val = 't1val01')) and id is not null) (type: boolean)
                    Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: dimid (type: int)
                      sort order: +
                      Map-reduce partition columns: dimid (type: int)
                      Statistics: Num rows: 1 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                      value expressions: id (type: int)
        Map 4 
            Map Operator Tree:
                TableScan
                  alias: table3
                  Statistics: Num rows: 5 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int)
                      outputColumnNames: id
                      Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: id (type: int)
                        mode: hash
                        outputColumnNames: _col0
                        Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: int)
                          sort order: +
                          Map-reduce partition columns: _col0 (type: int)
                          Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
        Map 5 
            Map Operator Tree:
                TableScan
                  alias: table2
                  Statistics: Num rows: 3 Data size: 30 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 2 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                    Reduce Output Operator
                      key expressions: id (type: int)
                      sort order: +
                      Map-reduce partition columns: id (type: int)
                      Statistics: Num rows: 2 Data size: 20 Basic stats: COMPLETE Column stats: NONE
                      value expressions: val2 (type: string)
        Reducer 2 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 dimid (type: int)
                  1 _col0 (type: int)
                outputColumnNames: _col0
                Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                Reduce Output Operator
                  key expressions: _col0 (type: int)
                  sort order: +
                  Map-reduce partition columns: _col0 (type: int)
                  Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
        Reducer 3 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col0 (type: int)
                  1 id (type: int)
                outputColumnNames: _col0, _col8
                Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: int), 't1val01' (type: string), _col8 (type: string)
                  outputColumnNames: _col0, _col1, _col2
                  Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.TextInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select table1.id, table1.val, table2.val2 from table1 left semi join table3 on table1.dimid = table3.id inner join table2 on table1.val = 't1val01' and table1.id = table2.id order by table1.id, table1.val, table2.val2
PREHOOK: type: QUERY
PREHOOK: Input: default@table1
PREHOOK: Input: default@table2
PREHOOK: Input: default@table3
#### A masked pattern was here ####
POSTHOOK: query: select table1.id, table1.val, table2.val2 from table1 left semi join table3 on table1.dimid = table3.id inner join table2 on table1.val = 't1val01' and table1.id = table2.id order by table1.id, table1.val, table2.val2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@table1
POSTHOOK: Input: default@table2
POSTHOOK: Input: default@table3
#### A masked pattern was here ####
1	t1val01	t2val201
3	t1val01	t2val203
3	t1val01	t2val203
PREHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid <> 100
PREHOOK: type: QUERY
POSTHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid <> 100
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: table1
                  Statistics: Num rows: 10 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: ((dimid <> 100) and dimid is not null) (type: boolean)
                    Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), val (type: string), val1 (type: string), dimid (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col3 (type: int), 100 (type: int)
                        sort order: ++
                        Map-reduce partition columns: _col3 (type: int), 100 (type: int)
                        Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col1 (type: string), _col2 (type: string)
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: table3
                  Statistics: Num rows: 5 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), id (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: _col0 (type: int), _col1 (type: int)
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: int), _col1 (type: int)
                          sort order: ++
                          Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                          Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
        Reducer 2 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col3 (type: int), 100 (type: int)
                  1 _col0 (type: int), _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 5 Data size: 110 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 5 Data size: 110 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid <> 100 order by table1.id, table1.val, table1.val1
PREHOOK: type: QUERY
PREHOOK: Input: default@table1
PREHOOK: Input: default@table3
#### A masked pattern was here ####
POSTHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid <> 100 order by table1.id, table1.val, table1.val1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@table1
POSTHOOK: Input: default@table3
#### A masked pattern was here ####
PREHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  IN (100,200)
PREHOOK: type: QUERY
POSTHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  IN (100,200)
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: table1
                  Statistics: Num rows: 10 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: ((dimid) IN (100, 200) and dimid is not null) (type: boolean)
                    Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), val (type: string), val1 (type: string), dimid (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col3 (type: int), 100 (type: int)
                        sort order: ++
                        Map-reduce partition columns: _col3 (type: int), 100 (type: int)
                        Statistics: Num rows: 3 Data size: 60 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col1 (type: string), _col2 (type: string)
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: table3
                  Statistics: Num rows: 5 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), id (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: _col0 (type: int), _col1 (type: int)
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: int), _col1 (type: int)
                          sort order: ++
                          Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                          Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
        Reducer 2 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col3 (type: int), 100 (type: int)
                  1 _col0 (type: int), _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 3 Data size: 66 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 3 Data size: 66 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  IN (100,200) order by table1.id, table1.val, table1.val1
PREHOOK: type: QUERY
PREHOOK: Input: default@table1
PREHOOK: Input: default@table3
#### A masked pattern was here ####
POSTHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  IN (100,200) order by table1.id, table1.val, table1.val1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@table1
POSTHOOK: Input: default@table3
#### A masked pattern was here ####
1	t1val01	val101
3	t1val01	val104
PREHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  = 200
PREHOOK: type: QUERY
POSTHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  = 200
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: table1
                  Statistics: Num rows: 10 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (dimid = 200) (type: boolean)
                    Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), val (type: string), val1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: 200 (type: int), 100 (type: int)
                        sort order: ++
                        Map-reduce partition columns: 200 (type: int), 100 (type: int)
                        Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col1 (type: string), _col2 (type: string)
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: table3
                  Statistics: Num rows: 5 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), id (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: _col0 (type: int), _col1 (type: int)
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: int), _col1 (type: int)
                          sort order: ++
                          Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                          Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
        Reducer 2 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 200 (type: int), 100 (type: int)
                  1 _col0 (type: int), _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 5 Data size: 110 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 5 Data size: 110 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  = 200 order by table1.id, table1.val, table1.val1
PREHOOK: type: QUERY
PREHOOK: Input: default@table1
PREHOOK: Input: default@table3
#### A masked pattern was here ####
POSTHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  = 200 order by table1.id, table1.val, table1.val1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@table1
POSTHOOK: Input: default@table3
#### A masked pattern was here ####
PREHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  = 100
PREHOOK: type: QUERY
POSTHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  = 100
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: table1
                  Statistics: Num rows: 10 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: (dimid = 100) (type: boolean)
                    Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), val (type: string), val1 (type: string)
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: 100 (type: int), 100 (type: int)
                        sort order: ++
                        Map-reduce partition columns: 100 (type: int), 100 (type: int)
                        Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col1 (type: string), _col2 (type: string)
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: table3
                  Statistics: Num rows: 5 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), id (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: _col0 (type: int), _col1 (type: int)
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: int), _col1 (type: int)
                          sort order: ++
                          Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                          Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
        Reducer 2 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 100 (type: int), 100 (type: int)
                  1 _col0 (type: int), _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 5 Data size: 110 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 5 Data size: 110 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  = 100 order by table1.id, table1.val, table1.val1
PREHOOK: type: QUERY
PREHOOK: Input: default@table1
PREHOOK: Input: default@table3
#### A masked pattern was here ####
POSTHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 where table1.dimid  = 100 order by table1.id, table1.val, table1.val1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@table1
POSTHOOK: Input: default@table3
#### A masked pattern was here ####
1	t1val01	val101
3	t1val01	val104
PREHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100
PREHOOK: type: QUERY
POSTHOOK: query: explain select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: table1
                  Statistics: Num rows: 10 Data size: 200 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: dimid is not null (type: boolean)
                    Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), val (type: string), val1 (type: string), dimid (type: int)
                      outputColumnNames: _col0, _col1, _col2, _col3
                      Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col3 (type: int), 100 (type: int)
                        sort order: ++
                        Map-reduce partition columns: _col3 (type: int), 100 (type: int)
                        Statistics: Num rows: 5 Data size: 100 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: int), _col1 (type: string), _col2 (type: string)
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: table3
                  Statistics: Num rows: 5 Data size: 15 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int), id (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                      Group By Operator
                        keys: _col0 (type: int), _col1 (type: int)
                        mode: hash
                        outputColumnNames: _col0, _col1
                        Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
                        Reduce Output Operator
                          key expressions: _col0 (type: int), _col1 (type: int)
                          sort order: ++
                          Map-reduce partition columns: _col0 (type: int), _col1 (type: int)
                          Statistics: Num rows: 3 Data size: 9 Basic stats: COMPLETE Column stats: NONE
        Reducer 2 
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Left Semi Join 0 to 1
                keys:
                  0 _col3 (type: int), 100 (type: int)
                  1 _col0 (type: int), _col1 (type: int)
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 5 Data size: 110 Basic stats: COMPLETE Column stats: NONE
                File Output Operator
                  compressed: false
                  Statistics: Num rows: 5 Data size: 110 Basic stats: COMPLETE Column stats: NONE
                  table:
                      input format: org.apache.hadoop.mapred.TextInputFormat
                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 order by table1.id, table1.val, table1.val1
PREHOOK: type: QUERY
PREHOOK: Input: default@table1
PREHOOK: Input: default@table3
#### A masked pattern was here ####
POSTHOOK: query: select table1.id, table1.val, table1.val1 from table1 left semi join table3 on table1.dimid = table3.id and table3.id = 100 order by table1.id, table1.val, table1.val1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@table1
POSTHOOK: Input: default@table3
#### A masked pattern was here ####
1	t1val01	val101
3	t1val01	val104
